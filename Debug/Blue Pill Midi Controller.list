
Blue Pill Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009100  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800920c  0800920c  0000a20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009290  08009290  0000b158  2**0
                  CONTENTS
  4 .ARM          00000000  08009290  08009290  0000b158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009290  08009290  0000b158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009290  08009290  0000a290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009294  08009294  0000a294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08009298  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000158  080093f0  0000b158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  080093f0  0000bbc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128fa  00000000  00000000  0000b181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e0  00000000  00000000  0001da7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00020e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfb  00000000  00000000  00021f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af51  00000000  00000000  00022c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155a2  00000000  00000000  0003dbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009257b  00000000  00000000  0005316e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e56e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000493c  00000000  00000000  000e572c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ea068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	080091f4 	.word	0x080091f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	080091f4 	.word	0x080091f4

0800014c <ADC_Convert_Rank1>:
uint16_t ADC_Convert_Rank2 (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_Convert_Rank1 (void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	463b      	mov	r3, r7
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 800015c:	2308      	movs	r3, #8
 800015e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000160:	2301      	movs	r3, #1
 8000162:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000164:	2300      	movs	r3, #0
 8000166:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000168:	463b      	mov	r3, r7
 800016a:	4619      	mov	r1, r3
 800016c:	480d      	ldr	r0, [pc, #52]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800016e:	f001 faab 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <ADC_Convert_Rank1+0x30>
	{
		Error_Handler();
 8000178:	f000 face 	bl	8000718 <Error_Handler>
	}

	HAL_ADC_Start (&hadc1);
 800017c:	4809      	ldr	r0, [pc, #36]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800017e:	f001 f8b7 	bl	80012f0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc1, 100);
 8000182:	2164      	movs	r1, #100	@ 0x64
 8000184:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 8000186:	f001 f98d 	bl	80014a4 <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue (&hadc1);
 800018a:	4806      	ldr	r0, [pc, #24]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800018c:	f001 fa90 	bl	80016b0 <HAL_ADC_GetValue>
 8000190:	4603      	mov	r3, r0
 8000192:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop (&hadc1);
 8000194:	4803      	ldr	r0, [pc, #12]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 8000196:	f001 f959 	bl	800144c <HAL_ADC_Stop>

	return val;
 800019a:	89fb      	ldrh	r3, [r7, #14]
}
 800019c:	4618      	mov	r0, r3
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20000174 	.word	0x20000174

080001a8 <ADC_Convert_Rank2>:

uint16_t ADC_Convert_Rank2 (void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80001ae:	463b      	mov	r3, r7
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9; // ADC_CHANNEL_0
 80001b8:	2309      	movs	r3, #9
 80001ba:	603b      	str	r3, [r7, #0]
 	sConfig.Rank = ADC_REGULAR_RANK_1;
 80001bc:	2301      	movs	r3, #1
 80001be:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2 /*&hadc1*/, &sConfig) != HAL_OK)
 80001c4:	463b      	mov	r3, r7
 80001c6:	4619      	mov	r1, r3
 80001c8:	480d      	ldr	r0, [pc, #52]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001ca:	f001 fa7d 	bl	80016c8 <HAL_ADC_ConfigChannel>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <ADC_Convert_Rank2+0x30>
	{
		Error_Handler();
 80001d4:	f000 faa0 	bl	8000718 <Error_Handler>
	}

	HAL_ADC_Start (&hadc2 /*&hadc1*/);
 80001d8:	4809      	ldr	r0, [pc, #36]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001da:	f001 f889 	bl	80012f0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc2 /*&hadc1*/, 100);
 80001de:	2164      	movs	r1, #100	@ 0x64
 80001e0:	4807      	ldr	r0, [pc, #28]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001e2:	f001 f95f 	bl	80014a4 <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue (&hadc2 /*&hadc1*/);
 80001e6:	4806      	ldr	r0, [pc, #24]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001e8:	f001 fa62 	bl	80016b0 <HAL_ADC_GetValue>
 80001ec:	4603      	mov	r3, r0
 80001ee:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop (&hadc2 /*&hadc1*/);
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001f2:	f001 f92b 	bl	800144c <HAL_ADC_Stop>

	return val;
 80001f6:	89fb      	ldrh	r3, [r7, #14]
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3710      	adds	r7, #16
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	200001a4 	.word	0x200001a4

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 ff37 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f8ab 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 fa2f 	bl	8000674 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000216:	f008 fae3 	bl	80087e0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800021a:	f000 f903 	bl	8000424 <MX_ADC1_Init>
  MX_TIM2_Init();
 800021e:	f000 f98d 	bl	800053c <MX_TIM2_Init>
  MX_ADC2_Init();
 8000222:	f000 f94d 	bl	80004c0 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000226:	f000 f9d7 	bl	80005d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Queue_Init (DEFAULT_QUEUE_SIZE);
 800022a:	201e      	movs	r0, #30
 800022c:	f000 fa7a 	bl	8000724 <Queue_Init>

	for (uint8_t i = 0; i < 16; i++)	D_sum += ADC_Convert_Rank1 ();
 8000230:	2300      	movs	r3, #0
 8000232:	71fb      	strb	r3, [r7, #7]
 8000234:	e00c      	b.n	8000250 <main+0x4c>
 8000236:	f7ff ff89 	bl	800014c <ADC_Convert_Rank1>
 800023a:	4603      	mov	r3, r0
 800023c:	461a      	mov	r2, r3
 800023e:	4b3e      	ldr	r3, [pc, #248]	@ (8000338 <main+0x134>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	4413      	add	r3, r2
 8000244:	b29a      	uxth	r2, r3
 8000246:	4b3c      	ldr	r3, [pc, #240]	@ (8000338 <main+0x134>)
 8000248:	801a      	strh	r2, [r3, #0]
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	3301      	adds	r3, #1
 800024e:	71fb      	strb	r3, [r7, #7]
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	2b0f      	cmp	r3, #15
 8000254:	d9ef      	bls.n	8000236 <main+0x32>

	D_current = ((D_sum >> 4) * 127) / 4095;
 8000256:	4b38      	ldr	r3, [pc, #224]	@ (8000338 <main+0x134>)
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	091b      	lsrs	r3, r3, #4
 800025c:	b29b      	uxth	r3, r3
 800025e:	461a      	mov	r2, r3
 8000260:	4613      	mov	r3, r2
 8000262:	01db      	lsls	r3, r3, #7
 8000264:	1a9b      	subs	r3, r3, r2
 8000266:	4a35      	ldr	r2, [pc, #212]	@ (800033c <main+0x138>)
 8000268:	fb82 1203 	smull	r1, r2, r2, r3
 800026c:	441a      	add	r2, r3
 800026e:	12d2      	asrs	r2, r2, #11
 8000270:	17db      	asrs	r3, r3, #31
 8000272:	1ad3      	subs	r3, r2, r3
 8000274:	b29a      	uxth	r2, r3
 8000276:	4b32      	ldr	r3, [pc, #200]	@ (8000340 <main+0x13c>)
 8000278:	801a      	strh	r2, [r3, #0]
	D_sum = 0;
 800027a:	4b2f      	ldr	r3, [pc, #188]	@ (8000338 <main+0x134>)
 800027c:	2200      	movs	r2, #0
 800027e:	801a      	strh	r2, [r3, #0]

	D_previous = D_current;
 8000280:	4b2f      	ldr	r3, [pc, #188]	@ (8000340 <main+0x13c>)
 8000282:	881a      	ldrh	r2, [r3, #0]
 8000284:	4b2f      	ldr	r3, [pc, #188]	@ (8000344 <main+0x140>)
 8000286:	801a      	strh	r2, [r3, #0]
	D_vol_message [3] = D_current;
 8000288:	4b2d      	ldr	r3, [pc, #180]	@ (8000340 <main+0x13c>)
 800028a:	881b      	ldrh	r3, [r3, #0]
 800028c:	b2da      	uxtb	r2, r3
 800028e:	4b2e      	ldr	r3, [pc, #184]	@ (8000348 <main+0x144>)
 8000290:	70da      	strb	r2, [r3, #3]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
	USBD_MIDI_SendPackets (&hUsbDeviceFS, D_vol_message, 4);
 8000292:	2204      	movs	r2, #4
 8000294:	492c      	ldr	r1, [pc, #176]	@ (8000348 <main+0x144>)
 8000296:	482d      	ldr	r0, [pc, #180]	@ (800034c <main+0x148>)
 8000298:	f007 f99b 	bl	80075d2 <USBD_MIDI_SendPackets>
//		Enqueue (D_vol_message);

	for (uint8_t i = 0; i < 16; i++)	P_sum += ADC_Convert_Rank2 ();
 800029c:	2300      	movs	r3, #0
 800029e:	71bb      	strb	r3, [r7, #6]
 80002a0:	e00c      	b.n	80002bc <main+0xb8>
 80002a2:	f7ff ff81 	bl	80001a8 <ADC_Convert_Rank2>
 80002a6:	4603      	mov	r3, r0
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b29      	ldr	r3, [pc, #164]	@ (8000350 <main+0x14c>)
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	4413      	add	r3, r2
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	4b27      	ldr	r3, [pc, #156]	@ (8000350 <main+0x14c>)
 80002b4:	801a      	strh	r2, [r3, #0]
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	3301      	adds	r3, #1
 80002ba:	71bb      	strb	r3, [r7, #6]
 80002bc:	79bb      	ldrb	r3, [r7, #6]
 80002be:	2b0f      	cmp	r3, #15
 80002c0:	d9ef      	bls.n	80002a2 <main+0x9e>

	P_current = ((P_sum >> 4) * 127) / 4095;
 80002c2:	4b23      	ldr	r3, [pc, #140]	@ (8000350 <main+0x14c>)
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	091b      	lsrs	r3, r3, #4
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	4613      	mov	r3, r2
 80002ce:	01db      	lsls	r3, r3, #7
 80002d0:	1a9b      	subs	r3, r3, r2
 80002d2:	4a1a      	ldr	r2, [pc, #104]	@ (800033c <main+0x138>)
 80002d4:	fb82 1203 	smull	r1, r2, r2, r3
 80002d8:	441a      	add	r2, r3
 80002da:	12d2      	asrs	r2, r2, #11
 80002dc:	17db      	asrs	r3, r3, #31
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <main+0x150>)
 80002e4:	801a      	strh	r2, [r3, #0]
	P_sum = 0;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <main+0x14c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	801a      	strh	r2, [r3, #0]

	P_previous = P_current;
 80002ec:	4b19      	ldr	r3, [pc, #100]	@ (8000354 <main+0x150>)
 80002ee:	881a      	ldrh	r2, [r3, #0]
 80002f0:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <main+0x154>)
 80002f2:	801a      	strh	r2, [r3, #0]
	P_vol_message [3] = P_current;
 80002f4:	4b17      	ldr	r3, [pc, #92]	@ (8000354 <main+0x150>)
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4b18      	ldr	r3, [pc, #96]	@ (800035c <main+0x158>)
 80002fc:	70da      	strb	r2, [r3, #3]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
	USBD_MIDI_SendPackets (&hUsbDeviceFS, P_vol_message, 4);
 80002fe:	2204      	movs	r2, #4
 8000300:	4916      	ldr	r1, [pc, #88]	@ (800035c <main+0x158>)
 8000302:	4812      	ldr	r0, [pc, #72]	@ (800034c <main+0x148>)
 8000304:	f007 f965 	bl	80075d2 <USBD_MIDI_SendPackets>
//		Enqueue (P_vol_message);

  HAL_NVIC_SetPriority (TIM2_IRQn, 0, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2100      	movs	r1, #0
 800030c:	201c      	movs	r0, #28
 800030e:	f001 fc46 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM2_IRQn);
 8000312:	201c      	movs	r0, #28
 8000314:	f001 fc5f 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim2);
 8000318:	4811      	ldr	r0, [pc, #68]	@ (8000360 <main+0x15c>)
 800031a:	f004 f92b 	bl	8004574 <HAL_TIM_Base_Start_IT>

  HAL_NVIC_SetPriority (TIM3_IRQn , 0, 0);
 800031e:	2200      	movs	r2, #0
 8000320:	2100      	movs	r1, #0
 8000322:	201d      	movs	r0, #29
 8000324:	f001 fc3b 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM3_IRQn );
 8000328:	201d      	movs	r0, #29
 800032a:	f001 fc54 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim3);
 800032e:	480d      	ldr	r0, [pc, #52]	@ (8000364 <main+0x160>)
 8000330:	f004 f920 	bl	8004574 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000334:	bf00      	nop
 8000336:	e7fd      	b.n	8000334 <main+0x130>
 8000338:	20000278 	.word	0x20000278
 800033c:	80080081 	.word	0x80080081
 8000340:	20000276 	.word	0x20000276
 8000344:	20000274 	.word	0x20000274
 8000348:	2000000c 	.word	0x2000000c
 800034c:	200002cc 	.word	0x200002cc
 8000350:	2000027e 	.word	0x2000027e
 8000354:	2000027c 	.word	0x2000027c
 8000358:	2000027a 	.word	0x2000027a
 800035c:	20000010 	.word	0x20000010
 8000360:	200001d4 	.word	0x200001d4
 8000364:	2000021c 	.word	0x2000021c

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b094      	sub	sp, #80	@ 0x50
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000372:	2228      	movs	r2, #40	@ 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f008 feb0 	bl	80090dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000398:	2301      	movs	r3, #1
 800039a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800039c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a6:	2301      	movs	r3, #1
 80003a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003aa:	2302      	movs	r3, #2
 80003ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80003b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003be:	4618      	mov	r0, r3
 80003c0:	f003 fb20 	bl	8003a04 <HAL_RCC_OscConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003ca:	f000 f9a5 	bl	8000718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ce:	230f      	movs	r3, #15
 80003d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	2101      	movs	r1, #1
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fd8c 	bl	8003f08 <HAL_RCC_ClockConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003f6:	f000 f98f 	bl	8000718 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80003fa:	2312      	movs	r3, #18
 80003fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80003fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000402:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000404:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000408:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4618      	mov	r0, r3
 800040e:	f003 fef5 	bl	80041fc <HAL_RCCEx_PeriphCLKConfig>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000418:	f000 f97e 	bl	8000718 <Error_Handler>
  }
}
 800041c:	bf00      	nop
 800041e:	3750      	adds	r7, #80	@ 0x50
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000434:	4b20      	ldr	r3, [pc, #128]	@ (80004b8 <MX_ADC1_Init+0x94>)
 8000436:	4a21      	ldr	r2, [pc, #132]	@ (80004bc <MX_ADC1_Init+0x98>)
 8000438:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800043a:	4b1f      	ldr	r3, [pc, #124]	@ (80004b8 <MX_ADC1_Init+0x94>)
 800043c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000440:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000442:	4b1d      	ldr	r3, [pc, #116]	@ (80004b8 <MX_ADC1_Init+0x94>)
 8000444:	2200      	movs	r2, #0
 8000446:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000448:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <MX_ADC1_Init+0x94>)
 800044a:	2200      	movs	r2, #0
 800044c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b1a      	ldr	r3, [pc, #104]	@ (80004b8 <MX_ADC1_Init+0x94>)
 8000450:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000454:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000456:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <MX_ADC1_Init+0x94>)
 8000458:	2200      	movs	r2, #0
 800045a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800045c:	4b16      	ldr	r3, [pc, #88]	@ (80004b8 <MX_ADC1_Init+0x94>)
 800045e:	2202      	movs	r2, #2
 8000460:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000462:	4815      	ldr	r0, [pc, #84]	@ (80004b8 <MX_ADC1_Init+0x94>)
 8000464:	f000 fe6c 	bl	8001140 <HAL_ADC_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800046e:	f000 f953 	bl	8000718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000472:	2308      	movs	r3, #8
 8000474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000476:	2301      	movs	r3, #1
 8000478:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	4619      	mov	r1, r3
 8000482:	480d      	ldr	r0, [pc, #52]	@ (80004b8 <MX_ADC1_Init+0x94>)
 8000484:	f001 f920 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800048e:	f000 f943 	bl	8000718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000492:	2300      	movs	r3, #0
 8000494:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000496:	2302      	movs	r3, #2
 8000498:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4619      	mov	r1, r3
 800049e:	4806      	ldr	r0, [pc, #24]	@ (80004b8 <MX_ADC1_Init+0x94>)
 80004a0:	f001 f912 	bl	80016c8 <HAL_ADC_ConfigChannel>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80004aa:	f000 f935 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000174 	.word	0x20000174
 80004bc:	40012400 	.word	0x40012400

080004c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80004d0:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <MX_ADC2_Init+0x74>)
 80004d2:	4a19      	ldr	r2, [pc, #100]	@ (8000538 <MX_ADC2_Init+0x78>)
 80004d4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004d6:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <MX_ADC2_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <MX_ADC2_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004e2:	4b14      	ldr	r3, [pc, #80]	@ (8000534 <MX_ADC2_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <MX_ADC2_Init+0x74>)
 80004ea:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004ee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f0:	4b10      	ldr	r3, [pc, #64]	@ (8000534 <MX_ADC2_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80004f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <MX_ADC2_Init+0x74>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004fc:	480d      	ldr	r0, [pc, #52]	@ (8000534 <MX_ADC2_Init+0x74>)
 80004fe:	f000 fe1f 	bl	8001140 <HAL_ADC_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000508:	f000 f906 	bl	8000718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800050c:	2309      	movs	r3, #9
 800050e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000510:	2301      	movs	r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	4619      	mov	r1, r3
 800051c:	4805      	ldr	r0, [pc, #20]	@ (8000534 <MX_ADC2_Init+0x74>)
 800051e:	f001 f8d3 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000528:	f000 f8f6 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200001a4 	.word	0x200001a4
 8000538:	40012800 	.word	0x40012800

0800053c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000558:	4b1e      	ldr	r3, [pc, #120]	@ (80005d4 <MX_TIM2_Init+0x98>)
 800055a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800055e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 359;
 8000560:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <MX_TIM2_Init+0x98>)
 8000562:	f240 1267 	movw	r2, #359	@ 0x167
 8000566:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000568:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <MX_TIM2_Init+0x98>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 800056e:	4b19      	ldr	r3, [pc, #100]	@ (80005d4 <MX_TIM2_Init+0x98>)
 8000570:	f240 321f 	movw	r2, #799	@ 0x31f
 8000574:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000576:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <MX_TIM2_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057c:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <MX_TIM2_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000582:	4814      	ldr	r0, [pc, #80]	@ (80005d4 <MX_TIM2_Init+0x98>)
 8000584:	f003 ffa6 	bl	80044d4 <HAL_TIM_Base_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800058e:	f000 f8c3 	bl	8000718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000596:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	4619      	mov	r1, r3
 800059e:	480d      	ldr	r0, [pc, #52]	@ (80005d4 <MX_TIM2_Init+0x98>)
 80005a0:	f004 f92a 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005aa:	f000 f8b5 	bl	8000718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <MX_TIM2_Init+0x98>)
 80005bc:	f004 fb14 	bl	8004be8 <HAL_TIMEx_MasterConfigSynchronization>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005c6:	f000 f8a7 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001d4 	.word	0x200001d4

080005d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <MX_TIM3_Init+0x94>)
 80005f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000670 <MX_TIM3_Init+0x98>)
 80005f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1799;
 80005fa:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <MX_TIM3_Init+0x94>)
 80005fc:	f240 7207 	movw	r2, #1799	@ 0x707
 8000600:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_TIM3_Init+0x94>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 799;
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <MX_TIM3_Init+0x94>)
 800060a:	f240 321f 	movw	r2, #799	@ 0x31f
 800060e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_TIM3_Init+0x94>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <MX_TIM3_Init+0x94>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800061c:	4813      	ldr	r0, [pc, #76]	@ (800066c <MX_TIM3_Init+0x94>)
 800061e:	f003 ff59 	bl	80044d4 <HAL_TIM_Base_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000628:	f000 f876 	bl	8000718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800062c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	4619      	mov	r1, r3
 8000638:	480c      	ldr	r0, [pc, #48]	@ (800066c <MX_TIM3_Init+0x94>)
 800063a:	f004 f8dd 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000644:	f000 f868 	bl	8000718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_TIM3_Init+0x94>)
 8000656:	f004 fac7 	bl	8004be8 <HAL_TIMEx_MasterConfigSynchronization>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000660:	f000 f85a 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000021c 	.word	0x2000021c
 8000670:	40000400 	.word	0x40000400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <MX_GPIO_Init+0x98>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a1f      	ldr	r2, [pc, #124]	@ (800070c <MX_GPIO_Init+0x98>)
 800068e:	f043 0320 	orr.w	r3, r3, #32
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <MX_GPIO_Init+0x98>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0320 	and.w	r3, r3, #32
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <MX_GPIO_Init+0x98>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a19      	ldr	r2, [pc, #100]	@ (800070c <MX_GPIO_Init+0x98>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_GPIO_Init+0x98>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_GPIO_Init+0x98>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a13      	ldr	r2, [pc, #76]	@ (800070c <MX_GPIO_Init+0x98>)
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_GPIO_Init+0x98>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : C_B_Pin CS_B_Pin D_B_Pin DS_B_Pin
                           E_B_Pin F_B_Pin FS_B_Pin */
  GPIO_InitStruct.Pin = C_B_Pin|CS_B_Pin|D_B_Pin|DS_B_Pin
 80006d0:	f248 03fc 	movw	r3, #33020	@ 0x80fc
 80006d4:	613b      	str	r3, [r7, #16]
                          |E_B_Pin|F_B_Pin|FS_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	480a      	ldr	r0, [pc, #40]	@ (8000710 <MX_GPIO_Init+0x9c>)
 80006e6:	f001 fa91 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : G_B_Pin GS_B_Pin A_B_Pin AS_B_Pin
                           B_B_Pin SP_B_Pin */
  GPIO_InitStruct.Pin = G_B_Pin|GS_B_Pin|A_B_Pin|AS_B_Pin
 80006ea:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80006ee:	613b      	str	r3, [r7, #16]
                          |B_B_Pin|SP_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4619      	mov	r1, r3
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_GPIO_Init+0xa0>)
 8000700:	f001 fa84 	bl	8001c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <Error_Handler+0x8>

08000724 <Queue_Init>:
void *max_size_v =  &max_size;
void *curr_size_v =  &curr_size;


/* INITIALIZATION FUNCTION */
void Queue_Init (uint16_t size) {
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
    // Allocate memory for head and tail
    head = (queue_t *) malloc (sizeof (queue_t));
 800072e:	2008      	movs	r0, #8
 8000730:	f008 fc16 	bl	8008f60 <malloc>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <Queue_Init+0x64>)
 800073a:	601a      	str	r2, [r3, #0]
    head->next = (queue_t *) malloc (sizeof (queue_t));
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <Queue_Init+0x64>)
 800073e:	681c      	ldr	r4, [r3, #0]
 8000740:	2008      	movs	r0, #8
 8000742:	f008 fc0d 	bl	8008f60 <malloc>
 8000746:	4603      	mov	r3, r0
 8000748:	6063      	str	r3, [r4, #4]

    tail = (queue_t *) malloc (sizeof (queue_t));
 800074a:	2008      	movs	r0, #8
 800074c:	f008 fc08 	bl	8008f60 <malloc>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <Queue_Init+0x68>)
 8000756:	601a      	str	r2, [r3, #0]
    tail->next = (queue_t *) malloc (sizeof (queue_t));
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <Queue_Init+0x68>)
 800075a:	681c      	ldr	r4, [r3, #0]
 800075c:	2008      	movs	r0, #8
 800075e:	f008 fbff 	bl	8008f60 <malloc>
 8000762:	4603      	mov	r3, r0
 8000764:	6063      	str	r3, [r4, #4]

    head = tail = NULL;
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <Queue_Init+0x68>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <Queue_Init+0x68>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a05      	ldr	r2, [pc, #20]	@ (8000788 <Queue_Init+0x64>)
 8000772:	6013      	str	r3, [r2, #0]

    // Initialize max_size and curr_size
    max_size = size;
 8000774:	4a06      	ldr	r2, [pc, #24]	@ (8000790 <Queue_Init+0x6c>)
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	8013      	strh	r3, [r2, #0]
    curr_size = 0;
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <Queue_Init+0x70>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	20000264 	.word	0x20000264
 800078c:	20000268 	.word	0x20000268
 8000790:	2000026c 	.word	0x2000026c
 8000794:	2000026e 	.word	0x2000026e

08000798 <Enqueue>:
    free (tail_v);
    free (max_size_v);
    free (curr_size_v);
}

bool Enqueue (uint8_t *message) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    // If message is empty, return false
    if (message == NULL)    return false;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <Enqueue+0x12>
 80007a6:	2300      	movs	r3, #0
 80007a8:	e032      	b.n	8000810 <Enqueue+0x78>

    // Create a node to store message
    queue_t *node = (queue_t *) malloc (sizeof (queue_t));
 80007aa:	2008      	movs	r0, #8
 80007ac:	f008 fbd8 	bl	8008f60 <malloc>
 80007b0:	4603      	mov	r3, r0
 80007b2:	60fb      	str	r3, [r7, #12]
    memcpy (node->message, message, 4);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	6812      	ldr	r2, [r2, #0]
 80007ba:	601a      	str	r2, [r3, #0]
    node->next = NULL;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]

    // If head is NULL or curr_size is 0, node becomes both head and tail
    if (head == NULL || curr_size == 0)    head = tail = node;
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <Enqueue+0x80>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <Enqueue+0x3a>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <Enqueue+0x84>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d107      	bne.n	80007e2 <Enqueue+0x4a>
 80007d2:	4a13      	ldr	r2, [pc, #76]	@ (8000820 <Enqueue+0x88>)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <Enqueue+0x88>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000818 <Enqueue+0x80>)
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	e00f      	b.n	8000802 <Enqueue+0x6a>
    // else if max size has not been exceeded, node becomes new tail
    else if (curr_size < max_size) {
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <Enqueue+0x84>)
 80007e4:	881a      	ldrh	r2, [r3, #0]
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <Enqueue+0x8c>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d207      	bcs.n	80007fe <Enqueue+0x66>
        tail->next = node;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <Enqueue+0x88>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	605a      	str	r2, [r3, #4]
        tail = node;
 80007f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <Enqueue+0x88>)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e001      	b.n	8000802 <Enqueue+0x6a>
    }

    else    return false;
 80007fe:	2300      	movs	r3, #0
 8000800:	e006      	b.n	8000810 <Enqueue+0x78>

    curr_size++;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <Enqueue+0x84>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b04      	ldr	r3, [pc, #16]	@ (800081c <Enqueue+0x84>)
 800080c:	801a      	strh	r2, [r3, #0]
    return true;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000264 	.word	0x20000264
 800081c:	2000026e 	.word	0x2000026e
 8000820:	20000268 	.word	0x20000268
 8000824:	2000026c 	.word	0x2000026c

08000828 <Dequeue>:

uint8_t *Dequeue () {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
    // if head is NULL or curr_size is 0, return NULL
    if (head == NULL || curr_size == 0)     return NULL;
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <Dequeue+0x5c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d003      	beq.n	800083e <Dequeue+0x16>
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <Dequeue+0x60>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <Dequeue+0x1a>
 800083e:	2300      	movs	r3, #0
 8000840:	e01b      	b.n	800087a <Dequeue+0x52>

    queue_t *temp = head;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <Dequeue+0x5c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	607b      	str	r3, [r7, #4]
    uint8_t *message = malloc (sizeof(uint8_t) * 4);
 8000848:	2004      	movs	r0, #4
 800084a:	f008 fb89 	bl	8008f60 <malloc>
 800084e:	4603      	mov	r3, r0
 8000850:	603b      	str	r3, [r7, #0]
    memcpy (message, temp->message, 4);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	601a      	str	r2, [r3, #0]

    head = head->next;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <Dequeue+0x5c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <Dequeue+0x5c>)
 8000864:	6013      	str	r3, [r2, #0]
    curr_size--;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <Dequeue+0x60>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	3b01      	subs	r3, #1
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <Dequeue+0x60>)
 8000870:	801a      	strh	r2, [r3, #0]

    free (temp);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f008 fb7c 	bl	8008f70 <free>
    return message;
 8000878:	683b      	ldr	r3, [r7, #0]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000264 	.word	0x20000264
 8000888:	2000026e 	.word	0x2000026e

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <HAL_MspInit+0x5c>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a14      	ldr	r2, [pc, #80]	@ (80008e8 <HAL_MspInit+0x5c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6193      	str	r3, [r2, #24]
 800089e:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <HAL_MspInit+0x5c>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <HAL_MspInit+0x5c>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <HAL_MspInit+0x5c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	61d3      	str	r3, [r2, #28]
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <HAL_MspInit+0x5c>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008c2:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <HAL_MspInit+0x60>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <HAL_MspInit+0x60>)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40010000 	.word	0x40010000

080008f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a33      	ldr	r2, [pc, #204]	@ (80009d8 <HAL_ADC_MspInit+0xe8>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d138      	bne.n	8000982 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000910:	4b32      	ldr	r3, [pc, #200]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a31      	ldr	r2, [pc, #196]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 8000916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000924:	61fb      	str	r3, [r7, #28]
 8000926:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a2b      	ldr	r2, [pc, #172]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a25      	ldr	r2, [pc, #148]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0320 	add.w	r3, r7, #32
 8000964:	4619      	mov	r1, r3
 8000966:	481e      	ldr	r0, [pc, #120]	@ (80009e0 <HAL_ADC_MspInit+0xf0>)
 8000968:	f001 f950 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D_V_Pin;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000970:	2303      	movs	r3, #3
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(D_V_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4619      	mov	r1, r3
 800097a:	481a      	ldr	r0, [pc, #104]	@ (80009e4 <HAL_ADC_MspInit+0xf4>)
 800097c:	f001 f946 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000980:	e026      	b.n	80009d0 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a18      	ldr	r2, [pc, #96]	@ (80009e8 <HAL_ADC_MspInit+0xf8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d121      	bne.n	80009d0 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 8000992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a0c      	ldr	r2, [pc, #48]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <HAL_ADC_MspInit+0xec>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P_V_Pin;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c0:	2303      	movs	r3, #3
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(P_V_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <HAL_ADC_MspInit+0xf4>)
 80009cc:	f001 f91e 	bl	8001c0c <HAL_GPIO_Init>
}
 80009d0:	bf00      	nop
 80009d2:	3730      	adds	r7, #48	@ 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40012400 	.word	0x40012400
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010800 	.word	0x40010800
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	40012800 	.word	0x40012800

080009ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009fc:	d114      	bne.n	8000a28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009fe:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <HAL_TIM_Base_MspInit+0x78>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	4a18      	ldr	r2, [pc, #96]	@ (8000a64 <HAL_TIM_Base_MspInit+0x78>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	61d3      	str	r3, [r2, #28]
 8000a0a:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <HAL_TIM_Base_MspInit+0x78>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	201c      	movs	r0, #28
 8000a1c:	f001 f8bf 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a20:	201c      	movs	r0, #28
 8000a22:	f001 f8d8 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a26:	e018      	b.n	8000a5a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a68 <HAL_TIM_Base_MspInit+0x7c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d113      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <HAL_TIM_Base_MspInit+0x78>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <HAL_TIM_Base_MspInit+0x78>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	61d3      	str	r3, [r2, #28]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_TIM_Base_MspInit+0x78>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	201d      	movs	r0, #29
 8000a50:	f001 f8a5 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a54:	201d      	movs	r0, #29
 8000a56:	f001 f8be 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40000400 	.word	0x40000400

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <NMI_Handler+0x4>

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <MemManage_Handler+0x4>

08000a84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 fb24 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000aca:	f001 fb56 	bl	800217a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000790 	.word	0x20000790

08000ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	uint8_t *msg = Dequeue ();
 8000ade:	f7ff fea3 	bl	8000828 <Dequeue>
 8000ae2:	6078      	str	r0, [r7, #4]
	if (msg != NULL) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00b      	beq.n	8000b02 <TIM2_IRQHandler+0x2a>
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000aea:	bf00      	nop
 8000aec:	48a7      	ldr	r0, [pc, #668]	@ (8000d8c <TIM2_IRQHandler+0x2b4>)
 8000aee:	f006 fd63 	bl	80075b8 <USBD_MIDI_GetState>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1f9      	bne.n	8000aec <TIM2_IRQHandler+0x14>
		USBD_MIDI_SendPackets (&hUsbDeviceFS, msg, 4);
 8000af8:	2204      	movs	r2, #4
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	48a3      	ldr	r0, [pc, #652]	@ (8000d8c <TIM2_IRQHandler+0x2b4>)
 8000afe:	f006 fd68 	bl	80075d2 <USBD_MIDI_SendPackets>
	}

	if (!HAL_GPIO_ReadPin (C_B_GPIO_Port, C_B_Pin)) {
 8000b02:	2104      	movs	r1, #4
 8000b04:	48a2      	ldr	r0, [pc, #648]	@ (8000d90 <TIM2_IRQHandler+0x2b8>)
 8000b06:	f001 fa05 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d111      	bne.n	8000b34 <TIM2_IRQHandler+0x5c>
		if (!pressed) {
 8000b10:	4ba0      	ldr	r3, [pc, #640]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	f083 0301 	eor.w	r3, r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 8158 	beq.w	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000b20:	4b9c      	ldr	r3, [pc, #624]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]

			Note_Change (C);
 8000b26:	2030      	movs	r0, #48	@ 0x30
 8000b28:	f000 fa10 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000b2c:	489a      	ldr	r0, [pc, #616]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000b2e:	f7ff fe33 	bl	8000798 <Enqueue>
 8000b32:	e14d      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (CS_B_GPIO_Port, CS_B_Pin)) {
 8000b34:	2108      	movs	r1, #8
 8000b36:	4896      	ldr	r0, [pc, #600]	@ (8000d90 <TIM2_IRQHandler+0x2b8>)
 8000b38:	f001 f9ec 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d111      	bne.n	8000b66 <TIM2_IRQHandler+0x8e>
		if (!pressed) {
 8000b42:	4b94      	ldr	r3, [pc, #592]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	f083 0301 	eor.w	r3, r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 813f 	beq.w	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000b52:	4b90      	ldr	r3, [pc, #576]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]

			Note_Change (CS);
 8000b58:	2031      	movs	r0, #49	@ 0x31
 8000b5a:	f000 f9f7 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000b5e:	488e      	ldr	r0, [pc, #568]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000b60:	f7ff fe1a 	bl	8000798 <Enqueue>
 8000b64:	e134      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (D_B_GPIO_Port, D_B_Pin)) {
 8000b66:	2110      	movs	r1, #16
 8000b68:	4889      	ldr	r0, [pc, #548]	@ (8000d90 <TIM2_IRQHandler+0x2b8>)
 8000b6a:	f001 f9d3 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d111      	bne.n	8000b98 <TIM2_IRQHandler+0xc0>
		if (!pressed) {
 8000b74:	4b87      	ldr	r3, [pc, #540]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	f083 0301 	eor.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 8126 	beq.w	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000b84:	4b83      	ldr	r3, [pc, #524]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]

			Note_Change (D);
 8000b8a:	2032      	movs	r0, #50	@ 0x32
 8000b8c:	f000 f9de 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000b90:	4881      	ldr	r0, [pc, #516]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000b92:	f7ff fe01 	bl	8000798 <Enqueue>
 8000b96:	e11b      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (DS_B_GPIO_Port, DS_B_Pin)) {
 8000b98:	2120      	movs	r1, #32
 8000b9a:	487d      	ldr	r0, [pc, #500]	@ (8000d90 <TIM2_IRQHandler+0x2b8>)
 8000b9c:	f001 f9ba 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d111      	bne.n	8000bca <TIM2_IRQHandler+0xf2>
		if (!pressed) {
 8000ba6:	4b7b      	ldr	r3, [pc, #492]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	f083 0301 	eor.w	r3, r3, #1
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f000 810d 	beq.w	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000bb6:	4b77      	ldr	r3, [pc, #476]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]

			Note_Change (DS);
 8000bbc:	2033      	movs	r0, #51	@ 0x33
 8000bbe:	f000 f9c5 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000bc2:	4875      	ldr	r0, [pc, #468]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000bc4:	f7ff fde8 	bl	8000798 <Enqueue>
 8000bc8:	e102      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (E_B_GPIO_Port, E_B_Pin)) {
 8000bca:	2140      	movs	r1, #64	@ 0x40
 8000bcc:	4870      	ldr	r0, [pc, #448]	@ (8000d90 <TIM2_IRQHandler+0x2b8>)
 8000bce:	f001 f9a1 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d111      	bne.n	8000bfc <TIM2_IRQHandler+0x124>
		if (!pressed) {
 8000bd8:	4b6e      	ldr	r3, [pc, #440]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	f083 0301 	eor.w	r3, r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 80f4 	beq.w	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000be8:	4b6a      	ldr	r3, [pc, #424]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]

			Note_Change (E);
 8000bee:	2034      	movs	r0, #52	@ 0x34
 8000bf0:	f000 f9ac 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000bf4:	4868      	ldr	r0, [pc, #416]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000bf6:	f7ff fdcf 	bl	8000798 <Enqueue>
 8000bfa:	e0e9      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (F_B_GPIO_Port, F_B_Pin)) {
 8000bfc:	2180      	movs	r1, #128	@ 0x80
 8000bfe:	4864      	ldr	r0, [pc, #400]	@ (8000d90 <TIM2_IRQHandler+0x2b8>)
 8000c00:	f001 f988 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d111      	bne.n	8000c2e <TIM2_IRQHandler+0x156>
		if (!pressed) {
 8000c0a:	4b62      	ldr	r3, [pc, #392]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	f083 0301 	eor.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f000 80db 	beq.w	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000c1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]

			Note_Change (F);
 8000c20:	2035      	movs	r0, #53	@ 0x35
 8000c22:	f000 f993 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000c26:	485c      	ldr	r0, [pc, #368]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000c28:	f7ff fdb6 	bl	8000798 <Enqueue>
 8000c2c:	e0d0      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (FS_B_GPIO_Port, FS_B_Pin)) {
 8000c2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c32:	4857      	ldr	r0, [pc, #348]	@ (8000d90 <TIM2_IRQHandler+0x2b8>)
 8000c34:	f001 f96e 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d111      	bne.n	8000c62 <TIM2_IRQHandler+0x18a>
		if (!pressed) {
 8000c3e:	4b55      	ldr	r3, [pc, #340]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 80c1 	beq.w	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000c4e:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]

			Note_Change (FS);
 8000c54:	2036      	movs	r0, #54	@ 0x36
 8000c56:	f000 f979 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000c5a:	484f      	ldr	r0, [pc, #316]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000c5c:	f7ff fd9c 	bl	8000798 <Enqueue>
 8000c60:	e0b6      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (G_B_GPIO_Port, G_B_Pin)) {
 8000c62:	2108      	movs	r1, #8
 8000c64:	484d      	ldr	r0, [pc, #308]	@ (8000d9c <TIM2_IRQHandler+0x2c4>)
 8000c66:	f001 f955 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <TIM2_IRQHandler+0x1bc>
		if (!pressed) {
 8000c70:	4b48      	ldr	r3, [pc, #288]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	f083 0301 	eor.w	r3, r3, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 80a8 	beq.w	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000c80:	4b44      	ldr	r3, [pc, #272]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]

			Note_Change (G);
 8000c86:	2037      	movs	r0, #55	@ 0x37
 8000c88:	f000 f960 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000c8c:	4842      	ldr	r0, [pc, #264]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000c8e:	f7ff fd83 	bl	8000798 <Enqueue>
 8000c92:	e09d      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (GS_B_GPIO_Port, GS_B_Pin)) {
 8000c94:	2110      	movs	r1, #16
 8000c96:	4841      	ldr	r0, [pc, #260]	@ (8000d9c <TIM2_IRQHandler+0x2c4>)
 8000c98:	f001 f93c 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d111      	bne.n	8000cc6 <TIM2_IRQHandler+0x1ee>
		if (!pressed) {
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f083 0301 	eor.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f000 808f 	beq.w	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000cb2:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]

			Note_Change (GS);
 8000cb8:	2038      	movs	r0, #56	@ 0x38
 8000cba:	f000 f947 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000cbe:	4836      	ldr	r0, [pc, #216]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000cc0:	f7ff fd6a 	bl	8000798 <Enqueue>
 8000cc4:	e084      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (A_B_GPIO_Port, A_B_Pin)) {
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	4834      	ldr	r0, [pc, #208]	@ (8000d9c <TIM2_IRQHandler+0x2c4>)
 8000cca:	f001 f923 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d110      	bne.n	8000cf6 <TIM2_IRQHandler+0x21e>
		if (!pressed) {
 8000cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	f083 0301 	eor.w	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d076      	beq.n	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]

			Note_Change (A);
 8000ce8:	2039      	movs	r0, #57	@ 0x39
 8000cea:	f000 f92f 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000cee:	482a      	ldr	r0, [pc, #168]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000cf0:	f7ff fd52 	bl	8000798 <Enqueue>
 8000cf4:	e06c      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (AS_B_GPIO_Port, AS_B_Pin)) {
 8000cf6:	2140      	movs	r1, #64	@ 0x40
 8000cf8:	4828      	ldr	r0, [pc, #160]	@ (8000d9c <TIM2_IRQHandler+0x2c4>)
 8000cfa:	f001 f90b 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d110      	bne.n	8000d26 <TIM2_IRQHandler+0x24e>
		if (!pressed) {
 8000d04:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f083 0301 	eor.w	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d05e      	beq.n	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000d12:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]

			Note_Change (AS);
 8000d18:	203a      	movs	r0, #58	@ 0x3a
 8000d1a:	f000 f917 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000d1e:	481e      	ldr	r0, [pc, #120]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000d20:	f7ff fd3a 	bl	8000798 <Enqueue>
 8000d24:	e054      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (B_B_GPIO_Port, B_B_Pin)) {
 8000d26:	2180      	movs	r1, #128	@ 0x80
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <TIM2_IRQHandler+0x2c4>)
 8000d2a:	f001 f8f3 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d110      	bne.n	8000d56 <TIM2_IRQHandler+0x27e>
		if (!pressed) {
 8000d34:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	f083 0301 	eor.w	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d046      	beq.n	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000d42:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]

			Note_Change (B);
 8000d48:	203b      	movs	r0, #59	@ 0x3b
 8000d4a:	f000 f8ff 	bl	8000f4c <Note_Change>
			Enqueue (on_message);
 8000d4e:	4812      	ldr	r0, [pc, #72]	@ (8000d98 <TIM2_IRQHandler+0x2c0>)
 8000d50:	f7ff fd22 	bl	8000798 <Enqueue>
 8000d54:	e03c      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (SP_B_GPIO_Port, SP_B_Pin)) {
 8000d56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d5a:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <TIM2_IRQHandler+0x2c4>)
 8000d5c:	f001 f8da 	bl	8001f14 <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d120      	bne.n	8000da8 <TIM2_IRQHandler+0x2d0>
		if (!pressed) {
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	f083 0301 	eor.w	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d02d      	beq.n	8000dd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000d74:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <TIM2_IRQHandler+0x2bc>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
			control_toggled = true;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <TIM2_IRQHandler+0x2c8>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]

			Toggle_Control ();
 8000d80:	f000 f8f8 	bl	8000f74 <Toggle_Control>
			Enqueue (PS_message);
 8000d84:	4807      	ldr	r0, [pc, #28]	@ (8000da4 <TIM2_IRQHandler+0x2cc>)
 8000d86:	f7ff fd07 	bl	8000798 <Enqueue>
 8000d8a:	e021      	b.n	8000dd0 <TIM2_IRQHandler+0x2f8>
 8000d8c:	200002cc 	.word	0x200002cc
 8000d90:	40010800 	.word	0x40010800
 8000d94:	20000272 	.word	0x20000272
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	20000270 	.word	0x20000270
 8000da4:	20000008 	.word	0x20000008
		}
	} else {
		if (pressed && !control_toggled) {
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <TIM2_IRQHandler+0x308>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d009      	beq.n	8000dc4 <TIM2_IRQHandler+0x2ec>
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <TIM2_IRQHandler+0x30c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	f083 0301 	eor.w	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <TIM2_IRQHandler+0x2ec>
			Enqueue (off_message);
 8000dbe:	480a      	ldr	r0, [pc, #40]	@ (8000de8 <TIM2_IRQHandler+0x310>)
 8000dc0:	f7ff fcea 	bl	8000798 <Enqueue>
//			Note_Change (END);
		}

		pressed = false;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <TIM2_IRQHandler+0x308>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
		control_toggled = false;
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <TIM2_IRQHandler+0x30c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
//		elapsed_times = 0;
//	}
//
//	elapsed_times++;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd0:	4806      	ldr	r0, [pc, #24]	@ (8000dec <TIM2_IRQHandler+0x314>)
 8000dd2:	f003 fc21 	bl	8004618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000272 	.word	0x20000272
 8000de4:	20000270 	.word	0x20000270
 8000de8:	20000004 	.word	0x20000004
 8000dec:	200001d4 	.word	0x200001d4

08000df0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	for (uint8_t i = 0; i < 16; i++)	D_sum += ~(ADC_Convert_Rank1 ());
 8000df6:	2300      	movs	r3, #0
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	e00d      	b.n	8000e18 <TIM3_IRQHandler+0x28>
 8000dfc:	f7ff f9a6 	bl	800014c <ADC_Convert_Rank1>
 8000e00:	4603      	mov	r3, r0
 8000e02:	43db      	mvns	r3, r3
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	4b46      	ldr	r3, [pc, #280]	@ (8000f20 <TIM3_IRQHandler+0x130>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b44      	ldr	r3, [pc, #272]	@ (8000f20 <TIM3_IRQHandler+0x130>)
 8000e10:	801a      	strh	r2, [r3, #0]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	3301      	adds	r3, #1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	d9ee      	bls.n	8000dfc <TIM3_IRQHandler+0xc>

	D_current = ((D_sum >> 4) * 127) / 4095;
 8000e1e:	4b40      	ldr	r3, [pc, #256]	@ (8000f20 <TIM3_IRQHandler+0x130>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	461a      	mov	r2, r3
 8000e28:	4613      	mov	r3, r2
 8000e2a:	01db      	lsls	r3, r3, #7
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f24 <TIM3_IRQHandler+0x134>)
 8000e30:	fb82 1203 	smull	r1, r2, r2, r3
 8000e34:	441a      	add	r2, r3
 8000e36:	12d2      	asrs	r2, r2, #11
 8000e38:	17db      	asrs	r3, r3, #31
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f28 <TIM3_IRQHandler+0x138>)
 8000e40:	801a      	strh	r2, [r3, #0]
	D_sum = 0;
 8000e42:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <TIM3_IRQHandler+0x130>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	801a      	strh	r2, [r3, #0]

	if (D_current < D_previous - 3 || D_current > D_previous + 3) {
 8000e48:	4b37      	ldr	r3, [pc, #220]	@ (8000f28 <TIM3_IRQHandler+0x138>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b37      	ldr	r3, [pc, #220]	@ (8000f2c <TIM3_IRQHandler+0x13c>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	3b03      	subs	r3, #3
 8000e54:	429a      	cmp	r2, r3
 8000e56:	db07      	blt.n	8000e68 <TIM3_IRQHandler+0x78>
 8000e58:	4b33      	ldr	r3, [pc, #204]	@ (8000f28 <TIM3_IRQHandler+0x138>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <TIM3_IRQHandler+0x13c>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	3303      	adds	r3, #3
 8000e64:	429a      	cmp	r2, r3
 8000e66:	dd0d      	ble.n	8000e84 <TIM3_IRQHandler+0x94>
		D_previous = D_current;
 8000e68:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <TIM3_IRQHandler+0x138>)
 8000e6a:	881a      	ldrh	r2, [r3, #0]
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f2c <TIM3_IRQHandler+0x13c>)
 8000e6e:	801a      	strh	r2, [r3, #0]
		D_vol_message [3] = D_current;
 8000e70:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <TIM3_IRQHandler+0x138>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b2e      	ldr	r3, [pc, #184]	@ (8000f30 <TIM3_IRQHandler+0x140>)
 8000e78:	70da      	strb	r2, [r3, #3]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
		USBD_MIDI_SendPackets (&hUsbDeviceFS, D_vol_message, 4);
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	492c      	ldr	r1, [pc, #176]	@ (8000f30 <TIM3_IRQHandler+0x140>)
 8000e7e:	482d      	ldr	r0, [pc, #180]	@ (8000f34 <TIM3_IRQHandler+0x144>)
 8000e80:	f006 fba7 	bl	80075d2 <USBD_MIDI_SendPackets>
//		Enqueue (D_vol_message);
	}

	for (uint8_t i = 0; i < 16; i++)	P_sum += ~(ADC_Convert_Rank2 ());
 8000e84:	2300      	movs	r3, #0
 8000e86:	71bb      	strb	r3, [r7, #6]
 8000e88:	e00d      	b.n	8000ea6 <TIM3_IRQHandler+0xb6>
 8000e8a:	f7ff f98d 	bl	80001a8 <ADC_Convert_Rank2>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	43db      	mvns	r3, r3
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <TIM3_IRQHandler+0x148>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <TIM3_IRQHandler+0x148>)
 8000e9e:	801a      	strh	r2, [r3, #0]
 8000ea0:	79bb      	ldrb	r3, [r7, #6]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	71bb      	strb	r3, [r7, #6]
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d9ee      	bls.n	8000e8a <TIM3_IRQHandler+0x9a>

	P_current = ((P_sum >> 4) * 127) / 4095;
 8000eac:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <TIM3_IRQHandler+0x148>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	01db      	lsls	r3, r3, #7
 8000eba:	1a9b      	subs	r3, r3, r2
 8000ebc:	4a19      	ldr	r2, [pc, #100]	@ (8000f24 <TIM3_IRQHandler+0x134>)
 8000ebe:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec2:	441a      	add	r2, r3
 8000ec4:	12d2      	asrs	r2, r2, #11
 8000ec6:	17db      	asrs	r3, r3, #31
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <TIM3_IRQHandler+0x14c>)
 8000ece:	801a      	strh	r2, [r3, #0]
	P_sum = 0;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <TIM3_IRQHandler+0x148>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	801a      	strh	r2, [r3, #0]

	if (P_current < P_previous - 3 || P_current > P_previous + 3) {
 8000ed6:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <TIM3_IRQHandler+0x14c>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <TIM3_IRQHandler+0x150>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	db07      	blt.n	8000ef6 <TIM3_IRQHandler+0x106>
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <TIM3_IRQHandler+0x14c>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <TIM3_IRQHandler+0x150>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	3303      	adds	r3, #3
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dd0d      	ble.n	8000f12 <TIM3_IRQHandler+0x122>
		P_previous = P_current;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <TIM3_IRQHandler+0x14c>)
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <TIM3_IRQHandler+0x150>)
 8000efc:	801a      	strh	r2, [r3, #0]
		P_vol_message [3] = P_current;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <TIM3_IRQHandler+0x14c>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <TIM3_IRQHandler+0x154>)
 8000f06:	70da      	strb	r2, [r3, #3]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
		USBD_MIDI_SendPackets (&hUsbDeviceFS, P_vol_message, 4);
 8000f08:	2204      	movs	r2, #4
 8000f0a:	490e      	ldr	r1, [pc, #56]	@ (8000f44 <TIM3_IRQHandler+0x154>)
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <TIM3_IRQHandler+0x144>)
 8000f0e:	f006 fb60 	bl	80075d2 <USBD_MIDI_SendPackets>
//		Enqueue (P_vol_message);
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f12:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <TIM3_IRQHandler+0x158>)
 8000f14:	f003 fb80 	bl	8004618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000278 	.word	0x20000278
 8000f24:	80080081 	.word	0x80080081
 8000f28:	20000276 	.word	0x20000276
 8000f2c:	20000274 	.word	0x20000274
 8000f30:	2000000c 	.word	0x2000000c
 8000f34:	200002cc 	.word	0x200002cc
 8000f38:	2000027e 	.word	0x2000027e
 8000f3c:	2000027c 	.word	0x2000027c
 8000f40:	2000027a 	.word	0x2000027a
 8000f44:	20000010 	.word	0x20000010
 8000f48:	2000021c 	.word	0x2000021c

08000f4c <Note_Change>:

/* USER CODE BEGIN 1 */
void Note_Change (uint8_t value) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
//	if (value == END) {
//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//		USBD_MIDI_SendPackets (&hUsbDeviceFS, off_message, 4);
//	} else {
		on_message [2] = value;
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <Note_Change+0x20>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	7093      	strb	r3, [r2, #2]
		off_message [2] = value;
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <Note_Change+0x24>)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	7093      	strb	r3, [r2, #2]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
//	}
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000004 	.word	0x20000004

08000f74 <Toggle_Control>:

void Toggle_Control () {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	play_toggled = !play_toggled;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <Toggle_Control+0x3c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf14      	ite	ne
 8000f80:	2301      	movne	r3, #1
 8000f82:	2300      	moveq	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f083 0301 	eor.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <Toggle_Control+0x3c>)
 8000f94:	701a      	strb	r2, [r3, #0]
	PS_message[3] = play_toggled ? PLAY : STOP;
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <Toggle_Control+0x3c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <Toggle_Control+0x2e>
 8000f9e:	227f      	movs	r2, #127	@ 0x7f
 8000fa0:	e000      	b.n	8000fa4 <Toggle_Control+0x30>
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <Toggle_Control+0x40>)
 8000fa6:	70da      	strb	r2, [r3, #3]

//	while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//	USBD_MIDI_SendPackets (&hUsbDeviceFS, PS_message, 4);
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000271 	.word	0x20000271
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	@ (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f008 f890 	bl	800910c <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	@ (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20005000 	.word	0x20005000
 8001018:	00000400 	.word	0x00000400
 800101c:	20000280 	.word	0x20000280
 8001020:	20000bc8 	.word	0x20000bc8

08001024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001030:	f7ff fff8 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480b      	ldr	r0, [pc, #44]	@ (8001064 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001036:	490c      	ldr	r1, [pc, #48]	@ (8001068 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001038:	4a0c      	ldr	r2, [pc, #48]	@ (800106c <LoopFillZerobss+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800104c:	4c09      	ldr	r4, [pc, #36]	@ (8001074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105a:	f008 f85d 	bl	8009118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800105e:	f7ff f8d1 	bl	8000204 <main>
  bx lr
 8001062:	4770      	bx	lr
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 800106c:	08009298 	.word	0x08009298
  ldr r2, =_sbss
 8001070:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001074:	20000bc4 	.word	0x20000bc4

08001078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC1_2_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_Init+0x28>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <HAL_Init+0x28>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 fd7b 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fbf8 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fd93 	bl	8001bf2 <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 fd5b 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000014 	.word	0x20000014
 8001100:	2000001c 	.word	0x2000001c
 8001104:	20000018 	.word	0x20000018

08001108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <HAL_IncTick+0x1c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <HAL_IncTick+0x20>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a03      	ldr	r2, [pc, #12]	@ (8001128 <HAL_IncTick+0x20>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	2000001c 	.word	0x2000001c
 8001128:	20000284 	.word	0x20000284

0800112c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b02      	ldr	r3, [pc, #8]	@ (800113c <HAL_GetTick+0x10>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	20000284 	.word	0x20000284

08001140 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0be      	b.n	80012e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116c:	2b00      	cmp	r3, #0
 800116e:	d109      	bne.n	8001184 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fbb6 	bl	80008f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 fbf1 	bl	800196c <ADC_ConversionStop_Disable>
 800118a:	4603      	mov	r3, r0
 800118c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 8099 	bne.w	80012ce <HAL_ADC_Init+0x18e>
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 8095 	bne.w	80012ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011ac:	f023 0302 	bic.w	r3, r3, #2
 80011b0:	f043 0202 	orr.w	r2, r3, #2
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7b1b      	ldrb	r3, [r3, #12]
 80011c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011d8:	d003      	beq.n	80011e2 <HAL_ADC_Init+0xa2>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <HAL_ADC_Init+0xa8>
 80011e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e6:	e000      	b.n	80011ea <HAL_ADC_Init+0xaa>
 80011e8:	2300      	movs	r3, #0
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7d1b      	ldrb	r3, [r3, #20]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d119      	bne.n	800122c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7b1b      	ldrb	r3, [r3, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d109      	bne.n	8001214 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	3b01      	subs	r3, #1
 8001206:	035a      	lsls	r2, r3, #13
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	e00b      	b.n	800122c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001218:	f043 0220 	orr.w	r2, r3, #32
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	430a      	orrs	r2, r1
 800123e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <HAL_ADC_Init+0x1a8>)
 8001248:	4013      	ands	r3, r2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	430b      	orrs	r3, r1
 8001252:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800125c:	d003      	beq.n	8001266 <HAL_ADC_Init+0x126>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d104      	bne.n	8001270 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	3b01      	subs	r3, #1
 800126c:	051b      	lsls	r3, r3, #20
 800126e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001276:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	430a      	orrs	r2, r1
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <HAL_ADC_Init+0x1ac>)
 800128c:	4013      	ands	r3, r2
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	429a      	cmp	r2, r3
 8001292:	d10b      	bne.n	80012ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129e:	f023 0303 	bic.w	r3, r3, #3
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012aa:	e018      	b.n	80012de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b0:	f023 0312 	bic.w	r3, r3, #18
 80012b4:	f043 0210 	orr.w	r2, r3, #16
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012cc:	e007      	b.n	80012de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d2:	f043 0210 	orr.w	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012de:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	ffe1f7fd 	.word	0xffe1f7fd
 80012ec:	ff1f0efe 	.word	0xff1f0efe

080012f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Start+0x1a>
 8001306:	2302      	movs	r3, #2
 8001308:	e098      	b.n	800143c <HAL_ADC_Start+0x14c>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fad0 	bl	80018b8 <ADC_Enable>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 8087 	bne.w	8001432 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a41      	ldr	r2, [pc, #260]	@ (8001444 <HAL_ADC_Start+0x154>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d105      	bne.n	800134e <HAL_ADC_Start+0x5e>
 8001342:	4b41      	ldr	r3, [pc, #260]	@ (8001448 <HAL_ADC_Start+0x158>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d115      	bne.n	800137a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001352:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001364:	2b00      	cmp	r3, #0
 8001366:	d026      	beq.n	80013b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001370:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001378:	e01d      	b.n	80013b6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a2f      	ldr	r2, [pc, #188]	@ (8001448 <HAL_ADC_Start+0x158>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d004      	beq.n	800139a <HAL_ADC_Start+0xaa>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2b      	ldr	r2, [pc, #172]	@ (8001444 <HAL_ADC_Start+0x154>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10d      	bne.n	80013b6 <HAL_ADC_Start+0xc6>
 800139a:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <HAL_ADC_Start+0x158>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c6:	f023 0206 	bic.w	r2, r3, #6
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013ce:	e002      	b.n	80013d6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f06f 0202 	mvn.w	r2, #2
 80013e6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013f2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013f6:	d113      	bne.n	8001420 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013fc:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <HAL_ADC_Start+0x154>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d105      	bne.n	800140e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_ADC_Start+0x158>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800140a:	2b00      	cmp	r3, #0
 800140c:	d108      	bne.n	8001420 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	e00c      	b.n	800143a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	e003      	b.n	800143a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40012800 	.word	0x40012800
 8001448:	40012400 	.word	0x40012400

0800144c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Stop+0x1a>
 8001462:	2302      	movs	r3, #2
 8001464:	e01a      	b.n	800149c <HAL_ADC_Stop+0x50>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fa7c 	bl	800196c <ADC_ConversionStop_Disable>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001482:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014ba:	f7ff fe37 	bl	800112c <HAL_GetTick>
 80014be:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d2:	f043 0220 	orr.w	r2, r3, #32
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0d3      	b.n	800168e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d131      	bne.n	8001558 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d12a      	bne.n	8001558 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001502:	e021      	b.n	8001548 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150a:	d01d      	beq.n	8001548 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <HAL_ADC_PollForConversion+0x7e>
 8001512:	f7ff fe0b 	bl	800112c <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d212      	bcs.n	8001548 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10b      	bne.n	8001548 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001534:	f043 0204 	orr.w	r2, r3, #4
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0a2      	b.n	800168e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0d6      	beq.n	8001504 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001556:	e070      	b.n	800163a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001558:	4b4f      	ldr	r3, [pc, #316]	@ (8001698 <HAL_ADC_PollForConversion+0x1f4>)
 800155a:	681c      	ldr	r4, [r3, #0]
 800155c:	2002      	movs	r0, #2
 800155e:	f002 ff03 	bl	8004368 <HAL_RCCEx_GetPeriphCLKFreq>
 8001562:	4603      	mov	r3, r0
 8001564:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6919      	ldr	r1, [r3, #16]
 800156e:	4b4b      	ldr	r3, [pc, #300]	@ (800169c <HAL_ADC_PollForConversion+0x1f8>)
 8001570:	400b      	ands	r3, r1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d118      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x104>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68d9      	ldr	r1, [r3, #12]
 800157c:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <HAL_ADC_PollForConversion+0x1fc>)
 800157e:	400b      	ands	r3, r1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x104>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6919      	ldr	r1, [r3, #16]
 800158a:	4b46      	ldr	r3, [pc, #280]	@ (80016a4 <HAL_ADC_PollForConversion+0x200>)
 800158c:	400b      	ands	r3, r1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d108      	bne.n	80015a4 <HAL_ADC_PollForConversion+0x100>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68d9      	ldr	r1, [r3, #12]
 8001598:	4b43      	ldr	r3, [pc, #268]	@ (80016a8 <HAL_ADC_PollForConversion+0x204>)
 800159a:	400b      	ands	r3, r1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_ADC_PollForConversion+0x100>
 80015a0:	2314      	movs	r3, #20
 80015a2:	e020      	b.n	80015e6 <HAL_ADC_PollForConversion+0x142>
 80015a4:	2329      	movs	r3, #41	@ 0x29
 80015a6:	e01e      	b.n	80015e6 <HAL_ADC_PollForConversion+0x142>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6919      	ldr	r1, [r3, #16]
 80015ae:	4b3d      	ldr	r3, [pc, #244]	@ (80016a4 <HAL_ADC_PollForConversion+0x200>)
 80015b0:	400b      	ands	r3, r1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <HAL_ADC_PollForConversion+0x120>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68d9      	ldr	r1, [r3, #12]
 80015bc:	4b3a      	ldr	r3, [pc, #232]	@ (80016a8 <HAL_ADC_PollForConversion+0x204>)
 80015be:	400b      	ands	r3, r1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00d      	beq.n	80015e0 <HAL_ADC_PollForConversion+0x13c>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6919      	ldr	r1, [r3, #16]
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <HAL_ADC_PollForConversion+0x208>)
 80015cc:	400b      	ands	r3, r1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_ADC_PollForConversion+0x140>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68d9      	ldr	r1, [r3, #12]
 80015d8:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <HAL_ADC_PollForConversion+0x208>)
 80015da:	400b      	ands	r3, r1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_PollForConversion+0x140>
 80015e0:	2354      	movs	r3, #84	@ 0x54
 80015e2:	e000      	b.n	80015e6 <HAL_ADC_PollForConversion+0x142>
 80015e4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015ec:	e021      	b.n	8001632 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d01a      	beq.n	800162c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_ADC_PollForConversion+0x168>
 80015fc:	f7ff fd96 	bl	800112c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d20f      	bcs.n	800162c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	d90b      	bls.n	800162c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001618:	f043 0204 	orr.w	r2, r3, #4
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e030      	b.n	800168e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	429a      	cmp	r2, r3
 8001638:	d8d9      	bhi.n	80015ee <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f06f 0212 	mvn.w	r2, #18
 8001642:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001648:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800165a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800165e:	d115      	bne.n	800168c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001664:	2b00      	cmp	r3, #0
 8001666:	d111      	bne.n	800168c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001678:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	20000014 	.word	0x20000014
 800169c:	24924924 	.word	0x24924924
 80016a0:	00924924 	.word	0x00924924
 80016a4:	12492492 	.word	0x12492492
 80016a8:	00492492 	.word	0x00492492
 80016ac:	00249249 	.word	0x00249249

080016b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x20>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e0dc      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x1da>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	d81c      	bhi.n	8001732 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	3b05      	subs	r3, #5
 800170a:	221f      	movs	r2, #31
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	4019      	ands	r1, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	3b05      	subs	r3, #5
 8001724:	fa00 f203 	lsl.w	r2, r0, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001730:	e03c      	b.n	80017ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b0c      	cmp	r3, #12
 8001738:	d81c      	bhi.n	8001774 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	3b23      	subs	r3, #35	@ 0x23
 800174c:	221f      	movs	r2, #31
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	4019      	ands	r1, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b23      	subs	r3, #35	@ 0x23
 8001766:	fa00 f203 	lsl.w	r2, r0, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	631a      	str	r2, [r3, #48]	@ 0x30
 8001772:	e01b      	b.n	80017ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	3b41      	subs	r3, #65	@ 0x41
 8001786:	221f      	movs	r2, #31
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	4019      	ands	r1, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b41      	subs	r3, #65	@ 0x41
 80017a0:	fa00 f203 	lsl.w	r2, r0, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d91c      	bls.n	80017ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68d9      	ldr	r1, [r3, #12]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	3b1e      	subs	r3, #30
 80017c6:	2207      	movs	r2, #7
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4019      	ands	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6898      	ldr	r0, [r3, #8]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	3b1e      	subs	r3, #30
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	e019      	b.n	8001822 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6919      	ldr	r1, [r3, #16]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	2207      	movs	r2, #7
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	4019      	ands	r1, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6898      	ldr	r0, [r3, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	fa00 f203 	lsl.w	r2, r0, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b10      	cmp	r3, #16
 8001828:	d003      	beq.n	8001832 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800182e:	2b11      	cmp	r3, #17
 8001830:	d132      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <HAL_ADC_ConfigChannel+0x1e4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d125      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d126      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001858:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b10      	cmp	r3, #16
 8001860:	d11a      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001862:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	0c9a      	lsrs	r2, r3, #18
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001878:	e002      	b.n	8001880 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3b01      	subs	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f9      	bne.n	800187a <HAL_ADC_ConfigChannel+0x1b2>
 8001886:	e007      	b.n	8001898 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	f043 0220 	orr.w	r2, r3, #32
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40012400 	.word	0x40012400
 80018b0:	20000014 	.word	0x20000014
 80018b4:	431bde83 	.word	0x431bde83

080018b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d040      	beq.n	8001958 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <ADC_Enable+0xac>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001968 <ADC_Enable+0xb0>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	0c9b      	lsrs	r3, r3, #18
 80018f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018f4:	e002      	b.n	80018fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f9      	bne.n	80018f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001902:	f7ff fc13 	bl	800112c <HAL_GetTick>
 8001906:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001908:	e01f      	b.n	800194a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800190a:	f7ff fc0f 	bl	800112c <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d918      	bls.n	800194a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d011      	beq.n	800194a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	f043 0210 	orr.w	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001936:	f043 0201 	orr.w	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e007      	b.n	800195a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d1d8      	bne.n	800190a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000014 	.word	0x20000014
 8001968:	431bde83 	.word	0x431bde83

0800196c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d12e      	bne.n	80019e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001996:	f7ff fbc9 	bl	800112c <HAL_GetTick>
 800199a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800199c:	e01b      	b.n	80019d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800199e:	f7ff fbc5 	bl	800112c <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d914      	bls.n	80019d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d10d      	bne.n	80019d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019be:	f043 0210 	orr.w	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ca:	f043 0201 	orr.w	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e007      	b.n	80019e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d0dc      	beq.n	800199e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4906      	ldr	r1, [pc, #24]	@ (8001a88 <__NVIC_EnableIRQ+0x34>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100

08001a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db0a      	blt.n	8001ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	490c      	ldr	r1, [pc, #48]	@ (8001ad8 <__NVIC_SetPriority+0x4c>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab4:	e00a      	b.n	8001acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4908      	ldr	r1, [pc, #32]	@ (8001adc <__NVIC_SetPriority+0x50>)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	761a      	strb	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	@ 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf28      	it	cs
 8001afe:	2304      	movcs	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d902      	bls.n	8001b10 <NVIC_EncodePriority+0x30>
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <NVIC_EncodePriority+0x32>
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	401a      	ands	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	4313      	orrs	r3, r2
         );
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3724      	adds	r7, #36	@ 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f7ff ff90 	bl	8001a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff2d 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb0:	f7ff ff42 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f7ff ff90 	bl	8001ae0 <NVIC_EncodePriority>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff5f 	bl	8001a8c <__NVIC_SetPriority>
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff35 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffa2 	bl	8001b44 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b08b      	sub	sp, #44	@ 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	e169      	b.n	8001ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c20:	2201      	movs	r2, #1
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 8158 	bne.w	8001eee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a9a      	ldr	r2, [pc, #616]	@ (8001eac <HAL_GPIO_Init+0x2a0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d05e      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c48:	4a98      	ldr	r2, [pc, #608]	@ (8001eac <HAL_GPIO_Init+0x2a0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d875      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c4e:	4a98      	ldr	r2, [pc, #608]	@ (8001eb0 <HAL_GPIO_Init+0x2a4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d058      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c54:	4a96      	ldr	r2, [pc, #600]	@ (8001eb0 <HAL_GPIO_Init+0x2a4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d86f      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c5a:	4a96      	ldr	r2, [pc, #600]	@ (8001eb4 <HAL_GPIO_Init+0x2a8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d052      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c60:	4a94      	ldr	r2, [pc, #592]	@ (8001eb4 <HAL_GPIO_Init+0x2a8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d869      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c66:	4a94      	ldr	r2, [pc, #592]	@ (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04c      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c6c:	4a92      	ldr	r2, [pc, #584]	@ (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d863      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c72:	4a92      	ldr	r2, [pc, #584]	@ (8001ebc <HAL_GPIO_Init+0x2b0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d046      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c78:	4a90      	ldr	r2, [pc, #576]	@ (8001ebc <HAL_GPIO_Init+0x2b0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d85d      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c7e:	2b12      	cmp	r3, #18
 8001c80:	d82a      	bhi.n	8001cd8 <HAL_GPIO_Init+0xcc>
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d859      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c86:	a201      	add	r2, pc, #4	@ (adr r2, 8001c8c <HAL_GPIO_Init+0x80>)
 8001c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8c:	08001d07 	.word	0x08001d07
 8001c90:	08001ce1 	.word	0x08001ce1
 8001c94:	08001cf3 	.word	0x08001cf3
 8001c98:	08001d35 	.word	0x08001d35
 8001c9c:	08001d3b 	.word	0x08001d3b
 8001ca0:	08001d3b 	.word	0x08001d3b
 8001ca4:	08001d3b 	.word	0x08001d3b
 8001ca8:	08001d3b 	.word	0x08001d3b
 8001cac:	08001d3b 	.word	0x08001d3b
 8001cb0:	08001d3b 	.word	0x08001d3b
 8001cb4:	08001d3b 	.word	0x08001d3b
 8001cb8:	08001d3b 	.word	0x08001d3b
 8001cbc:	08001d3b 	.word	0x08001d3b
 8001cc0:	08001d3b 	.word	0x08001d3b
 8001cc4:	08001d3b 	.word	0x08001d3b
 8001cc8:	08001d3b 	.word	0x08001d3b
 8001ccc:	08001d3b 	.word	0x08001d3b
 8001cd0:	08001ce9 	.word	0x08001ce9
 8001cd4:	08001cfd 	.word	0x08001cfd
 8001cd8:	4a79      	ldr	r2, [pc, #484]	@ (8001ec0 <HAL_GPIO_Init+0x2b4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cde:	e02c      	b.n	8001d3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e029      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	3304      	adds	r3, #4
 8001cee:	623b      	str	r3, [r7, #32]
          break;
 8001cf0:	e024      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	623b      	str	r3, [r7, #32]
          break;
 8001cfa:	e01f      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	330c      	adds	r3, #12
 8001d02:	623b      	str	r3, [r7, #32]
          break;
 8001d04:	e01a      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e013      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	611a      	str	r2, [r3, #16]
          break;
 8001d26:	e009      	b.n	8001d3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	615a      	str	r2, [r3, #20]
          break;
 8001d32:	e003      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e000      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          break;
 8001d3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	@ 0xff
 8001d40:	d801      	bhi.n	8001d46 <HAL_GPIO_Init+0x13a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	e001      	b.n	8001d4a <HAL_GPIO_Init+0x13e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2bff      	cmp	r3, #255	@ 0xff
 8001d50:	d802      	bhi.n	8001d58 <HAL_GPIO_Init+0x14c>
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	e002      	b.n	8001d5e <HAL_GPIO_Init+0x152>
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	3b08      	subs	r3, #8
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	210f      	movs	r1, #15
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	6a39      	ldr	r1, [r7, #32]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80b1 	beq.w	8001eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001da4:	4a48      	ldr	r2, [pc, #288]	@ (8001ec8 <HAL_GPIO_Init+0x2bc>)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a40      	ldr	r2, [pc, #256]	@ (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d013      	beq.n	8001df8 <HAL_GPIO_Init+0x1ec>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ed0 <HAL_GPIO_Init+0x2c4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00d      	beq.n	8001df4 <HAL_GPIO_Init+0x1e8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a3e      	ldr	r2, [pc, #248]	@ (8001ed4 <HAL_GPIO_Init+0x2c8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d007      	beq.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_GPIO_Init+0x1e0>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e006      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001dec:	2304      	movs	r3, #4
 8001dee:	e004      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	4093      	lsls	r3, r2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e0a:	492f      	ldr	r1, [pc, #188]	@ (8001ec8 <HAL_GPIO_Init+0x2bc>)
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e24:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	492c      	ldr	r1, [pc, #176]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e32:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4928      	ldr	r1, [pc, #160]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e4c:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	4922      	ldr	r1, [pc, #136]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e5a:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	491e      	ldr	r1, [pc, #120]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e74:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4918      	ldr	r1, [pc, #96]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e82:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	4914      	ldr	r1, [pc, #80]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d021      	beq.n	8001ee0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	490e      	ldr	r1, [pc, #56]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e021      	b.n	8001eee <HAL_GPIO_Init+0x2e2>
 8001eaa:	bf00      	nop
 8001eac:	10320000 	.word	0x10320000
 8001eb0:	10310000 	.word	0x10310000
 8001eb4:	10220000 	.word	0x10220000
 8001eb8:	10210000 	.word	0x10210000
 8001ebc:	10120000 	.word	0x10120000
 8001ec0:	10110000 	.word	0x10110000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40010800 	.word	0x40010800
 8001ed0:	40010c00 	.word	0x40010c00
 8001ed4:	40011000 	.word	0x40011000
 8001ed8:	40011400 	.word	0x40011400
 8001edc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <HAL_GPIO_Init+0x304>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	4909      	ldr	r1, [pc, #36]	@ (8001f10 <HAL_GPIO_Init+0x304>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f47f ae8e 	bne.w	8001c20 <HAL_GPIO_Init+0x14>
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	372c      	adds	r7, #44	@ 0x2c
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e001      	b.n	8001f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0e8      	b.n	8002126 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d106      	bne.n	8001f6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f006 fd6d 	bl	8008a48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 fec4 	bl	8004d0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f90:	f002 fe9a 	bl	8004cc8 <USB_CoreInit>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0bf      	b.n	8002126 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 fec8 	bl	8004d42 <USB_SetCurrentMode>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0b0      	b.n	8002126 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e03e      	b.n	8002048 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3311      	adds	r3, #17
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	3310      	adds	r3, #16
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	3313      	adds	r3, #19
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	3320      	adds	r3, #32
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	440b      	add	r3, r1
 8002028:	3324      	adds	r3, #36	@ 0x24
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	3301      	adds	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	791b      	ldrb	r3, [r3, #4]
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	429a      	cmp	r2, r3
 8002050:	d3bb      	bcc.n	8001fca <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	e044      	b.n	80020e2 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	3301      	adds	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	791b      	ldrb	r3, [r3, #4]
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d3b5      	bcc.n	8002058 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f6:	f002 fe30 	bl	8004d5a <USB_DevInit>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e00c      	b.n	8002126 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f005 f8af 	bl	8007282 <USB_DevDisconnect>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_PCD_Start+0x16>
 8002140:	2302      	movs	r3, #2
 8002142:	e016      	b.n	8002172 <HAL_PCD_Start+0x44>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fdc6 	bl	8004ce2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002156:	2101      	movs	r1, #1
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f006 feca 	bl	8008ef2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f005 f883 	bl	800726e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b088      	sub	sp, #32
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f005 f885 	bl	8007296 <USB_ReadInterrupts>
 800218c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fb1a 	bl	80027d2 <PCD_EP_ISR_Handler>

    return;
 800219e:	e119      	b.n	80023d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d013      	beq.n	80021d2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021bc:	b292      	uxth	r2, r2
 80021be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f006 fcbb 	bl	8008b3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80021c8:	2100      	movs	r1, #0
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f905 	bl	80023da <HAL_PCD_SetAddress>

    return;
 80021d0:	e100      	b.n	80023d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00c      	beq.n	80021f6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021ee:	b292      	uxth	r2, r2
 80021f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80021f4:	e0ee      	b.n	80023d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00c      	beq.n	800221a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002208:	b29a      	uxth	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002212:	b292      	uxth	r2, r2
 8002214:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002218:	e0dc      	b.n	80023d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d027      	beq.n	8002274 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0204 	bic.w	r2, r2, #4
 8002236:	b292      	uxth	r2, r2
 8002238:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002244:	b29a      	uxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0208 	bic.w	r2, r2, #8
 800224e:	b292      	uxth	r2, r2
 8002250:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f006 fcab 	bl	8008bb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002262:	b29a      	uxth	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800226c:	b292      	uxth	r2, r2
 800226e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002272:	e0af      	b.n	80023d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8083 	beq.w	8002386 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002280:	2300      	movs	r3, #0
 8002282:	77fb      	strb	r3, [r7, #31]
 8002284:	e010      	b.n	80022a8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	7ffb      	ldrb	r3, [r7, #31]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	441a      	add	r2, r3
 8002292:	7ffb      	ldrb	r3, [r7, #31]
 8002294:	8812      	ldrh	r2, [r2, #0]
 8002296:	b292      	uxth	r2, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	3320      	adds	r3, #32
 800229c:	443b      	add	r3, r7
 800229e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	3301      	adds	r3, #1
 80022a6:	77fb      	strb	r3, [r7, #31]
 80022a8:	7ffb      	ldrb	r3, [r7, #31]
 80022aa:	2b07      	cmp	r3, #7
 80022ac:	d9eb      	bls.n	8002286 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	b292      	uxth	r2, r2
 80022c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	b292      	uxth	r2, r2
 80022da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80022de:	bf00      	nop
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f6      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002304:	b292      	uxth	r2, r2
 8002306:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800230a:	2300      	movs	r3, #0
 800230c:	77fb      	strb	r3, [r7, #31]
 800230e:	e00f      	b.n	8002330 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002310:	7ffb      	ldrb	r3, [r7, #31]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	4611      	mov	r1, r2
 8002318:	7ffa      	ldrb	r2, [r7, #31]
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	440a      	add	r2, r1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	3320      	adds	r3, #32
 8002322:	443b      	add	r3, r7
 8002324:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002328:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800232a:	7ffb      	ldrb	r3, [r7, #31]
 800232c:	3301      	adds	r3, #1
 800232e:	77fb      	strb	r3, [r7, #31]
 8002330:	7ffb      	ldrb	r3, [r7, #31]
 8002332:	2b07      	cmp	r3, #7
 8002334:	d9ec      	bls.n	8002310 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0208 	orr.w	r2, r2, #8
 8002348:	b292      	uxth	r2, r2
 800234a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002356:	b29a      	uxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002360:	b292      	uxth	r2, r2
 8002362:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0204 	orr.w	r2, r2, #4
 8002378:	b292      	uxth	r2, r2
 800237a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f006 fbfc 	bl	8008b7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002384:	e026      	b.n	80023d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00f      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002398:	b29a      	uxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023a2:	b292      	uxth	r2, r2
 80023a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f006 fbba 	bl	8008b22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80023ae:	e011      	b.n	80023d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023cc:	b292      	uxth	r2, r2
 80023ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80023d2:	bf00      	nop
  }
}
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_PCD_SetAddress+0x1a>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e012      	b.n	800241a <HAL_PCD_SetAddress+0x40>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f004 ff1c 	bl	8007248 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	4608      	mov	r0, r1
 800242c:	4611      	mov	r1, r2
 800242e:	461a      	mov	r2, r3
 8002430:	4603      	mov	r3, r0
 8002432:	70fb      	strb	r3, [r7, #3]
 8002434:	460b      	mov	r3, r1
 8002436:	803b      	strh	r3, [r7, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002444:	2b00      	cmp	r3, #0
 8002446:	da0e      	bge.n	8002466 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	f003 0207 	and.w	r2, r3, #7
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	3310      	adds	r3, #16
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	705a      	strb	r2, [r3, #1]
 8002464:	e00e      	b.n	8002484 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	f003 0207 	and.w	r2, r3, #7
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	b2da      	uxtb	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002490:	883a      	ldrh	r2, [r7, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	78ba      	ldrb	r2, [r7, #2]
 800249a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800249c:	78bb      	ldrb	r3, [r7, #2]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d102      	bne.n	80024a8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_PCD_EP_Open+0x94>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e00e      	b.n	80024d4 <HAL_PCD_EP_Open+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68f9      	ldr	r1, [r7, #12]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 fc65 	bl	8004d94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80024d2:	7afb      	ldrb	r3, [r7, #11]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da0e      	bge.n	800250e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	f003 0207 	and.w	r2, r3, #7
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	3310      	adds	r3, #16
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	705a      	strb	r2, [r3, #1]
 800250c:	e00e      	b.n	800252c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	f003 0207 	and.w	r2, r3, #7
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	b2da      	uxtb	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_PCD_EP_Close+0x6a>
 8002542:	2302      	movs	r3, #2
 8002544:	e00e      	b.n	8002564 <HAL_PCD_EP_Close+0x88>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	4618      	mov	r0, r3
 8002556:	f002 ffdd 	bl	8005514 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	460b      	mov	r3, r1
 800257a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800257c:	7afb      	ldrb	r3, [r7, #11]
 800257e:	f003 0207 	and.w	r2, r3, #7
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2200      	movs	r2, #0
 80025aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ac:	7afb      	ldrb	r3, [r7, #11]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6979      	ldr	r1, [r7, #20]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 f994 	bl	80058ec <USB_EPStartXfer>

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 0207 	and.w	r2, r3, #7
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80025f0:	681b      	ldr	r3, [r3, #0]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	460b      	mov	r3, r1
 800260a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260c:	7afb      	ldrb	r3, [r7, #11]
 800260e:	f003 0207 	and.w	r2, r3, #7
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	3310      	adds	r3, #16
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2201      	movs	r2, #1
 8002646:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002648:	7afb      	ldrb	r3, [r7, #11]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	b2da      	uxtb	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6979      	ldr	r1, [r7, #20]
 800265a:	4618      	mov	r0, r3
 800265c:	f003 f946 	bl	80058ec <USB_EPStartXfer>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	7912      	ldrb	r2, [r2, #4]
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e04c      	b.n	8002722 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268c:	2b00      	cmp	r3, #0
 800268e:	da0e      	bge.n	80026ae <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	f003 0207 	and.w	r2, r3, #7
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	3310      	adds	r3, #16
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]
 80026ac:	e00c      	b.n	80026c8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_PCD_EP_SetStall+0x7e>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e01c      	b.n	8002722 <HAL_PCD_EP_SetStall+0xb8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f004 fca9 	bl	800704e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	2b00      	cmp	r3, #0
 8002704:	d108      	bne.n	8002718 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f004 fdce 	bl	80072b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	7912      	ldrb	r2, [r2, #4]
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e040      	b.n	80027ca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	da0e      	bge.n	800276e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	f003 0207 	and.w	r2, r3, #7
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	3310      	adds	r3, #16
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	705a      	strb	r2, [r3, #1]
 800276c:	e00e      	b.n	800278c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	f003 0207 	and.w	r2, r3, #7
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	b2da      	uxtb	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_PCD_EP_ClrStall+0x82>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e00e      	b.n	80027ca <HAL_PCD_EP_ClrStall+0xa0>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 fc97 	bl	80070ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b096      	sub	sp, #88	@ 0x58
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027da:	e3bb      	b.n	8002f54 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80027f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 8175 	bne.w	8002aea <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002800:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	d14e      	bne.n	80028aa <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800281c:	81fb      	strh	r3, [r7, #14]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	89fb      	ldrh	r3, [r7, #14]
 8002824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282c:	b29b      	uxth	r3, r3
 800282e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3310      	adds	r3, #16
 8002834:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	3302      	adds	r3, #2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	4413      	add	r3, r2
 8002854:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800285e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002860:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	441a      	add	r2, r3
 800286c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002870:	2100      	movs	r1, #0
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f006 f93b 	bl	8008aee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7b5b      	ldrb	r3, [r3, #13]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8368 	beq.w	8002f54 <PCD_EP_ISR_Handler+0x782>
 8002884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 8363 	bne.w	8002f54 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7b5b      	ldrb	r3, [r3, #13]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002898:	b2da      	uxtb	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	735a      	strb	r2, [r3, #13]
 80028a8:	e354      	b.n	8002f54 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028b0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80028c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d034      	beq.n	8002932 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	3306      	adds	r3, #6
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80028fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002900:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002904:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002906:	b29b      	uxth	r3, r3
 8002908:	f004 fd24 	bl	8007354 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29a      	uxth	r2, r3
 8002914:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002918:	4013      	ands	r3, r2
 800291a:	823b      	strh	r3, [r7, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	8a3a      	ldrh	r2, [r7, #16]
 8002922:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002926:	b292      	uxth	r2, r2
 8002928:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f006 f8b2 	bl	8008a94 <HAL_PCD_SetupStageCallback>
 8002930:	e310      	b.n	8002f54 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002932:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002936:	2b00      	cmp	r3, #0
 8002938:	f280 830c 	bge.w	8002f54 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29a      	uxth	r2, r3
 8002944:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002948:	4013      	ands	r3, r2
 800294a:	83fb      	strh	r3, [r7, #30]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	8bfa      	ldrh	r2, [r7, #30]
 8002952:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002956:	b292      	uxth	r2, r2
 8002958:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	3306      	adds	r3, #6
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002984:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d019      	beq.n	80029c2 <PCD_EP_ISR_Handler+0x1f0>
 800298e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299c:	6959      	ldr	r1, [r3, #20]
 800299e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80029a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f004 fcd4 	bl	8007354 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80029ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	441a      	add	r2, r3
 80029b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029ba:	2100      	movs	r1, #0
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f006 f87b 	bl	8008ab8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80029cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 82bd 	bne.w	8002f54 <PCD_EP_ISR_Handler+0x782>
 80029da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80029e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029e6:	f000 82b5 	beq.w	8002f54 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a20:	d91d      	bls.n	8002a5e <PCD_EP_ISR_Handler+0x28c>
 8002a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <PCD_EP_ISR_Handler+0x26a>
 8002a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	029b      	lsls	r3, r3, #10
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	e026      	b.n	8002aac <PCD_EP_ISR_Handler+0x2da>
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <PCD_EP_ISR_Handler+0x2aa>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	801a      	strh	r2, [r3, #0]
 8002a7a:	e017      	b.n	8002aac <PCD_EP_ISR_Handler+0x2da>
 8002a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <PCD_EP_ISR_Handler+0x2c4>
 8002a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a92:	3301      	adds	r3, #1
 8002a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	029b      	lsls	r3, r3, #10
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002abc:	827b      	strh	r3, [r7, #18]
 8002abe:	8a7b      	ldrh	r3, [r7, #18]
 8002ac0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002ac4:	827b      	strh	r3, [r7, #18]
 8002ac6:	8a7b      	ldrh	r3, [r7, #18]
 8002ac8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002acc:	827b      	strh	r3, [r7, #18]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	8a7b      	ldrh	r3, [r7, #18]
 8002ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	8013      	strh	r3, [r2, #0]
 8002ae8:	e234      	b.n	8002f54 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002afe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f280 80fc 	bge.w	8002d00 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b1e:	4013      	ands	r3, r2
 8002b20:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002b36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b3e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b56:	7b1b      	ldrb	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d125      	bne.n	8002ba8 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3306      	adds	r3, #6
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b84:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002b88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8092 	beq.w	8002cb6 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b98:	6959      	ldr	r1, [r3, #20]
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9c:	88da      	ldrh	r2, [r3, #6]
 8002b9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ba2:	f004 fbd7 	bl	8007354 <USB_ReadPMA>
 8002ba6:	e086      	b.n	8002cb6 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002baa:	78db      	ldrb	r3, [r3, #3]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d10a      	bne.n	8002bc6 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002bb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f9d9 	bl	8002f70 <HAL_PCD_EP_DB_Receive>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002bc4:	e077      	b.n	8002cb6 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002be0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	441a      	add	r2, r3
 8002bf2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d024      	beq.n	8002c6e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c4c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002c50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02e      	beq.n	8002cb6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5e:	6959      	ldr	r1, [r3, #20]
 8002c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c62:	891a      	ldrh	r2, [r3, #8]
 8002c64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c68:	f004 fb74 	bl	8007354 <USB_ReadPMA>
 8002c6c:	e023      	b.n	8002cb6 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	3306      	adds	r3, #6
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c96:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002c9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca8:	6959      	ldr	r1, [r3, #20]
 8002caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cac:	895a      	ldrh	r2, [r3, #10]
 8002cae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cb2:	f004 fb4f 	bl	8007354 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cbe:	441a      	add	r2, r3
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ccc:	441a      	add	r2, r3
 8002cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <PCD_EP_ISR_Handler+0x514>
 8002cda:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d206      	bcs.n	8002cf4 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f005 fee3 	bl	8008ab8 <HAL_PCD_DataOutStageCallback>
 8002cf2:	e005      	b.n	8002d00 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 fdf6 	bl	80058ec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8123 	beq.w	8002f54 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002d0e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	3310      	adds	r3, #16
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d3c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d60:	78db      	ldrb	r3, [r3, #3]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	f040 80a2 	bne.w	8002eac <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d70:	7b1b      	ldrb	r3, [r3, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8093 	beq.w	8002e9e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d046      	beq.n	8002e12 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d126      	bne.n	8002dda <PCD_EP_ISR_Handler+0x608>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	4413      	add	r3, r2
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	011a      	lsls	r2, r3, #4
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	4413      	add	r3, r2
 8002dae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002db2:	623b      	str	r3, [r7, #32]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	801a      	strh	r2, [r3, #0]
 8002dd8:	e061      	b.n	8002e9e <PCD_EP_ISR_Handler+0x6cc>
 8002dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ddc:	785b      	ldrb	r3, [r3, #1]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d15d      	bne.n	8002e9e <PCD_EP_ISR_Handler+0x6cc>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df6:	4413      	add	r3, r2
 8002df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	011a      	lsls	r2, r3, #4
 8002e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e02:	4413      	add	r3, r2
 8002e04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	801a      	strh	r2, [r3, #0]
 8002e10:	e045      	b.n	8002e9e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d126      	bne.n	8002e6e <PCD_EP_ISR_Handler+0x69c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e34:	4413      	add	r3, r2
 8002e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	011a      	lsls	r2, r3, #4
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e40:	4413      	add	r3, r2
 8002e42:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e46:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e56:	801a      	strh	r2, [r3, #0]
 8002e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	801a      	strh	r2, [r3, #0]
 8002e6c:	e017      	b.n	8002e9e <PCD_EP_ISR_Handler+0x6cc>
 8002e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e70:	785b      	ldrb	r3, [r3, #1]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d113      	bne.n	8002e9e <PCD_EP_ISR_Handler+0x6cc>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e84:	4413      	add	r3, r2
 8002e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	011a      	lsls	r2, r3, #4
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e90:	4413      	add	r3, r2
 8002e92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f005 fe22 	bl	8008aee <HAL_PCD_DataInStageCallback>
 8002eaa:	e053      	b.n	8002f54 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002eac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d146      	bne.n	8002f46 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d907      	bls.n	8002f00 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002ef8:	1ad2      	subs	r2, r2, r3
 8002efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efc:	619a      	str	r2, [r3, #24]
 8002efe:	e002      	b.n	8002f06 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f005 fdea 	bl	8008aee <HAL_PCD_DataInStageCallback>
 8002f1a:	e01b      	b.n	8002f54 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f24:	441a      	add	r2, r3
 8002f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f28:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f32:	441a      	add	r2, r3
 8002f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f36:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 fcd4 	bl	80058ec <USB_EPStartXfer>
 8002f44:	e006      	b.n	8002f54 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002f46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f91b 	bl	800318a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	b21b      	sxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f6ff ac3b 	blt.w	80027dc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3758      	adds	r7, #88	@ 0x58
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d07e      	beq.n	8003086 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	8b7b      	ldrh	r3, [r7, #26]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d306      	bcc.n	8002fca <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	699a      	ldr	r2, [r3, #24]
 8002fc0:	8b7b      	ldrh	r3, [r7, #26]
 8002fc2:	1ad2      	subs	r2, r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	619a      	str	r2, [r3, #24]
 8002fc8:	e002      	b.n	8002fd0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d123      	bne.n	8003020 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff2:	833b      	strh	r3, [r7, #24]
 8002ff4:	8b3b      	ldrh	r3, [r7, #24]
 8002ff6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ffa:	833b      	strh	r3, [r7, #24]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	8b3b      	ldrh	r3, [r7, #24]
 800300c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800301c:	b29b      	uxth	r3, r3
 800301e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01f      	beq.n	800306a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003044:	82fb      	strh	r3, [r7, #22]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	441a      	add	r2, r3
 8003054:	8afb      	ldrh	r3, [r7, #22]
 8003056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800305a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800305e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003062:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003066:	b29b      	uxth	r3, r3
 8003068:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800306a:	8b7b      	ldrh	r3, [r7, #26]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8087 	beq.w	8003180 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6959      	ldr	r1, [r3, #20]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	891a      	ldrh	r2, [r3, #8]
 800307e:	8b7b      	ldrh	r3, [r7, #26]
 8003080:	f004 f968 	bl	8007354 <USB_ReadPMA>
 8003084:	e07c      	b.n	8003180 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	3306      	adds	r3, #6
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	8b7b      	ldrh	r3, [r7, #26]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d306      	bcc.n	80030c8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	8b7b      	ldrh	r3, [r7, #26]
 80030c0:	1ad2      	subs	r2, r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	619a      	str	r2, [r3, #24]
 80030c6:	e002      	b.n	80030ce <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2200      	movs	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d123      	bne.n	800311e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f0:	83fb      	strh	r3, [r7, #30]
 80030f2:	8bfb      	ldrh	r3, [r7, #30]
 80030f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030f8:	83fb      	strh	r3, [r7, #30]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	441a      	add	r2, r3
 8003108:	8bfb      	ldrh	r3, [r7, #30]
 800310a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800310e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800311a:	b29b      	uxth	r3, r3
 800311c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11f      	bne.n	8003168 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800313e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003142:	83bb      	strh	r3, [r7, #28]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	8bbb      	ldrh	r3, [r7, #28]
 8003154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800315c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003160:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003164:	b29b      	uxth	r3, r3
 8003166:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003168:	8b7b      	ldrh	r3, [r7, #26]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6959      	ldr	r1, [r3, #20]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	895a      	ldrh	r2, [r3, #10]
 800317a:	8b7b      	ldrh	r3, [r7, #26]
 800317c:	f004 f8ea 	bl	8007354 <USB_ReadPMA>
    }
  }

  return count;
 8003180:	8b7b      	ldrh	r3, [r7, #26]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b0a4      	sub	sp, #144	@ 0x90
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	4613      	mov	r3, r2
 8003196:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 81dd 	beq.w	800355e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	3302      	adds	r3, #2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031cc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031d8:	429a      	cmp	r2, r3
 80031da:	d907      	bls.n	80031ec <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	619a      	str	r2, [r3, #24]
 80031ea:	e002      	b.n	80031f2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 80b9 	bne.w	800336e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d126      	bne.n	8003252 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003212:	b29b      	uxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003218:	4413      	add	r3, r2
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	011a      	lsls	r2, r3, #4
 8003222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003224:	4413      	add	r3, r2
 8003226:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800322a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003236:	b29a      	uxth	r2, r3
 8003238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323a:	801a      	strh	r2, [r3, #0]
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324a:	b29a      	uxth	r2, r3
 800324c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	e01a      	b.n	8003288 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	785b      	ldrb	r3, [r3, #1]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d116      	bne.n	8003288 <HAL_PCD_EP_DB_Transmit+0xfe>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003268:	b29b      	uxth	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326e:	4413      	add	r3, r2
 8003270:	637b      	str	r3, [r7, #52]	@ 0x34
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	011a      	lsls	r2, r3, #4
 8003278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327a:	4413      	add	r3, r2
 800327c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003280:	633b      	str	r3, [r7, #48]	@ 0x30
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	2200      	movs	r2, #0
 8003286:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	785b      	ldrb	r3, [r3, #1]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d126      	bne.n	80032e4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	4413      	add	r3, r2
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	011a      	lsls	r2, r3, #4
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032dc:	b29a      	uxth	r2, r3
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	801a      	strh	r2, [r3, #0]
 80032e2:	e017      	b.n	8003314 <HAL_PCD_EP_DB_Transmit+0x18a>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d113      	bne.n	8003314 <HAL_PCD_EP_DB_Transmit+0x18a>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	4413      	add	r3, r2
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	011a      	lsls	r2, r3, #4
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	4413      	add	r3, r2
 8003308:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800330c:	623b      	str	r3, [r7, #32]
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2200      	movs	r2, #0
 8003312:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f005 fbe7 	bl	8008aee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 82fc 	beq.w	8003924 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003346:	82fb      	strh	r3, [r7, #22]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	441a      	add	r2, r3
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800335c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003360:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003368:	b29b      	uxth	r3, r3
 800336a:	8013      	strh	r3, [r2, #0]
 800336c:	e2da      	b.n	8003924 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d021      	beq.n	80033bc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800338e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003392:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80033a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	f040 82ae 	bne.w	8003924 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033d0:	441a      	add	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033de:	441a      	add	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6a1a      	ldr	r2, [r3, #32]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d30b      	bcc.n	8003408 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6a1a      	ldr	r2, [r3, #32]
 80033fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003400:	1ad2      	subs	r2, r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	621a      	str	r2, [r3, #32]
 8003406:	e017      	b.n	8003438 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003410:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003414:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003420:	e00a      	b.n	8003438 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2200      	movs	r2, #0
 8003436:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d165      	bne.n	800350c <HAL_PCD_EP_DB_Transmit+0x382>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003454:	4413      	add	r3, r2
 8003456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	011a      	lsls	r2, r3, #4
 800345e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003460:	4413      	add	r3, r2
 8003462:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003466:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003472:	b29a      	uxth	r2, r3
 8003474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003476:	801a      	strh	r2, [r3, #0]
 8003478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800347c:	2b3e      	cmp	r3, #62	@ 0x3e
 800347e:	d91d      	bls.n	80034bc <HAL_PCD_EP_DB_Transmit+0x332>
 8003480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003488:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <HAL_PCD_EP_DB_Transmit+0x310>
 8003494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003496:	3b01      	subs	r3, #1
 8003498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800349a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	029b      	lsls	r3, r3, #10
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	4313      	orrs	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b8:	801a      	strh	r2, [r3, #0]
 80034ba:	e044      	b.n	8003546 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80034bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_PCD_EP_DB_Transmit+0x350>
 80034c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d6:	801a      	strh	r2, [r3, #0]
 80034d8:	e035      	b.n	8003546 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80034da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80034ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034f0:	3301      	adds	r3, #1
 80034f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	029b      	lsls	r3, r3, #10
 8003500:	b29b      	uxth	r3, r3
 8003502:	4313      	orrs	r3, r2
 8003504:	b29a      	uxth	r2, r3
 8003506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	e01c      	b.n	8003546 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	785b      	ldrb	r3, [r3, #1]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d118      	bne.n	8003546 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	647b      	str	r3, [r7, #68]	@ 0x44
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003522:	b29b      	uxth	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003528:	4413      	add	r3, r2
 800352a:	647b      	str	r3, [r7, #68]	@ 0x44
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	011a      	lsls	r2, r3, #4
 8003532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003534:	4413      	add	r3, r2
 8003536:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800353a:	643b      	str	r3, [r7, #64]	@ 0x40
 800353c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003540:	b29a      	uxth	r2, r3
 8003542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003544:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6959      	ldr	r1, [r3, #20]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	891a      	ldrh	r2, [r3, #8]
 8003552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003556:	b29b      	uxth	r3, r3
 8003558:	f003 feb7 	bl	80072ca <USB_WritePMA>
 800355c:	e1e2      	b.n	8003924 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003566:	b29b      	uxth	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	3306      	adds	r3, #6
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003586:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003592:	429a      	cmp	r2, r3
 8003594:	d307      	bcc.n	80035a6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800359e:	1ad2      	subs	r2, r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	619a      	str	r2, [r3, #24]
 80035a4:	e002      	b.n	80035ac <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f040 80c0 	bne.w	8003736 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	785b      	ldrb	r3, [r3, #1]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d126      	bne.n	800360c <HAL_PCD_EP_DB_Transmit+0x482>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035d2:	4413      	add	r3, r2
 80035d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	011a      	lsls	r2, r3, #4
 80035dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035de:	4413      	add	r3, r2
 80035e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003604:	b29a      	uxth	r2, r3
 8003606:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003608:	801a      	strh	r2, [r3, #0]
 800360a:	e01a      	b.n	8003642 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	785b      	ldrb	r3, [r3, #1]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d116      	bne.n	8003642 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	667b      	str	r3, [r7, #100]	@ 0x64
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003622:	b29b      	uxth	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003628:	4413      	add	r3, r2
 800362a:	667b      	str	r3, [r7, #100]	@ 0x64
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	011a      	lsls	r2, r3, #4
 8003632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003634:	4413      	add	r3, r2
 8003636:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800363a:	663b      	str	r3, [r7, #96]	@ 0x60
 800363c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800363e:	2200      	movs	r2, #0
 8003640:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	677b      	str	r3, [r7, #116]	@ 0x74
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d12b      	bne.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003664:	4413      	add	r3, r2
 8003666:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	011a      	lsls	r2, r3, #4
 800366e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003670:	4413      	add	r3, r2
 8003672:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003676:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800367a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003686:	b29a      	uxth	r2, r3
 8003688:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800368c:	801a      	strh	r2, [r3, #0]
 800368e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369e:	b29a      	uxth	r2, r3
 80036a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	e017      	b.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	785b      	ldrb	r3, [r3, #1]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d113      	bne.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036be:	4413      	add	r3, r2
 80036c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	011a      	lsls	r2, r3, #4
 80036c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ca:	4413      	add	r3, r2
 80036cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80036d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036d4:	2200      	movs	r2, #0
 80036d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	4619      	mov	r1, r3
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f005 fa05 	bl	8008aee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f040 811a 	bne.w	8003924 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800370a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	441a      	add	r2, r3
 800371c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003728:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800372c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003730:	b29b      	uxth	r3, r3
 8003732:	8013      	strh	r3, [r2, #0]
 8003734:	e0f6      	b.n	8003924 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d121      	bne.n	8003784 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	441a      	add	r2, r3
 800376c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003778:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800377c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003780:	b29b      	uxth	r3, r3
 8003782:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800378a:	2b01      	cmp	r3, #1
 800378c:	f040 80ca 	bne.w	8003924 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003798:	441a      	add	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037a6:	441a      	add	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d30b      	bcc.n	80037d0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c8:	1ad2      	subs	r2, r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	621a      	str	r2, [r3, #32]
 80037ce:	e017      	b.n	8003800 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d108      	bne.n	80037ea <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80037d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80037e8:	e00a      	b.n	8003800 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2200      	movs	r2, #0
 80037f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	657b      	str	r3, [r7, #84]	@ 0x54
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	785b      	ldrb	r3, [r3, #1]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d165      	bne.n	80038da <HAL_PCD_EP_DB_Transmit+0x750>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800381c:	b29b      	uxth	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003822:	4413      	add	r3, r2
 8003824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	011a      	lsls	r2, r3, #4
 800382c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800382e:	4413      	add	r3, r2
 8003830:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003834:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003840:	b29a      	uxth	r2, r3
 8003842:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003844:	801a      	strh	r2, [r3, #0]
 8003846:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800384a:	2b3e      	cmp	r3, #62	@ 0x3e
 800384c:	d91d      	bls.n	800388a <HAL_PCD_EP_DB_Transmit+0x700>
 800384e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003862:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003864:	3b01      	subs	r3, #1
 8003866:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29a      	uxth	r2, r3
 800386e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003870:	b29b      	uxth	r3, r3
 8003872:	029b      	lsls	r3, r3, #10
 8003874:	b29b      	uxth	r3, r3
 8003876:	4313      	orrs	r3, r2
 8003878:	b29b      	uxth	r3, r3
 800387a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003882:	b29a      	uxth	r2, r3
 8003884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	e041      	b.n	800390e <HAL_PCD_EP_DB_Transmit+0x784>
 800388a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003892:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800389c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	e032      	b.n	800390e <HAL_PCD_EP_DB_Transmit+0x784>
 80038a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_PCD_EP_DB_Transmit+0x738>
 80038bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038be:	3301      	adds	r3, #1
 80038c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	029b      	lsls	r3, r3, #10
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e019      	b.n	800390e <HAL_PCD_EP_DB_Transmit+0x784>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d115      	bne.n	800390e <HAL_PCD_EP_DB_Transmit+0x784>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f0:	4413      	add	r3, r2
 80038f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	011a      	lsls	r2, r3, #4
 80038fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fc:	4413      	add	r3, r2
 80038fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003902:	653b      	str	r3, [r7, #80]	@ 0x50
 8003904:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003908:	b29a      	uxth	r2, r3
 800390a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800390c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6959      	ldr	r1, [r3, #20]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	895a      	ldrh	r2, [r3, #10]
 800391a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800391e:	b29b      	uxth	r3, r3
 8003920:	f003 fcd3 	bl	80072ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800393a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800393e:	82bb      	strh	r3, [r7, #20]
 8003940:	8abb      	ldrh	r3, [r7, #20]
 8003942:	f083 0310 	eor.w	r3, r3, #16
 8003946:	82bb      	strh	r3, [r7, #20]
 8003948:	8abb      	ldrh	r3, [r7, #20]
 800394a:	f083 0320 	eor.w	r3, r3, #32
 800394e:	82bb      	strh	r3, [r7, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	8abb      	ldrh	r3, [r7, #20]
 8003960:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800396c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003970:	b29b      	uxth	r3, r3
 8003972:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3790      	adds	r7, #144	@ 0x90
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800397e:	b480      	push	{r7}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	817b      	strh	r3, [r7, #10]
 800398c:	4613      	mov	r3, r2
 800398e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003990:	897b      	ldrh	r3, [r7, #10]
 8003992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00b      	beq.n	80039b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800399c:	897b      	ldrh	r3, [r7, #10]
 800399e:	f003 0207 	and.w	r2, r3, #7
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	3310      	adds	r3, #16
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e009      	b.n	80039c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039b4:	897a      	ldrh	r2, [r7, #10]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4413      	add	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80039c8:	893b      	ldrh	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d107      	bne.n	80039de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2200      	movs	r2, #0
 80039d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	80da      	strh	r2, [r3, #6]
 80039dc:	e00b      	b.n	80039f6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2201      	movs	r2, #1
 80039e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e272      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8087 	beq.w	8003b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a24:	4b92      	ldr	r3, [pc, #584]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d00c      	beq.n	8003a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a30:	4b8f      	ldr	r3, [pc, #572]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 030c 	and.w	r3, r3, #12
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d112      	bne.n	8003a62 <HAL_RCC_OscConfig+0x5e>
 8003a3c:	4b8c      	ldr	r3, [pc, #560]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a48:	d10b      	bne.n	8003a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4a:	4b89      	ldr	r3, [pc, #548]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d06c      	beq.n	8003b30 <HAL_RCC_OscConfig+0x12c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d168      	bne.n	8003b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e24c      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x76>
 8003a6c:	4b80      	ldr	r3, [pc, #512]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a7f      	ldr	r2, [pc, #508]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	e02e      	b.n	8003ad8 <HAL_RCC_OscConfig+0xd4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x98>
 8003a82:	4b7b      	ldr	r3, [pc, #492]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7a      	ldr	r2, [pc, #488]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b78      	ldr	r3, [pc, #480]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a77      	ldr	r2, [pc, #476]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e01d      	b.n	8003ad8 <HAL_RCC_OscConfig+0xd4>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xbc>
 8003aa6:	4b72      	ldr	r3, [pc, #456]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a71      	ldr	r2, [pc, #452]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCC_OscConfig+0xd4>
 8003ac0:	4b6b      	ldr	r3, [pc, #428]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b68      	ldr	r3, [pc, #416]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a67      	ldr	r2, [pc, #412]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d013      	beq.n	8003b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fb24 	bl	800112c <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae8:	f7fd fb20 	bl	800112c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	@ 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e200      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	4b5d      	ldr	r3, [pc, #372]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0xe4>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd fb10 	bl	800112c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fd fb0c 	bl	800112c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	@ 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e1ec      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	4b53      	ldr	r3, [pc, #332]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x10c>
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d063      	beq.n	8003c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b3e:	4b4c      	ldr	r3, [pc, #304]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b4a:	4b49      	ldr	r3, [pc, #292]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d11c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x18c>
 8003b56:	4b46      	ldr	r3, [pc, #280]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d116      	bne.n	8003b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	4b43      	ldr	r3, [pc, #268]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x176>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e1c0      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4939      	ldr	r1, [pc, #228]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	e03a      	b.n	8003c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b98:	4b36      	ldr	r3, [pc, #216]	@ (8003c74 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fd fac5 	bl	800112c <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7fd fac1 	bl	800112c <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1a1      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4927      	ldr	r1, [pc, #156]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]
 8003bd8:	e015      	b.n	8003c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bda:	4b26      	ldr	r3, [pc, #152]	@ (8003c74 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fd faa4 	bl	800112c <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fd faa0 	bl	800112c <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e180      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d03a      	beq.n	8003c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d019      	beq.n	8003c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1a:	4b17      	ldr	r3, [pc, #92]	@ (8003c78 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c20:	f7fd fa84 	bl	800112c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fd fa80 	bl	800112c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e160      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c46:	2001      	movs	r0, #1
 8003c48:	f000 faba 	bl	80041c0 <RCC_Delay>
 8003c4c:	e01c      	b.n	8003c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c78 <HAL_RCC_OscConfig+0x274>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c54:	f7fd fa6a 	bl	800112c <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5a:	e00f      	b.n	8003c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5c:	f7fd fa66 	bl	800112c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d908      	bls.n	8003c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e146      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000
 8003c74:	42420000 	.word	0x42420000
 8003c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7c:	4b92      	ldr	r3, [pc, #584]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e9      	bne.n	8003c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80a6 	beq.w	8003de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9a:	4b8b      	ldr	r3, [pc, #556]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10d      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	4b88      	ldr	r3, [pc, #544]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4a87      	ldr	r2, [pc, #540]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb0:	61d3      	str	r3, [r2, #28]
 8003cb2:	4b85      	ldr	r3, [pc, #532]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b82      	ldr	r3, [pc, #520]	@ (8003ecc <HAL_RCC_OscConfig+0x4c8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d118      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cce:	4b7f      	ldr	r3, [pc, #508]	@ (8003ecc <HAL_RCC_OscConfig+0x4c8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ecc <HAL_RCC_OscConfig+0x4c8>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fd fa27 	bl	800112c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fd fa23 	bl	800112c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b64      	cmp	r3, #100	@ 0x64
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e103      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	4b75      	ldr	r3, [pc, #468]	@ (8003ecc <HAL_RCC_OscConfig+0x4c8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x312>
 8003d08:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6213      	str	r3, [r2, #32]
 8003d14:	e02d      	b.n	8003d72 <HAL_RCC_OscConfig+0x36e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x334>
 8003d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4a69      	ldr	r2, [pc, #420]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6213      	str	r3, [r2, #32]
 8003d2a:	4b67      	ldr	r3, [pc, #412]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	4a66      	ldr	r2, [pc, #408]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	6213      	str	r3, [r2, #32]
 8003d36:	e01c      	b.n	8003d72 <HAL_RCC_OscConfig+0x36e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d10c      	bne.n	8003d5a <HAL_RCC_OscConfig+0x356>
 8003d40:	4b61      	ldr	r3, [pc, #388]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	4a60      	ldr	r2, [pc, #384]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	f043 0304 	orr.w	r3, r3, #4
 8003d4a:	6213      	str	r3, [r2, #32]
 8003d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	4a5d      	ldr	r2, [pc, #372]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6213      	str	r3, [r2, #32]
 8003d58:	e00b      	b.n	8003d72 <HAL_RCC_OscConfig+0x36e>
 8003d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	6213      	str	r3, [r2, #32]
 8003d66:	4b58      	ldr	r3, [pc, #352]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	4a57      	ldr	r2, [pc, #348]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d015      	beq.n	8003da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7a:	f7fd f9d7 	bl	800112c <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fd f9d3 	bl	800112c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0b1      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d98:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ee      	beq.n	8003d82 <HAL_RCC_OscConfig+0x37e>
 8003da4:	e014      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da6:	f7fd f9c1 	bl	800112c <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fd f9bd 	bl	800112c <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e09b      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc4:	4b40      	ldr	r3, [pc, #256]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ee      	bne.n	8003dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d105      	bne.n	8003de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4a3b      	ldr	r2, [pc, #236]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8087 	beq.w	8003efa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dec:	4b36      	ldr	r3, [pc, #216]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d061      	beq.n	8003ebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d146      	bne.n	8003e8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e00:	4b33      	ldr	r3, [pc, #204]	@ (8003ed0 <HAL_RCC_OscConfig+0x4cc>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e06:	f7fd f991 	bl	800112c <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fd f98d 	bl	800112c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e06d      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e20:	4b29      	ldr	r3, [pc, #164]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e34:	d108      	bne.n	8003e48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e36:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	4921      	ldr	r1, [pc, #132]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e48:	4b1f      	ldr	r3, [pc, #124]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a19      	ldr	r1, [r3, #32]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	491b      	ldr	r1, [pc, #108]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e60:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed0 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7fd f961 	bl	800112c <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6e:	f7fd f95d 	bl	800112c <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e03d      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e80:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x46a>
 8003e8c:	e035      	b.n	8003efa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <HAL_RCC_OscConfig+0x4cc>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fd f94a 	bl	800112c <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fd f946 	bl	800112c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e026      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x498>
 8003eba:	e01e      	b.n	8003efa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e019      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40007000 	.word	0x40007000
 8003ed0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <HAL_RCC_OscConfig+0x500>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d106      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d001      	beq.n	8003efa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000

08003f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0d0      	b.n	80040be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d910      	bls.n	8003f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b67      	ldr	r3, [pc, #412]	@ (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 0207 	bic.w	r2, r3, #7
 8003f32:	4965      	ldr	r1, [pc, #404]	@ (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b63      	ldr	r3, [pc, #396]	@ (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0b8      	b.n	80040be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d020      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f64:	4b59      	ldr	r3, [pc, #356]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4a58      	ldr	r2, [pc, #352]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f7c:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a52      	ldr	r2, [pc, #328]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f88:	4b50      	ldr	r3, [pc, #320]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	494d      	ldr	r1, [pc, #308]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d040      	beq.n	8004028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d107      	bne.n	8003fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	4b47      	ldr	r3, [pc, #284]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d115      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e07f      	b.n	80040be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d107      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc6:	4b41      	ldr	r3, [pc, #260]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e073      	b.n	80040be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e06b      	b.n	80040be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fe6:	4b39      	ldr	r3, [pc, #228]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f023 0203 	bic.w	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4936      	ldr	r1, [pc, #216]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff8:	f7fd f898 	bl	800112c <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004000:	f7fd f894 	bl	800112c <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e053      	b.n	80040be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004016:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 020c 	and.w	r2, r3, #12
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	429a      	cmp	r2, r3
 8004026:	d1eb      	bne.n	8004000 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004028:	4b27      	ldr	r3, [pc, #156]	@ (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d210      	bcs.n	8004058 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b24      	ldr	r3, [pc, #144]	@ (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 0207 	bic.w	r2, r3, #7
 800403e:	4922      	ldr	r1, [pc, #136]	@ (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b20      	ldr	r3, [pc, #128]	@ (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e032      	b.n	80040be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004064:	4b19      	ldr	r3, [pc, #100]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4916      	ldr	r1, [pc, #88]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004082:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	490e      	ldr	r1, [pc, #56]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004096:	f000 f821 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 800409a:	4602      	mov	r2, r0
 800409c:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	490a      	ldr	r1, [pc, #40]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c8>)
 80040a8:	5ccb      	ldrb	r3, [r1, r3]
 80040aa:	fa22 f303 	lsr.w	r3, r2, r3
 80040ae:	4a09      	ldr	r2, [pc, #36]	@ (80040d4 <HAL_RCC_ClockConfig+0x1cc>)
 80040b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040b2:	4b09      	ldr	r3, [pc, #36]	@ (80040d8 <HAL_RCC_ClockConfig+0x1d0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc fff6 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40022000 	.word	0x40022000
 80040cc:	40021000 	.word	0x40021000
 80040d0:	08009250 	.word	0x08009250
 80040d4:	20000014 	.word	0x20000014
 80040d8:	20000018 	.word	0x20000018

080040dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x94>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b04      	cmp	r3, #4
 8004104:	d002      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x30>
 8004106:	2b08      	cmp	r3, #8
 8004108:	d003      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0x36>
 800410a:	e027      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800410c:	4b19      	ldr	r3, [pc, #100]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x98>)
 800410e:	613b      	str	r3, [r7, #16]
      break;
 8004110:	e027      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	0c9b      	lsrs	r3, r3, #18
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	4a17      	ldr	r2, [pc, #92]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x9c>)
 800411c:	5cd3      	ldrb	r3, [r2, r3]
 800411e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800412a:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x94>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	0c5b      	lsrs	r3, r3, #17
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	4a11      	ldr	r2, [pc, #68]	@ (800417c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004136:	5cd3      	ldrb	r3, [r2, r3]
 8004138:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a0d      	ldr	r2, [pc, #52]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x98>)
 800413e:	fb03 f202 	mul.w	r2, r3, r2
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e004      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a0c      	ldr	r2, [pc, #48]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004150:	fb02 f303 	mul.w	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	613b      	str	r3, [r7, #16]
      break;
 800415a:	e002      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x98>)
 800415e:	613b      	str	r3, [r7, #16]
      break;
 8004160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004162:	693b      	ldr	r3, [r7, #16]
}
 8004164:	4618      	mov	r0, r3
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000
 8004174:	007a1200 	.word	0x007a1200
 8004178:	08009268 	.word	0x08009268
 800417c:	08009278 	.word	0x08009278
 8004180:	003d0900 	.word	0x003d0900

08004184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004188:	4b02      	ldr	r3, [pc, #8]	@ (8004194 <HAL_RCC_GetHCLKFreq+0x10>)
 800418a:	681b      	ldr	r3, [r3, #0]
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr
 8004194:	20000014 	.word	0x20000014

08004198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800419c:	f7ff fff2 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	0adb      	lsrs	r3, r3, #11
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4903      	ldr	r1, [pc, #12]	@ (80041bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021000 	.word	0x40021000
 80041bc:	08009260 	.word	0x08009260

080041c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041c8:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <RCC_Delay+0x34>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0a      	ldr	r2, [pc, #40]	@ (80041f8 <RCC_Delay+0x38>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0a5b      	lsrs	r3, r3, #9
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041dc:	bf00      	nop
  }
  while (Delay --);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1e5a      	subs	r2, r3, #1
 80041e2:	60fa      	str	r2, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f9      	bne.n	80041dc <RCC_Delay+0x1c>
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	20000014 	.word	0x20000014
 80041f8:	10624dd3 	.word	0x10624dd3

080041fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d07d      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004218:	2300      	movs	r3, #0
 800421a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421c:	4b4f      	ldr	r3, [pc, #316]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10d      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004228:	4b4c      	ldr	r3, [pc, #304]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	4a4b      	ldr	r2, [pc, #300]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004232:	61d3      	str	r3, [r2, #28]
 8004234:	4b49      	ldr	r3, [pc, #292]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	4b46      	ldr	r3, [pc, #280]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d118      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004250:	4b43      	ldr	r3, [pc, #268]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a42      	ldr	r2, [pc, #264]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800425a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800425c:	f7fc ff66 	bl	800112c <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	e008      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004264:	f7fc ff62 	bl	800112c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b64      	cmp	r3, #100	@ 0x64
 8004270:	d901      	bls.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e06d      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004276:	4b3a      	ldr	r3, [pc, #232]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004282:	4b36      	ldr	r3, [pc, #216]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d02e      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	429a      	cmp	r2, r3
 800429e:	d027      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042a0:	4b2e      	ldr	r3, [pc, #184]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042b6:	4a29      	ldr	r2, [pc, #164]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d014      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fc ff31 	bl	800112c <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fc ff2d 	bl	800112c <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e036      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	4b1d      	ldr	r3, [pc, #116]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ee      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f0:	4b1a      	ldr	r3, [pc, #104]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4917      	ldr	r1, [pc, #92]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004308:	4b14      	ldr	r3, [pc, #80]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	4a13      	ldr	r2, [pc, #76]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004312:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004320:	4b0e      	ldr	r3, [pc, #56]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	490b      	ldr	r1, [pc, #44]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800433e:	4b07      	ldr	r3, [pc, #28]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	4904      	ldr	r1, [pc, #16]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434c:	4313      	orrs	r3, r2
 800434e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	40007000 	.word	0x40007000
 8004364:	42420440 	.word	0x42420440

08004368 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	2300      	movs	r3, #0
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b10      	cmp	r3, #16
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b10      	cmp	r3, #16
 800438e:	f200 808a 	bhi.w	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d045      	beq.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d075      	beq.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800439e:	e082      	b.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80043a0:	4b46      	ldr	r3, [pc, #280]	@ (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043a6:	4b45      	ldr	r3, [pc, #276]	@ (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d07b      	beq.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	0c9b      	lsrs	r3, r3, #18
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	4a41      	ldr	r2, [pc, #260]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80043bc:	5cd3      	ldrb	r3, [r2, r3]
 80043be:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d015      	beq.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043ca:	4b3c      	ldr	r3, [pc, #240]	@ (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	0c5b      	lsrs	r3, r3, #17
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	4a3b      	ldr	r2, [pc, #236]	@ (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80043d6:	5cd3      	ldrb	r3, [r2, r3]
 80043d8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80043e4:	4a38      	ldr	r2, [pc, #224]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	e004      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4a34      	ldr	r2, [pc, #208]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004400:	4b2e      	ldr	r3, [pc, #184]	@ (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800440c:	d102      	bne.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	61bb      	str	r3, [r7, #24]
      break;
 8004412:	e04a      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	4a2d      	ldr	r2, [pc, #180]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	61bb      	str	r3, [r7, #24]
      break;
 8004422:	e042      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004424:	4b25      	ldr	r3, [pc, #148]	@ (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004434:	d108      	bne.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004440:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e01f      	b.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004452:	d109      	bne.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004454:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004460:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	e00f      	b.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004472:	d11c      	bne.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004474:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d016      	beq.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004480:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004484:	61bb      	str	r3, [r7, #24]
      break;
 8004486:	e012      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004488:	e011      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800448a:	f7ff fe85 	bl	8004198 <HAL_RCC_GetPCLK2Freq>
 800448e:	4602      	mov	r2, r0
 8004490:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	0b9b      	lsrs	r3, r3, #14
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	3301      	adds	r3, #1
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	61bb      	str	r3, [r7, #24]
      break;
 80044a4:	e004      	b.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044a6:	bf00      	nop
 80044a8:	e002      	b.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044ae:	bf00      	nop
    }
  }
  return (frequency);
 80044b0:	69bb      	ldr	r3, [r7, #24]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	0800927c 	.word	0x0800927c
 80044c4:	0800928c 	.word	0x0800928c
 80044c8:	007a1200 	.word	0x007a1200
 80044cc:	003d0900 	.word	0x003d0900
 80044d0:	aaaaaaab 	.word	0xaaaaaaab

080044d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e041      	b.n	800456a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fc fa76 	bl	80009ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f000 fa64 	bl	80049e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d001      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e03a      	b.n	8004602 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a18      	ldr	r2, [pc, #96]	@ (800460c <HAL_TIM_Base_Start_IT+0x98>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00e      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0x58>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b6:	d009      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0x58>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a14      	ldr	r2, [pc, #80]	@ (8004610 <HAL_TIM_Base_Start_IT+0x9c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0x58>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a13      	ldr	r2, [pc, #76]	@ (8004614 <HAL_TIM_Base_Start_IT+0xa0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d111      	bne.n	80045f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d010      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ee:	e007      	b.n	8004600 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800

08004618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d020      	beq.n	800467c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01b      	beq.n	800467c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0202 	mvn.w	r2, #2
 800464c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9a1 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f994 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f9a3 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d020      	beq.n	80046c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01b      	beq.n	80046c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0204 	mvn.w	r2, #4
 8004698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2202      	movs	r2, #2
 800469e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f97b 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 80046b4:	e005      	b.n	80046c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f96e 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f97d 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d020      	beq.n	8004714 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01b      	beq.n	8004714 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0208 	mvn.w	r2, #8
 80046e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2204      	movs	r2, #4
 80046ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f955 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 8004700:	e005      	b.n	800470e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f948 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f957 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b00      	cmp	r3, #0
 800471c:	d020      	beq.n	8004760 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01b      	beq.n	8004760 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0210 	mvn.w	r2, #16
 8004730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2208      	movs	r2, #8
 8004736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f92f 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 800474c:	e005      	b.n	800475a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f922 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f931 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0201 	mvn.w	r2, #1
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f901 	bl	8004986 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00c      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa87 	bl	8004cb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00c      	beq.n	80047cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f901 	bl	80049ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00c      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0220 	mvn.w	r2, #32
 80047e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa5a 	bl	8004ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIM_ConfigClockSource+0x1c>
 8004810:	2302      	movs	r3, #2
 8004812:	e0b4      	b.n	800497e <HAL_TIM_ConfigClockSource+0x186>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800483a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800484c:	d03e      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0xd4>
 800484e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004852:	f200 8087 	bhi.w	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485a:	f000 8086 	beq.w	800496a <HAL_TIM_ConfigClockSource+0x172>
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004862:	d87f      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b70      	cmp	r3, #112	@ 0x70
 8004866:	d01a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0xa6>
 8004868:	2b70      	cmp	r3, #112	@ 0x70
 800486a:	d87b      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b60      	cmp	r3, #96	@ 0x60
 800486e:	d050      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x11a>
 8004870:	2b60      	cmp	r3, #96	@ 0x60
 8004872:	d877      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b50      	cmp	r3, #80	@ 0x50
 8004876:	d03c      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004878:	2b50      	cmp	r3, #80	@ 0x50
 800487a:	d873      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b40      	cmp	r3, #64	@ 0x40
 800487e:	d058      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x13a>
 8004880:	2b40      	cmp	r3, #64	@ 0x40
 8004882:	d86f      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b30      	cmp	r3, #48	@ 0x30
 8004886:	d064      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 8004888:	2b30      	cmp	r3, #48	@ 0x30
 800488a:	d86b      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b20      	cmp	r3, #32
 800488e:	d060      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d867      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d05c      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 8004898:	2b10      	cmp	r3, #16
 800489a:	d05a      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 800489c:	e062      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ae:	f000 f97c 	bl	8004baa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	609a      	str	r2, [r3, #8]
      break;
 80048ca:	e04f      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048dc:	f000 f965 	bl	8004baa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ee:	609a      	str	r2, [r3, #8]
      break;
 80048f0:	e03c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 f8dc 	bl	8004abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2150      	movs	r1, #80	@ 0x50
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f933 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 8004910:	e02c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800491e:	461a      	mov	r2, r3
 8004920:	f000 f8fa 	bl	8004b18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2160      	movs	r1, #96	@ 0x60
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f923 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 8004930:	e01c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	461a      	mov	r2, r3
 8004940:	f000 f8bc 	bl	8004abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2140      	movs	r1, #64	@ 0x40
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f913 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 8004950:	e00c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f000 f90a 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 8004962:	e003      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
      break;
 8004968:	e000      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800496a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab0 <TIM_Base_SetConfig+0xd0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <TIM_Base_SetConfig+0x30>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fe:	d007      	beq.n	8004a10 <TIM_Base_SetConfig+0x30>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab4 <TIM_Base_SetConfig+0xd4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_Base_SetConfig+0x30>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab8 <TIM_Base_SetConfig+0xd8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d108      	bne.n	8004a22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a22      	ldr	r2, [pc, #136]	@ (8004ab0 <TIM_Base_SetConfig+0xd0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00b      	beq.n	8004a42 <TIM_Base_SetConfig+0x62>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a30:	d007      	beq.n	8004a42 <TIM_Base_SetConfig+0x62>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab4 <TIM_Base_SetConfig+0xd4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d003      	beq.n	8004a42 <TIM_Base_SetConfig+0x62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab8 <TIM_Base_SetConfig+0xd8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab0 <TIM_Base_SetConfig+0xd0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f023 0201 	bic.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	611a      	str	r2, [r3, #16]
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	40012c00 	.word	0x40012c00
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800

08004abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f023 0201 	bic.w	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 030a 	bic.w	r3, r3, #10
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr

08004b18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0210 	bic.w	r2, r3, #16
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	031b      	lsls	r3, r3, #12
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	621a      	str	r2, [r3, #32]
}
 8004b6c:	bf00      	nop
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr

08004b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f043 0307 	orr.w	r3, r3, #7
 8004b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	609a      	str	r2, [r3, #8]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr

08004baa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b087      	sub	sp, #28
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	021a      	lsls	r2, r3, #8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	609a      	str	r2, [r3, #8]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e046      	b.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a16      	ldr	r2, [pc, #88]	@ (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a12      	ldr	r2, [pc, #72]	@ (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a10      	ldr	r2, [pc, #64]	@ (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d10c      	bne.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800

08004ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr

08004ce2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cf2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004cf6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d16:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004d1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr

08004d5a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	4638      	mov	r0, r7
 8004d64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b09d      	sub	sp, #116	@ 0x74
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	78db      	ldrb	r3, [r3, #3]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d81f      	bhi.n	8004e06 <USB_ActivateEndpoint+0x72>
 8004dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <USB_ActivateEndpoint+0x38>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004ddd 	.word	0x08004ddd
 8004dd0:	08004df9 	.word	0x08004df9
 8004dd4:	08004e0f 	.word	0x08004e0f
 8004dd8:	08004deb 	.word	0x08004deb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ddc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004de0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004de4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004de8:	e012      	b.n	8004e10 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004dea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004dee:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004df2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004df6:	e00b      	b.n	8004e10 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004df8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004dfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004e04:	e004      	b.n	8004e10 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004e0c:	e000      	b.n	8004e10 <USB_ActivateEndpoint+0x7c>
      break;
 8004e0e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	441a      	add	r2, r3
 8004e1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	441a      	add	r2, r3
 8004e5e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004e62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	7b1b      	ldrb	r3, [r3, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 8178 	bne.w	8005170 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8084 	beq.w	8004f92 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	011a      	lsls	r2, r3, #4
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	88db      	ldrh	r3, [r3, #6]
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	827b      	strh	r3, [r7, #18]
 8004ecc:	8a7b      	ldrh	r3, [r7, #18]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01b      	beq.n	8004f0e <USB_ActivateEndpoint+0x17a>
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eec:	823b      	strh	r3, [r7, #16]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	8a3b      	ldrh	r3, [r7, #16]
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	78db      	ldrb	r3, [r3, #3]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d020      	beq.n	8004f58 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f2c:	81bb      	strh	r3, [r7, #12]
 8004f2e:	89bb      	ldrh	r3, [r7, #12]
 8004f30:	f083 0320 	eor.w	r3, r3, #32
 8004f34:	81bb      	strh	r3, [r7, #12]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	441a      	add	r2, r3
 8004f40:	89bb      	ldrh	r3, [r7, #12]
 8004f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]
 8004f56:	e2d5      	b.n	8005504 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f6e:	81fb      	strh	r3, [r7, #14]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	89fb      	ldrh	r3, [r7, #14]
 8004f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	8013      	strh	r3, [r2, #0]
 8004f90:	e2b8      	b.n	8005504 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa2:	4413      	add	r3, r2
 8004fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	011a      	lsls	r2, r3, #4
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	88db      	ldrh	r3, [r3, #6]
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd6:	4413      	add	r3, r2
 8004fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	011a      	lsls	r2, r3, #4
 8004fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b3e      	cmp	r3, #62	@ 0x3e
 8005000:	d91d      	bls.n	800503e <USB_ActivateEndpoint+0x2aa>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	66bb      	str	r3, [r7, #104]	@ 0x68
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <USB_ActivateEndpoint+0x288>
 8005016:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005018:	3b01      	subs	r3, #1
 800501a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29a      	uxth	r2, r3
 8005022:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005024:	b29b      	uxth	r3, r3
 8005026:	029b      	lsls	r3, r3, #10
 8005028:	b29b      	uxth	r3, r3
 800502a:	4313      	orrs	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005036:	b29a      	uxth	r2, r3
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e026      	b.n	800508c <USB_ActivateEndpoint+0x2f8>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <USB_ActivateEndpoint+0x2c8>
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005054:	b29a      	uxth	r2, r3
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e017      	b.n	800508c <USB_ActivateEndpoint+0x2f8>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <USB_ActivateEndpoint+0x2e2>
 8005070:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005072:	3301      	adds	r3, #1
 8005074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b29a      	uxth	r2, r3
 800507c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800507e:	b29b      	uxth	r3, r3
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	b29b      	uxth	r3, r3
 8005084:	4313      	orrs	r3, r2
 8005086:	b29a      	uxth	r2, r3
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	847b      	strh	r3, [r7, #34]	@ 0x22
 800509a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800509c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01b      	beq.n	80050dc <USB_ActivateEndpoint+0x348>
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ba:	843b      	strh	r3, [r7, #32]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	8c3b      	ldrh	r3, [r7, #32]
 80050c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d8:	b29b      	uxth	r3, r3
 80050da:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d124      	bne.n	800512e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050fa:	83bb      	strh	r3, [r7, #28]
 80050fc:	8bbb      	ldrh	r3, [r7, #28]
 80050fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005102:	83bb      	strh	r3, [r7, #28]
 8005104:	8bbb      	ldrh	r3, [r7, #28]
 8005106:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800510a:	83bb      	strh	r3, [r7, #28]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	8bbb      	ldrh	r3, [r7, #28]
 8005118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800511c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005128:	b29b      	uxth	r3, r3
 800512a:	8013      	strh	r3, [r2, #0]
 800512c:	e1ea      	b.n	8005504 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005144:	83fb      	strh	r3, [r7, #30]
 8005146:	8bfb      	ldrh	r3, [r7, #30]
 8005148:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800514c:	83fb      	strh	r3, [r7, #30]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	441a      	add	r2, r3
 8005158:	8bfb      	ldrh	r3, [r7, #30]
 800515a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800515e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800516a:	b29b      	uxth	r3, r3
 800516c:	8013      	strh	r3, [r2, #0]
 800516e:	e1c9      	b.n	8005504 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	78db      	ldrb	r3, [r3, #3]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d11e      	bne.n	80051b6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	b29b      	uxth	r3, r3
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800518a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	441a      	add	r2, r3
 800519c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80051a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051a8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80051ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	8013      	strh	r3, [r2, #0]
 80051b4:	e01d      	b.n	80051f2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80051c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051cc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005202:	4413      	add	r3, r2
 8005204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	011a      	lsls	r2, r3, #4
 800520c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800520e:	4413      	add	r3, r2
 8005210:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005214:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	891b      	ldrh	r3, [r3, #8]
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	b29b      	uxth	r3, r3
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	657b      	str	r3, [r7, #84]	@ 0x54
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005230:	b29b      	uxth	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005236:	4413      	add	r3, r2
 8005238:	657b      	str	r3, [r7, #84]	@ 0x54
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	011a      	lsls	r2, r3, #4
 8005240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005242:	4413      	add	r3, r2
 8005244:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005248:	653b      	str	r3, [r7, #80]	@ 0x50
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	895b      	ldrh	r3, [r3, #10]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	b29b      	uxth	r3, r3
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005258:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	785b      	ldrb	r3, [r3, #1]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f040 8093 	bne.w	800538a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005274:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01b      	beq.n	80052b8 <USB_ActivateEndpoint+0x524>
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005296:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	441a      	add	r2, r3
 80052a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80052a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80052c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80052c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <USB_ActivateEndpoint+0x574>
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	441a      	add	r2, r3
 80052f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80052f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005300:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005304:	b29b      	uxth	r3, r3
 8005306:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800531a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005320:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005322:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005326:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005328:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800532a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800532e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	441a      	add	r2, r3
 800533a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800533c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800534c:	b29b      	uxth	r3, r3
 800534e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005366:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	441a      	add	r2, r3
 8005372:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800537c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005384:	b29b      	uxth	r3, r3
 8005386:	8013      	strh	r3, [r2, #0]
 8005388:	e0bc      	b.n	8005504 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800539a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800539e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01d      	beq.n	80053e2 <USB_ActivateEndpoint+0x64e>
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053bc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	441a      	add	r2, r3
 80053ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80053ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053de:	b29b      	uxth	r3, r3
 80053e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80053f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80053f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01d      	beq.n	800543a <USB_ActivateEndpoint+0x6a6>
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005414:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	441a      	add	r2, r3
 8005422:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800542a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800542e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005432:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005436:	b29b      	uxth	r3, r3
 8005438:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	78db      	ldrb	r3, [r3, #3]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d024      	beq.n	800548c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005458:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800545c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005460:	f083 0320 	eor.w	r3, r3, #32
 8005464:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800547a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800547e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005486:	b29b      	uxth	r3, r3
 8005488:	8013      	strh	r3, [r2, #0]
 800548a:	e01d      	b.n	80054c8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800549e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	441a      	add	r2, r3
 80054b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80054b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	441a      	add	r2, r3
 80054ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005504:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005508:	4618      	mov	r0, r3
 800550a:	3774      	adds	r7, #116	@ 0x74
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop

08005514 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005514:	b480      	push	{r7}
 8005516:	b08d      	sub	sp, #52	@ 0x34
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	7b1b      	ldrb	r3, [r3, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 808e 	bne.w	8005644 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d044      	beq.n	80055ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	81bb      	strh	r3, [r7, #12]
 800553e:	89bb      	ldrh	r3, [r7, #12]
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01b      	beq.n	8005580 <USB_DeactivateEndpoint+0x6c>
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800555a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555e:	817b      	strh	r3, [r7, #10]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	441a      	add	r2, r3
 800556a:	897b      	ldrh	r3, [r7, #10]
 800556c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005570:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005574:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005578:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800557c:	b29b      	uxth	r3, r3
 800557e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005596:	813b      	strh	r3, [r7, #8]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	441a      	add	r2, r3
 80055a2:	893b      	ldrh	r3, [r7, #8]
 80055a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	8013      	strh	r3, [r2, #0]
 80055b8:	e192      	b.n	80058e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	827b      	strh	r3, [r7, #18]
 80055c8:	8a7b      	ldrh	r3, [r7, #18]
 80055ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01b      	beq.n	800560a <USB_DeactivateEndpoint+0xf6>
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e8:	823b      	strh	r3, [r7, #16]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	8a3b      	ldrh	r3, [r7, #16]
 80055f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005606:	b29b      	uxth	r3, r3
 8005608:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800561c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005620:	81fb      	strh	r3, [r7, #14]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	89fb      	ldrh	r3, [r7, #14]
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800563a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]
 8005642:	e14d      	b.n	80058e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f040 80a5 	bne.w	8005798 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	843b      	strh	r3, [r7, #32]
 800565c:	8c3b      	ldrh	r3, [r7, #32]
 800565e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01b      	beq.n	800569e <USB_DeactivateEndpoint+0x18a>
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567c:	83fb      	strh	r3, [r7, #30]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	441a      	add	r2, r3
 8005688:	8bfb      	ldrh	r3, [r7, #30]
 800568a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800568e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569a:	b29b      	uxth	r3, r3
 800569c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	83bb      	strh	r3, [r7, #28]
 80056ac:	8bbb      	ldrh	r3, [r7, #28]
 80056ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01b      	beq.n	80056ee <USB_DeactivateEndpoint+0x1da>
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056cc:	837b      	strh	r3, [r7, #26]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	8b7b      	ldrh	r3, [r7, #26]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005704:	833b      	strh	r3, [r7, #24]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	441a      	add	r2, r3
 8005710:	8b3b      	ldrh	r3, [r7, #24]
 8005712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005716:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800571a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800571e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005722:	b29b      	uxth	r3, r3
 8005724:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573c:	82fb      	strh	r3, [r7, #22]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	8afb      	ldrh	r3, [r7, #22]
 800574a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800574e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800575a:	b29b      	uxth	r3, r3
 800575c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005774:	82bb      	strh	r3, [r7, #20]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	441a      	add	r2, r3
 8005780:	8abb      	ldrh	r3, [r7, #20]
 8005782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800578a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800578e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005792:	b29b      	uxth	r3, r3
 8005794:	8013      	strh	r3, [r2, #0]
 8005796:	e0a3      	b.n	80058e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80057a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80057a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01b      	beq.n	80057e8 <USB_DeactivateEndpoint+0x2d4>
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80057d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80057f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01b      	beq.n	8005838 <USB_DeactivateEndpoint+0x324>
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005816:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800582c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005830:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005834:	b29b      	uxth	r3, r3
 8005836:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800584a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800584e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	441a      	add	r2, r3
 800585a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800585c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005864:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800586c:	b29b      	uxth	r3, r3
 800586e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005886:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800589c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058be:	847b      	strh	r3, [r7, #34]	@ 0x22
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	441a      	add	r2, r3
 80058ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058dc:	b29b      	uxth	r3, r3
 80058de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3734      	adds	r7, #52	@ 0x34
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr

080058ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b0c2      	sub	sp, #264	@ 0x108
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058fa:	6018      	str	r0, [r3, #0]
 80058fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005904:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	2b01      	cmp	r3, #1
 8005914:	f040 86b7 	bne.w	8006686 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	429a      	cmp	r2, r3
 8005932:	d908      	bls.n	8005946 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005944:	e007      	b.n	8005956 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	7b1b      	ldrb	r3, [r3, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d13a      	bne.n	80059dc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6959      	ldr	r1, [r3, #20]
 8005972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	88da      	ldrh	r2, [r3, #6]
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005982:	b29b      	uxth	r3, r3
 8005984:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005988:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800598c:	6800      	ldr	r0, [r0, #0]
 800598e:	f001 fc9c 	bl	80072ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005996:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	011a      	lsls	r2, r3, #4
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	f000 be1f 	b.w	800661a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	78db      	ldrb	r3, [r3, #3]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	f040 8462 	bne.w	80062b2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6a1a      	ldr	r2, [r3, #32]
 80059fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	f240 83df 	bls.w	80061ca <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a32:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	441a      	add	r2, r3
 8005a50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a5c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a78:	1ad2      	subs	r2, r2, r3
 8005a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 81c7 	beq.w	8005e3c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d177      	bne.n	8005bba <USB_EPStartXfer+0x2ce>
 8005aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ada:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aea:	4413      	add	r3, r2
 8005aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	011a      	lsls	r2, r3, #4
 8005afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afe:	4413      	add	r3, r2
 8005b00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	801a      	strh	r2, [r3, #0]
 8005b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b1c:	d921      	bls.n	8005b62 <USB_EPStartXfer+0x276>
 8005b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <USB_EPStartXfer+0x252>
 8005b34:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	029b      	lsls	r3, r3, #10
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	e050      	b.n	8005c04 <USB_EPStartXfer+0x318>
 8005b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <USB_EPStartXfer+0x294>
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e041      	b.n	8005c04 <USB_EPStartXfer+0x318>
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <USB_EPStartXfer+0x2b4>
 8005b96:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	029b      	lsls	r3, r3, #10
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	801a      	strh	r2, [r3, #0]
 8005bb8:	e024      	b.n	8005c04 <USB_EPStartXfer+0x318>
 8005bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d11c      	bne.n	8005c04 <USB_EPStartXfer+0x318>
 8005bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bde:	4413      	add	r3, r2
 8005be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	011a      	lsls	r2, r3, #4
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	895b      	ldrh	r3, [r3, #10]
 8005c10:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6959      	ldr	r1, [r3, #20]
 8005c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c2a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c2e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c32:	6800      	ldr	r0, [r0, #0]
 8005c34:	f001 fb49 	bl	80072ca <USB_WritePMA>
            ep->xfer_buff += len;
 8005c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695a      	ldr	r2, [r3, #20]
 8005c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c48:	441a      	add	r2, r3
 8005c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6a1a      	ldr	r2, [r3, #32]
 8005c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d90f      	bls.n	8005c92 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c82:	1ad2      	subs	r2, r2, r3
 8005c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	621a      	str	r2, [r3, #32]
 8005c90:	e00e      	b.n	8005cb0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2200      	movs	r2, #0
 8005cae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d177      	bne.n	8005db0 <USB_EPStartXfer+0x4c4>
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	61bb      	str	r3, [r7, #24]
 8005ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	011a      	lsls	r2, r3, #4
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d10:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d12:	d921      	bls.n	8005d58 <USB_EPStartXfer+0x46c>
 8005d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d18:	095b      	lsrs	r3, r3, #5
 8005d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d104      	bne.n	8005d34 <USB_EPStartXfer+0x448>
 8005d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	029b      	lsls	r3, r3, #10
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	4313      	orrs	r3, r2
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e056      	b.n	8005e06 <USB_EPStartXfer+0x51a>
 8005d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <USB_EPStartXfer+0x48a>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	801a      	strh	r2, [r3, #0]
 8005d74:	e047      	b.n	8005e06 <USB_EPStartXfer+0x51a>
 8005d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <USB_EPStartXfer+0x4aa>
 8005d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d90:	3301      	adds	r3, #1
 8005d92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	029b      	lsls	r3, r3, #10
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	4313      	orrs	r3, r2
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e02a      	b.n	8005e06 <USB_EPStartXfer+0x51a>
 8005db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d122      	bne.n	8005e06 <USB_EPStartXfer+0x51a>
 8005dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	623b      	str	r3, [r7, #32]
 8005dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	4413      	add	r3, r2
 8005de2:	623b      	str	r3, [r7, #32]
 8005de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	011a      	lsls	r2, r3, #4
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	891b      	ldrh	r3, [r3, #8]
 8005e12:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6959      	ldr	r1, [r3, #20]
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e2c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e30:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e34:	6800      	ldr	r0, [r0, #0]
 8005e36:	f001 fa48 	bl	80072ca <USB_WritePMA>
 8005e3a:	e3ee      	b.n	800661a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d177      	bne.n	8005f3c <USB_EPStartXfer+0x650>
 8005e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e6c:	4413      	add	r3, r2
 8005e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	011a      	lsls	r2, r3, #4
 8005e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e80:	4413      	add	r3, r2
 8005e82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e86:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e9e:	d921      	bls.n	8005ee4 <USB_EPStartXfer+0x5f8>
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <USB_EPStartXfer+0x5d4>
 8005eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	029b      	lsls	r3, r3, #10
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	e056      	b.n	8005f92 <USB_EPStartXfer+0x6a6>
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <USB_EPStartXfer+0x616>
 8005eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	e047      	b.n	8005f92 <USB_EPStartXfer+0x6a6>
 8005f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <USB_EPStartXfer+0x636>
 8005f18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	029b      	lsls	r3, r3, #10
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f38:	801a      	strh	r2, [r3, #0]
 8005f3a:	e02a      	b.n	8005f92 <USB_EPStartXfer+0x6a6>
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d122      	bne.n	8005f92 <USB_EPStartXfer+0x6a6>
 8005f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f6c:	4413      	add	r3, r2
 8005f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	011a      	lsls	r2, r3, #4
 8005f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f80:	4413      	add	r3, r2
 8005f82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	891b      	ldrh	r3, [r3, #8]
 8005f9e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6959      	ldr	r1, [r3, #20]
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005fb8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005fbc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fc0:	6800      	ldr	r0, [r0, #0]
 8005fc2:	f001 f982 	bl	80072ca <USB_WritePMA>
            ep->xfer_buff += len;
 8005fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd6:	441a      	add	r2, r3
 8005fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d90f      	bls.n	8006020 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a1a      	ldr	r2, [r3, #32]
 800600c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006010:	1ad2      	subs	r2, r2, r3
 8006012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	621a      	str	r2, [r3, #32]
 800601e:	e00e      	b.n	800603e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2200      	movs	r2, #0
 800603c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800603e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	643b      	str	r3, [r7, #64]	@ 0x40
 800604a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d177      	bne.n	800614a <USB_EPStartXfer+0x85e>
 800605a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006074:	b29b      	uxth	r3, r3
 8006076:	461a      	mov	r2, r3
 8006078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607a:	4413      	add	r3, r2
 800607c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800607e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	011a      	lsls	r2, r3, #4
 800608c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608e:	4413      	add	r3, r2
 8006090:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006094:	637b      	str	r3, [r7, #52]	@ 0x34
 8006096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80060ac:	d921      	bls.n	80060f2 <USB_EPStartXfer+0x806>
 80060ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <USB_EPStartXfer+0x7e2>
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	3b01      	subs	r3, #1
 80060ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	b29b      	uxth	r3, r3
 80060da:	029b      	lsls	r3, r3, #10
 80060dc:	b29b      	uxth	r3, r3
 80060de:	4313      	orrs	r3, r2
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	e050      	b.n	8006194 <USB_EPStartXfer+0x8a8>
 80060f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <USB_EPStartXfer+0x824>
 80060fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006108:	b29a      	uxth	r2, r3
 800610a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800610c:	801a      	strh	r2, [r3, #0]
 800610e:	e041      	b.n	8006194 <USB_EPStartXfer+0x8a8>
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800611a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <USB_EPStartXfer+0x844>
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612a:	3301      	adds	r3, #1
 800612c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29a      	uxth	r2, r3
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613a:	b29b      	uxth	r3, r3
 800613c:	029b      	lsls	r3, r3, #10
 800613e:	b29b      	uxth	r3, r3
 8006140:	4313      	orrs	r3, r2
 8006142:	b29a      	uxth	r2, r3
 8006144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	e024      	b.n	8006194 <USB_EPStartXfer+0x8a8>
 800614a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d11c      	bne.n	8006194 <USB_EPStartXfer+0x8a8>
 800615a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006168:	b29b      	uxth	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800616e:	4413      	add	r3, r2
 8006170:	643b      	str	r3, [r7, #64]	@ 0x40
 8006172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	011a      	lsls	r2, r3, #4
 8006180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006182:	4413      	add	r3, r2
 8006184:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800618a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618e:	b29a      	uxth	r2, r3
 8006190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006192:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	895b      	ldrh	r3, [r3, #10]
 80061a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6959      	ldr	r1, [r3, #20]
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80061ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061c2:	6800      	ldr	r0, [r0, #0]
 80061c4:	f001 f881 	bl	80072ca <USB_WritePMA>
 80061c8:	e227      	b.n	800661a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80061da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80061fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006200:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	441a      	add	r2, r3
 800621e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800622a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800622e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006232:	b29b      	uxth	r3, r3
 8006234:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006250:	b29b      	uxth	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006256:	4413      	add	r3, r2
 8006258:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800625a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	011a      	lsls	r2, r3, #4
 8006268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800626a:	4413      	add	r3, r2
 800626c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006270:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006276:	b29a      	uxth	r2, r3
 8006278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800627a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800627c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	891b      	ldrh	r3, [r3, #8]
 8006288:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800628c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6959      	ldr	r1, [r3, #20]
 8006298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629c:	b29b      	uxth	r3, r3
 800629e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80062a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80062aa:	6800      	ldr	r0, [r0, #0]
 80062ac:	f001 f80d 	bl	80072ca <USB_WritePMA>
 80062b0:	e1b3      	b.n	800661a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80062b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6a1a      	ldr	r2, [r3, #32]
 80062be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80c6 	beq.w	8006484 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	673b      	str	r3, [r7, #112]	@ 0x70
 8006304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d177      	bne.n	8006404 <USB_EPStartXfer+0xb18>
 8006314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006334:	4413      	add	r3, r2
 8006336:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	011a      	lsls	r2, r3, #4
 8006346:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006348:	4413      	add	r3, r2
 800634a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800634e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b29b      	uxth	r3, r3
 8006356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800635a:	b29a      	uxth	r2, r3
 800635c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006364:	2b3e      	cmp	r3, #62	@ 0x3e
 8006366:	d921      	bls.n	80063ac <USB_EPStartXfer+0xac0>
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <USB_EPStartXfer+0xa9c>
 800637e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006382:	3b01      	subs	r3, #1
 8006384:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006392:	b29b      	uxth	r3, r3
 8006394:	029b      	lsls	r3, r3, #10
 8006396:	b29b      	uxth	r3, r3
 8006398:	4313      	orrs	r3, r2
 800639a:	b29b      	uxth	r3, r3
 800639c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e050      	b.n	800644e <USB_EPStartXfer+0xb62>
 80063ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <USB_EPStartXfer+0xade>
 80063b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	e041      	b.n	800644e <USB_EPStartXfer+0xb62>
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d004      	beq.n	80063ea <USB_EPStartXfer+0xafe>
 80063e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063e4:	3301      	adds	r3, #1
 80063e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	029b      	lsls	r3, r3, #10
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	4313      	orrs	r3, r2
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006400:	801a      	strh	r2, [r3, #0]
 8006402:	e024      	b.n	800644e <USB_EPStartXfer+0xb62>
 8006404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	785b      	ldrb	r3, [r3, #1]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d11c      	bne.n	800644e <USB_EPStartXfer+0xb62>
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006422:	b29b      	uxth	r3, r3
 8006424:	461a      	mov	r2, r3
 8006426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006428:	4413      	add	r3, r2
 800642a:	673b      	str	r3, [r7, #112]	@ 0x70
 800642c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	011a      	lsls	r2, r3, #4
 800643a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800643c:	4413      	add	r3, r2
 800643e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006448:	b29a      	uxth	r2, r3
 800644a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800644c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800644e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	895b      	ldrh	r3, [r3, #10]
 800645a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800645e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6959      	ldr	r1, [r3, #20]
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646e:	b29b      	uxth	r3, r3
 8006470:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006474:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006478:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800647c:	6800      	ldr	r0, [r0, #0]
 800647e:	f000 ff24 	bl	80072ca <USB_WritePMA>
 8006482:	e0ca      	b.n	800661a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d177      	bne.n	8006584 <USB_EPStartXfer+0xc98>
 8006494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064b4:	4413      	add	r3, r2
 80064b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	011a      	lsls	r2, r3, #4
 80064c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064c8:	4413      	add	r3, r2
 80064ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064da:	b29a      	uxth	r2, r3
 80064dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064de:	801a      	strh	r2, [r3, #0]
 80064e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80064e6:	d921      	bls.n	800652c <USB_EPStartXfer+0xc40>
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <USB_EPStartXfer+0xc1c>
 80064fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006502:	3b01      	subs	r3, #1
 8006504:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29a      	uxth	r2, r3
 800650e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006512:	b29b      	uxth	r3, r3
 8006514:	029b      	lsls	r3, r3, #10
 8006516:	b29b      	uxth	r3, r3
 8006518:	4313      	orrs	r3, r2
 800651a:	b29b      	uxth	r3, r3
 800651c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006524:	b29a      	uxth	r2, r3
 8006526:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	e05c      	b.n	80065e6 <USB_EPStartXfer+0xcfa>
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <USB_EPStartXfer+0xc5e>
 8006534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006542:	b29a      	uxth	r2, r3
 8006544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	e04d      	b.n	80065e6 <USB_EPStartXfer+0xcfa>
 800654a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d004      	beq.n	800656a <USB_EPStartXfer+0xc7e>
 8006560:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006564:	3301      	adds	r3, #1
 8006566:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800656a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29a      	uxth	r2, r3
 8006570:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006574:	b29b      	uxth	r3, r3
 8006576:	029b      	lsls	r3, r3, #10
 8006578:	b29b      	uxth	r3, r3
 800657a:	4313      	orrs	r3, r2
 800657c:	b29a      	uxth	r2, r3
 800657e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	e030      	b.n	80065e6 <USB_EPStartXfer+0xcfa>
 8006584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d128      	bne.n	80065e6 <USB_EPStartXfer+0xcfa>
 8006594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065b8:	4413      	add	r3, r2
 80065ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	011a      	lsls	r2, r3, #4
 80065cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065d0:	4413      	add	r3, r2
 80065d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065de:	b29a      	uxth	r2, r3
 80065e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	891b      	ldrh	r3, [r3, #8]
 80065f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6959      	ldr	r1, [r3, #20]
 8006602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006606:	b29b      	uxth	r3, r3
 8006608:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800660c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006610:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006614:	6800      	ldr	r0, [r0, #0]
 8006616:	f000 fe58 	bl	80072ca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800661a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006640:	817b      	strh	r3, [r7, #10]
 8006642:	897b      	ldrh	r3, [r7, #10]
 8006644:	f083 0310 	eor.w	r3, r3, #16
 8006648:	817b      	strh	r3, [r7, #10]
 800664a:	897b      	ldrh	r3, [r7, #10]
 800664c:	f083 0320 	eor.w	r3, r3, #32
 8006650:	817b      	strh	r3, [r7, #10]
 8006652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	441a      	add	r2, r3
 800666c:	897b      	ldrh	r3, [r7, #10]
 800666e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006672:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800667a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800667e:	b29b      	uxth	r3, r3
 8006680:	8013      	strh	r3, [r2, #0]
 8006682:	f000 bcde 	b.w	8007042 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	7b1b      	ldrb	r3, [r3, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f040 80bb 	bne.w	800680e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	699a      	ldr	r2, [r3, #24]
 80066a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d917      	bls.n	80066e4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80066b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80066c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699a      	ldr	r2, [r3, #24]
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	1ad2      	subs	r2, r2, r3
 80066d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	619a      	str	r2, [r3, #24]
 80066e2:	e00e      	b.n	8006702 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80066e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80066f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2200      	movs	r2, #0
 8006700:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006726:	4413      	add	r3, r2
 8006728:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800672c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	011a      	lsls	r2, r3, #4
 800673a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800673e:	4413      	add	r3, r2
 8006740:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006744:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	b29b      	uxth	r3, r3
 8006750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006754:	b29a      	uxth	r2, r3
 8006756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800675a:	801a      	strh	r2, [r3, #0]
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006760:	2b3e      	cmp	r3, #62	@ 0x3e
 8006762:	d924      	bls.n	80067ae <USB_EPStartXfer+0xec2>
 8006764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800676e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <USB_EPStartXfer+0xe98>
 800677a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800677e:	3b01      	subs	r3, #1
 8006780:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29a      	uxth	r2, r3
 800678c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006790:	b29b      	uxth	r3, r3
 8006792:	029b      	lsls	r3, r3, #10
 8006794:	b29b      	uxth	r3, r3
 8006796:	4313      	orrs	r3, r2
 8006798:	b29b      	uxth	r3, r3
 800679a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	f000 bc10 	b.w	8006fce <USB_EPStartXfer+0x16e2>
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10c      	bne.n	80067d0 <USB_EPStartXfer+0xee4>
 80067b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	e3fe      	b.n	8006fce <USB_EPStartXfer+0x16e2>
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <USB_EPStartXfer+0xf04>
 80067e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067ea:	3301      	adds	r3, #1
 80067ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	029b      	lsls	r3, r3, #10
 8006800:	b29b      	uxth	r3, r3
 8006802:	4313      	orrs	r3, r2
 8006804:	b29a      	uxth	r2, r3
 8006806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	e3df      	b.n	8006fce <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800680e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	78db      	ldrb	r3, [r3, #3]
 800681a:	2b02      	cmp	r3, #2
 800681c:	f040 8218 	bne.w	8006c50 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	2b00      	cmp	r3, #0
 800682e:	f040 809d 	bne.w	800696c <USB_EPStartXfer+0x1080>
 8006832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006836:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006844:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800684e:	b29b      	uxth	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006856:	4413      	add	r3, r2
 8006858:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	011a      	lsls	r2, r3, #4
 800686a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800686e:	4413      	add	r3, r2
 8006870:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006884:	b29a      	uxth	r2, r3
 8006886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b3e      	cmp	r3, #62	@ 0x3e
 800689a:	d92b      	bls.n	80068f4 <USB_EPStartXfer+0x1008>
 800689c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <USB_EPStartXfer+0xfe0>
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c6:	3b01      	subs	r3, #1
 80068c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d8:	b29b      	uxth	r3, r3
 80068da:	029b      	lsls	r3, r3, #10
 80068dc:	b29b      	uxth	r3, r3
 80068de:	4313      	orrs	r3, r2
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	e070      	b.n	80069d6 <USB_EPStartXfer+0x10ea>
 80068f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10c      	bne.n	800691e <USB_EPStartXfer+0x1032>
 8006904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006914:	b29a      	uxth	r2, r3
 8006916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	e05b      	b.n	80069d6 <USB_EPStartXfer+0x10ea>
 800691e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d004      	beq.n	800694e <USB_EPStartXfer+0x1062>
 8006944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006948:	3301      	adds	r3, #1
 800694a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800694e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29a      	uxth	r2, r3
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800695a:	b29b      	uxth	r3, r3
 800695c:	029b      	lsls	r3, r3, #10
 800695e:	b29b      	uxth	r3, r3
 8006960:	4313      	orrs	r3, r2
 8006962:	b29a      	uxth	r2, r3
 8006964:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	e034      	b.n	80069d6 <USB_EPStartXfer+0x10ea>
 800696c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d12c      	bne.n	80069d6 <USB_EPStartXfer+0x10ea>
 800697c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006980:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800698a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006998:	b29b      	uxth	r3, r3
 800699a:	461a      	mov	r2, r3
 800699c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069a0:	4413      	add	r3, r2
 80069a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	011a      	lsls	r2, r3, #4
 80069b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80069d4:	801a      	strh	r2, [r3, #0]
 80069d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80069e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f040 809d 	bne.w	8006b30 <USB_EPStartXfer+0x1244>
 80069f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	011a      	lsls	r2, r3, #4
 8006a2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a32:	4413      	add	r3, r2
 8006a34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a5e:	d92b      	bls.n	8006ab8 <USB_EPStartXfer+0x11cc>
 8006a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <USB_EPStartXfer+0x11a4>
 8006a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	029b      	lsls	r3, r3, #10
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ab4:	801a      	strh	r2, [r3, #0]
 8006ab6:	e069      	b.n	8006b8c <USB_EPStartXfer+0x12a0>
 8006ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10c      	bne.n	8006ae2 <USB_EPStartXfer+0x11f6>
 8006ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ade:	801a      	strh	r2, [r3, #0]
 8006ae0:	e054      	b.n	8006b8c <USB_EPStartXfer+0x12a0>
 8006ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	085b      	lsrs	r3, r3, #1
 8006af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <USB_EPStartXfer+0x1226>
 8006b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	029b      	lsls	r3, r3, #10
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	4313      	orrs	r3, r2
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	e02d      	b.n	8006b8c <USB_EPStartXfer+0x12a0>
 8006b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d125      	bne.n	8006b8c <USB_EPStartXfer+0x12a0>
 8006b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b56:	4413      	add	r3, r2
 8006b58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	011a      	lsls	r2, r3, #4
 8006b6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b6e:	4413      	add	r3, r2
 8006b70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b8a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8218 	beq.w	8006fce <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <USB_EPStartXfer+0x12ea>
 8006bca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10d      	bne.n	8006bf2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f040 81f5 	bne.w	8006fce <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006be4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 81ee 	bne.w	8006fce <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c18:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	8013      	strh	r3, [r2, #0]
 8006c4e:	e1be      	b.n	8006fce <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	78db      	ldrb	r3, [r3, #3]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	f040 81b4 	bne.w	8006fca <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d917      	bls.n	8006cae <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	619a      	str	r2, [r3, #24]
 8006cac:	e00e      	b.n	8006ccc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 8085 	bne.w	8006de8 <USB_EPStartXfer+0x14fc>
 8006cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d02:	4413      	add	r3, r2
 8006d04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	011a      	lsls	r2, r3, #4
 8006d16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d3e:	d923      	bls.n	8006d88 <USB_EPStartXfer+0x149c>
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <USB_EPStartXfer+0x1474>
 8006d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	029b      	lsls	r3, r3, #10
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	4313      	orrs	r3, r2
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d84:	801a      	strh	r2, [r3, #0]
 8006d86:	e060      	b.n	8006e4a <USB_EPStartXfer+0x155e>
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10c      	bne.n	8006daa <USB_EPStartXfer+0x14be>
 8006d90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006da6:	801a      	strh	r2, [r3, #0]
 8006da8:	e04f      	b.n	8006e4a <USB_EPStartXfer+0x155e>
 8006daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dae:	085b      	lsrs	r3, r3, #1
 8006db0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <USB_EPStartXfer+0x14de>
 8006dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	029b      	lsls	r3, r3, #10
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	e030      	b.n	8006e4a <USB_EPStartXfer+0x155e>
 8006de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	785b      	ldrb	r3, [r3, #1]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d128      	bne.n	8006e4a <USB_EPStartXfer+0x155e>
 8006df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	011a      	lsls	r2, r3, #4
 8006e30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e34:	4413      	add	r3, r2
 8006e36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	785b      	ldrb	r3, [r3, #1]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f040 8085 	bne.w	8006f74 <USB_EPStartXfer+0x1688>
 8006e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e8e:	4413      	add	r3, r2
 8006e90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	011a      	lsls	r2, r3, #4
 8006ea2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006eb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eca:	d923      	bls.n	8006f14 <USB_EPStartXfer+0x1628>
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eda:	f003 031f 	and.w	r3, r3, #31
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d104      	bne.n	8006eec <USB_EPStartXfer+0x1600>
 8006ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006eec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	029b      	lsls	r3, r3, #10
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	4313      	orrs	r3, r2
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	e05c      	b.n	8006fce <USB_EPStartXfer+0x16e2>
 8006f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10c      	bne.n	8006f36 <USB_EPStartXfer+0x164a>
 8006f1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	e04b      	b.n	8006fce <USB_EPStartXfer+0x16e2>
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3a:	085b      	lsrs	r3, r3, #1
 8006f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <USB_EPStartXfer+0x166a>
 8006f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f50:	3301      	adds	r3, #1
 8006f52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	029b      	lsls	r3, r3, #10
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	e02c      	b.n	8006fce <USB_EPStartXfer+0x16e2>
 8006f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d124      	bne.n	8006fce <USB_EPStartXfer+0x16e2>
 8006f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	011a      	lsls	r2, r3, #4
 8006fae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	e001      	b.n	8006fce <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e03a      	b.n	8007044 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ff8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ffc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007000:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007004:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007008:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800700c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	441a      	add	r2, r3
 800702a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800702e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800703a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800703e:	b29b      	uxth	r3, r3
 8007040:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d020      	beq.n	80070a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007076:	81bb      	strh	r3, [r7, #12]
 8007078:	89bb      	ldrh	r3, [r7, #12]
 800707a:	f083 0310 	eor.w	r3, r3, #16
 800707e:	81bb      	strh	r3, [r7, #12]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	441a      	add	r2, r3
 800708a:	89bb      	ldrh	r3, [r7, #12]
 800708c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709c:	b29b      	uxth	r3, r3
 800709e:	8013      	strh	r3, [r2, #0]
 80070a0:	e01f      	b.n	80070e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070b8:	81fb      	strh	r3, [r7, #14]
 80070ba:	89fb      	ldrh	r3, [r7, #14]
 80070bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070c0:	81fb      	strh	r3, [r7, #14]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	441a      	add	r2, r3
 80070cc:	89fb      	ldrh	r3, [r7, #14]
 80070ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070de:	b29b      	uxth	r3, r3
 80070e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr

080070ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b087      	sub	sp, #28
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	7b1b      	ldrb	r3, [r3, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f040 809d 	bne.w	800723c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d04c      	beq.n	80071a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	823b      	strh	r3, [r7, #16]
 8007118:	8a3b      	ldrh	r3, [r7, #16]
 800711a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01b      	beq.n	800715a <USB_EPClearStall+0x6c>
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007138:	81fb      	strh	r3, [r7, #14]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	441a      	add	r2, r3
 8007144:	89fb      	ldrh	r3, [r7, #14]
 8007146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800714a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800714e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007152:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007156:	b29b      	uxth	r3, r3
 8007158:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	78db      	ldrb	r3, [r3, #3]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d06c      	beq.n	800723c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007178:	81bb      	strh	r3, [r7, #12]
 800717a:	89bb      	ldrh	r3, [r7, #12]
 800717c:	f083 0320 	eor.w	r3, r3, #32
 8007180:	81bb      	strh	r3, [r7, #12]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	441a      	add	r2, r3
 800718c:	89bb      	ldrh	r3, [r7, #12]
 800718e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800719a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800719e:	b29b      	uxth	r3, r3
 80071a0:	8013      	strh	r3, [r2, #0]
 80071a2:	e04b      	b.n	800723c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	82fb      	strh	r3, [r7, #22]
 80071b2:	8afb      	ldrh	r3, [r7, #22]
 80071b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01b      	beq.n	80071f4 <USB_EPClearStall+0x106>
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d2:	82bb      	strh	r3, [r7, #20]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	441a      	add	r2, r3
 80071de:	8abb      	ldrh	r3, [r7, #20]
 80071e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800720a:	827b      	strh	r3, [r7, #18]
 800720c:	8a7b      	ldrh	r3, [r7, #18]
 800720e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007212:	827b      	strh	r3, [r7, #18]
 8007214:	8a7b      	ldrh	r3, [r7, #18]
 8007216:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800721a:	827b      	strh	r3, [r7, #18]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	441a      	add	r2, r3
 8007226:	8a7b      	ldrh	r3, [r7, #18]
 8007228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800722c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007238:	b29b      	uxth	r3, r3
 800723a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr

08007248 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d103      	bne.n	8007262 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2280      	movs	r2, #128	@ 0x80
 800725e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr

0800726e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr

08007282 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	bc80      	pop	{r7}
 8007294:	4770      	bx	lr

08007296 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80072a8:	68fb      	ldr	r3, [r7, #12]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr

080072b4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr

080072ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b08b      	sub	sp, #44	@ 0x2c
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	4611      	mov	r1, r2
 80072d6:	461a      	mov	r2, r3
 80072d8:	460b      	mov	r3, r1
 80072da:	80fb      	strh	r3, [r7, #6]
 80072dc:	4613      	mov	r3, r2
 80072de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072e0:	88bb      	ldrh	r3, [r7, #4]
 80072e2:	3301      	adds	r3, #1
 80072e4:	085b      	lsrs	r3, r3, #1
 80072e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	005a      	lsls	r2, r3, #1
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072fc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	627b      	str	r3, [r7, #36]	@ 0x24
 8007302:	e01e      	b.n	8007342 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	3301      	adds	r3, #1
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	b21a      	sxth	r2, r3
 8007314:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007318:	4313      	orrs	r3, r2
 800731a:	b21b      	sxth	r3, r3
 800731c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	8a7a      	ldrh	r2, [r7, #18]
 8007322:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	3302      	adds	r3, #2
 8007328:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	3302      	adds	r3, #2
 800732e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	3301      	adds	r3, #1
 8007334:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	3301      	adds	r3, #1
 800733a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	3b01      	subs	r3, #1
 8007340:	627b      	str	r3, [r7, #36]	@ 0x24
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1dd      	bne.n	8007304 <USB_WritePMA+0x3a>
  }
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	372c      	adds	r7, #44	@ 0x2c
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr

08007354 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007354:	b480      	push	{r7}
 8007356:	b08b      	sub	sp, #44	@ 0x2c
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	4611      	mov	r1, r2
 8007360:	461a      	mov	r2, r3
 8007362:	460b      	mov	r3, r1
 8007364:	80fb      	strh	r3, [r7, #6]
 8007366:	4613      	mov	r3, r2
 8007368:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800736a:	88bb      	ldrh	r3, [r7, #4]
 800736c:	085b      	lsrs	r3, r3, #1
 800736e:	b29b      	uxth	r3, r3
 8007370:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800737a:	88fb      	ldrh	r3, [r7, #6]
 800737c:	005a      	lsls	r2, r3, #1
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007386:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	627b      	str	r3, [r7, #36]	@ 0x24
 800738c:	e01b      	b.n	80073c6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	3302      	adds	r3, #2
 800739a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	3301      	adds	r3, #1
 80073a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	0a1b      	lsrs	r3, r3, #8
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	3301      	adds	r3, #1
 80073b8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	3302      	adds	r3, #2
 80073be:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	3b01      	subs	r3, #1
 80073c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e0      	bne.n	800738e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80073cc:	88bb      	ldrh	r3, [r7, #4]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d007      	beq.n	80073e8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	701a      	strb	r2, [r3, #0]
  }
}
 80073e8:	bf00      	nop
 80073ea:	372c      	adds	r7, #44	@ 0x2c
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bc80      	pop	{r7}
 80073f0:	4770      	bx	lr
	...

080073f4 <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]

  USBD_LL_OpenEP(pdev,
 8007404:	2340      	movs	r3, #64	@ 0x40
 8007406:	2202      	movs	r2, #2
 8007408:	2181      	movs	r1, #129	@ 0x81
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fc49 	bl	8008ca2 <USBD_LL_OpenEP>
                 MIDI_EPIN_ADDR,
                 USBD_EP_TYPE_BULK,
                 MIDI_EPIN_SIZE);

  USBD_LL_OpenEP(pdev,
 8007410:	2340      	movs	r3, #64	@ 0x40
 8007412:	2202      	movs	r2, #2
 8007414:	2101      	movs	r1, #1
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 fc43 	bl	8008ca2 <USBD_LL_OpenEP>
               MIDI_EPOUT_ADDR,
               USBD_EP_TYPE_BULK,
               MIDI_EPOUT_SIZE);

  USBD_LL_PrepareReceive(pdev,
 800741c:	2340      	movs	r3, #64	@ 0x40
 800741e:	4a0f      	ldr	r2, [pc, #60]	@ (800745c <USBD_MIDI_Init+0x68>)
 8007420:	2101      	movs	r1, #1
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fd2d 	bl	8008e82 <USBD_LL_PrepareReceive>
               MIDI_EPOUT_ADDR,
               usb_rx_buffer,
               MIDI_EPOUT_SIZE);

  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 8007428:	2010      	movs	r0, #16
 800742a:	f001 fd4d 	bl	8008ec8 <USBD_static_malloc>
 800742e:	4602      	mov	r2, r0
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if(pdev->pClassData == NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <USBD_MIDI_Init+0x52>
  {
    ret = 1;
 8007440:	2301      	movs	r3, #1
 8007442:	73fb      	strb	r3, [r7, #15]
 8007444:	e004      	b.n	8007450 <USBD_MIDI_Init+0x5c>
  }
  else
  {
    ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800744c:	2200      	movs	r2, #0
 800744e:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20000288 	.word	0x20000288

08007460 <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  /* Close MIDI EPs */
  USBD_LL_CloseEP(pdev, MIDI_EPIN_SIZE);
 800746c:	2140      	movs	r1, #64	@ 0x40
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 fc3d 	bl	8008cee <USBD_LL_CloseEP>

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d009      	beq.n	8007492 <USBD_MIDI_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007484:	4618      	mov	r0, r3
 8007486:	f001 fd2b 	bl	8008ee0 <USBD_static_free>
    pdev->pClassData = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	613b      	str	r3, [r7, #16]
  USBD_MIDI_HandleTypeDef     *hmidi = pdev->pClassData;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074b4:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d044      	beq.n	800754c <USBD_MIDI_Setup+0xb0>
 80074c2:	2b20      	cmp	r3, #32
 80074c4:	d171      	bne.n	80075aa <USBD_MIDI_Setup+0x10e>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	785b      	ldrb	r3, [r3, #1]
 80074ca:	3b02      	subs	r3, #2
 80074cc:	2b09      	cmp	r3, #9
 80074ce:	d836      	bhi.n	800753e <USBD_MIDI_Setup+0xa2>
 80074d0:	a201      	add	r2, pc, #4	@ (adr r2, 80074d8 <USBD_MIDI_Setup+0x3c>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	0800752f 	.word	0x0800752f
 80074dc:	0800750f 	.word	0x0800750f
 80074e0:	0800753f 	.word	0x0800753f
 80074e4:	0800753f 	.word	0x0800753f
 80074e8:	0800753f 	.word	0x0800753f
 80074ec:	0800753f 	.word	0x0800753f
 80074f0:	0800753f 	.word	0x0800753f
 80074f4:	0800753f 	.word	0x0800753f
 80074f8:	0800751d 	.word	0x0800751d
 80074fc:	08007501 	.word	0x08007501
    {
      case MIDI_REQ_SET_PROTOCOL:
        hmidi->Protocol = (uint8_t)(req->wValue);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	885b      	ldrh	r3, [r3, #2]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	461a      	mov	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	601a      	str	r2, [r3, #0]
        break;
 800750c:	e01d      	b.n	800754a <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_PROTOCOL:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->Protocol,
 800750e:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 8007510:	2201      	movs	r2, #1
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 f8fd 	bl	8008714 <USBD_CtlSendData>
                          1);
        break;
 800751a:	e016      	b.n	800754a <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_SET_IDLE:
        hmidi->IdleState = (uint8_t)(req->wValue >> 8);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	885b      	ldrh	r3, [r3, #2]
 8007520:	0a1b      	lsrs	r3, r3, #8
 8007522:	b29b      	uxth	r3, r3
 8007524:	b2db      	uxtb	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	605a      	str	r2, [r3, #4]
        break;
 800752c:	e00d      	b.n	800754a <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_IDLE:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->IdleState,
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3304      	adds	r3, #4
        USBD_CtlSendData (pdev,
 8007532:	2201      	movs	r2, #1
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 f8ec 	bl	8008714 <USBD_CtlSendData>
                          1);
        break;
 800753c:	e005      	b.n	800754a <USBD_MIDI_Setup+0xae>

      default:
        USBD_CtlError (pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 f87d 	bl	8008640 <USBD_CtlError>
        return USBD_FAIL;
 8007546:	2302      	movs	r3, #2
 8007548:	e030      	b.n	80075ac <USBD_MIDI_Setup+0x110>
    }
    break;
 800754a:	e02e      	b.n	80075aa <USBD_MIDI_Setup+0x10e>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b0b      	cmp	r3, #11
 8007552:	d023      	beq.n	800759c <USBD_MIDI_Setup+0x100>
 8007554:	2b0b      	cmp	r3, #11
 8007556:	dc28      	bgt.n	80075aa <USBD_MIDI_Setup+0x10e>
 8007558:	2b06      	cmp	r3, #6
 800755a:	d002      	beq.n	8007562 <USBD_MIDI_Setup+0xc6>
 800755c:	2b0a      	cmp	r3, #10
 800755e:	d015      	beq.n	800758c <USBD_MIDI_Setup+0xf0>
 8007560:	e023      	b.n	80075aa <USBD_MIDI_Setup+0x10e>
    {
      case USB_REQ_GET_DESCRIPTOR:
        if( req->wValue >> 8 == MIDI_DESCRIPTOR_TYPE)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	885b      	ldrh	r3, [r3, #2]
 8007566:	0a1b      	lsrs	r3, r3, #8
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b21      	cmp	r3, #33	@ 0x21
 800756c:	d107      	bne.n	800757e <USBD_MIDI_Setup+0xe2>
        {
          pbuf = USBD_MIDI_CfgDesc + USB_MIDI_CLASS_DESC_SHIFT;
 800756e:	4b11      	ldr	r3, [pc, #68]	@ (80075b4 <USBD_MIDI_Setup+0x118>)
 8007570:	613b      	str	r3, [r7, #16]
          len = MIN(USB_MIDI_DESC_SIZE , req->wLength);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	88db      	ldrh	r3, [r3, #6]
 8007576:	2b07      	cmp	r3, #7
 8007578:	bf28      	it	cs
 800757a:	2307      	movcs	r3, #7
 800757c:	82fb      	strh	r3, [r7, #22]
        }

        USBD_CtlSendData (pdev, pbuf, len);
 800757e:	8afb      	ldrh	r3, [r7, #22]
 8007580:	461a      	mov	r2, r3
 8007582:	6939      	ldr	r1, [r7, #16]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 f8c5 	bl	8008714 <USBD_CtlSendData>
        break;
 800758a:	e00e      	b.n	80075aa <USBD_MIDI_Setup+0x10e>

      case USB_REQ_GET_INTERFACE :
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->AltSetting,
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3308      	adds	r3, #8
        USBD_CtlSendData (pdev,
 8007590:	2201      	movs	r2, #1
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 f8bd 	bl	8008714 <USBD_CtlSendData>
                          1);
        break;
 800759a:	e006      	b.n	80075aa <USBD_MIDI_Setup+0x10e>

      case USB_REQ_SET_INTERFACE :
        hmidi->AltSetting = (uint8_t)(req->wValue);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	885b      	ldrh	r3, [r3, #2]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	609a      	str	r2, [r3, #8]
        break;
 80075a8:	bf00      	nop
    }
  }
  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	2000006a 	.word	0x2000006a

080075b8 <USBD_MIDI_GetState>:
  *         Get MIDI State
  * @param  pdev: device instance
  * @retval usb state  (MIDI_IDLE, MIDI_BUSY)
  */
uint8_t USBD_MIDI_GetState(USBD_HandleTypeDef  *pdev)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  return ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075c6:	7b1b      	ldrb	r3, [r3, #12]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr

080075d2 <USBD_MIDI_SendPackets>:
  * @retval status
  */
uint8_t USBD_MIDI_SendPackets(USBD_HandleTypeDef  *pdev,
                                 uint8_t *data,
                                 uint16_t len)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b086      	sub	sp, #24
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	4613      	mov	r3, r2
 80075de:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef *hmidi = pdev->pClassData;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075e6:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d10c      	bne.n	800760c <USBD_MIDI_SendPackets+0x3a>
  {
    if(hmidi->state == MIDI_IDLE)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	7b1b      	ldrb	r3, [r3, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d108      	bne.n	800760c <USBD_MIDI_SendPackets+0x3a>
    {
      hmidi->state = MIDI_BUSY;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2201      	movs	r2, #1
 80075fe:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev, MIDI_EPIN_ADDR, data, len);
 8007600:	88fb      	ldrh	r3, [r7, #6]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	2181      	movs	r1, #129	@ 0x81
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f001 fc18 	bl	8008e3c <USBD_LL_Transmit>
    }
  }
  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2253      	movs	r2, #83	@ 0x53
 8007624:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8007626:	4b03      	ldr	r3, [pc, #12]	@ (8007634 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20000058 	.word	0x20000058

08007638 <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800764a:	2200      	movs	r2, #0
 800764c:	731a      	strb	r2, [r3, #12]

  USBD_MIDI_OnPacketsSent();
 800764e:	f000 f805 	bl	800765c <USBD_MIDI_OnPacketsSent>

  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBD_MIDI_OnPacketsSent>:
/**
  * @brief  USBD_MIDI_OnPacketsSent
  *         on usb midi packets sent to the host callback
  */
__weak extern void USBD_MIDI_OnPacketsSent(void)
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
}
 8007660:	bf00      	nop
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr

08007668 <USBD_MIDI_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  uint8_t len;

  if (epnum != (MIDI_EPOUT_ADDR & 0x0F)) return USBD_FAIL;
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d001      	beq.n	800767e <USBD_MIDI_DataOut+0x16>
 800767a:	2302      	movs	r3, #2
 800767c:	e015      	b.n	80076aa <USBD_MIDI_DataOut+0x42>

  len = (uint8_t)HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, epnum);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	4611      	mov	r1, r2
 8007688:	4618      	mov	r0, r3
 800768a:	f7fa ffa0 	bl	80025ce <HAL_PCD_EP_GetRxCount>
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]

  USBD_MIDI_OnPacketsReceived(usb_rx_buffer, len);
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	4619      	mov	r1, r3
 8007696:	4807      	ldr	r0, [pc, #28]	@ (80076b4 <USBD_MIDI_DataOut+0x4c>)
 8007698:	f000 f80e 	bl	80076b8 <USBD_MIDI_OnPacketsReceived>

  USBD_LL_PrepareReceive(pdev, MIDI_EPOUT_ADDR, usb_rx_buffer, MIDI_EPOUT_SIZE);
 800769c:	2340      	movs	r3, #64	@ 0x40
 800769e:	4a05      	ldr	r2, [pc, #20]	@ (80076b4 <USBD_MIDI_DataOut+0x4c>)
 80076a0:	2101      	movs	r1, #1
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fbed 	bl	8008e82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000288 	.word	0x20000288

080076b8 <USBD_MIDI_OnPacketsReceived>:
  *         on usb midi packets received from the host callback
  * @param  data: pointer to the data packet
  * @param  len: size of the data
  */
__weak extern void USBD_MIDI_OnPacketsReceived(uint8_t *data, uint8_t len)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(data);
  UNUSED(len);
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr
	...

080076d0 <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	220a      	movs	r2, #10
 80076dc:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 80076de:	4b03      	ldr	r3, [pc, #12]	@ (80076ec <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	200000ac 	.word	0x200000ac

080076f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	4613      	mov	r3, r2
 80076fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007704:	2302      	movs	r3, #2
 8007706:	e01a      	b.n	800773e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	79fa      	ldrb	r2, [r7, #7]
 8007734:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f001 fa48 	bl	8008bcc <USBD_LL_Init>

  return USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007746:	b480      	push	{r7}
 8007748:	b085      	sub	sp, #20
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d006      	beq.n	8007768 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	e001      	b.n	800776c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007768:	2302      	movs	r3, #2
 800776a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fa73 	bl	8008c6c <USBD_LL_Start>

  return USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr

080077a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80077b0:	2302      	movs	r3, #2
 80077b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00c      	beq.n	80077d8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	4611      	mov	r1, r2
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	4798      	blx	r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	4611      	mov	r1, r2
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	4798      	blx	r3

  return USBD_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fed7 	bl	80085ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2b02      	cmp	r3, #2
 8007842:	d016      	beq.n	8007872 <USBD_LL_SetupStage+0x6a>
 8007844:	2b02      	cmp	r3, #2
 8007846:	d81c      	bhi.n	8007882 <USBD_LL_SetupStage+0x7a>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <USBD_LL_SetupStage+0x4a>
 800784c:	2b01      	cmp	r3, #1
 800784e:	d008      	beq.n	8007862 <USBD_LL_SetupStage+0x5a>
 8007850:	e017      	b.n	8007882 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9ca 	bl	8007bf4 <USBD_StdDevReq>
      break;
 8007860:	e01a      	b.n	8007898 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa2c 	bl	8007cc8 <USBD_StdItfReq>
      break;
 8007870:	e012      	b.n	8007898 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa6c 	bl	8007d58 <USBD_StdEPReq>
      break;
 8007880:	e00a      	b.n	8007898 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007888:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800788c:	b2db      	uxtb	r3, r3
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fa4b 	bl	8008d2c <USBD_LL_StallEP>
      break;
 8007896:	bf00      	nop
  }

  return USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b086      	sub	sp, #24
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	460b      	mov	r3, r1
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80078b0:	7afb      	ldrb	r3, [r7, #11]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d14b      	bne.n	800794e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80078bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d134      	bne.n	8007932 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d919      	bls.n	8007908 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	1ad2      	subs	r2, r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	68da      	ldr	r2, [r3, #12]
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d203      	bcs.n	80078f6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	e002      	b.n	80078fc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 ff35 	bl	8008770 <USBD_CtlContinueRx>
 8007906:	e038      	b.n	800797a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00a      	beq.n	800792a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800791a:	2b03      	cmp	r3, #3
 800791c:	d105      	bne.n	800792a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 ff32 	bl	8008794 <USBD_CtlSendStatus>
 8007930:	e023      	b.n	800797a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007938:	2b05      	cmp	r3, #5
 800793a:	d11e      	bne.n	800797a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007944:	2100      	movs	r1, #0
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f001 f9f0 	bl	8008d2c <USBD_LL_StallEP>
 800794c:	e015      	b.n	800797a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00d      	beq.n	8007976 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007960:	2b03      	cmp	r3, #3
 8007962:	d108      	bne.n	8007976 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	7afa      	ldrb	r2, [r7, #11]
 800796e:	4611      	mov	r1, r2
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	4798      	blx	r3
 8007974:	e001      	b.n	800797a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007976:	2302      	movs	r3, #2
 8007978:	e000      	b.n	800797c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	460b      	mov	r3, r1
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d17f      	bne.n	8007a98 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3314      	adds	r3, #20
 800799c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d15c      	bne.n	8007a62 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d915      	bls.n	80079e0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	1ad2      	subs	r2, r2, r3
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 febd 	bl	800874c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079d2:	2300      	movs	r3, #0
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f001 fa52 	bl	8008e82 <USBD_LL_PrepareReceive>
 80079de:	e04e      	b.n	8007a7e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	6912      	ldr	r2, [r2, #16]
 80079e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80079ec:	fb01 f202 	mul.w	r2, r1, r2
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d11c      	bne.n	8007a30 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d316      	bcc.n	8007a30 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d20f      	bcs.n	8007a30 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a10:	2200      	movs	r2, #0
 8007a12:	2100      	movs	r1, #0
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fe99 	bl	800874c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a22:	2300      	movs	r3, #0
 8007a24:	2200      	movs	r2, #0
 8007a26:	2100      	movs	r1, #0
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f001 fa2a 	bl	8008e82 <USBD_LL_PrepareReceive>
 8007a2e:	e026      	b.n	8007a7e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d105      	bne.n	8007a52 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007a52:	2180      	movs	r1, #128	@ 0x80
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f001 f969 	bl	8008d2c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 fead 	bl	80087ba <USBD_CtlReceiveStatus>
 8007a60:	e00d      	b.n	8007a7e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d004      	beq.n	8007a76 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d103      	bne.n	8007a7e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007a76:	2180      	movs	r1, #128	@ 0x80
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f001 f957 	bl	8008d2c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d11d      	bne.n	8007ac4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7ff fe81 	bl	8007790 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007a96:	e015      	b.n	8007ac4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00d      	beq.n	8007ac0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d108      	bne.n	8007ac0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	7afa      	ldrb	r2, [r7, #11]
 8007ab8:	4611      	mov	r1, r2
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	4798      	blx	r3
 8007abe:	e001      	b.n	8007ac4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e000      	b.n	8007ac6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ad6:	2340      	movs	r3, #64	@ 0x40
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2100      	movs	r1, #0
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 f8e0 	bl	8008ca2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2240      	movs	r2, #64	@ 0x40
 8007aee:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007af2:	2340      	movs	r3, #64	@ 0x40
 8007af4:	2200      	movs	r2, #0
 8007af6:	2180      	movs	r1, #128	@ 0x80
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f8d2 	bl	8008ca2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2240      	movs	r2, #64	@ 0x40
 8007b08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6852      	ldr	r2, [r2, #4]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	4611      	mov	r1, r2
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
  }

  return USBD_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr

08007b6e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2204      	movs	r2, #4
 8007b86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bc80      	pop	{r7}
 8007b94:	4770      	bx	lr

08007b96 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d105      	bne.n	8007bb4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bc80      	pop	{r7}
 8007bbe:	4770      	bx	lr

08007bc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d10b      	bne.n	8007bea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c0a:	2b40      	cmp	r3, #64	@ 0x40
 8007c0c:	d005      	beq.n	8007c1a <USBD_StdDevReq+0x26>
 8007c0e:	2b40      	cmp	r3, #64	@ 0x40
 8007c10:	d84f      	bhi.n	8007cb2 <USBD_StdDevReq+0xbe>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d009      	beq.n	8007c2a <USBD_StdDevReq+0x36>
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	d14b      	bne.n	8007cb2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
      break;
 8007c28:	e048      	b.n	8007cbc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	2b09      	cmp	r3, #9
 8007c30:	d839      	bhi.n	8007ca6 <USBD_StdDevReq+0xb2>
 8007c32:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <USBD_StdDevReq+0x44>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c89 	.word	0x08007c89
 8007c3c:	08007c9d 	.word	0x08007c9d
 8007c40:	08007ca7 	.word	0x08007ca7
 8007c44:	08007c93 	.word	0x08007c93
 8007c48:	08007ca7 	.word	0x08007ca7
 8007c4c:	08007c6b 	.word	0x08007c6b
 8007c50:	08007c61 	.word	0x08007c61
 8007c54:	08007ca7 	.word	0x08007ca7
 8007c58:	08007c7f 	.word	0x08007c7f
 8007c5c:	08007c75 	.word	0x08007c75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f9dc 	bl	8008020 <USBD_GetDescriptor>
          break;
 8007c68:	e022      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fb3f 	bl	80082f0 <USBD_SetAddress>
          break;
 8007c72:	e01d      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fb7e 	bl	8008378 <USBD_SetConfig>
          break;
 8007c7c:	e018      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fc07 	bl	8008494 <USBD_GetConfig>
          break;
 8007c86:	e013      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fc37 	bl	80084fe <USBD_GetStatus>
          break;
 8007c90:	e00e      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fc65 	bl	8008564 <USBD_SetFeature>
          break;
 8007c9a:	e009      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fc74 	bl	800858c <USBD_ClrFeature>
          break;
 8007ca4:	e004      	b.n	8007cb0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fcc9 	bl	8008640 <USBD_CtlError>
          break;
 8007cae:	bf00      	nop
      }
      break;
 8007cb0:	e004      	b.n	8007cbc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fcc3 	bl	8008640 <USBD_CtlError>
      break;
 8007cba:	bf00      	nop
  }

  return ret;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop

08007cc8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cde:	2b40      	cmp	r3, #64	@ 0x40
 8007ce0:	d005      	beq.n	8007cee <USBD_StdItfReq+0x26>
 8007ce2:	2b40      	cmp	r3, #64	@ 0x40
 8007ce4:	d82e      	bhi.n	8007d44 <USBD_StdItfReq+0x7c>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <USBD_StdItfReq+0x26>
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d12a      	bne.n	8007d44 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d81d      	bhi.n	8007d36 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	889b      	ldrh	r3, [r3, #4]
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d813      	bhi.n	8007d2c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	4798      	blx	r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	88db      	ldrh	r3, [r3, #6]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d110      	bne.n	8007d40 <USBD_StdItfReq+0x78>
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10d      	bne.n	8007d40 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fd35 	bl	8008794 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d2a:	e009      	b.n	8007d40 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fc86 	bl	8008640 <USBD_CtlError>
          break;
 8007d34:	e004      	b.n	8007d40 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fc81 	bl	8008640 <USBD_CtlError>
          break;
 8007d3e:	e000      	b.n	8007d42 <USBD_StdItfReq+0x7a>
          break;
 8007d40:	bf00      	nop
      }
      break;
 8007d42:	e004      	b.n	8007d4e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fc7a 	bl	8008640 <USBD_CtlError>
      break;
 8007d4c:	bf00      	nop
  }

  return USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	889b      	ldrh	r3, [r3, #4]
 8007d6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d74:	2b40      	cmp	r3, #64	@ 0x40
 8007d76:	d007      	beq.n	8007d88 <USBD_StdEPReq+0x30>
 8007d78:	2b40      	cmp	r3, #64	@ 0x40
 8007d7a:	f200 8146 	bhi.w	800800a <USBD_StdEPReq+0x2b2>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <USBD_StdEPReq+0x40>
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	f040 8141 	bne.w	800800a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
      break;
 8007d96:	e13d      	b.n	8008014 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d10a      	bne.n	8007dba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
 8007db8:	e12d      	b.n	8008016 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d007      	beq.n	8007dd2 <USBD_StdEPReq+0x7a>
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	f300 811b 	bgt.w	8007ffe <USBD_StdEPReq+0x2a6>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d072      	beq.n	8007eb2 <USBD_StdEPReq+0x15a>
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d03a      	beq.n	8007e46 <USBD_StdEPReq+0xee>
 8007dd0:	e115      	b.n	8007ffe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d002      	beq.n	8007de2 <USBD_StdEPReq+0x8a>
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d015      	beq.n	8007e0c <USBD_StdEPReq+0xb4>
 8007de0:	e02b      	b.n	8007e3a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00c      	beq.n	8007e02 <USBD_StdEPReq+0xaa>
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b80      	cmp	r3, #128	@ 0x80
 8007dec:	d009      	beq.n	8007e02 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 ff9a 	bl	8008d2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007df8:	2180      	movs	r1, #128	@ 0x80
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 ff96 	bl	8008d2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e00:	e020      	b.n	8007e44 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc1b 	bl	8008640 <USBD_CtlError>
              break;
 8007e0a:	e01b      	b.n	8007e44 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	885b      	ldrh	r3, [r3, #2]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10e      	bne.n	8007e32 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <USBD_StdEPReq+0xda>
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b80      	cmp	r3, #128	@ 0x80
 8007e1e:	d008      	beq.n	8007e32 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	88db      	ldrh	r3, [r3, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 ff7d 	bl	8008d2c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fcae 	bl	8008794 <USBD_CtlSendStatus>

              break;
 8007e38:	e004      	b.n	8007e44 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fbff 	bl	8008640 <USBD_CtlError>
              break;
 8007e42:	bf00      	nop
          }
          break;
 8007e44:	e0e0      	b.n	8008008 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d002      	beq.n	8007e56 <USBD_StdEPReq+0xfe>
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d015      	beq.n	8007e80 <USBD_StdEPReq+0x128>
 8007e54:	e026      	b.n	8007ea4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00c      	beq.n	8007e76 <USBD_StdEPReq+0x11e>
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b80      	cmp	r3, #128	@ 0x80
 8007e60:	d009      	beq.n	8007e76 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 ff60 	bl	8008d2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e6c:	2180      	movs	r1, #128	@ 0x80
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 ff5c 	bl	8008d2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e74:	e01c      	b.n	8007eb0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fbe1 	bl	8008640 <USBD_CtlError>
              break;
 8007e7e:	e017      	b.n	8007eb0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	885b      	ldrh	r3, [r3, #2]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d112      	bne.n	8007eae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d004      	beq.n	8007e9c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 ff67 	bl	8008d6a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fc79 	bl	8008794 <USBD_CtlSendStatus>
              }
              break;
 8007ea2:	e004      	b.n	8007eae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fbca 	bl	8008640 <USBD_CtlError>
              break;
 8007eac:	e000      	b.n	8007eb0 <USBD_StdEPReq+0x158>
              break;
 8007eae:	bf00      	nop
          }
          break;
 8007eb0:	e0aa      	b.n	8008008 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d002      	beq.n	8007ec2 <USBD_StdEPReq+0x16a>
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d032      	beq.n	8007f26 <USBD_StdEPReq+0x1ce>
 8007ec0:	e097      	b.n	8007ff2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <USBD_StdEPReq+0x180>
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b80      	cmp	r3, #128	@ 0x80
 8007ecc:	d004      	beq.n	8007ed8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fbb5 	bl	8008640 <USBD_CtlError>
                break;
 8007ed6:	e091      	b.n	8007ffc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da0b      	bge.n	8007ef8 <USBD_StdEPReq+0x1a0>
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	3310      	adds	r3, #16
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	e00b      	b.n	8007f10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	3304      	adds	r3, #4
 8007f10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fbf8 	bl	8008714 <USBD_CtlSendData>
              break;
 8007f24:	e06a      	b.n	8007ffc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da11      	bge.n	8007f52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	f003 020f 	and.w	r2, r3, #15
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	440b      	add	r3, r1
 8007f40:	3318      	adds	r3, #24
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d117      	bne.n	8007f78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fb78 	bl	8008640 <USBD_CtlError>
                  break;
 8007f50:	e054      	b.n	8007ffc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	f003 020f 	and.w	r2, r3, #15
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	440b      	add	r3, r1
 8007f64:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb65 	bl	8008640 <USBD_CtlError>
                  break;
 8007f76:	e041      	b.n	8007ffc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da0b      	bge.n	8007f98 <USBD_StdEPReq+0x240>
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	3310      	adds	r3, #16
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	4413      	add	r3, r2
 8007f94:	3304      	adds	r3, #4
 8007f96:	e00b      	b.n	8007fb0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	3304      	adds	r3, #4
 8007fb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <USBD_StdEPReq+0x266>
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b80      	cmp	r3, #128	@ 0x80
 8007fbc:	d103      	bne.n	8007fc6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	e00e      	b.n	8007fe4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 feec 	bl	8008da8 <USBD_LL_IsStallEP>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	e002      	b.n	8007fe4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fb92 	bl	8008714 <USBD_CtlSendData>
              break;
 8007ff0:	e004      	b.n	8007ffc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fb23 	bl	8008640 <USBD_CtlError>
              break;
 8007ffa:	bf00      	nop
          }
          break;
 8007ffc:	e004      	b.n	8008008 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fb1d 	bl	8008640 <USBD_CtlError>
          break;
 8008006:	bf00      	nop
      }
      break;
 8008008:	e004      	b.n	8008014 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fb17 	bl	8008640 <USBD_CtlError>
      break;
 8008012:	bf00      	nop
  }

  return ret;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	885b      	ldrh	r3, [r3, #2]
 800803a:	0a1b      	lsrs	r3, r3, #8
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	2b06      	cmp	r3, #6
 8008042:	f200 8128 	bhi.w	8008296 <USBD_GetDescriptor+0x276>
 8008046:	a201      	add	r2, pc, #4	@ (adr r2, 800804c <USBD_GetDescriptor+0x2c>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	08008069 	.word	0x08008069
 8008050:	08008081 	.word	0x08008081
 8008054:	080080c1 	.word	0x080080c1
 8008058:	08008297 	.word	0x08008297
 800805c:	08008297 	.word	0x08008297
 8008060:	08008237 	.word	0x08008237
 8008064:	08008263 	.word	0x08008263
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	7c12      	ldrb	r2, [r2, #16]
 8008074:	f107 0108 	add.w	r1, r7, #8
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	60f8      	str	r0, [r7, #12]
      break;
 800807e:	e112      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7c1b      	ldrb	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10d      	bne.n	80080a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800808e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008090:	f107 0208 	add.w	r2, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	2202      	movs	r2, #2
 80080a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080a2:	e100      	b.n	80082a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ac:	f107 0208 	add.w	r2, r7, #8
 80080b0:	4610      	mov	r0, r2
 80080b2:	4798      	blx	r3
 80080b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3301      	adds	r3, #1
 80080ba:	2202      	movs	r2, #2
 80080bc:	701a      	strb	r2, [r3, #0]
      break;
 80080be:	e0f2      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	885b      	ldrh	r3, [r3, #2]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	f200 80ac 	bhi.w	8008224 <USBD_GetDescriptor+0x204>
 80080cc:	a201      	add	r2, pc, #4	@ (adr r2, 80080d4 <USBD_GetDescriptor+0xb4>)
 80080ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d2:	bf00      	nop
 80080d4:	080080ed 	.word	0x080080ed
 80080d8:	08008121 	.word	0x08008121
 80080dc:	08008155 	.word	0x08008155
 80080e0:	08008189 	.word	0x08008189
 80080e4:	080081bd 	.word	0x080081bd
 80080e8:	080081f1 	.word	0x080081f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	7c12      	ldrb	r2, [r2, #16]
 8008104:	f107 0108 	add.w	r1, r7, #8
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
 800810c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800810e:	e091      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa94 	bl	8008640 <USBD_CtlError>
            err++;
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	3301      	adds	r3, #1
 800811c:	72fb      	strb	r3, [r7, #11]
          break;
 800811e:	e089      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00b      	beq.n	8008144 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	7c12      	ldrb	r2, [r2, #16]
 8008138:	f107 0108 	add.w	r1, r7, #8
 800813c:	4610      	mov	r0, r2
 800813e:	4798      	blx	r3
 8008140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008142:	e077      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa7a 	bl	8008640 <USBD_CtlError>
            err++;
 800814c:	7afb      	ldrb	r3, [r7, #11]
 800814e:	3301      	adds	r3, #1
 8008150:	72fb      	strb	r3, [r7, #11]
          break;
 8008152:	e06f      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	7c12      	ldrb	r2, [r2, #16]
 800816c:	f107 0108 	add.w	r1, r7, #8
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
 8008174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008176:	e05d      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa60 	bl	8008640 <USBD_CtlError>
            err++;
 8008180:	7afb      	ldrb	r3, [r7, #11]
 8008182:	3301      	adds	r3, #1
 8008184:	72fb      	strb	r3, [r7, #11]
          break;
 8008186:	e055      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	7c12      	ldrb	r2, [r2, #16]
 80081a0:	f107 0108 	add.w	r1, r7, #8
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081aa:	e043      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa46 	bl	8008640 <USBD_CtlError>
            err++;
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	3301      	adds	r3, #1
 80081b8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ba:	e03b      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	7c12      	ldrb	r2, [r2, #16]
 80081d4:	f107 0108 	add.w	r1, r7, #8
 80081d8:	4610      	mov	r0, r2
 80081da:	4798      	blx	r3
 80081dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081de:	e029      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fa2c 	bl	8008640 <USBD_CtlError>
            err++;
 80081e8:	7afb      	ldrb	r3, [r7, #11]
 80081ea:	3301      	adds	r3, #1
 80081ec:	72fb      	strb	r3, [r7, #11]
          break;
 80081ee:	e021      	b.n	8008234 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00b      	beq.n	8008214 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	7c12      	ldrb	r2, [r2, #16]
 8008208:	f107 0108 	add.w	r1, r7, #8
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
 8008210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008212:	e00f      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa12 	bl	8008640 <USBD_CtlError>
            err++;
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	3301      	adds	r3, #1
 8008220:	72fb      	strb	r3, [r7, #11]
          break;
 8008222:	e007      	b.n	8008234 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa0a 	bl	8008640 <USBD_CtlError>
          err++;
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	3301      	adds	r3, #1
 8008230:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008232:	e038      	b.n	80082a6 <USBD_GetDescriptor+0x286>
 8008234:	e037      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	7c1b      	ldrb	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008246:	f107 0208 	add.w	r2, r7, #8
 800824a:	4610      	mov	r0, r2
 800824c:	4798      	blx	r3
 800824e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008250:	e029      	b.n	80082a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f9f3 	bl	8008640 <USBD_CtlError>
        err++;
 800825a:	7afb      	ldrb	r3, [r7, #11]
 800825c:	3301      	adds	r3, #1
 800825e:	72fb      	strb	r3, [r7, #11]
      break;
 8008260:	e021      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7c1b      	ldrb	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10d      	bne.n	8008286 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008272:	f107 0208 	add.w	r2, r7, #8
 8008276:	4610      	mov	r0, r2
 8008278:	4798      	blx	r3
 800827a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3301      	adds	r3, #1
 8008280:	2207      	movs	r2, #7
 8008282:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008284:	e00f      	b.n	80082a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9d9 	bl	8008640 <USBD_CtlError>
        err++;
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	3301      	adds	r3, #1
 8008292:	72fb      	strb	r3, [r7, #11]
      break;
 8008294:	e007      	b.n	80082a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9d1 	bl	8008640 <USBD_CtlError>
      err++;
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	3301      	adds	r3, #1
 80082a2:	72fb      	strb	r3, [r7, #11]
      break;
 80082a4:	bf00      	nop
  }

  if (err != 0U)
 80082a6:	7afb      	ldrb	r3, [r7, #11]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d11c      	bne.n	80082e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80082ac:	893b      	ldrh	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d011      	beq.n	80082d6 <USBD_GetDescriptor+0x2b6>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	88db      	ldrh	r3, [r3, #6]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00d      	beq.n	80082d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	88da      	ldrh	r2, [r3, #6]
 80082be:	893b      	ldrh	r3, [r7, #8]
 80082c0:	4293      	cmp	r3, r2
 80082c2:	bf28      	it	cs
 80082c4:	4613      	movcs	r3, r2
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082ca:	893b      	ldrh	r3, [r7, #8]
 80082cc:	461a      	mov	r2, r3
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fa1f 	bl	8008714 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d104      	bne.n	80082e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa58 	bl	8008794 <USBD_CtlSendStatus>
 80082e4:	e000      	b.n	80082e8 <USBD_GetDescriptor+0x2c8>
    return;
 80082e6:	bf00      	nop
    }
  }
}
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop

080082f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	889b      	ldrh	r3, [r3, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d130      	bne.n	8008364 <USBD_SetAddress+0x74>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	88db      	ldrh	r3, [r3, #6]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d12c      	bne.n	8008364 <USBD_SetAddress+0x74>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	885b      	ldrh	r3, [r3, #2]
 800830e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008310:	d828      	bhi.n	8008364 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	885b      	ldrh	r3, [r3, #2]
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800831c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008324:	2b03      	cmp	r3, #3
 8008326:	d104      	bne.n	8008332 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f988 	bl	8008640 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008330:	e01d      	b.n	800836e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7bfa      	ldrb	r2, [r7, #15]
 8008336:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fd5d 	bl	8008dfe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fa25 	bl	8008794 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008358:	e009      	b.n	800836e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008362:	e004      	b.n	800836e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f96a 	bl	8008640 <USBD_CtlError>
  }
}
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	885b      	ldrh	r3, [r3, #2]
 8008386:	b2da      	uxtb	r2, r3
 8008388:	4b41      	ldr	r3, [pc, #260]	@ (8008490 <USBD_SetConfig+0x118>)
 800838a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800838c:	4b40      	ldr	r3, [pc, #256]	@ (8008490 <USBD_SetConfig+0x118>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d904      	bls.n	800839e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f952 	bl	8008640 <USBD_CtlError>
 800839c:	e075      	b.n	800848a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d002      	beq.n	80083ae <USBD_SetConfig+0x36>
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d023      	beq.n	80083f4 <USBD_SetConfig+0x7c>
 80083ac:	e062      	b.n	8008474 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80083ae:	4b38      	ldr	r3, [pc, #224]	@ (8008490 <USBD_SetConfig+0x118>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01a      	beq.n	80083ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80083b6:	4b36      	ldr	r3, [pc, #216]	@ (8008490 <USBD_SetConfig+0x118>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2203      	movs	r2, #3
 80083c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80083c8:	4b31      	ldr	r3, [pc, #196]	@ (8008490 <USBD_SetConfig+0x118>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff f9e8 	bl	80077a4 <USBD_SetClassConfig>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d104      	bne.n	80083e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f92f 	bl	8008640 <USBD_CtlError>
            return;
 80083e2:	e052      	b.n	800848a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f9d5 	bl	8008794 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083ea:	e04e      	b.n	800848a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f9d1 	bl	8008794 <USBD_CtlSendStatus>
        break;
 80083f2:	e04a      	b.n	800848a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80083f4:	4b26      	ldr	r3, [pc, #152]	@ (8008490 <USBD_SetConfig+0x118>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d112      	bne.n	8008422 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008404:	4b22      	ldr	r3, [pc, #136]	@ (8008490 <USBD_SetConfig+0x118>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800840e:	4b20      	ldr	r3, [pc, #128]	@ (8008490 <USBD_SetConfig+0x118>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff f9e4 	bl	80077e2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9ba 	bl	8008794 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008420:	e033      	b.n	800848a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008422:	4b1b      	ldr	r3, [pc, #108]	@ (8008490 <USBD_SetConfig+0x118>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	429a      	cmp	r2, r3
 800842e:	d01d      	beq.n	800846c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff f9d2 	bl	80077e2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800843e:	4b14      	ldr	r3, [pc, #80]	@ (8008490 <USBD_SetConfig+0x118>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008448:	4b11      	ldr	r3, [pc, #68]	@ (8008490 <USBD_SetConfig+0x118>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7ff f9a8 	bl	80077a4 <USBD_SetClassConfig>
 8008454:	4603      	mov	r3, r0
 8008456:	2b02      	cmp	r3, #2
 8008458:	d104      	bne.n	8008464 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f8ef 	bl	8008640 <USBD_CtlError>
            return;
 8008462:	e012      	b.n	800848a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f995 	bl	8008794 <USBD_CtlSendStatus>
        break;
 800846a:	e00e      	b.n	800848a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f991 	bl	8008794 <USBD_CtlSendStatus>
        break;
 8008472:	e00a      	b.n	800848a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f8e2 	bl	8008640 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800847c:	4b04      	ldr	r3, [pc, #16]	@ (8008490 <USBD_SetConfig+0x118>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff f9ad 	bl	80077e2 <USBD_ClrClassConfig>
        break;
 8008488:	bf00      	nop
    }
  }
}
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	200002c8 	.word	0x200002c8

08008494 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	88db      	ldrh	r3, [r3, #6]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d004      	beq.n	80084b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f8c9 	bl	8008640 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084ae:	e022      	b.n	80084f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	dc02      	bgt.n	80084c0 <USBD_GetConfig+0x2c>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dc03      	bgt.n	80084c6 <USBD_GetConfig+0x32>
 80084be:	e015      	b.n	80084ec <USBD_GetConfig+0x58>
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d00b      	beq.n	80084dc <USBD_GetConfig+0x48>
 80084c4:	e012      	b.n	80084ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3308      	adds	r3, #8
 80084d0:	2201      	movs	r2, #1
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f91d 	bl	8008714 <USBD_CtlSendData>
        break;
 80084da:	e00c      	b.n	80084f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3304      	adds	r3, #4
 80084e0:	2201      	movs	r2, #1
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f915 	bl	8008714 <USBD_CtlSendData>
        break;
 80084ea:	e004      	b.n	80084f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f8a6 	bl	8008640 <USBD_CtlError>
        break;
 80084f4:	bf00      	nop
}
 80084f6:	bf00      	nop
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800850e:	3b01      	subs	r3, #1
 8008510:	2b02      	cmp	r3, #2
 8008512:	d81e      	bhi.n	8008552 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	88db      	ldrh	r3, [r3, #6]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d004      	beq.n	8008526 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f88e 	bl	8008640 <USBD_CtlError>
        break;
 8008524:	e01a      	b.n	800855c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f043 0202 	orr.w	r2, r3, #2
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	330c      	adds	r3, #12
 8008546:	2202      	movs	r2, #2
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f8e2 	bl	8008714 <USBD_CtlSendData>
      break;
 8008550:	e004      	b.n	800855c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f873 	bl	8008640 <USBD_CtlError>
      break;
 800855a:	bf00      	nop
  }
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d106      	bne.n	8008584 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f908 	bl	8008794 <USBD_CtlSendStatus>
  }
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800859c:	3b01      	subs	r3, #1
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d80b      	bhi.n	80085ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	885b      	ldrh	r3, [r3, #2]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d10c      	bne.n	80085c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f8ee 	bl	8008794 <USBD_CtlSendStatus>
      }
      break;
 80085b8:	e004      	b.n	80085c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f83f 	bl	8008640 <USBD_CtlError>
      break;
 80085c2:	e000      	b.n	80085c6 <USBD_ClrFeature+0x3a>
      break;
 80085c4:	bf00      	nop
  }
}
 80085c6:	bf00      	nop
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	785a      	ldrb	r2, [r3, #1]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	3302      	adds	r3, #2
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	3303      	adds	r3, #3
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	021b      	lsls	r3, r3, #8
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4413      	add	r3, r2
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	3304      	adds	r3, #4
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	3305      	adds	r3, #5
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	b29b      	uxth	r3, r3
 8008614:	4413      	add	r3, r2
 8008616:	b29a      	uxth	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	3306      	adds	r3, #6
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	3307      	adds	r3, #7
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	021b      	lsls	r3, r3, #8
 800862c:	b29b      	uxth	r3, r3
 800862e:	4413      	add	r3, r2
 8008630:	b29a      	uxth	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	80da      	strh	r2, [r3, #6]

}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr

08008640 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800864a:	2180      	movs	r1, #128	@ 0x80
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fb6d 	bl	8008d2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008652:	2100      	movs	r1, #0
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fb69 	bl	8008d2c <USBD_LL_StallEP>
}
 800865a:	bf00      	nop
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b086      	sub	sp, #24
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d032      	beq.n	80086de <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 f834 	bl	80086e6 <USBD_GetLen>
 800867e:	4603      	mov	r3, r0
 8008680:	3301      	adds	r3, #1
 8008682:	b29b      	uxth	r3, r3
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	75fa      	strb	r2, [r7, #23]
 8008692:	461a      	mov	r2, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4413      	add	r3, r2
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	7812      	ldrb	r2, [r2, #0]
 800869c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800869e:	7dfb      	ldrb	r3, [r7, #23]
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	75fa      	strb	r2, [r7, #23]
 80086a4:	461a      	mov	r2, r3
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	4413      	add	r3, r2
 80086aa:	2203      	movs	r2, #3
 80086ac:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80086ae:	e012      	b.n	80086d6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	60fa      	str	r2, [r7, #12]
 80086b6:	7dfa      	ldrb	r2, [r7, #23]
 80086b8:	1c51      	adds	r1, r2, #1
 80086ba:	75f9      	strb	r1, [r7, #23]
 80086bc:	4611      	mov	r1, r2
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	440a      	add	r2, r1
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	75fa      	strb	r2, [r7, #23]
 80086cc:	461a      	mov	r2, r3
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	4413      	add	r3, r2
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e8      	bne.n	80086b0 <USBD_GetString+0x4e>
    }
  }
}
 80086de:	bf00      	nop
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80086f2:	e005      	b.n	8008700 <USBD_GetLen+0x1a>
  {
    len++;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	3301      	adds	r3, #1
 80086f8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3301      	adds	r3, #1
 80086fe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1f5      	bne.n	80086f4 <USBD_GetLen+0xe>
  }

  return len;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr

08008714 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4613      	mov	r3, r2
 8008720:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2202      	movs	r2, #2
 8008726:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800872a:	88fa      	ldrh	r2, [r7, #6]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008730:	88fa      	ldrh	r2, [r7, #6]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008736:	88fb      	ldrh	r3, [r7, #6]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	2100      	movs	r1, #0
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 fb7d 	bl	8008e3c <USBD_LL_Transmit>

  return USBD_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4613      	mov	r3, r2
 8008758:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800875a:	88fb      	ldrh	r3, [r7, #6]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	2100      	movs	r1, #0
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 fb6b 	bl	8008e3c <USBD_LL_Transmit>

  return USBD_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800877e:	88fb      	ldrh	r3, [r7, #6]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	2100      	movs	r1, #0
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 fb7c 	bl	8008e82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2204      	movs	r2, #4
 80087a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087a4:	2300      	movs	r3, #0
 80087a6:	2200      	movs	r2, #0
 80087a8:	2100      	movs	r1, #0
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fb46 	bl	8008e3c <USBD_LL_Transmit>

  return USBD_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b082      	sub	sp, #8
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2205      	movs	r2, #5
 80087c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087ca:	2300      	movs	r3, #0
 80087cc:	2200      	movs	r2, #0
 80087ce:	2100      	movs	r1, #0
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fb56 	bl	8008e82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087e4:	2200      	movs	r2, #0
 80087e6:	490e      	ldr	r1, [pc, #56]	@ (8008820 <MX_USB_DEVICE_Init+0x40>)
 80087e8:	480e      	ldr	r0, [pc, #56]	@ (8008824 <MX_USB_DEVICE_Init+0x44>)
 80087ea:	f7fe ff81 	bl	80076f0 <USBD_Init>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087f4:	f7f7 ff90 	bl	8000718 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 80087f8:	490b      	ldr	r1, [pc, #44]	@ (8008828 <MX_USB_DEVICE_Init+0x48>)
 80087fa:	480a      	ldr	r0, [pc, #40]	@ (8008824 <MX_USB_DEVICE_Init+0x44>)
 80087fc:	f7fe ffa3 	bl	8007746 <USBD_RegisterClass>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008806:	f7f7 ff87 	bl	8000718 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800880a:	4806      	ldr	r0, [pc, #24]	@ (8008824 <MX_USB_DEVICE_Init+0x44>)
 800880c:	f7fe ffb4 	bl	8007778 <USBD_Start>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008816:	f7f7 ff7f 	bl	8000718 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800881a:	bf00      	nop
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	200000b8 	.word	0x200000b8
 8008824:	200002cc 	.word	0x200002cc
 8008828:	20000020 	.word	0x20000020

0800882c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	6039      	str	r1, [r7, #0]
 8008836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2212      	movs	r2, #18
 800883c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800883e:	4b03      	ldr	r3, [pc, #12]	@ (800884c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	bc80      	pop	{r7}
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	200000d4 	.word	0x200000d4

08008850 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2204      	movs	r2, #4
 8008860:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008862:	4b03      	ldr	r3, [pc, #12]	@ (8008870 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	200000e8 	.word	0x200000e8

08008874 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	6039      	str	r1, [r7, #0]
 800887e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d105      	bne.n	8008892 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	4907      	ldr	r1, [pc, #28]	@ (80088a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800888a:	4808      	ldr	r0, [pc, #32]	@ (80088ac <USBD_FS_ProductStrDescriptor+0x38>)
 800888c:	f7ff fee9 	bl	8008662 <USBD_GetString>
 8008890:	e004      	b.n	800889c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	4904      	ldr	r1, [pc, #16]	@ (80088a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008896:	4805      	ldr	r0, [pc, #20]	@ (80088ac <USBD_FS_ProductStrDescriptor+0x38>)
 8008898:	f7ff fee3 	bl	8008662 <USBD_GetString>
  }
  return USBD_StrDesc;
 800889c:	4b02      	ldr	r3, [pc, #8]	@ (80088a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000590 	.word	0x20000590
 80088ac:	0800920c 	.word	0x0800920c

080088b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	6039      	str	r1, [r7, #0]
 80088ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	4904      	ldr	r1, [pc, #16]	@ (80088d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80088c0:	4804      	ldr	r0, [pc, #16]	@ (80088d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80088c2:	f7ff fece 	bl	8008662 <USBD_GetString>
  return USBD_StrDesc;
 80088c6:	4b02      	ldr	r3, [pc, #8]	@ (80088d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20000590 	.word	0x20000590
 80088d4:	08009224 	.word	0x08009224

080088d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	6039      	str	r1, [r7, #0]
 80088e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	221a      	movs	r2, #26
 80088e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088ea:	f000 f843 	bl	8008974 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088ee:	4b02      	ldr	r3, [pc, #8]	@ (80088f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	200000ec 	.word	0x200000ec

080088fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	6039      	str	r1, [r7, #0]
 8008906:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d105      	bne.n	800891a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	4907      	ldr	r1, [pc, #28]	@ (8008930 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008912:	4808      	ldr	r0, [pc, #32]	@ (8008934 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008914:	f7ff fea5 	bl	8008662 <USBD_GetString>
 8008918:	e004      	b.n	8008924 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	4904      	ldr	r1, [pc, #16]	@ (8008930 <USBD_FS_ConfigStrDescriptor+0x34>)
 800891e:	4805      	ldr	r0, [pc, #20]	@ (8008934 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008920:	f7ff fe9f 	bl	8008662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008924:	4b02      	ldr	r3, [pc, #8]	@ (8008930 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000590 	.word	0x20000590
 8008934:	08009234 	.word	0x08009234

08008938 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	6039      	str	r1, [r7, #0]
 8008942:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008944:	79fb      	ldrb	r3, [r7, #7]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d105      	bne.n	8008956 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	4907      	ldr	r1, [pc, #28]	@ (800896c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800894e:	4808      	ldr	r0, [pc, #32]	@ (8008970 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008950:	f7ff fe87 	bl	8008662 <USBD_GetString>
 8008954:	e004      	b.n	8008960 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	4904      	ldr	r1, [pc, #16]	@ (800896c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800895a:	4805      	ldr	r0, [pc, #20]	@ (8008970 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800895c:	f7ff fe81 	bl	8008662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008960:	4b02      	ldr	r3, [pc, #8]	@ (800896c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20000590 	.word	0x20000590
 8008970:	08009240 	.word	0x08009240

08008974 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800897a:	4b0f      	ldr	r3, [pc, #60]	@ (80089b8 <Get_SerialNum+0x44>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008980:	4b0e      	ldr	r3, [pc, #56]	@ (80089bc <Get_SerialNum+0x48>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008986:	4b0e      	ldr	r3, [pc, #56]	@ (80089c0 <Get_SerialNum+0x4c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d009      	beq.n	80089ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800899a:	2208      	movs	r2, #8
 800899c:	4909      	ldr	r1, [pc, #36]	@ (80089c4 <Get_SerialNum+0x50>)
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 f814 	bl	80089cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089a4:	2204      	movs	r2, #4
 80089a6:	4908      	ldr	r1, [pc, #32]	@ (80089c8 <Get_SerialNum+0x54>)
 80089a8:	68b8      	ldr	r0, [r7, #8]
 80089aa:	f000 f80f 	bl	80089cc <IntToUnicode>
  }
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	1ffff7e8 	.word	0x1ffff7e8
 80089bc:	1ffff7ec 	.word	0x1ffff7ec
 80089c0:	1ffff7f0 	.word	0x1ffff7f0
 80089c4:	200000ee 	.word	0x200000ee
 80089c8:	200000fe 	.word	0x200000fe

080089cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089de:	2300      	movs	r3, #0
 80089e0:	75fb      	strb	r3, [r7, #23]
 80089e2:	e027      	b.n	8008a34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	0f1b      	lsrs	r3, r3, #28
 80089e8:	2b09      	cmp	r3, #9
 80089ea:	d80b      	bhi.n	8008a04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	0f1b      	lsrs	r3, r3, #28
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	4619      	mov	r1, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	440b      	add	r3, r1
 80089fc:	3230      	adds	r2, #48	@ 0x30
 80089fe:	b2d2      	uxtb	r2, r2
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	e00a      	b.n	8008a1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	0f1b      	lsrs	r3, r3, #28
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	4619      	mov	r1, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	440b      	add	r3, r1
 8008a14:	3237      	adds	r2, #55	@ 0x37
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	3301      	adds	r3, #1
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	4413      	add	r3, r2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
 8008a30:	3301      	adds	r3, #1
 8008a32:	75fb      	strb	r3, [r7, #23]
 8008a34:	7dfa      	ldrb	r2, [r7, #23]
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d3d3      	bcc.n	80089e4 <IntToUnicode+0x18>
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	bf00      	nop
 8008a40:	371c      	adds	r7, #28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bc80      	pop	{r7}
 8008a46:	4770      	bx	lr

08008a48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a0d      	ldr	r2, [pc, #52]	@ (8008a8c <HAL_PCD_MspInit+0x44>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d113      	bne.n	8008a82 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a90 <HAL_PCD_MspInit+0x48>)
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8008a90 <HAL_PCD_MspInit+0x48>)
 8008a60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a64:	61d3      	str	r3, [r2, #28]
 8008a66:	4b0a      	ldr	r3, [pc, #40]	@ (8008a90 <HAL_PCD_MspInit+0x48>)
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008a72:	2200      	movs	r2, #0
 8008a74:	2100      	movs	r1, #0
 8008a76:	2014      	movs	r0, #20
 8008a78:	f7f9 f891 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008a7c:	2014      	movs	r0, #20
 8008a7e:	f7f9 f8aa 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008a82:	bf00      	nop
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	40005c00 	.word	0x40005c00
 8008a90:	40021000 	.word	0x40021000

08008a94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	f7fe feac 	bl	8007808 <USBD_LL_SetupStage>
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008aca:	78fa      	ldrb	r2, [r7, #3]
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	440b      	add	r3, r1
 8008ad8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	f7fe fede 	bl	80078a2 <USBD_LL_DataOutStage>
}
 8008ae6:	bf00      	nop
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	460b      	mov	r3, r1
 8008af8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	4613      	mov	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	440b      	add	r3, r1
 8008b0e:	3324      	adds	r3, #36	@ 0x24
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	4619      	mov	r1, r3
 8008b16:	f7fe ff35 	bl	8007984 <USBD_LL_DataInStage>
}
 8008b1a:	bf00      	nop
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff f845 	bl	8007bc0 <USBD_LL_SOF>
}
 8008b36:	bf00      	nop
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b46:	2301      	movs	r3, #1
 8008b48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	799b      	ldrb	r3, [r3, #6]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d001      	beq.n	8008b56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b52:	f7f7 fde1 	bl	8000718 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b5c:	7bfa      	ldrb	r2, [r7, #15]
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fe fff5 	bl	8007b50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe ffae 	bl	8007ace <USBD_LL_Reset>
}
 8008b72:	bf00      	nop
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe ffef 	bl	8007b6e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	7a9b      	ldrb	r3, [r3, #10]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b98:	4b04      	ldr	r3, [pc, #16]	@ (8008bac <HAL_PCD_SuspendCallback+0x30>)
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	4a03      	ldr	r2, [pc, #12]	@ (8008bac <HAL_PCD_SuspendCallback+0x30>)
 8008b9e:	f043 0306 	orr.w	r3, r3, #6
 8008ba2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	e000ed00 	.word	0xe000ed00

08008bb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fe ffe9 	bl	8007b96 <USBD_LL_Resume>
}
 8008bc4:	bf00      	nop
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008bd4:	4a23      	ldr	r2, [pc, #140]	@ (8008c64 <USBD_LL_Init+0x98>)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a21      	ldr	r2, [pc, #132]	@ (8008c64 <USBD_LL_Init+0x98>)
 8008be0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008be4:	4b1f      	ldr	r3, [pc, #124]	@ (8008c64 <USBD_LL_Init+0x98>)
 8008be6:	4a20      	ldr	r2, [pc, #128]	@ (8008c68 <USBD_LL_Init+0x9c>)
 8008be8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008bea:	4b1e      	ldr	r3, [pc, #120]	@ (8008c64 <USBD_LL_Init+0x98>)
 8008bec:	2208      	movs	r2, #8
 8008bee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c64 <USBD_LL_Init+0x98>)
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8008c64 <USBD_LL_Init+0x98>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008bfc:	4b19      	ldr	r3, [pc, #100]	@ (8008c64 <USBD_LL_Init+0x98>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008c02:	4b18      	ldr	r3, [pc, #96]	@ (8008c64 <USBD_LL_Init+0x98>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008c08:	4816      	ldr	r0, [pc, #88]	@ (8008c64 <USBD_LL_Init+0x98>)
 8008c0a:	f7f9 f99a 	bl	8001f42 <HAL_PCD_Init>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008c14:	f7f7 fd80 	bl	8000718 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c1e:	2318      	movs	r3, #24
 8008c20:	2200      	movs	r2, #0
 8008c22:	2100      	movs	r1, #0
 8008c24:	f7fa feab 	bl	800397e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c2e:	2358      	movs	r3, #88	@ 0x58
 8008c30:	2200      	movs	r2, #0
 8008c32:	2180      	movs	r1, #128	@ 0x80
 8008c34:	f7fa fea3 	bl	800397e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xC0);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c3e:	23c0      	movs	r3, #192	@ 0xc0
 8008c40:	2200      	movs	r2, #0
 8008c42:	2101      	movs	r1, #1
 8008c44:	f7fa fe9b 	bl	800397e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c52:	2200      	movs	r2, #0
 8008c54:	2181      	movs	r1, #129	@ 0x81
 8008c56:	f7fa fe92 	bl	800397e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000790 	.word	0x20000790
 8008c68:	40005c00 	.word	0x40005c00

08008c6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7f9 fa53 	bl	800212e <HAL_PCD_Start>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f93a 	bl	8008f08 <USBD_Get_USB_Status>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	4608      	mov	r0, r1
 8008cac:	4611      	mov	r1, r2
 8008cae:	461a      	mov	r2, r3
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	70fb      	strb	r3, [r7, #3]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70bb      	strb	r3, [r7, #2]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008cca:	78bb      	ldrb	r3, [r7, #2]
 8008ccc:	883a      	ldrh	r2, [r7, #0]
 8008cce:	78f9      	ldrb	r1, [r7, #3]
 8008cd0:	f7f9 fba7 	bl	8002422 <HAL_PCD_EP_Open>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 f914 	bl	8008f08 <USBD_Get_USB_Status>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7f9 fbe5 	bl	80024dc <HAL_PCD_EP_Close>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 f8f5 	bl	8008f08 <USBD_Get_USB_Status>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d46:	78fa      	ldrb	r2, [r7, #3]
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7f9 fc8d 	bl	800266a <HAL_PCD_EP_SetStall>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 f8d6 	bl	8008f08 <USBD_Get_USB_Status>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	460b      	mov	r3, r1
 8008d74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	4611      	mov	r1, r2
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7f9 fcce 	bl	800272a <HAL_PCD_EP_ClrStall>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f000 f8b7 	bl	8008f08 <USBD_Get_USB_Status>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008dba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	da0b      	bge.n	8008ddc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dca:	68f9      	ldr	r1, [r7, #12]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	440b      	add	r3, r1
 8008dd6:	3312      	adds	r3, #18
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	e00b      	b.n	8008df4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	440b      	add	r3, r1
 8008dee:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008df2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr

08008dfe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e18:	78fa      	ldrb	r2, [r7, #3]
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7f9 fadc 	bl	80023da <HAL_PCD_SetAddress>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 f86d 	bl	8008f08 <USBD_Get_USB_Status>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	607a      	str	r2, [r7, #4]
 8008e46:	461a      	mov	r2, r3
 8008e48:	460b      	mov	r3, r1
 8008e4a:	72fb      	strb	r3, [r7, #11]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e5e:	893b      	ldrh	r3, [r7, #8]
 8008e60:	7af9      	ldrb	r1, [r7, #11]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	f7f9 fbca 	bl	80025fc <HAL_PCD_EP_Transmit>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 f84a 	bl	8008f08 <USBD_Get_USB_Status>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e78:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b086      	sub	sp, #24
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	460b      	mov	r3, r1
 8008e90:	72fb      	strb	r3, [r7, #11]
 8008e92:	4613      	mov	r3, r2
 8008e94:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ea4:	893b      	ldrh	r3, [r7, #8]
 8008ea6:	7af9      	ldrb	r1, [r7, #11]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	f7f9 fb5f 	bl	800256c <HAL_PCD_EP_Receive>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f827 	bl	8008f08 <USBD_Get_USB_Status>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MIDI_HandleTypeDef)/4)+1];;/* On 32-bit boundary */
  return mem;
 8008ed0:	4b02      	ldr	r3, [pc, #8]	@ (8008edc <USBD_static_malloc+0x14>)
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr
 8008edc:	20000a68 	.word	0x20000a68

08008ee0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]

}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bc80      	pop	{r7}
 8008ef0:	4770      	bx	lr

08008ef2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008efe:	bf00      	nop
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bc80      	pop	{r7}
 8008f06:	4770      	bx	lr

08008f08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f16:	79fb      	ldrb	r3, [r7, #7]
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d817      	bhi.n	8008f4c <USBD_Get_USB_Status+0x44>
 8008f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f24 <USBD_Get_USB_Status+0x1c>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	08008f35 	.word	0x08008f35
 8008f28:	08008f3b 	.word	0x08008f3b
 8008f2c:	08008f41 	.word	0x08008f41
 8008f30:	08008f47 	.word	0x08008f47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]
    break;
 8008f38:	e00b      	b.n	8008f52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f3e:	e008      	b.n	8008f52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f40:	2301      	movs	r3, #1
 8008f42:	73fb      	strb	r3, [r7, #15]
    break;
 8008f44:	e005      	b.n	8008f52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f46:	2302      	movs	r3, #2
 8008f48:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4a:	e002      	b.n	8008f52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f50:	bf00      	nop
  }
  return usb_status;
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop

08008f60 <malloc>:
 8008f60:	4b02      	ldr	r3, [pc, #8]	@ (8008f6c <malloc+0xc>)
 8008f62:	4601      	mov	r1, r0
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	f000 b82d 	b.w	8008fc4 <_malloc_r>
 8008f6a:	bf00      	nop
 8008f6c:	20000108 	.word	0x20000108

08008f70 <free>:
 8008f70:	4b02      	ldr	r3, [pc, #8]	@ (8008f7c <free+0xc>)
 8008f72:	4601      	mov	r1, r0
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	f000 b8f5 	b.w	8009164 <_free_r>
 8008f7a:	bf00      	nop
 8008f7c:	20000108 	.word	0x20000108

08008f80 <sbrk_aligned>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	4e0f      	ldr	r6, [pc, #60]	@ (8008fc0 <sbrk_aligned+0x40>)
 8008f84:	460c      	mov	r4, r1
 8008f86:	6831      	ldr	r1, [r6, #0]
 8008f88:	4605      	mov	r5, r0
 8008f8a:	b911      	cbnz	r1, 8008f92 <sbrk_aligned+0x12>
 8008f8c:	f000 f8ae 	bl	80090ec <_sbrk_r>
 8008f90:	6030      	str	r0, [r6, #0]
 8008f92:	4621      	mov	r1, r4
 8008f94:	4628      	mov	r0, r5
 8008f96:	f000 f8a9 	bl	80090ec <_sbrk_r>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	d103      	bne.n	8008fa6 <sbrk_aligned+0x26>
 8008f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	bd70      	pop	{r4, r5, r6, pc}
 8008fa6:	1cc4      	adds	r4, r0, #3
 8008fa8:	f024 0403 	bic.w	r4, r4, #3
 8008fac:	42a0      	cmp	r0, r4
 8008fae:	d0f8      	beq.n	8008fa2 <sbrk_aligned+0x22>
 8008fb0:	1a21      	subs	r1, r4, r0
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f89a 	bl	80090ec <_sbrk_r>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d1f2      	bne.n	8008fa2 <sbrk_aligned+0x22>
 8008fbc:	e7ef      	b.n	8008f9e <sbrk_aligned+0x1e>
 8008fbe:	bf00      	nop
 8008fc0:	20000a7c 	.word	0x20000a7c

08008fc4 <_malloc_r>:
 8008fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc8:	1ccd      	adds	r5, r1, #3
 8008fca:	f025 0503 	bic.w	r5, r5, #3
 8008fce:	3508      	adds	r5, #8
 8008fd0:	2d0c      	cmp	r5, #12
 8008fd2:	bf38      	it	cc
 8008fd4:	250c      	movcc	r5, #12
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	4606      	mov	r6, r0
 8008fda:	db01      	blt.n	8008fe0 <_malloc_r+0x1c>
 8008fdc:	42a9      	cmp	r1, r5
 8008fde:	d904      	bls.n	8008fea <_malloc_r+0x26>
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	6033      	str	r3, [r6, #0]
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090c0 <_malloc_r+0xfc>
 8008fee:	f000 f869 	bl	80090c4 <__malloc_lock>
 8008ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ff6:	461c      	mov	r4, r3
 8008ff8:	bb44      	cbnz	r4, 800904c <_malloc_r+0x88>
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7ff ffbf 	bl	8008f80 <sbrk_aligned>
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	4604      	mov	r4, r0
 8009006:	d158      	bne.n	80090ba <_malloc_r+0xf6>
 8009008:	f8d8 4000 	ldr.w	r4, [r8]
 800900c:	4627      	mov	r7, r4
 800900e:	2f00      	cmp	r7, #0
 8009010:	d143      	bne.n	800909a <_malloc_r+0xd6>
 8009012:	2c00      	cmp	r4, #0
 8009014:	d04b      	beq.n	80090ae <_malloc_r+0xea>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	4639      	mov	r1, r7
 800901a:	4630      	mov	r0, r6
 800901c:	eb04 0903 	add.w	r9, r4, r3
 8009020:	f000 f864 	bl	80090ec <_sbrk_r>
 8009024:	4581      	cmp	r9, r0
 8009026:	d142      	bne.n	80090ae <_malloc_r+0xea>
 8009028:	6821      	ldr	r1, [r4, #0]
 800902a:	4630      	mov	r0, r6
 800902c:	1a6d      	subs	r5, r5, r1
 800902e:	4629      	mov	r1, r5
 8009030:	f7ff ffa6 	bl	8008f80 <sbrk_aligned>
 8009034:	3001      	adds	r0, #1
 8009036:	d03a      	beq.n	80090ae <_malloc_r+0xea>
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	442b      	add	r3, r5
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	f8d8 3000 	ldr.w	r3, [r8]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	bb62      	cbnz	r2, 80090a0 <_malloc_r+0xdc>
 8009046:	f8c8 7000 	str.w	r7, [r8]
 800904a:	e00f      	b.n	800906c <_malloc_r+0xa8>
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	1b52      	subs	r2, r2, r5
 8009050:	d420      	bmi.n	8009094 <_malloc_r+0xd0>
 8009052:	2a0b      	cmp	r2, #11
 8009054:	d917      	bls.n	8009086 <_malloc_r+0xc2>
 8009056:	1961      	adds	r1, r4, r5
 8009058:	42a3      	cmp	r3, r4
 800905a:	6025      	str	r5, [r4, #0]
 800905c:	bf18      	it	ne
 800905e:	6059      	strne	r1, [r3, #4]
 8009060:	6863      	ldr	r3, [r4, #4]
 8009062:	bf08      	it	eq
 8009064:	f8c8 1000 	streq.w	r1, [r8]
 8009068:	5162      	str	r2, [r4, r5]
 800906a:	604b      	str	r3, [r1, #4]
 800906c:	4630      	mov	r0, r6
 800906e:	f000 f82f 	bl	80090d0 <__malloc_unlock>
 8009072:	f104 000b 	add.w	r0, r4, #11
 8009076:	1d23      	adds	r3, r4, #4
 8009078:	f020 0007 	bic.w	r0, r0, #7
 800907c:	1ac2      	subs	r2, r0, r3
 800907e:	bf1c      	itt	ne
 8009080:	1a1b      	subne	r3, r3, r0
 8009082:	50a3      	strne	r3, [r4, r2]
 8009084:	e7af      	b.n	8008fe6 <_malloc_r+0x22>
 8009086:	6862      	ldr	r2, [r4, #4]
 8009088:	42a3      	cmp	r3, r4
 800908a:	bf0c      	ite	eq
 800908c:	f8c8 2000 	streq.w	r2, [r8]
 8009090:	605a      	strne	r2, [r3, #4]
 8009092:	e7eb      	b.n	800906c <_malloc_r+0xa8>
 8009094:	4623      	mov	r3, r4
 8009096:	6864      	ldr	r4, [r4, #4]
 8009098:	e7ae      	b.n	8008ff8 <_malloc_r+0x34>
 800909a:	463c      	mov	r4, r7
 800909c:	687f      	ldr	r7, [r7, #4]
 800909e:	e7b6      	b.n	800900e <_malloc_r+0x4a>
 80090a0:	461a      	mov	r2, r3
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	d1fb      	bne.n	80090a0 <_malloc_r+0xdc>
 80090a8:	2300      	movs	r3, #0
 80090aa:	6053      	str	r3, [r2, #4]
 80090ac:	e7de      	b.n	800906c <_malloc_r+0xa8>
 80090ae:	230c      	movs	r3, #12
 80090b0:	4630      	mov	r0, r6
 80090b2:	6033      	str	r3, [r6, #0]
 80090b4:	f000 f80c 	bl	80090d0 <__malloc_unlock>
 80090b8:	e794      	b.n	8008fe4 <_malloc_r+0x20>
 80090ba:	6005      	str	r5, [r0, #0]
 80090bc:	e7d6      	b.n	800906c <_malloc_r+0xa8>
 80090be:	bf00      	nop
 80090c0:	20000a80 	.word	0x20000a80

080090c4 <__malloc_lock>:
 80090c4:	4801      	ldr	r0, [pc, #4]	@ (80090cc <__malloc_lock+0x8>)
 80090c6:	f000 b84b 	b.w	8009160 <__retarget_lock_acquire_recursive>
 80090ca:	bf00      	nop
 80090cc:	20000bc0 	.word	0x20000bc0

080090d0 <__malloc_unlock>:
 80090d0:	4801      	ldr	r0, [pc, #4]	@ (80090d8 <__malloc_unlock+0x8>)
 80090d2:	f000 b846 	b.w	8009162 <__retarget_lock_release_recursive>
 80090d6:	bf00      	nop
 80090d8:	20000bc0 	.word	0x20000bc0

080090dc <memset>:
 80090dc:	4603      	mov	r3, r0
 80090de:	4402      	add	r2, r0
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d100      	bne.n	80090e6 <memset+0xa>
 80090e4:	4770      	bx	lr
 80090e6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ea:	e7f9      	b.n	80090e0 <memset+0x4>

080090ec <_sbrk_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	2300      	movs	r3, #0
 80090f0:	4d05      	ldr	r5, [pc, #20]	@ (8009108 <_sbrk_r+0x1c>)
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	f7f7 ff5e 	bl	8000fb8 <_sbrk>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_sbrk_r+0x1a>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_sbrk_r+0x1a>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	20000bbc 	.word	0x20000bbc

0800910c <__errno>:
 800910c:	4b01      	ldr	r3, [pc, #4]	@ (8009114 <__errno+0x8>)
 800910e:	6818      	ldr	r0, [r3, #0]
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	20000108 	.word	0x20000108

08009118 <__libc_init_array>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	2600      	movs	r6, #0
 800911c:	4d0c      	ldr	r5, [pc, #48]	@ (8009150 <__libc_init_array+0x38>)
 800911e:	4c0d      	ldr	r4, [pc, #52]	@ (8009154 <__libc_init_array+0x3c>)
 8009120:	1b64      	subs	r4, r4, r5
 8009122:	10a4      	asrs	r4, r4, #2
 8009124:	42a6      	cmp	r6, r4
 8009126:	d109      	bne.n	800913c <__libc_init_array+0x24>
 8009128:	f000 f864 	bl	80091f4 <_init>
 800912c:	2600      	movs	r6, #0
 800912e:	4d0a      	ldr	r5, [pc, #40]	@ (8009158 <__libc_init_array+0x40>)
 8009130:	4c0a      	ldr	r4, [pc, #40]	@ (800915c <__libc_init_array+0x44>)
 8009132:	1b64      	subs	r4, r4, r5
 8009134:	10a4      	asrs	r4, r4, #2
 8009136:	42a6      	cmp	r6, r4
 8009138:	d105      	bne.n	8009146 <__libc_init_array+0x2e>
 800913a:	bd70      	pop	{r4, r5, r6, pc}
 800913c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009140:	4798      	blx	r3
 8009142:	3601      	adds	r6, #1
 8009144:	e7ee      	b.n	8009124 <__libc_init_array+0xc>
 8009146:	f855 3b04 	ldr.w	r3, [r5], #4
 800914a:	4798      	blx	r3
 800914c:	3601      	adds	r6, #1
 800914e:	e7f2      	b.n	8009136 <__libc_init_array+0x1e>
 8009150:	08009290 	.word	0x08009290
 8009154:	08009290 	.word	0x08009290
 8009158:	08009290 	.word	0x08009290
 800915c:	08009294 	.word	0x08009294

08009160 <__retarget_lock_acquire_recursive>:
 8009160:	4770      	bx	lr

08009162 <__retarget_lock_release_recursive>:
 8009162:	4770      	bx	lr

08009164 <_free_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4605      	mov	r5, r0
 8009168:	2900      	cmp	r1, #0
 800916a:	d040      	beq.n	80091ee <_free_r+0x8a>
 800916c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009170:	1f0c      	subs	r4, r1, #4
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfb8      	it	lt
 8009176:	18e4      	addlt	r4, r4, r3
 8009178:	f7ff ffa4 	bl	80090c4 <__malloc_lock>
 800917c:	4a1c      	ldr	r2, [pc, #112]	@ (80091f0 <_free_r+0x8c>)
 800917e:	6813      	ldr	r3, [r2, #0]
 8009180:	b933      	cbnz	r3, 8009190 <_free_r+0x2c>
 8009182:	6063      	str	r3, [r4, #4]
 8009184:	6014      	str	r4, [r2, #0]
 8009186:	4628      	mov	r0, r5
 8009188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800918c:	f7ff bfa0 	b.w	80090d0 <__malloc_unlock>
 8009190:	42a3      	cmp	r3, r4
 8009192:	d908      	bls.n	80091a6 <_free_r+0x42>
 8009194:	6820      	ldr	r0, [r4, #0]
 8009196:	1821      	adds	r1, r4, r0
 8009198:	428b      	cmp	r3, r1
 800919a:	bf01      	itttt	eq
 800919c:	6819      	ldreq	r1, [r3, #0]
 800919e:	685b      	ldreq	r3, [r3, #4]
 80091a0:	1809      	addeq	r1, r1, r0
 80091a2:	6021      	streq	r1, [r4, #0]
 80091a4:	e7ed      	b.n	8009182 <_free_r+0x1e>
 80091a6:	461a      	mov	r2, r3
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	b10b      	cbz	r3, 80091b0 <_free_r+0x4c>
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	d9fa      	bls.n	80091a6 <_free_r+0x42>
 80091b0:	6811      	ldr	r1, [r2, #0]
 80091b2:	1850      	adds	r0, r2, r1
 80091b4:	42a0      	cmp	r0, r4
 80091b6:	d10b      	bne.n	80091d0 <_free_r+0x6c>
 80091b8:	6820      	ldr	r0, [r4, #0]
 80091ba:	4401      	add	r1, r0
 80091bc:	1850      	adds	r0, r2, r1
 80091be:	4283      	cmp	r3, r0
 80091c0:	6011      	str	r1, [r2, #0]
 80091c2:	d1e0      	bne.n	8009186 <_free_r+0x22>
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	4408      	add	r0, r1
 80091ca:	6010      	str	r0, [r2, #0]
 80091cc:	6053      	str	r3, [r2, #4]
 80091ce:	e7da      	b.n	8009186 <_free_r+0x22>
 80091d0:	d902      	bls.n	80091d8 <_free_r+0x74>
 80091d2:	230c      	movs	r3, #12
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	e7d6      	b.n	8009186 <_free_r+0x22>
 80091d8:	6820      	ldr	r0, [r4, #0]
 80091da:	1821      	adds	r1, r4, r0
 80091dc:	428b      	cmp	r3, r1
 80091de:	bf01      	itttt	eq
 80091e0:	6819      	ldreq	r1, [r3, #0]
 80091e2:	685b      	ldreq	r3, [r3, #4]
 80091e4:	1809      	addeq	r1, r1, r0
 80091e6:	6021      	streq	r1, [r4, #0]
 80091e8:	6063      	str	r3, [r4, #4]
 80091ea:	6054      	str	r4, [r2, #4]
 80091ec:	e7cb      	b.n	8009186 <_free_r+0x22>
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20000a80 	.word	0x20000a80

080091f4 <_init>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	bf00      	nop
 80091f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fa:	bc08      	pop	{r3}
 80091fc:	469e      	mov	lr, r3
 80091fe:	4770      	bx	lr

08009200 <_fini>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	bf00      	nop
 8009204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009206:	bc08      	pop	{r3}
 8009208:	469e      	mov	lr, r3
 800920a:	4770      	bx	lr
