
Blue Pill Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000915c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08009268  08009268  0000a268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092ec  080092ec  0000b158  2**0
                  CONTENTS
  4 .ARM          00000000  080092ec  080092ec  0000b158  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092ec  080092ec  0000b158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092ec  080092ec  0000a2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092f0  080092f0  0000a2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080092f4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000158  0800944c  0000b158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  0800944c  0000bbc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001290d  00000000  00000000  0000b181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c6  00000000  00000000  0001da8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00020e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfb  00000000  00000000  00021f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af51  00000000  00000000  00022c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155b2  00000000  00000000  0003dbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009257b  00000000  00000000  00053176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e56f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000493c  00000000  00000000  000e5734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ea070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08009250 	.word	0x08009250

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08009250 	.word	0x08009250

0800014c <ADC_Convert_Rank1>:
uint16_t ADC_Convert_Rank2 (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_Convert_Rank1 (void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	463b      	mov	r3, r7
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 800015c:	2308      	movs	r3, #8
 800015e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000160:	2301      	movs	r3, #1
 8000162:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000164:	2300      	movs	r3, #0
 8000166:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000168:	463b      	mov	r3, r7
 800016a:	4619      	mov	r1, r3
 800016c:	480d      	ldr	r0, [pc, #52]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800016e:	f001 fad9 	bl	8001724 <HAL_ADC_ConfigChannel>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <ADC_Convert_Rank1+0x30>
	{
		Error_Handler();
 8000178:	f000 fad8 	bl	800072c <Error_Handler>
	}

	HAL_ADC_Start (&hadc1);
 800017c:	4809      	ldr	r0, [pc, #36]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800017e:	f001 f8e5 	bl	800134c <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc1, 100);
 8000182:	2164      	movs	r1, #100	@ 0x64
 8000184:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 8000186:	f001 f9bb 	bl	8001500 <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue (&hadc1);
 800018a:	4806      	ldr	r0, [pc, #24]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800018c:	f001 fabe 	bl	800170c <HAL_ADC_GetValue>
 8000190:	4603      	mov	r3, r0
 8000192:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop (&hadc1);
 8000194:	4803      	ldr	r0, [pc, #12]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 8000196:	f001 f987 	bl	80014a8 <HAL_ADC_Stop>

	return val;
 800019a:	89fb      	ldrh	r3, [r7, #14]
}
 800019c:	4618      	mov	r0, r3
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20000174 	.word	0x20000174

080001a8 <ADC_Convert_Rank2>:

uint16_t ADC_Convert_Rank2 (void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80001ae:	463b      	mov	r3, r7
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9; // ADC_CHANNEL_0
 80001b8:	2309      	movs	r3, #9
 80001ba:	603b      	str	r3, [r7, #0]
 	sConfig.Rank = ADC_REGULAR_RANK_1;
 80001bc:	2301      	movs	r3, #1
 80001be:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2 /*&hadc1*/, &sConfig) != HAL_OK)
 80001c4:	463b      	mov	r3, r7
 80001c6:	4619      	mov	r1, r3
 80001c8:	480d      	ldr	r0, [pc, #52]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001ca:	f001 faab 	bl	8001724 <HAL_ADC_ConfigChannel>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <ADC_Convert_Rank2+0x30>
	{
		Error_Handler();
 80001d4:	f000 faaa 	bl	800072c <Error_Handler>
	}

	HAL_ADC_Start (&hadc2 /*&hadc1*/);
 80001d8:	4809      	ldr	r0, [pc, #36]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001da:	f001 f8b7 	bl	800134c <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc2 /*&hadc1*/, 100);
 80001de:	2164      	movs	r1, #100	@ 0x64
 80001e0:	4807      	ldr	r0, [pc, #28]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001e2:	f001 f98d 	bl	8001500 <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue (&hadc2 /*&hadc1*/);
 80001e6:	4806      	ldr	r0, [pc, #24]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001e8:	f001 fa90 	bl	800170c <HAL_ADC_GetValue>
 80001ec:	4603      	mov	r3, r0
 80001ee:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop (&hadc2 /*&hadc1*/);
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001f2:	f001 f959 	bl	80014a8 <HAL_ADC_Stop>

	return val;
 80001f6:	89fb      	ldrh	r3, [r7, #14]
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3710      	adds	r7, #16
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	200001a4 	.word	0x200001a4

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 ff41 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f8b5 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 fa39 	bl	8000688 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000216:	f008 fb11 	bl	800883c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800021a:	f000 f90d 	bl	8000438 <MX_ADC1_Init>
  MX_TIM2_Init();
 800021e:	f000 f997 	bl	8000550 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000222:	f000 f957 	bl	80004d4 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000226:	f000 f9e1 	bl	80005ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Queue_Init (DEFAULT_QUEUE_SIZE);
 800022a:	201e      	movs	r0, #30
 800022c:	f000 fa84 	bl	8000738 <Queue_Init>

  HAL_Delay (1000);
 8000230:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000234:	f000 ff8e 	bl	8001154 <HAL_Delay>

	for (uint8_t i = 0; i < 16; i++)	D_sum += ~(ADC_Convert_Rank1 ());
 8000238:	2300      	movs	r3, #0
 800023a:	71fb      	strb	r3, [r7, #7]
 800023c:	e00d      	b.n	800025a <main+0x56>
 800023e:	f7ff ff85 	bl	800014c <ADC_Convert_Rank1>
 8000242:	4603      	mov	r3, r0
 8000244:	43db      	mvns	r3, r3
 8000246:	b29a      	uxth	r2, r3
 8000248:	4b40      	ldr	r3, [pc, #256]	@ (800034c <main+0x148>)
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	4413      	add	r3, r2
 800024e:	b29a      	uxth	r2, r3
 8000250:	4b3e      	ldr	r3, [pc, #248]	@ (800034c <main+0x148>)
 8000252:	801a      	strh	r2, [r3, #0]
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	3301      	adds	r3, #1
 8000258:	71fb      	strb	r3, [r7, #7]
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b0f      	cmp	r3, #15
 800025e:	d9ee      	bls.n	800023e <main+0x3a>

	D_current = ((D_sum >> 4) * 127) / 4095;
 8000260:	4b3a      	ldr	r3, [pc, #232]	@ (800034c <main+0x148>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	091b      	lsrs	r3, r3, #4
 8000266:	b29b      	uxth	r3, r3
 8000268:	461a      	mov	r2, r3
 800026a:	4613      	mov	r3, r2
 800026c:	01db      	lsls	r3, r3, #7
 800026e:	1a9b      	subs	r3, r3, r2
 8000270:	4a37      	ldr	r2, [pc, #220]	@ (8000350 <main+0x14c>)
 8000272:	fb82 1203 	smull	r1, r2, r2, r3
 8000276:	441a      	add	r2, r3
 8000278:	12d2      	asrs	r2, r2, #11
 800027a:	17db      	asrs	r3, r3, #31
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	b29a      	uxth	r2, r3
 8000280:	4b34      	ldr	r3, [pc, #208]	@ (8000354 <main+0x150>)
 8000282:	801a      	strh	r2, [r3, #0]
	D_sum = 0;
 8000284:	4b31      	ldr	r3, [pc, #196]	@ (800034c <main+0x148>)
 8000286:	2200      	movs	r2, #0
 8000288:	801a      	strh	r2, [r3, #0]

	D_previous = D_current;
 800028a:	4b32      	ldr	r3, [pc, #200]	@ (8000354 <main+0x150>)
 800028c:	881a      	ldrh	r2, [r3, #0]
 800028e:	4b32      	ldr	r3, [pc, #200]	@ (8000358 <main+0x154>)
 8000290:	801a      	strh	r2, [r3, #0]
	D_vol_message [3] = D_current;
 8000292:	4b30      	ldr	r3, [pc, #192]	@ (8000354 <main+0x150>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	4b30      	ldr	r3, [pc, #192]	@ (800035c <main+0x158>)
 800029a:	70da      	strb	r2, [r3, #3]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
	USBD_MIDI_SendPackets (&hUsbDeviceFS, D_vol_message, 4);
 800029c:	2204      	movs	r2, #4
 800029e:	492f      	ldr	r1, [pc, #188]	@ (800035c <main+0x158>)
 80002a0:	482f      	ldr	r0, [pc, #188]	@ (8000360 <main+0x15c>)
 80002a2:	f007 f9c4 	bl	800762e <USBD_MIDI_SendPackets>
//		Enqueue (D_vol_message);

	for (uint8_t i = 0; i < 16; i++)	P_sum += ~(ADC_Convert_Rank2 ());
 80002a6:	2300      	movs	r3, #0
 80002a8:	71bb      	strb	r3, [r7, #6]
 80002aa:	e00d      	b.n	80002c8 <main+0xc4>
 80002ac:	f7ff ff7c 	bl	80001a8 <ADC_Convert_Rank2>
 80002b0:	4603      	mov	r3, r0
 80002b2:	43db      	mvns	r3, r3
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000364 <main+0x160>)
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	4413      	add	r3, r2
 80002bc:	b29a      	uxth	r2, r3
 80002be:	4b29      	ldr	r3, [pc, #164]	@ (8000364 <main+0x160>)
 80002c0:	801a      	strh	r2, [r3, #0]
 80002c2:	79bb      	ldrb	r3, [r7, #6]
 80002c4:	3301      	adds	r3, #1
 80002c6:	71bb      	strb	r3, [r7, #6]
 80002c8:	79bb      	ldrb	r3, [r7, #6]
 80002ca:	2b0f      	cmp	r3, #15
 80002cc:	d9ee      	bls.n	80002ac <main+0xa8>

	P_current = ((P_sum >> 4) * 127) / 4095;
 80002ce:	4b25      	ldr	r3, [pc, #148]	@ (8000364 <main+0x160>)
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	091b      	lsrs	r3, r3, #4
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	4613      	mov	r3, r2
 80002da:	01db      	lsls	r3, r3, #7
 80002dc:	1a9b      	subs	r3, r3, r2
 80002de:	4a1c      	ldr	r2, [pc, #112]	@ (8000350 <main+0x14c>)
 80002e0:	fb82 1203 	smull	r1, r2, r2, r3
 80002e4:	441a      	add	r2, r3
 80002e6:	12d2      	asrs	r2, r2, #11
 80002e8:	17db      	asrs	r3, r3, #31
 80002ea:	1ad3      	subs	r3, r2, r3
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000368 <main+0x164>)
 80002f0:	801a      	strh	r2, [r3, #0]
	P_sum = 0;
 80002f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000364 <main+0x160>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	801a      	strh	r2, [r3, #0]

	P_previous = P_current;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000368 <main+0x164>)
 80002fa:	881a      	ldrh	r2, [r3, #0]
 80002fc:	4b1b      	ldr	r3, [pc, #108]	@ (800036c <main+0x168>)
 80002fe:	801a      	strh	r2, [r3, #0]
	P_vol_message [3] = P_current;
 8000300:	4b19      	ldr	r3, [pc, #100]	@ (8000368 <main+0x164>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b1a      	ldr	r3, [pc, #104]	@ (8000370 <main+0x16c>)
 8000308:	70da      	strb	r2, [r3, #3]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
	USBD_MIDI_SendPackets (&hUsbDeviceFS, P_vol_message, 4);
 800030a:	2204      	movs	r2, #4
 800030c:	4918      	ldr	r1, [pc, #96]	@ (8000370 <main+0x16c>)
 800030e:	4814      	ldr	r0, [pc, #80]	@ (8000360 <main+0x15c>)
 8000310:	f007 f98d 	bl	800762e <USBD_MIDI_SendPackets>
//		Enqueue (P_vol_message);

	HAL_Delay (1000);
 8000314:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000318:	f000 ff1c 	bl	8001154 <HAL_Delay>

  HAL_NVIC_SetPriority (TIM2_IRQn, 0, 0);
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	201c      	movs	r0, #28
 8000322:	f001 fc6a 	bl	8001bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM2_IRQn);
 8000326:	201c      	movs	r0, #28
 8000328:	f001 fc83 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim2);
 800032c:	4811      	ldr	r0, [pc, #68]	@ (8000374 <main+0x170>)
 800032e:	f004 f94f 	bl	80045d0 <HAL_TIM_Base_Start_IT>

  HAL_NVIC_SetPriority (TIM3_IRQn , 0, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	2100      	movs	r1, #0
 8000336:	201d      	movs	r0, #29
 8000338:	f001 fc5f 	bl	8001bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM3_IRQn );
 800033c:	201d      	movs	r0, #29
 800033e:	f001 fc78 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim3);
 8000342:	480d      	ldr	r0, [pc, #52]	@ (8000378 <main+0x174>)
 8000344:	f004 f944 	bl	80045d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <main+0x144>
 800034c:	20000278 	.word	0x20000278
 8000350:	80080081 	.word	0x80080081
 8000354:	20000276 	.word	0x20000276
 8000358:	20000274 	.word	0x20000274
 800035c:	2000000c 	.word	0x2000000c
 8000360:	200002cc 	.word	0x200002cc
 8000364:	2000027e 	.word	0x2000027e
 8000368:	2000027c 	.word	0x2000027c
 800036c:	2000027a 	.word	0x2000027a
 8000370:	20000010 	.word	0x20000010
 8000374:	200001d4 	.word	0x200001d4
 8000378:	2000021c 	.word	0x2000021c

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b094      	sub	sp, #80	@ 0x50
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000386:	2228      	movs	r2, #40	@ 0x28
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f008 fed4 	bl	8009138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	f107 0314 	add.w	r3, r7, #20
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ac:	2301      	movs	r3, #1
 80003ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ba:	2301      	movs	r3, #1
 80003bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003be:	2302      	movs	r3, #2
 80003c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80003cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 fb44 	bl	8003a60 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003de:	f000 f9a5 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	2101      	movs	r1, #1
 80003fe:	4618      	mov	r0, r3
 8000400:	f003 fdb0 	bl	8003f64 <HAL_RCC_ClockConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800040a:	f000 f98f 	bl	800072c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800040e:	2312      	movs	r3, #18
 8000410:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000412:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000416:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000418:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800041c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4618      	mov	r0, r3
 8000422:	f003 ff19 	bl	8004258 <HAL_RCCEx_PeriphCLKConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800042c:	f000 f97e 	bl	800072c <Error_Handler>
  }
}
 8000430:	bf00      	nop
 8000432:	3750      	adds	r7, #80	@ 0x50
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000448:	4b20      	ldr	r3, [pc, #128]	@ (80004cc <MX_ADC1_Init+0x94>)
 800044a:	4a21      	ldr	r2, [pc, #132]	@ (80004d0 <MX_ADC1_Init+0x98>)
 800044c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800044e:	4b1f      	ldr	r3, [pc, #124]	@ (80004cc <MX_ADC1_Init+0x94>)
 8000450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000454:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000456:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <MX_ADC1_Init+0x94>)
 8000458:	2200      	movs	r2, #0
 800045a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045c:	4b1b      	ldr	r3, [pc, #108]	@ (80004cc <MX_ADC1_Init+0x94>)
 800045e:	2200      	movs	r2, #0
 8000460:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000462:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <MX_ADC1_Init+0x94>)
 8000464:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000468:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046a:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <MX_ADC1_Init+0x94>)
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000470:	4b16      	ldr	r3, [pc, #88]	@ (80004cc <MX_ADC1_Init+0x94>)
 8000472:	2202      	movs	r2, #2
 8000474:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000476:	4815      	ldr	r0, [pc, #84]	@ (80004cc <MX_ADC1_Init+0x94>)
 8000478:	f000 fe90 	bl	800119c <HAL_ADC_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000482:	f000 f953 	bl	800072c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000486:	2308      	movs	r3, #8
 8000488:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800048a:	2301      	movs	r3, #1
 800048c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	480d      	ldr	r0, [pc, #52]	@ (80004cc <MX_ADC1_Init+0x94>)
 8000498:	f001 f944 	bl	8001724 <HAL_ADC_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80004a2:	f000 f943 	bl	800072c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004aa:	2302      	movs	r3, #2
 80004ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	4619      	mov	r1, r3
 80004b2:	4806      	ldr	r0, [pc, #24]	@ (80004cc <MX_ADC1_Init+0x94>)
 80004b4:	f001 f936 	bl	8001724 <HAL_ADC_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80004be:	f000 f935 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000174 	.word	0x20000174
 80004d0:	40012400 	.word	0x40012400

080004d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80004e4:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <MX_ADC2_Init+0x74>)
 80004e6:	4a19      	ldr	r2, [pc, #100]	@ (800054c <MX_ADC2_Init+0x78>)
 80004e8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ea:	4b17      	ldr	r3, [pc, #92]	@ (8000548 <MX_ADC2_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004f0:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <MX_ADC2_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004f6:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <MX_ADC2_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fc:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <MX_ADC2_Init+0x74>)
 80004fe:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000502:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000504:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <MX_ADC2_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <MX_ADC2_Init+0x74>)
 800050c:	2201      	movs	r2, #1
 800050e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000510:	480d      	ldr	r0, [pc, #52]	@ (8000548 <MX_ADC2_Init+0x74>)
 8000512:	f000 fe43 	bl	800119c <HAL_ADC_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800051c:	f000 f906 	bl	800072c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000520:	2309      	movs	r3, #9
 8000522:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000524:	2301      	movs	r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4619      	mov	r1, r3
 8000530:	4805      	ldr	r0, [pc, #20]	@ (8000548 <MX_ADC2_Init+0x74>)
 8000532:	f001 f8f7 	bl	8001724 <HAL_ADC_ConfigChannel>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800053c:	f000 f8f6 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200001a4 	.word	0x200001a4
 800054c:	40012800 	.word	0x40012800

08000550 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800056c:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <MX_TIM2_Init+0x98>)
 800056e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 359;
 8000574:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <MX_TIM2_Init+0x98>)
 8000576:	f240 1267 	movw	r2, #359	@ 0x167
 800057a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057c:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <MX_TIM2_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 8000582:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <MX_TIM2_Init+0x98>)
 8000584:	f240 321f 	movw	r2, #799	@ 0x31f
 8000588:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_TIM2_Init+0x98>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000590:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <MX_TIM2_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000596:	4814      	ldr	r0, [pc, #80]	@ (80005e8 <MX_TIM2_Init+0x98>)
 8000598:	f003 ffca 	bl	8004530 <HAL_TIM_Base_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005a2:	f000 f8c3 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	4619      	mov	r1, r3
 80005b2:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <MX_TIM2_Init+0x98>)
 80005b4:	f004 f94e 	bl	8004854 <HAL_TIM_ConfigClockSource>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005be:	f000 f8b5 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	4619      	mov	r1, r3
 80005ce:	4806      	ldr	r0, [pc, #24]	@ (80005e8 <MX_TIM2_Init+0x98>)
 80005d0:	f004 fb38 	bl	8004c44 <HAL_TIMEx_MasterConfigSynchronization>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005da:	f000 f8a7 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200001d4 	.word	0x200001d4

080005ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000608:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <MX_TIM3_Init+0x94>)
 800060a:	4a1e      	ldr	r2, [pc, #120]	@ (8000684 <MX_TIM3_Init+0x98>)
 800060c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1799;
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <MX_TIM3_Init+0x94>)
 8000610:	f240 7207 	movw	r2, #1799	@ 0x707
 8000614:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <MX_TIM3_Init+0x94>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 799;
 800061c:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <MX_TIM3_Init+0x94>)
 800061e:	f240 321f 	movw	r2, #799	@ 0x31f
 8000622:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <MX_TIM3_Init+0x94>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <MX_TIM3_Init+0x94>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000630:	4813      	ldr	r0, [pc, #76]	@ (8000680 <MX_TIM3_Init+0x94>)
 8000632:	f003 ff7d 	bl	8004530 <HAL_TIM_Base_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800063c:	f000 f876 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <MX_TIM3_Init+0x94>)
 800064e:	f004 f901 	bl	8004854 <HAL_TIM_ConfigClockSource>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000658:	f000 f868 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_TIM3_Init+0x94>)
 800066a:	f004 faeb 	bl	8004c44 <HAL_TIMEx_MasterConfigSynchronization>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000674:	f000 f85a 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000021c 	.word	0x2000021c
 8000684:	40000400 	.word	0x40000400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800069c:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <MX_GPIO_Init+0x98>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000720 <MX_GPIO_Init+0x98>)
 80006a2:	f043 0320 	orr.w	r3, r3, #32
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <MX_GPIO_Init+0x98>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0320 	and.w	r3, r3, #32
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_GPIO_Init+0x98>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a19      	ldr	r2, [pc, #100]	@ (8000720 <MX_GPIO_Init+0x98>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_GPIO_Init+0x98>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_GPIO_Init+0x98>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a13      	ldr	r2, [pc, #76]	@ (8000720 <MX_GPIO_Init+0x98>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_GPIO_Init+0x98>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : C_B_Pin CS_B_Pin D_B_Pin DS_B_Pin
                           E_B_Pin F_B_Pin FS_B_Pin */
  GPIO_InitStruct.Pin = C_B_Pin|CS_B_Pin|D_B_Pin|DS_B_Pin
 80006e4:	f248 03fc 	movw	r3, #33020	@ 0x80fc
 80006e8:	613b      	str	r3, [r7, #16]
                          |E_B_Pin|F_B_Pin|FS_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4619      	mov	r1, r3
 80006f8:	480a      	ldr	r0, [pc, #40]	@ (8000724 <MX_GPIO_Init+0x9c>)
 80006fa:	f001 fab5 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_B_Pin GS_B_Pin A_B_Pin AS_B_Pin
                           B_B_Pin SP_B_Pin */
  GPIO_InitStruct.Pin = G_B_Pin|GS_B_Pin|A_B_Pin|AS_B_Pin
 80006fe:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8000702:	613b      	str	r3, [r7, #16]
                          |B_B_Pin|SP_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_GPIO_Init+0xa0>)
 8000714:	f001 faa8 	bl	8001c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800
 8000728:	40010c00 	.word	0x40010c00

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <Queue_Init>:
void *max_size_v =  &max_size;
void *curr_size_v =  &curr_size;


/* INITIALIZATION FUNCTION */
void Queue_Init (uint16_t size) {
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
    // Allocate memory for head and tail
    head = (queue_t *) malloc (sizeof (queue_t));
 8000742:	2008      	movs	r0, #8
 8000744:	f008 fc3a 	bl	8008fbc <malloc>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <Queue_Init+0x64>)
 800074e:	601a      	str	r2, [r3, #0]
    head->next = (queue_t *) malloc (sizeof (queue_t));
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <Queue_Init+0x64>)
 8000752:	681c      	ldr	r4, [r3, #0]
 8000754:	2008      	movs	r0, #8
 8000756:	f008 fc31 	bl	8008fbc <malloc>
 800075a:	4603      	mov	r3, r0
 800075c:	6063      	str	r3, [r4, #4]

    tail = (queue_t *) malloc (sizeof (queue_t));
 800075e:	2008      	movs	r0, #8
 8000760:	f008 fc2c 	bl	8008fbc <malloc>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <Queue_Init+0x68>)
 800076a:	601a      	str	r2, [r3, #0]
    tail->next = (queue_t *) malloc (sizeof (queue_t));
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <Queue_Init+0x68>)
 800076e:	681c      	ldr	r4, [r3, #0]
 8000770:	2008      	movs	r0, #8
 8000772:	f008 fc23 	bl	8008fbc <malloc>
 8000776:	4603      	mov	r3, r0
 8000778:	6063      	str	r3, [r4, #4]

    head = tail = NULL;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <Queue_Init+0x68>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <Queue_Init+0x68>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a05      	ldr	r2, [pc, #20]	@ (800079c <Queue_Init+0x64>)
 8000786:	6013      	str	r3, [r2, #0]

    // Initialize max_size and curr_size
    max_size = size;
 8000788:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <Queue_Init+0x6c>)
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	8013      	strh	r3, [r2, #0]
    curr_size = 0;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <Queue_Init+0x70>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	20000264 	.word	0x20000264
 80007a0:	20000268 	.word	0x20000268
 80007a4:	2000026c 	.word	0x2000026c
 80007a8:	2000026e 	.word	0x2000026e

080007ac <Enqueue>:
    free (tail_v);
    free (max_size_v);
    free (curr_size_v);
}

bool Enqueue (uint8_t *message) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    // If message is empty, return false
    if (message == NULL)    return false;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <Enqueue+0x12>
 80007ba:	2300      	movs	r3, #0
 80007bc:	e032      	b.n	8000824 <Enqueue+0x78>

    // Create a node to store message
    queue_t *node = (queue_t *) malloc (sizeof (queue_t));
 80007be:	2008      	movs	r0, #8
 80007c0:	f008 fbfc 	bl	8008fbc <malloc>
 80007c4:	4603      	mov	r3, r0
 80007c6:	60fb      	str	r3, [r7, #12]
    memcpy (node->message, message, 4);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	601a      	str	r2, [r3, #0]
    node->next = NULL;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]

    // If head is NULL or curr_size is 0, node becomes both head and tail
    if (head == NULL || curr_size == 0)    head = tail = node;
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <Enqueue+0x80>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <Enqueue+0x3a>
 80007de:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <Enqueue+0x84>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d107      	bne.n	80007f6 <Enqueue+0x4a>
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <Enqueue+0x88>)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <Enqueue+0x88>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <Enqueue+0x80>)
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	e00f      	b.n	8000816 <Enqueue+0x6a>
    // else if max size has not been exceeded, node becomes new tail
    else if (curr_size < max_size) {
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <Enqueue+0x84>)
 80007f8:	881a      	ldrh	r2, [r3, #0]
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <Enqueue+0x8c>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d207      	bcs.n	8000812 <Enqueue+0x66>
        tail->next = node;
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <Enqueue+0x88>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	605a      	str	r2, [r3, #4]
        tail = node;
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <Enqueue+0x88>)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	e001      	b.n	8000816 <Enqueue+0x6a>
    }

    else    return false;
 8000812:	2300      	movs	r3, #0
 8000814:	e006      	b.n	8000824 <Enqueue+0x78>

    curr_size++;
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <Enqueue+0x84>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	b29a      	uxth	r2, r3
 800081e:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <Enqueue+0x84>)
 8000820:	801a      	strh	r2, [r3, #0]
    return true;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000264 	.word	0x20000264
 8000830:	2000026e 	.word	0x2000026e
 8000834:	20000268 	.word	0x20000268
 8000838:	2000026c 	.word	0x2000026c

0800083c <Dequeue>:

uint8_t *Dequeue () {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
    // if head is NULL or curr_size is 0, return NULL
    if (head == NULL || curr_size == 0)     return NULL;
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <Dequeue+0x5c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d003      	beq.n	8000852 <Dequeue+0x16>
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <Dequeue+0x60>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <Dequeue+0x1a>
 8000852:	2300      	movs	r3, #0
 8000854:	e01b      	b.n	800088e <Dequeue+0x52>

    queue_t *temp = head;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <Dequeue+0x5c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	607b      	str	r3, [r7, #4]
    uint8_t *message = malloc (sizeof(uint8_t) * 4);
 800085c:	2004      	movs	r0, #4
 800085e:	f008 fbad 	bl	8008fbc <malloc>
 8000862:	4603      	mov	r3, r0
 8000864:	603b      	str	r3, [r7, #0]
    memcpy (message, temp->message, 4);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	601a      	str	r2, [r3, #0]

    head = head->next;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <Dequeue+0x5c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	4a08      	ldr	r2, [pc, #32]	@ (8000898 <Dequeue+0x5c>)
 8000878:	6013      	str	r3, [r2, #0]
    curr_size--;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <Dequeue+0x60>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	3b01      	subs	r3, #1
 8000880:	b29a      	uxth	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <Dequeue+0x60>)
 8000884:	801a      	strh	r2, [r3, #0]

    free (temp);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f008 fba0 	bl	8008fcc <free>
    return message;
 800088c:	683b      	ldr	r3, [r7, #0]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000264 	.word	0x20000264
 800089c:	2000026e 	.word	0x2000026e

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_MspInit+0x5c>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <HAL_MspInit+0x5c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <HAL_MspInit+0x5c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_MspInit+0x5c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <HAL_MspInit+0x5c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_MspInit+0x5c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <HAL_MspInit+0x60>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_MspInit+0x60>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010000 	.word	0x40010000

08000904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	@ 0x30
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a33      	ldr	r2, [pc, #204]	@ (80009ec <HAL_ADC_MspInit+0xe8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d138      	bne.n	8000996 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000924:	4b32      	ldr	r3, [pc, #200]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a31      	ldr	r2, [pc, #196]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a2b      	ldr	r2, [pc, #172]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a25      	ldr	r2, [pc, #148]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0308 	and.w	r3, r3, #8
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000970:	2303      	movs	r3, #3
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4619      	mov	r1, r3
 800097a:	481e      	ldr	r0, [pc, #120]	@ (80009f4 <HAL_ADC_MspInit+0xf0>)
 800097c:	f001 f974 	bl	8001c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D_V_Pin;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000984:	2303      	movs	r3, #3
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(D_V_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4619      	mov	r1, r3
 800098e:	481a      	ldr	r0, [pc, #104]	@ (80009f8 <HAL_ADC_MspInit+0xf4>)
 8000990:	f001 f96a 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000994:	e026      	b.n	80009e4 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a18      	ldr	r2, [pc, #96]	@ (80009fc <HAL_ADC_MspInit+0xf8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d121      	bne.n	80009e4 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 80009a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a0c      	ldr	r2, [pc, #48]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_ADC_MspInit+0xec>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P_V_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d4:	2303      	movs	r3, #3
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(P_V_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <HAL_ADC_MspInit+0xf4>)
 80009e0:	f001 f942 	bl	8001c68 <HAL_GPIO_Init>
}
 80009e4:	bf00      	nop
 80009e6:	3730      	adds	r7, #48	@ 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40012400 	.word	0x40012400
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010800 	.word	0x40010800
 80009f8:	40010c00 	.word	0x40010c00
 80009fc:	40012800 	.word	0x40012800

08000a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a10:	d114      	bne.n	8000a3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <HAL_TIM_Base_MspInit+0x78>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a18      	ldr	r2, [pc, #96]	@ (8000a78 <HAL_TIM_Base_MspInit+0x78>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <HAL_TIM_Base_MspInit+0x78>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	201c      	movs	r0, #28
 8000a30:	f001 f8e3 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a34:	201c      	movs	r0, #28
 8000a36:	f001 f8fc 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a3a:	e018      	b.n	8000a6e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0e      	ldr	r2, [pc, #56]	@ (8000a7c <HAL_TIM_Base_MspInit+0x7c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d113      	bne.n	8000a6e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <HAL_TIM_Base_MspInit+0x78>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a78 <HAL_TIM_Base_MspInit+0x78>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <HAL_TIM_Base_MspInit+0x78>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	201d      	movs	r0, #29
 8000a64:	f001 f8c9 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a68:	201d      	movs	r0, #29
 8000a6a:	f001 f8e2 	bl	8001c32 <HAL_NVIC_EnableIRQ>
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40000400 	.word	0x40000400

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <NMI_Handler+0x4>

08000a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <MemManage_Handler+0x4>

08000a98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad0:	f000 fb24 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ade:	f001 fb7a 	bl	80021d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000790 	.word	0x20000790

08000aec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	uint8_t *msg = Dequeue ();
 8000af2:	f7ff fea3 	bl	800083c <Dequeue>
 8000af6:	6078      	str	r0, [r7, #4]
	if (msg != NULL) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00b      	beq.n	8000b16 <TIM2_IRQHandler+0x2a>
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000afe:	bf00      	nop
 8000b00:	48a7      	ldr	r0, [pc, #668]	@ (8000da0 <TIM2_IRQHandler+0x2b4>)
 8000b02:	f006 fd87 	bl	8007614 <USBD_MIDI_GetState>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f9      	bne.n	8000b00 <TIM2_IRQHandler+0x14>
		USBD_MIDI_SendPackets (&hUsbDeviceFS, msg, 4);
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	48a3      	ldr	r0, [pc, #652]	@ (8000da0 <TIM2_IRQHandler+0x2b4>)
 8000b12:	f006 fd8c 	bl	800762e <USBD_MIDI_SendPackets>
	}

	if (!HAL_GPIO_ReadPin (C_B_GPIO_Port, C_B_Pin)) {
 8000b16:	2104      	movs	r1, #4
 8000b18:	48a2      	ldr	r0, [pc, #648]	@ (8000da4 <TIM2_IRQHandler+0x2b8>)
 8000b1a:	f001 fa29 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d111      	bne.n	8000b48 <TIM2_IRQHandler+0x5c>
		if (!pressed) {
 8000b24:	4ba0      	ldr	r3, [pc, #640]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	f083 0301 	eor.w	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 8158 	beq.w	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000b34:	4b9c      	ldr	r3, [pc, #624]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]

			Note_Change (C);
 8000b3a:	2030      	movs	r0, #48	@ 0x30
 8000b3c:	f000 fa10 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000b40:	489a      	ldr	r0, [pc, #616]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000b42:	f7ff fe33 	bl	80007ac <Enqueue>
 8000b46:	e14d      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (CS_B_GPIO_Port, CS_B_Pin)) {
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4896      	ldr	r0, [pc, #600]	@ (8000da4 <TIM2_IRQHandler+0x2b8>)
 8000b4c:	f001 fa10 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d111      	bne.n	8000b7a <TIM2_IRQHandler+0x8e>
		if (!pressed) {
 8000b56:	4b94      	ldr	r3, [pc, #592]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	f083 0301 	eor.w	r3, r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f000 813f 	beq.w	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000b66:	4b90      	ldr	r3, [pc, #576]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]

			Note_Change (CS);
 8000b6c:	2031      	movs	r0, #49	@ 0x31
 8000b6e:	f000 f9f7 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000b72:	488e      	ldr	r0, [pc, #568]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000b74:	f7ff fe1a 	bl	80007ac <Enqueue>
 8000b78:	e134      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (D_B_GPIO_Port, D_B_Pin)) {
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4889      	ldr	r0, [pc, #548]	@ (8000da4 <TIM2_IRQHandler+0x2b8>)
 8000b7e:	f001 f9f7 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d111      	bne.n	8000bac <TIM2_IRQHandler+0xc0>
		if (!pressed) {
 8000b88:	4b87      	ldr	r3, [pc, #540]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 8126 	beq.w	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000b98:	4b83      	ldr	r3, [pc, #524]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]

			Note_Change (D);
 8000b9e:	2032      	movs	r0, #50	@ 0x32
 8000ba0:	f000 f9de 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000ba4:	4881      	ldr	r0, [pc, #516]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000ba6:	f7ff fe01 	bl	80007ac <Enqueue>
 8000baa:	e11b      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (DS_B_GPIO_Port, DS_B_Pin)) {
 8000bac:	2120      	movs	r1, #32
 8000bae:	487d      	ldr	r0, [pc, #500]	@ (8000da4 <TIM2_IRQHandler+0x2b8>)
 8000bb0:	f001 f9de 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d111      	bne.n	8000bde <TIM2_IRQHandler+0xf2>
		if (!pressed) {
 8000bba:	4b7b      	ldr	r3, [pc, #492]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f083 0301 	eor.w	r3, r3, #1
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f000 810d 	beq.w	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000bca:	4b77      	ldr	r3, [pc, #476]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]

			Note_Change (DS);
 8000bd0:	2033      	movs	r0, #51	@ 0x33
 8000bd2:	f000 f9c5 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000bd6:	4875      	ldr	r0, [pc, #468]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000bd8:	f7ff fde8 	bl	80007ac <Enqueue>
 8000bdc:	e102      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (E_B_GPIO_Port, E_B_Pin)) {
 8000bde:	2140      	movs	r1, #64	@ 0x40
 8000be0:	4870      	ldr	r0, [pc, #448]	@ (8000da4 <TIM2_IRQHandler+0x2b8>)
 8000be2:	f001 f9c5 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d111      	bne.n	8000c10 <TIM2_IRQHandler+0x124>
		if (!pressed) {
 8000bec:	4b6e      	ldr	r3, [pc, #440]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f083 0301 	eor.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 80f4 	beq.w	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]

			Note_Change (E);
 8000c02:	2034      	movs	r0, #52	@ 0x34
 8000c04:	f000 f9ac 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000c08:	4868      	ldr	r0, [pc, #416]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000c0a:	f7ff fdcf 	bl	80007ac <Enqueue>
 8000c0e:	e0e9      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (F_B_GPIO_Port, F_B_Pin)) {
 8000c10:	2180      	movs	r1, #128	@ 0x80
 8000c12:	4864      	ldr	r0, [pc, #400]	@ (8000da4 <TIM2_IRQHandler+0x2b8>)
 8000c14:	f001 f9ac 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d111      	bne.n	8000c42 <TIM2_IRQHandler+0x156>
		if (!pressed) {
 8000c1e:	4b62      	ldr	r3, [pc, #392]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	f083 0301 	eor.w	r3, r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 80db 	beq.w	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000c2e:	4b5e      	ldr	r3, [pc, #376]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]

			Note_Change (F);
 8000c34:	2035      	movs	r0, #53	@ 0x35
 8000c36:	f000 f993 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000c3a:	485c      	ldr	r0, [pc, #368]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000c3c:	f7ff fdb6 	bl	80007ac <Enqueue>
 8000c40:	e0d0      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (FS_B_GPIO_Port, FS_B_Pin)) {
 8000c42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c46:	4857      	ldr	r0, [pc, #348]	@ (8000da4 <TIM2_IRQHandler+0x2b8>)
 8000c48:	f001 f992 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d111      	bne.n	8000c76 <TIM2_IRQHandler+0x18a>
		if (!pressed) {
 8000c52:	4b55      	ldr	r3, [pc, #340]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f083 0301 	eor.w	r3, r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f000 80c1 	beq.w	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000c62:	4b51      	ldr	r3, [pc, #324]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]

			Note_Change (FS);
 8000c68:	2036      	movs	r0, #54	@ 0x36
 8000c6a:	f000 f979 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000c6e:	484f      	ldr	r0, [pc, #316]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000c70:	f7ff fd9c 	bl	80007ac <Enqueue>
 8000c74:	e0b6      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (G_B_GPIO_Port, G_B_Pin)) {
 8000c76:	2108      	movs	r1, #8
 8000c78:	484d      	ldr	r0, [pc, #308]	@ (8000db0 <TIM2_IRQHandler+0x2c4>)
 8000c7a:	f001 f979 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d111      	bne.n	8000ca8 <TIM2_IRQHandler+0x1bc>
		if (!pressed) {
 8000c84:	4b48      	ldr	r3, [pc, #288]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	f083 0301 	eor.w	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80a8 	beq.w	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000c94:	4b44      	ldr	r3, [pc, #272]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]

			Note_Change (G);
 8000c9a:	2037      	movs	r0, #55	@ 0x37
 8000c9c:	f000 f960 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000ca0:	4842      	ldr	r0, [pc, #264]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000ca2:	f7ff fd83 	bl	80007ac <Enqueue>
 8000ca6:	e09d      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (GS_B_GPIO_Port, GS_B_Pin)) {
 8000ca8:	2110      	movs	r1, #16
 8000caa:	4841      	ldr	r0, [pc, #260]	@ (8000db0 <TIM2_IRQHandler+0x2c4>)
 8000cac:	f001 f960 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d111      	bne.n	8000cda <TIM2_IRQHandler+0x1ee>
		if (!pressed) {
 8000cb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	f083 0301 	eor.w	r3, r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 808f 	beq.w	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000cc6:	4b38      	ldr	r3, [pc, #224]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]

			Note_Change (GS);
 8000ccc:	2038      	movs	r0, #56	@ 0x38
 8000cce:	f000 f947 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000cd2:	4836      	ldr	r0, [pc, #216]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000cd4:	f7ff fd6a 	bl	80007ac <Enqueue>
 8000cd8:	e084      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (A_B_GPIO_Port, A_B_Pin)) {
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4834      	ldr	r0, [pc, #208]	@ (8000db0 <TIM2_IRQHandler+0x2c4>)
 8000cde:	f001 f947 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d110      	bne.n	8000d0a <TIM2_IRQHandler+0x21e>
		if (!pressed) {
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	f083 0301 	eor.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d076      	beq.n	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]

			Note_Change (A);
 8000cfc:	2039      	movs	r0, #57	@ 0x39
 8000cfe:	f000 f92f 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000d02:	482a      	ldr	r0, [pc, #168]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000d04:	f7ff fd52 	bl	80007ac <Enqueue>
 8000d08:	e06c      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (AS_B_GPIO_Port, AS_B_Pin)) {
 8000d0a:	2140      	movs	r1, #64	@ 0x40
 8000d0c:	4828      	ldr	r0, [pc, #160]	@ (8000db0 <TIM2_IRQHandler+0x2c4>)
 8000d0e:	f001 f92f 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d110      	bne.n	8000d3a <TIM2_IRQHandler+0x24e>
		if (!pressed) {
 8000d18:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	f083 0301 	eor.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d05e      	beq.n	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000d26:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]

			Note_Change (AS);
 8000d2c:	203a      	movs	r0, #58	@ 0x3a
 8000d2e:	f000 f917 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000d32:	481e      	ldr	r0, [pc, #120]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000d34:	f7ff fd3a 	bl	80007ac <Enqueue>
 8000d38:	e054      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (B_B_GPIO_Port, B_B_Pin)) {
 8000d3a:	2180      	movs	r1, #128	@ 0x80
 8000d3c:	481c      	ldr	r0, [pc, #112]	@ (8000db0 <TIM2_IRQHandler+0x2c4>)
 8000d3e:	f001 f917 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d110      	bne.n	8000d6a <TIM2_IRQHandler+0x27e>
		if (!pressed) {
 8000d48:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f083 0301 	eor.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d046      	beq.n	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000d56:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]

			Note_Change (B);
 8000d5c:	203b      	movs	r0, #59	@ 0x3b
 8000d5e:	f000 f8ff 	bl	8000f60 <Note_Change>
			Enqueue (on_message);
 8000d62:	4812      	ldr	r0, [pc, #72]	@ (8000dac <TIM2_IRQHandler+0x2c0>)
 8000d64:	f7ff fd22 	bl	80007ac <Enqueue>
 8000d68:	e03c      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (SP_B_GPIO_Port, SP_B_Pin)) {
 8000d6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6e:	4810      	ldr	r0, [pc, #64]	@ (8000db0 <TIM2_IRQHandler+0x2c4>)
 8000d70:	f001 f8fe 	bl	8001f70 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d120      	bne.n	8000dbc <TIM2_IRQHandler+0x2d0>
		if (!pressed) {
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	f083 0301 	eor.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d02d      	beq.n	8000de4 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000d88:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <TIM2_IRQHandler+0x2bc>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
			control_toggled = true;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <TIM2_IRQHandler+0x2c8>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]

			Toggle_Control ();
 8000d94:	f000 f8f8 	bl	8000f88 <Toggle_Control>
			Enqueue (PS_message);
 8000d98:	4807      	ldr	r0, [pc, #28]	@ (8000db8 <TIM2_IRQHandler+0x2cc>)
 8000d9a:	f7ff fd07 	bl	80007ac <Enqueue>
 8000d9e:	e021      	b.n	8000de4 <TIM2_IRQHandler+0x2f8>
 8000da0:	200002cc 	.word	0x200002cc
 8000da4:	40010800 	.word	0x40010800
 8000da8:	20000272 	.word	0x20000272
 8000dac:	20000000 	.word	0x20000000
 8000db0:	40010c00 	.word	0x40010c00
 8000db4:	20000270 	.word	0x20000270
 8000db8:	20000008 	.word	0x20000008
		}
	} else {
		if (pressed && !control_toggled) {
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <TIM2_IRQHandler+0x308>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d009      	beq.n	8000dd8 <TIM2_IRQHandler+0x2ec>
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <TIM2_IRQHandler+0x30c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	f083 0301 	eor.w	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <TIM2_IRQHandler+0x2ec>
			Enqueue (off_message);
 8000dd2:	480a      	ldr	r0, [pc, #40]	@ (8000dfc <TIM2_IRQHandler+0x310>)
 8000dd4:	f7ff fcea 	bl	80007ac <Enqueue>
//			Note_Change (END);
		}

		pressed = false;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <TIM2_IRQHandler+0x308>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
		control_toggled = false;
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <TIM2_IRQHandler+0x30c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
//		elapsed_times = 0;
//	}
//
//	elapsed_times++;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000de4:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <TIM2_IRQHandler+0x314>)
 8000de6:	f003 fc45 	bl	8004674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000272 	.word	0x20000272
 8000df8:	20000270 	.word	0x20000270
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	200001d4 	.word	0x200001d4

08000e04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	for (uint8_t i = 0; i < 16; i++)	D_sum += ~(ADC_Convert_Rank1 ());
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e00d      	b.n	8000e2c <TIM3_IRQHandler+0x28>
 8000e10:	f7ff f99c 	bl	800014c <ADC_Convert_Rank1>
 8000e14:	4603      	mov	r3, r0
 8000e16:	43db      	mvns	r3, r3
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b46      	ldr	r3, [pc, #280]	@ (8000f34 <TIM3_IRQHandler+0x130>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b44      	ldr	r3, [pc, #272]	@ (8000f34 <TIM3_IRQHandler+0x130>)
 8000e24:	801a      	strh	r2, [r3, #0]
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b0f      	cmp	r3, #15
 8000e30:	d9ee      	bls.n	8000e10 <TIM3_IRQHandler+0xc>

	D_current = ((D_sum >> 4) * 127) / 4095;
 8000e32:	4b40      	ldr	r3, [pc, #256]	@ (8000f34 <TIM3_IRQHandler+0x130>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	01db      	lsls	r3, r3, #7
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	4a3d      	ldr	r2, [pc, #244]	@ (8000f38 <TIM3_IRQHandler+0x134>)
 8000e44:	fb82 1203 	smull	r1, r2, r2, r3
 8000e48:	441a      	add	r2, r3
 8000e4a:	12d2      	asrs	r2, r2, #11
 8000e4c:	17db      	asrs	r3, r3, #31
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b3a      	ldr	r3, [pc, #232]	@ (8000f3c <TIM3_IRQHandler+0x138>)
 8000e54:	801a      	strh	r2, [r3, #0]
	D_sum = 0;
 8000e56:	4b37      	ldr	r3, [pc, #220]	@ (8000f34 <TIM3_IRQHandler+0x130>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	801a      	strh	r2, [r3, #0]

	if (D_current < D_previous - 3 || D_current > D_previous + 3) {
 8000e5c:	4b37      	ldr	r3, [pc, #220]	@ (8000f3c <TIM3_IRQHandler+0x138>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b37      	ldr	r3, [pc, #220]	@ (8000f40 <TIM3_IRQHandler+0x13c>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	3b03      	subs	r3, #3
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	db07      	blt.n	8000e7c <TIM3_IRQHandler+0x78>
 8000e6c:	4b33      	ldr	r3, [pc, #204]	@ (8000f3c <TIM3_IRQHandler+0x138>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b33      	ldr	r3, [pc, #204]	@ (8000f40 <TIM3_IRQHandler+0x13c>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	3303      	adds	r3, #3
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dd0d      	ble.n	8000e98 <TIM3_IRQHandler+0x94>
		D_previous = D_current;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <TIM3_IRQHandler+0x138>)
 8000e7e:	881a      	ldrh	r2, [r3, #0]
 8000e80:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <TIM3_IRQHandler+0x13c>)
 8000e82:	801a      	strh	r2, [r3, #0]
		D_vol_message [3] = D_current;
 8000e84:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <TIM3_IRQHandler+0x138>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <TIM3_IRQHandler+0x140>)
 8000e8c:	70da      	strb	r2, [r3, #3]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
		USBD_MIDI_SendPackets (&hUsbDeviceFS, D_vol_message, 4);
 8000e8e:	2204      	movs	r2, #4
 8000e90:	492c      	ldr	r1, [pc, #176]	@ (8000f44 <TIM3_IRQHandler+0x140>)
 8000e92:	482d      	ldr	r0, [pc, #180]	@ (8000f48 <TIM3_IRQHandler+0x144>)
 8000e94:	f006 fbcb 	bl	800762e <USBD_MIDI_SendPackets>
//		Enqueue (D_vol_message);
	}

	for (uint8_t i = 0; i < 16; i++)	P_sum += ~(ADC_Convert_Rank2 ());
 8000e98:	2300      	movs	r3, #0
 8000e9a:	71bb      	strb	r3, [r7, #6]
 8000e9c:	e00d      	b.n	8000eba <TIM3_IRQHandler+0xb6>
 8000e9e:	f7ff f983 	bl	80001a8 <ADC_Convert_Rank2>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <TIM3_IRQHandler+0x148>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <TIM3_IRQHandler+0x148>)
 8000eb2:	801a      	strh	r2, [r3, #0]
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	71bb      	strb	r3, [r7, #6]
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d9ee      	bls.n	8000e9e <TIM3_IRQHandler+0x9a>

	P_current = ((P_sum >> 4) * 127) / 4095;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <TIM3_IRQHandler+0x148>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4613      	mov	r3, r2
 8000ecc:	01db      	lsls	r3, r3, #7
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	4a19      	ldr	r2, [pc, #100]	@ (8000f38 <TIM3_IRQHandler+0x134>)
 8000ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed6:	441a      	add	r2, r3
 8000ed8:	12d2      	asrs	r2, r2, #11
 8000eda:	17db      	asrs	r3, r3, #31
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <TIM3_IRQHandler+0x14c>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	P_sum = 0;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <TIM3_IRQHandler+0x148>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	801a      	strh	r2, [r3, #0]

	if (P_current < P_previous - 3 || P_current > P_previous + 3) {
 8000eea:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <TIM3_IRQHandler+0x14c>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <TIM3_IRQHandler+0x150>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	db07      	blt.n	8000f0a <TIM3_IRQHandler+0x106>
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <TIM3_IRQHandler+0x14c>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <TIM3_IRQHandler+0x150>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	3303      	adds	r3, #3
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dd0d      	ble.n	8000f26 <TIM3_IRQHandler+0x122>
		P_previous = P_current;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <TIM3_IRQHandler+0x14c>)
 8000f0c:	881a      	ldrh	r2, [r3, #0]
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <TIM3_IRQHandler+0x150>)
 8000f10:	801a      	strh	r2, [r3, #0]
		P_vol_message [3] = P_current;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <TIM3_IRQHandler+0x14c>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <TIM3_IRQHandler+0x154>)
 8000f1a:	70da      	strb	r2, [r3, #3]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
		USBD_MIDI_SendPackets (&hUsbDeviceFS, P_vol_message, 4);
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	490e      	ldr	r1, [pc, #56]	@ (8000f58 <TIM3_IRQHandler+0x154>)
 8000f20:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <TIM3_IRQHandler+0x144>)
 8000f22:	f006 fb84 	bl	800762e <USBD_MIDI_SendPackets>
//		Enqueue (P_vol_message);
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f26:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <TIM3_IRQHandler+0x158>)
 8000f28:	f003 fba4 	bl	8004674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000278 	.word	0x20000278
 8000f38:	80080081 	.word	0x80080081
 8000f3c:	20000276 	.word	0x20000276
 8000f40:	20000274 	.word	0x20000274
 8000f44:	2000000c 	.word	0x2000000c
 8000f48:	200002cc 	.word	0x200002cc
 8000f4c:	2000027e 	.word	0x2000027e
 8000f50:	2000027c 	.word	0x2000027c
 8000f54:	2000027a 	.word	0x2000027a
 8000f58:	20000010 	.word	0x20000010
 8000f5c:	2000021c 	.word	0x2000021c

08000f60 <Note_Change>:

/* USER CODE BEGIN 1 */
void Note_Change (uint8_t value) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
//	if (value == END) {
//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//		USBD_MIDI_SendPackets (&hUsbDeviceFS, off_message, 4);
//	} else {
		on_message [2] = value;
 8000f6a:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <Note_Change+0x20>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	7093      	strb	r3, [r2, #2]
		off_message [2] = value;
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <Note_Change+0x24>)
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	7093      	strb	r3, [r2, #2]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
//	}
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000004 	.word	0x20000004

08000f88 <Toggle_Control>:

void Toggle_Control () {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	play_toggled = !play_toggled;
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <Toggle_Control+0x3c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf14      	ite	ne
 8000f94:	2301      	movne	r3, #1
 8000f96:	2300      	moveq	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f083 0301 	eor.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <Toggle_Control+0x3c>)
 8000fa8:	701a      	strb	r2, [r3, #0]
	PS_message[3] = play_toggled ? PLAY : STOP;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <Toggle_Control+0x3c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <Toggle_Control+0x2e>
 8000fb2:	227f      	movs	r2, #127	@ 0x7f
 8000fb4:	e000      	b.n	8000fb8 <Toggle_Control+0x30>
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4b03      	ldr	r3, [pc, #12]	@ (8000fc8 <Toggle_Control+0x40>)
 8000fba:	70da      	strb	r2, [r3, #3]

//	while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//	USBD_MIDI_SendPackets (&hUsbDeviceFS, PS_message, 4);
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000271 	.word	0x20000271
 8000fc8:	20000008 	.word	0x20000008

08000fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd4:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <_sbrk+0x5c>)
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <_sbrk+0x60>)
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <_sbrk+0x64>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <_sbrk+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d207      	bcs.n	800100c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ffc:	f008 f8b4 	bl	8009168 <__errno>
 8001000:	4603      	mov	r3, r0
 8001002:	220c      	movs	r2, #12
 8001004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	e009      	b.n	8001020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <_sbrk+0x64>)
 800101c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20005000 	.word	0x20005000
 800102c:	00000400 	.word	0x00000400
 8001030:	20000280 	.word	0x20000280
 8001034:	20000bc8 	.word	0x20000bc8

08001038 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001044:	f7ff fff8 	bl	8001038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800104a:	490c      	ldr	r1, [pc, #48]	@ (800107c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800104c:	4a0c      	ldr	r2, [pc, #48]	@ (8001080 <LoopFillZerobss+0x16>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a09      	ldr	r2, [pc, #36]	@ (8001084 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001060:	4c09      	ldr	r4, [pc, #36]	@ (8001088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106e:	f008 f881 	bl	8009174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001072:	f7ff f8c7 	bl	8000204 <main>
  bx lr
 8001076:	4770      	bx	lr
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001080:	080092f4 	.word	0x080092f4
  ldr r2, =_sbss
 8001084:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001088:	20000bc4 	.word	0x20000bc4

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>
	...

08001090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <HAL_Init+0x28>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	@ (80010b8 <HAL_Init+0x28>)
 800109a:	f043 0310 	orr.w	r3, r3, #16
 800109e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 fd9f 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	200f      	movs	r0, #15
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fbf8 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40022000 	.word	0x40022000

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fdb7 	bl	8001c4e <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 fd7f 	bl	8001bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000014 	.word	0x20000014
 8001114:	2000001c 	.word	0x2000001c
 8001118:	20000018 	.word	0x20000018

0800111c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_IncTick+0x1c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b05      	ldr	r3, [pc, #20]	@ (800113c <HAL_IncTick+0x20>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a03      	ldr	r2, [pc, #12]	@ (800113c <HAL_IncTick+0x20>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	2000001c 	.word	0x2000001c
 800113c:	20000284 	.word	0x20000284

08001140 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b02      	ldr	r3, [pc, #8]	@ (8001150 <HAL_GetTick+0x10>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000284 	.word	0x20000284

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff fff0 	bl	8001140 <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffe0 	bl	8001140 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000001c 	.word	0x2000001c

0800119c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e0be      	b.n	800133c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d109      	bne.n	80011e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fb92 	bl	8000904 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 fbf1 	bl	80019c8 <ADC_ConversionStop_Disable>
 80011e6:	4603      	mov	r3, r0
 80011e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f040 8099 	bne.w	800132a <HAL_ADC_Init+0x18e>
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 8095 	bne.w	800132a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001204:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001208:	f023 0302 	bic.w	r3, r3, #2
 800120c:	f043 0202 	orr.w	r2, r3, #2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800121c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7b1b      	ldrb	r3, [r3, #12]
 8001222:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001224:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	4313      	orrs	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001234:	d003      	beq.n	800123e <HAL_ADC_Init+0xa2>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d102      	bne.n	8001244 <HAL_ADC_Init+0xa8>
 800123e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001242:	e000      	b.n	8001246 <HAL_ADC_Init+0xaa>
 8001244:	2300      	movs	r3, #0
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7d1b      	ldrb	r3, [r3, #20]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d119      	bne.n	8001288 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7b1b      	ldrb	r3, [r3, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	3b01      	subs	r3, #1
 8001262:	035a      	lsls	r2, r3, #13
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	e00b      	b.n	8001288 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001274:	f043 0220 	orr.w	r2, r3, #32
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	f043 0201 	orr.w	r2, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	430a      	orrs	r2, r1
 800129a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_ADC_Init+0x1a8>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012b8:	d003      	beq.n	80012c2 <HAL_ADC_Init+0x126>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d104      	bne.n	80012cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	051b      	lsls	r3, r3, #20
 80012ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	430a      	orrs	r2, r1
 80012de:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <HAL_ADC_Init+0x1ac>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d10b      	bne.n	8001308 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fa:	f023 0303 	bic.w	r3, r3, #3
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001306:	e018      	b.n	800133a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130c:	f023 0312 	bic.w	r3, r3, #18
 8001310:	f043 0210 	orr.w	r2, r3, #16
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131c:	f043 0201 	orr.w	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001328:	e007      	b.n	800133a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800133a:	7dfb      	ldrb	r3, [r7, #23]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	ffe1f7fd 	.word	0xffe1f7fd
 8001348:	ff1f0efe 	.word	0xff1f0efe

0800134c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Start+0x1a>
 8001362:	2302      	movs	r3, #2
 8001364:	e098      	b.n	8001498 <HAL_ADC_Start+0x14c>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fad0 	bl	8001914 <ADC_Enable>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 8087 	bne.w	800148e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a41      	ldr	r2, [pc, #260]	@ (80014a0 <HAL_ADC_Start+0x154>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d105      	bne.n	80013aa <HAL_ADC_Start+0x5e>
 800139e:	4b41      	ldr	r3, [pc, #260]	@ (80014a4 <HAL_ADC_Start+0x158>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d115      	bne.n	80013d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d026      	beq.n	8001412 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013d4:	e01d      	b.n	8001412 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a2f      	ldr	r2, [pc, #188]	@ (80014a4 <HAL_ADC_Start+0x158>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d004      	beq.n	80013f6 <HAL_ADC_Start+0xaa>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2b      	ldr	r2, [pc, #172]	@ (80014a0 <HAL_ADC_Start+0x154>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10d      	bne.n	8001412 <HAL_ADC_Start+0xc6>
 80013f6:	4b2b      	ldr	r3, [pc, #172]	@ (80014a4 <HAL_ADC_Start+0x158>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001406:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800140a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001422:	f023 0206 	bic.w	r2, r3, #6
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
 800142a:	e002      	b.n	8001432 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f06f 0202 	mvn.w	r2, #2
 8001442:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800144e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001452:	d113      	bne.n	800147c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001458:	4a11      	ldr	r2, [pc, #68]	@ (80014a0 <HAL_ADC_Start+0x154>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d105      	bne.n	800146a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_ADC_Start+0x158>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001466:	2b00      	cmp	r3, #0
 8001468:	d108      	bne.n	800147c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	e00c      	b.n	8001496 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e003      	b.n	8001496 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40012800 	.word	0x40012800
 80014a4:	40012400 	.word	0x40012400

080014a8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Stop+0x1a>
 80014be:	2302      	movs	r3, #2
 80014c0:	e01a      	b.n	80014f8 <HAL_ADC_Stop+0x50>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fa7c 	bl	80019c8 <ADC_ConversionStop_Disable>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001516:	f7ff fe13 	bl	8001140 <HAL_GetTick>
 800151a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152e:	f043 0220 	orr.w	r2, r3, #32
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0d3      	b.n	80016ea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d131      	bne.n	80015b4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001556:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800155a:	2b00      	cmp	r3, #0
 800155c:	d12a      	bne.n	80015b4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800155e:	e021      	b.n	80015a4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001566:	d01d      	beq.n	80015a4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_ADC_PollForConversion+0x7e>
 800156e:	f7ff fde7 	bl	8001140 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d212      	bcs.n	80015a4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10b      	bne.n	80015a4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001590:	f043 0204 	orr.w	r2, r3, #4
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0a2      	b.n	80016ea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0d6      	beq.n	8001560 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015b2:	e070      	b.n	8001696 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015b4:	4b4f      	ldr	r3, [pc, #316]	@ (80016f4 <HAL_ADC_PollForConversion+0x1f4>)
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	2002      	movs	r0, #2
 80015ba:	f002 ff03 	bl	80043c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80015be:	4603      	mov	r3, r0
 80015c0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6919      	ldr	r1, [r3, #16]
 80015ca:	4b4b      	ldr	r3, [pc, #300]	@ (80016f8 <HAL_ADC_PollForConversion+0x1f8>)
 80015cc:	400b      	ands	r3, r1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_ADC_PollForConversion+0x104>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68d9      	ldr	r1, [r3, #12]
 80015d8:	4b48      	ldr	r3, [pc, #288]	@ (80016fc <HAL_ADC_PollForConversion+0x1fc>)
 80015da:	400b      	ands	r3, r1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <HAL_ADC_PollForConversion+0x104>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6919      	ldr	r1, [r3, #16]
 80015e6:	4b46      	ldr	r3, [pc, #280]	@ (8001700 <HAL_ADC_PollForConversion+0x200>)
 80015e8:	400b      	ands	r3, r1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d108      	bne.n	8001600 <HAL_ADC_PollForConversion+0x100>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68d9      	ldr	r1, [r3, #12]
 80015f4:	4b43      	ldr	r3, [pc, #268]	@ (8001704 <HAL_ADC_PollForConversion+0x204>)
 80015f6:	400b      	ands	r3, r1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_ADC_PollForConversion+0x100>
 80015fc:	2314      	movs	r3, #20
 80015fe:	e020      	b.n	8001642 <HAL_ADC_PollForConversion+0x142>
 8001600:	2329      	movs	r3, #41	@ 0x29
 8001602:	e01e      	b.n	8001642 <HAL_ADC_PollForConversion+0x142>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6919      	ldr	r1, [r3, #16]
 800160a:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <HAL_ADC_PollForConversion+0x200>)
 800160c:	400b      	ands	r3, r1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_ADC_PollForConversion+0x120>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68d9      	ldr	r1, [r3, #12]
 8001618:	4b3a      	ldr	r3, [pc, #232]	@ (8001704 <HAL_ADC_PollForConversion+0x204>)
 800161a:	400b      	ands	r3, r1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00d      	beq.n	800163c <HAL_ADC_PollForConversion+0x13c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <HAL_ADC_PollForConversion+0x208>)
 8001628:	400b      	ands	r3, r1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <HAL_ADC_PollForConversion+0x140>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68d9      	ldr	r1, [r3, #12]
 8001634:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <HAL_ADC_PollForConversion+0x208>)
 8001636:	400b      	ands	r3, r1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_ADC_PollForConversion+0x140>
 800163c:	2354      	movs	r3, #84	@ 0x54
 800163e:	e000      	b.n	8001642 <HAL_ADC_PollForConversion+0x142>
 8001640:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001642:	fb02 f303 	mul.w	r3, r2, r3
 8001646:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001648:	e021      	b.n	800168e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d01a      	beq.n	8001688 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <HAL_ADC_PollForConversion+0x168>
 8001658:	f7ff fd72 	bl	8001140 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d20f      	bcs.n	8001688 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d90b      	bls.n	8001688 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001674:	f043 0204 	orr.w	r2, r3, #4
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e030      	b.n	80016ea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3301      	adds	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	429a      	cmp	r2, r3
 8001694:	d8d9      	bhi.n	800164a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f06f 0212 	mvn.w	r2, #18
 800169e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016b6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016ba:	d115      	bne.n	80016e8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d111      	bne.n	80016e8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e0:	f043 0201 	orr.w	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000014 	.word	0x20000014
 80016f8:	24924924 	.word	0x24924924
 80016fc:	00924924 	.word	0x00924924
 8001700:	12492492 	.word	0x12492492
 8001704:	00492492 	.word	0x00492492
 8001708:	00249249 	.word	0x00249249

0800170c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x20>
 8001740:	2302      	movs	r3, #2
 8001742:	e0dc      	b.n	80018fe <HAL_ADC_ConfigChannel+0x1da>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b06      	cmp	r3, #6
 8001752:	d81c      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b05      	subs	r3, #5
 8001766:	221f      	movs	r2, #31
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	4019      	ands	r1, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b05      	subs	r3, #5
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	635a      	str	r2, [r3, #52]	@ 0x34
 800178c:	e03c      	b.n	8001808 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d81c      	bhi.n	80017d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b23      	subs	r3, #35	@ 0x23
 80017a8:	221f      	movs	r2, #31
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	4019      	ands	r1, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	3b23      	subs	r3, #35	@ 0x23
 80017c2:	fa00 f203 	lsl.w	r2, r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80017ce:	e01b      	b.n	8001808 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	3b41      	subs	r3, #65	@ 0x41
 80017e2:	221f      	movs	r2, #31
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4019      	ands	r1, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	3b41      	subs	r3, #65	@ 0x41
 80017fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b09      	cmp	r3, #9
 800180e:	d91c      	bls.n	800184a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68d9      	ldr	r1, [r3, #12]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	3b1e      	subs	r3, #30
 8001822:	2207      	movs	r2, #7
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	4019      	ands	r1, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6898      	ldr	r0, [r3, #8]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	3b1e      	subs	r3, #30
 800183c:	fa00 f203 	lsl.w	r2, r0, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	e019      	b.n	800187e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6919      	ldr	r1, [r3, #16]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	2207      	movs	r2, #7
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	4019      	ands	r1, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6898      	ldr	r0, [r3, #8]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	fa00 f203 	lsl.w	r2, r0, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b10      	cmp	r3, #16
 8001884:	d003      	beq.n	800188e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800188a:	2b11      	cmp	r3, #17
 800188c:	d132      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <HAL_ADC_ConfigChannel+0x1e4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d125      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d126      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80018b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d11a      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018be:	4b13      	ldr	r3, [pc, #76]	@ (800190c <HAL_ADC_ConfigChannel+0x1e8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a13      	ldr	r2, [pc, #76]	@ (8001910 <HAL_ADC_ConfigChannel+0x1ec>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	0c9a      	lsrs	r2, r3, #18
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018d4:	e002      	b.n	80018dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f9      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x1b2>
 80018e2:	e007      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e8:	f043 0220 	orr.w	r2, r3, #32
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	40012400 	.word	0x40012400
 800190c:	20000014 	.word	0x20000014
 8001910:	431bde83 	.word	0x431bde83

08001914 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d040      	beq.n	80019b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001942:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <ADC_Enable+0xac>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1f      	ldr	r2, [pc, #124]	@ (80019c4 <ADC_Enable+0xb0>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	0c9b      	lsrs	r3, r3, #18
 800194e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001950:	e002      	b.n	8001958 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3b01      	subs	r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f9      	bne.n	8001952 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800195e:	f7ff fbef 	bl	8001140 <HAL_GetTick>
 8001962:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001964:	e01f      	b.n	80019a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001966:	f7ff fbeb 	bl	8001140 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d918      	bls.n	80019a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	d011      	beq.n	80019a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001986:	f043 0210 	orr.w	r2, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e007      	b.n	80019b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d1d8      	bne.n	8001966 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000014 	.word	0x20000014
 80019c4:	431bde83 	.word	0x431bde83

080019c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d12e      	bne.n	8001a40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019f2:	f7ff fba5 	bl	8001140 <HAL_GetTick>
 80019f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019f8:	e01b      	b.n	8001a32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019fa:	f7ff fba1 	bl	8001140 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d914      	bls.n	8001a32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10d      	bne.n	8001a32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1a:	f043 0210 	orr.w	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e007      	b.n	8001a42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d0dc      	beq.n	80019fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4906      	ldr	r1, [pc, #24]	@ (8001ae4 <__NVIC_EnableIRQ+0x34>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	@ (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	@ (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	@ 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff ff90 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff2d 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff42 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff90 	bl	8001b3c <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5f 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff35 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffa2 	bl	8001ba0 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b08b      	sub	sp, #44	@ 0x2c
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7a:	e169      	b.n	8001f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	f040 8158 	bne.w	8001f4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4a9a      	ldr	r2, [pc, #616]	@ (8001f08 <HAL_GPIO_Init+0x2a0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d05e      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001ca4:	4a98      	ldr	r2, [pc, #608]	@ (8001f08 <HAL_GPIO_Init+0x2a0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d875      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001caa:	4a98      	ldr	r2, [pc, #608]	@ (8001f0c <HAL_GPIO_Init+0x2a4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d058      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cb0:	4a96      	ldr	r2, [pc, #600]	@ (8001f0c <HAL_GPIO_Init+0x2a4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d86f      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cb6:	4a96      	ldr	r2, [pc, #600]	@ (8001f10 <HAL_GPIO_Init+0x2a8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d052      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cbc:	4a94      	ldr	r2, [pc, #592]	@ (8001f10 <HAL_GPIO_Init+0x2a8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d869      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cc2:	4a94      	ldr	r2, [pc, #592]	@ (8001f14 <HAL_GPIO_Init+0x2ac>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d04c      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cc8:	4a92      	ldr	r2, [pc, #584]	@ (8001f14 <HAL_GPIO_Init+0x2ac>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d863      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cce:	4a92      	ldr	r2, [pc, #584]	@ (8001f18 <HAL_GPIO_Init+0x2b0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d046      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cd4:	4a90      	ldr	r2, [pc, #576]	@ (8001f18 <HAL_GPIO_Init+0x2b0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d85d      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cda:	2b12      	cmp	r3, #18
 8001cdc:	d82a      	bhi.n	8001d34 <HAL_GPIO_Init+0xcc>
 8001cde:	2b12      	cmp	r3, #18
 8001ce0:	d859      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce8 <HAL_GPIO_Init+0x80>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001d63 	.word	0x08001d63
 8001cec:	08001d3d 	.word	0x08001d3d
 8001cf0:	08001d4f 	.word	0x08001d4f
 8001cf4:	08001d91 	.word	0x08001d91
 8001cf8:	08001d97 	.word	0x08001d97
 8001cfc:	08001d97 	.word	0x08001d97
 8001d00:	08001d97 	.word	0x08001d97
 8001d04:	08001d97 	.word	0x08001d97
 8001d08:	08001d97 	.word	0x08001d97
 8001d0c:	08001d97 	.word	0x08001d97
 8001d10:	08001d97 	.word	0x08001d97
 8001d14:	08001d97 	.word	0x08001d97
 8001d18:	08001d97 	.word	0x08001d97
 8001d1c:	08001d97 	.word	0x08001d97
 8001d20:	08001d97 	.word	0x08001d97
 8001d24:	08001d97 	.word	0x08001d97
 8001d28:	08001d97 	.word	0x08001d97
 8001d2c:	08001d45 	.word	0x08001d45
 8001d30:	08001d59 	.word	0x08001d59
 8001d34:	4a79      	ldr	r2, [pc, #484]	@ (8001f1c <HAL_GPIO_Init+0x2b4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d3a:	e02c      	b.n	8001d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	623b      	str	r3, [r7, #32]
          break;
 8001d42:	e029      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	623b      	str	r3, [r7, #32]
          break;
 8001d4c:	e024      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	3308      	adds	r3, #8
 8001d54:	623b      	str	r3, [r7, #32]
          break;
 8001d56:	e01f      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	330c      	adds	r3, #12
 8001d5e:	623b      	str	r3, [r7, #32]
          break;
 8001d60:	e01a      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	623b      	str	r3, [r7, #32]
          break;
 8001d6e:	e013      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d78:	2308      	movs	r3, #8
 8001d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	611a      	str	r2, [r3, #16]
          break;
 8001d82:	e009      	b.n	8001d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d84:	2308      	movs	r3, #8
 8001d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	615a      	str	r2, [r3, #20]
          break;
 8001d8e:	e003      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
          break;
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          break;
 8001d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2bff      	cmp	r3, #255	@ 0xff
 8001d9c:	d801      	bhi.n	8001da2 <HAL_GPIO_Init+0x13a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	e001      	b.n	8001da6 <HAL_GPIO_Init+0x13e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3304      	adds	r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2bff      	cmp	r3, #255	@ 0xff
 8001dac:	d802      	bhi.n	8001db4 <HAL_GPIO_Init+0x14c>
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	e002      	b.n	8001dba <HAL_GPIO_Init+0x152>
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	3b08      	subs	r3, #8
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	210f      	movs	r1, #15
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	6a39      	ldr	r1, [r7, #32]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80b1 	beq.w	8001f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001de8:	4b4d      	ldr	r3, [pc, #308]	@ (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a4c      	ldr	r2, [pc, #304]	@ (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b4a      	ldr	r3, [pc, #296]	@ (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e00:	4a48      	ldr	r2, [pc, #288]	@ (8001f24 <HAL_GPIO_Init+0x2bc>)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a40      	ldr	r2, [pc, #256]	@ (8001f28 <HAL_GPIO_Init+0x2c0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_GPIO_Init+0x1ec>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f2c <HAL_GPIO_Init+0x2c4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00d      	beq.n	8001e50 <HAL_GPIO_Init+0x1e8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3e      	ldr	r2, [pc, #248]	@ (8001f30 <HAL_GPIO_Init+0x2c8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <HAL_GPIO_Init+0x1e4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f34 <HAL_GPIO_Init+0x2cc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d101      	bne.n	8001e48 <HAL_GPIO_Init+0x1e0>
 8001e44:	2303      	movs	r3, #3
 8001e46:	e006      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e48:	2304      	movs	r3, #4
 8001e4a:	e004      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e54:	2300      	movs	r3, #0
 8001e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e58:	f002 0203 	and.w	r2, r2, #3
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	4093      	lsls	r3, r2
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e66:	492f      	ldr	r1, [pc, #188]	@ (8001f24 <HAL_GPIO_Init+0x2bc>)
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e80:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	492c      	ldr	r1, [pc, #176]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4928      	ldr	r1, [pc, #160]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea8:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	4922      	ldr	r1, [pc, #136]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60cb      	str	r3, [r1, #12]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eb6:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	491e      	ldr	r1, [pc, #120]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4918      	ldr	r1, [pc, #96]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4914      	ldr	r1, [pc, #80]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d021      	beq.n	8001f3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	490e      	ldr	r1, [pc, #56]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]
 8001f04:	e021      	b.n	8001f4a <HAL_GPIO_Init+0x2e2>
 8001f06:	bf00      	nop
 8001f08:	10320000 	.word	0x10320000
 8001f0c:	10310000 	.word	0x10310000
 8001f10:	10220000 	.word	0x10220000
 8001f14:	10210000 	.word	0x10210000
 8001f18:	10120000 	.word	0x10120000
 8001f1c:	10110000 	.word	0x10110000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40010800 	.word	0x40010800
 8001f2c:	40010c00 	.word	0x40010c00
 8001f30:	40011000 	.word	0x40011000
 8001f34:	40011400 	.word	0x40011400
 8001f38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	4909      	ldr	r1, [pc, #36]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f47f ae8e 	bne.w	8001c7c <HAL_GPIO_Init+0x14>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	372c      	adds	r7, #44	@ 0x2c
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40010400 	.word	0x40010400

08001f70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	887b      	ldrh	r3, [r7, #2]
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	e001      	b.n	8001f92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0e8      	b.n	8002182 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f006 fd6d 	bl	8008aa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2203      	movs	r2, #3
 8001fce:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fec4 	bl	8004d6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fec:	f002 fe9a 	bl	8004d24 <USB_CoreInit>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0bf      	b.n	8002182 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fec8 	bl	8004d9e <USB_SetCurrentMode>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0b0      	b.n	8002182 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e03e      	b.n	80020a4 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	3311      	adds	r3, #17
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	3310      	adds	r3, #16
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	3313      	adds	r3, #19
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	3320      	adds	r3, #32
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	3324      	adds	r3, #36	@ 0x24
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	3301      	adds	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	791b      	ldrb	r3, [r3, #4]
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d3bb      	bcc.n	8002026 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	e044      	b.n	800213e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	3301      	adds	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	791b      	ldrb	r3, [r3, #4]
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	429a      	cmp	r2, r3
 8002146:	d3b5      	bcc.n	80020b4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002152:	f002 fe30 	bl	8004db6 <USB_DevInit>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e00c      	b.n	8002182 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f005 f8af 	bl	80072de <USB_DevDisconnect>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_PCD_Start+0x16>
 800219c:	2302      	movs	r3, #2
 800219e:	e016      	b.n	80021ce <HAL_PCD_Start+0x44>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f002 fdc6 	bl	8004d3e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80021b2:	2101      	movs	r1, #1
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f006 feca 	bl	8008f4e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f005 f883 	bl	80072ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b088      	sub	sp, #32
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f005 f885 	bl	80072f2 <USB_ReadInterrupts>
 80021e8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fb1a 	bl	800282e <PCD_EP_ISR_Handler>

    return;
 80021fa:	e119      	b.n	8002430 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002202:	2b00      	cmp	r3, #0
 8002204:	d013      	beq.n	800222e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800220e:	b29a      	uxth	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002218:	b292      	uxth	r2, r2
 800221a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f006 fcbb 	bl	8008b9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002224:	2100      	movs	r1, #0
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f905 	bl	8002436 <HAL_PCD_SetAddress>

    return;
 800222c:	e100      	b.n	8002430 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00c      	beq.n	8002252 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002240:	b29a      	uxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800224a:	b292      	uxth	r2, r2
 800224c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002250:	e0ee      	b.n	8002430 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00c      	beq.n	8002276 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002264:	b29a      	uxth	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800226e:	b292      	uxth	r2, r2
 8002270:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002274:	e0dc      	b.n	8002430 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d027      	beq.n	80022d0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0204 	bic.w	r2, r2, #4
 8002292:	b292      	uxth	r2, r2
 8002294:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0208 	bic.w	r2, r2, #8
 80022aa:	b292      	uxth	r2, r2
 80022ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f006 fcab 	bl	8008c0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022be:	b29a      	uxth	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022c8:	b292      	uxth	r2, r2
 80022ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80022ce:	e0af      	b.n	8002430 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8083 	beq.w	80023e2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
 80022e0:	e010      	b.n	8002304 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	7ffb      	ldrb	r3, [r7, #31]
 80022f0:	8812      	ldrh	r2, [r2, #0]
 80022f2:	b292      	uxth	r2, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	3320      	adds	r3, #32
 80022f8:	443b      	add	r3, r7
 80022fa:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80022fe:	7ffb      	ldrb	r3, [r7, #31]
 8002300:	3301      	adds	r3, #1
 8002302:	77fb      	strb	r3, [r7, #31]
 8002304:	7ffb      	ldrb	r3, [r7, #31]
 8002306:	2b07      	cmp	r3, #7
 8002308:	d9eb      	bls.n	80022e2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002312:	b29a      	uxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	b292      	uxth	r2, r2
 800231e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800232a:	b29a      	uxth	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	b292      	uxth	r2, r2
 8002336:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800233a:	bf00      	nop
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002344:	b29b      	uxth	r3, r3
 8002346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f6      	beq.n	800233c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002356:	b29a      	uxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002360:	b292      	uxth	r2, r2
 8002362:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002366:	2300      	movs	r3, #0
 8002368:	77fb      	strb	r3, [r7, #31]
 800236a:	e00f      	b.n	800238c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800236c:	7ffb      	ldrb	r3, [r7, #31]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4611      	mov	r1, r2
 8002374:	7ffa      	ldrb	r2, [r7, #31]
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	440a      	add	r2, r1
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	3320      	adds	r3, #32
 800237e:	443b      	add	r3, r7
 8002380:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002384:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002386:	7ffb      	ldrb	r3, [r7, #31]
 8002388:	3301      	adds	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
 800238c:	7ffb      	ldrb	r3, [r7, #31]
 800238e:	2b07      	cmp	r3, #7
 8002390:	d9ec      	bls.n	800236c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800239a:	b29a      	uxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0208 	orr.w	r2, r2, #8
 80023a4:	b292      	uxth	r2, r2
 80023a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023bc:	b292      	uxth	r2, r2
 80023be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0204 	orr.w	r2, r2, #4
 80023d4:	b292      	uxth	r2, r2
 80023d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f006 fbfc 	bl	8008bd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80023e0:	e026      	b.n	8002430 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00f      	beq.n	800240c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023fe:	b292      	uxth	r2, r2
 8002400:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f006 fbba 	bl	8008b7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800240a:	e011      	b.n	8002430 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00c      	beq.n	8002430 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800241e:	b29a      	uxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002428:	b292      	uxth	r2, r2
 800242a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800242e:	bf00      	nop
  }
}
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_PCD_SetAddress+0x1a>
 800244c:	2302      	movs	r3, #2
 800244e:	e012      	b.n	8002476 <HAL_PCD_SetAddress+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f004 ff1c 	bl	80072a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	4608      	mov	r0, r1
 8002488:	4611      	mov	r1, r2
 800248a:	461a      	mov	r2, r3
 800248c:	4603      	mov	r3, r0
 800248e:	70fb      	strb	r3, [r7, #3]
 8002490:	460b      	mov	r3, r1
 8002492:	803b      	strh	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800249c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0e      	bge.n	80024c2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 0207 	and.w	r2, r3, #7
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	3310      	adds	r3, #16
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	705a      	strb	r2, [r3, #1]
 80024c0:	e00e      	b.n	80024e0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	f003 0207 	and.w	r2, r3, #7
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024ec:	883a      	ldrh	r2, [r7, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	78ba      	ldrb	r2, [r7, #2]
 80024f6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024f8:	78bb      	ldrb	r3, [r7, #2]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d102      	bne.n	8002504 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_PCD_EP_Open+0x94>
 800250e:	2302      	movs	r3, #2
 8002510:	e00e      	b.n	8002530 <HAL_PCD_EP_Open+0xb2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68f9      	ldr	r1, [r7, #12]
 8002520:	4618      	mov	r0, r3
 8002522:	f002 fc65 	bl	8004df0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800252e:	7afb      	ldrb	r3, [r7, #11]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002548:	2b00      	cmp	r3, #0
 800254a:	da0e      	bge.n	800256a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	f003 0207 	and.w	r2, r3, #7
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	3310      	adds	r3, #16
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	705a      	strb	r2, [r3, #1]
 8002568:	e00e      	b.n	8002588 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	f003 0207 	and.w	r2, r3, #7
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_PCD_EP_Close+0x6a>
 800259e:	2302      	movs	r3, #2
 80025a0:	e00e      	b.n	80025c0 <HAL_PCD_EP_Close+0x88>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68f9      	ldr	r1, [r7, #12]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 ffdd 	bl	8005570 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	460b      	mov	r3, r1
 80025d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d8:	7afb      	ldrb	r3, [r7, #11]
 80025da:	f003 0207 	and.w	r2, r3, #7
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4413      	add	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002608:	7afb      	ldrb	r3, [r7, #11]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	b2da      	uxtb	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 f994 	bl	8005948 <USB_EPStartXfer>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 0207 	and.w	r2, r3, #7
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	440b      	add	r3, r1
 8002648:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800264c:	681b      	ldr	r3, [r3, #0]
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	460b      	mov	r3, r1
 8002666:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002668:	7afb      	ldrb	r3, [r7, #11]
 800266a:	f003 0207 	and.w	r2, r3, #7
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	3310      	adds	r3, #16
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2201      	movs	r2, #1
 80026a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026a4:	7afb      	ldrb	r3, [r7, #11]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6979      	ldr	r1, [r7, #20]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 f946 	bl	8005948 <USB_EPStartXfer>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	7912      	ldrb	r2, [r2, #4]
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e04c      	b.n	800277e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da0e      	bge.n	800270a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	f003 0207 	and.w	r2, r3, #7
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	3310      	adds	r3, #16
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	705a      	strb	r2, [r3, #1]
 8002708:	e00c      	b.n	8002724 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	b2da      	uxtb	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_PCD_EP_SetStall+0x7e>
 8002740:	2302      	movs	r3, #2
 8002742:	e01c      	b.n	800277e <HAL_PCD_EP_SetStall+0xb8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	4618      	mov	r0, r3
 8002754:	f004 fca9 	bl	80070aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	2b00      	cmp	r3, #0
 8002760:	d108      	bne.n	8002774 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f004 fdce 	bl	8007310 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	7912      	ldrb	r2, [r2, #4]
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e040      	b.n	8002826 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da0e      	bge.n	80027ca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	f003 0207 	and.w	r2, r3, #7
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	3310      	adds	r3, #16
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	705a      	strb	r2, [r3, #1]
 80027c8:	e00e      	b.n	80027e8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	f003 0207 	and.w	r2, r3, #7
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_PCD_EP_ClrStall+0x82>
 8002804:	2302      	movs	r3, #2
 8002806:	e00e      	b.n	8002826 <HAL_PCD_EP_ClrStall+0xa0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68f9      	ldr	r1, [r7, #12]
 8002816:	4618      	mov	r0, r3
 8002818:	f004 fc97 	bl	800714a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b096      	sub	sp, #88	@ 0x58
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002836:	e3bb      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002840:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002844:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002852:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 8175 	bne.w	8002b46 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800285c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d14e      	bne.n	8002906 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002878:	81fb      	strh	r3, [r7, #14]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	89fb      	ldrh	r3, [r7, #14]
 8002880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002888:	b29b      	uxth	r3, r3
 800288a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3310      	adds	r3, #16
 8002890:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	3302      	adds	r3, #2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80028be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	441a      	add	r2, r3
 80028c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80028cc:	2100      	movs	r1, #0
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f006 f93b 	bl	8008b4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7b5b      	ldrb	r3, [r3, #13]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8368 	beq.w	8002fb0 <PCD_EP_ISR_Handler+0x782>
 80028e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 8363 	bne.w	8002fb0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7b5b      	ldrb	r3, [r3, #13]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	735a      	strb	r2, [r3, #13]
 8002904:	e354      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800290c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002918:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800291c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002920:	2b00      	cmp	r3, #0
 8002922:	d034      	beq.n	800298e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800292c:	b29b      	uxth	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	3306      	adds	r3, #6
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800294c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800294e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800295a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800295e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002960:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002962:	b29b      	uxth	r3, r3
 8002964:	f004 fd24 	bl	80073b0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29a      	uxth	r2, r3
 8002970:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002974:	4013      	ands	r3, r2
 8002976:	823b      	strh	r3, [r7, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	8a3a      	ldrh	r2, [r7, #16]
 800297e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002982:	b292      	uxth	r2, r2
 8002984:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f006 f8b2 	bl	8008af0 <HAL_PCD_SetupStageCallback>
 800298c:	e310      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800298e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002992:	2b00      	cmp	r3, #0
 8002994:	f280 830c 	bge.w	8002fb0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80029a4:	4013      	ands	r3, r2
 80029a6:	83fb      	strh	r3, [r7, #30]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	8bfa      	ldrh	r2, [r7, #30]
 80029ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029b2:	b292      	uxth	r2, r2
 80029b4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	3306      	adds	r3, #6
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80029e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d019      	beq.n	8002a1e <PCD_EP_ISR_Handler+0x1f0>
 80029ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d015      	beq.n	8002a1e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f8:	6959      	ldr	r1, [r3, #20]
 80029fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80029fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a00:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f004 fcd4 	bl	80073b0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	441a      	add	r2, r3
 8002a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a14:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a16:	2100      	movs	r1, #0
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f006 f87b 	bl	8008b14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002a28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f040 82bd 	bne.w	8002fb0 <PCD_EP_ISR_Handler+0x782>
 8002a36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a3a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002a3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a42:	f000 82b5 	beq.w	8002fb0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	801a      	strh	r2, [r3, #0]
 8002a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a7c:	d91d      	bls.n	8002aba <PCD_EP_ISR_Handler+0x28c>
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <PCD_EP_ISR_Handler+0x26a>
 8002a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a94:	3b01      	subs	r3, #1
 8002a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	801a      	strh	r2, [r3, #0]
 8002ab8:	e026      	b.n	8002b08 <PCD_EP_ISR_Handler+0x2da>
 8002aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <PCD_EP_ISR_Handler+0x2aa>
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	801a      	strh	r2, [r3, #0]
 8002ad6:	e017      	b.n	8002b08 <PCD_EP_ISR_Handler+0x2da>
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <PCD_EP_ISR_Handler+0x2c4>
 8002aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aee:	3301      	adds	r3, #1
 8002af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	029b      	lsls	r3, r3, #10
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4313      	orrs	r3, r2
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b18:	827b      	strh	r3, [r7, #18]
 8002b1a:	8a7b      	ldrh	r3, [r7, #18]
 8002b1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002b20:	827b      	strh	r3, [r7, #18]
 8002b22:	8a7b      	ldrh	r3, [r7, #18]
 8002b24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002b28:	827b      	strh	r3, [r7, #18]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	8a7b      	ldrh	r3, [r7, #18]
 8002b30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	8013      	strh	r3, [r2, #0]
 8002b44:	e234      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b5a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f280 80fc 	bge.w	8002d5c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002b92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b96:	b292      	uxth	r2, r2
 8002b98:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b9a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb2:	7b1b      	ldrb	r3, [r3, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d125      	bne.n	8002c04 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3306      	adds	r3, #6
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002be4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8092 	beq.w	8002d12 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	6959      	ldr	r1, [r3, #20]
 8002bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf8:	88da      	ldrh	r2, [r3, #6]
 8002bfa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bfe:	f004 fbd7 	bl	80073b0 <USB_ReadPMA>
 8002c02:	e086      	b.n	8002d12 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c06:	78db      	ldrb	r3, [r3, #3]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d10a      	bne.n	8002c22 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c10:	461a      	mov	r2, r3
 8002c12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f9d9 	bl	8002fcc <HAL_PCD_EP_DB_Receive>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002c20:	e077      	b.n	8002d12 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c3c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	441a      	add	r2, r3
 8002c4e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d024      	beq.n	8002cca <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	3302      	adds	r3, #2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002cac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02e      	beq.n	8002d12 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cba:	6959      	ldr	r1, [r3, #20]
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cbe:	891a      	ldrh	r2, [r3, #8]
 8002cc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cc4:	f004 fb74 	bl	80073b0 <USB_ReadPMA>
 8002cc8:	e023      	b.n	8002d12 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3306      	adds	r3, #6
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002cf6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d04:	6959      	ldr	r1, [r3, #20]
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	895a      	ldrh	r2, [r3, #10]
 8002d0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d0e:	f004 fb4f 	bl	80073b0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d1a:	441a      	add	r2, r3
 8002d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d28:	441a      	add	r2, r3
 8002d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d2c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <PCD_EP_ISR_Handler+0x514>
 8002d36:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d206      	bcs.n	8002d50 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f005 fee3 	bl	8008b14 <HAL_PCD_DataOutStageCallback>
 8002d4e:	e005      	b.n	8002d5c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 fdf6 	bl	8005948 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8123 	beq.w	8002fb0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002d6a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	3310      	adds	r3, #16
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d98:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	441a      	add	r2, r3
 8002daa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbc:	78db      	ldrb	r3, [r3, #3]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	f040 80a2 	bne.w	8002f08 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dcc:	7b1b      	ldrb	r3, [r3, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8093 	beq.w	8002efa <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d046      	beq.n	8002e6e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d126      	bne.n	8002e36 <PCD_EP_ISR_Handler+0x608>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	4413      	add	r3, r2
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	011a      	lsls	r2, r3, #4
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	4413      	add	r3, r2
 8002e0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e0e:	623b      	str	r3, [r7, #32]
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	801a      	strh	r2, [r3, #0]
 8002e34:	e061      	b.n	8002efa <PCD_EP_ISR_Handler+0x6cc>
 8002e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e38:	785b      	ldrb	r3, [r3, #1]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d15d      	bne.n	8002efa <PCD_EP_ISR_Handler+0x6cc>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e52:	4413      	add	r3, r2
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	011a      	lsls	r2, r3, #4
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	4413      	add	r3, r2
 8002e60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	2200      	movs	r2, #0
 8002e6a:	801a      	strh	r2, [r3, #0]
 8002e6c:	e045      	b.n	8002efa <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d126      	bne.n	8002eca <PCD_EP_ISR_Handler+0x69c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e90:	4413      	add	r3, r2
 8002e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	011a      	lsls	r2, r3, #4
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ea2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb2:	801a      	strh	r2, [r3, #0]
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec6:	801a      	strh	r2, [r3, #0]
 8002ec8:	e017      	b.n	8002efa <PCD_EP_ISR_Handler+0x6cc>
 8002eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d113      	bne.n	8002efa <PCD_EP_ISR_Handler+0x6cc>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee0:	4413      	add	r3, r2
 8002ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	011a      	lsls	r2, r3, #4
 8002eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eec:	4413      	add	r3, r2
 8002eee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f005 fe22 	bl	8008b4a <HAL_PCD_DataInStageCallback>
 8002f06:	e053      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002f08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d146      	bne.n	8002fa2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d907      	bls.n	8002f5c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f54:	1ad2      	subs	r2, r2, r3
 8002f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f58:	619a      	str	r2, [r3, #24]
 8002f5a:	e002      	b.n	8002f62 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f5e:	2200      	movs	r2, #0
 8002f60:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f005 fdea 	bl	8008b4a <HAL_PCD_DataInStageCallback>
 8002f76:	e01b      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f80:	441a      	add	r2, r3
 8002f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f84:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f8e:	441a      	add	r2, r3
 8002f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f92:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fcd4 	bl	8005948 <USB_EPStartXfer>
 8002fa0:	e006      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002fa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f91b 	bl	80031e6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	b21b      	sxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f6ff ac3b 	blt.w	8002838 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3758      	adds	r7, #88	@ 0x58
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d07e      	beq.n	80030e2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800300c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	8b7b      	ldrh	r3, [r7, #26]
 8003014:	429a      	cmp	r2, r3
 8003016:	d306      	bcc.n	8003026 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	8b7b      	ldrh	r3, [r7, #26]
 800301e:	1ad2      	subs	r2, r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	619a      	str	r2, [r3, #24]
 8003024:	e002      	b.n	800302c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d123      	bne.n	800307c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	b29b      	uxth	r3, r3
 8003046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800304a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800304e:	833b      	strh	r3, [r7, #24]
 8003050:	8b3b      	ldrh	r3, [r7, #24]
 8003052:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003056:	833b      	strh	r3, [r7, #24]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	441a      	add	r2, r3
 8003066:	8b3b      	ldrh	r3, [r7, #24]
 8003068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800306c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003078:	b29b      	uxth	r3, r3
 800307a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01f      	beq.n	80030c6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800309c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030a0:	82fb      	strh	r3, [r7, #22]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	8afb      	ldrh	r3, [r7, #22]
 80030b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030c6:	8b7b      	ldrh	r3, [r7, #26]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8087 	beq.w	80031dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6959      	ldr	r1, [r3, #20]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	891a      	ldrh	r2, [r3, #8]
 80030da:	8b7b      	ldrh	r3, [r7, #26]
 80030dc:	f004 f968 	bl	80073b0 <USB_ReadPMA>
 80030e0:	e07c      	b.n	80031dc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	3306      	adds	r3, #6
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800310a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	8b7b      	ldrh	r3, [r7, #26]
 8003112:	429a      	cmp	r2, r3
 8003114:	d306      	bcc.n	8003124 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	8b7b      	ldrh	r3, [r7, #26]
 800311c:	1ad2      	subs	r2, r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	619a      	str	r2, [r3, #24]
 8003122:	e002      	b.n	800312a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d123      	bne.n	800317a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314c:	83fb      	strh	r3, [r7, #30]
 800314e:	8bfb      	ldrh	r3, [r7, #30]
 8003150:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003154:	83fb      	strh	r3, [r7, #30]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	8bfb      	ldrh	r3, [r7, #30]
 8003166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800316a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800316e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003176:	b29b      	uxth	r3, r3
 8003178:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d11f      	bne.n	80031c4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800319a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800319e:	83bb      	strh	r3, [r7, #28]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	8bbb      	ldrh	r3, [r7, #28]
 80031b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031c4:	8b7b      	ldrh	r3, [r7, #26]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6959      	ldr	r1, [r3, #20]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	895a      	ldrh	r2, [r3, #10]
 80031d6:	8b7b      	ldrh	r3, [r7, #26]
 80031d8:	f004 f8ea 	bl	80073b0 <USB_ReadPMA>
    }
  }

  return count;
 80031dc:	8b7b      	ldrh	r3, [r7, #26]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b0a4      	sub	sp, #144	@ 0x90
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	4613      	mov	r3, r2
 80031f2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 81dd 	beq.w	80035ba <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003208:	b29b      	uxth	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	3302      	adds	r3, #2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003228:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	699a      	ldr	r2, [r3, #24]
 8003230:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003234:	429a      	cmp	r2, r3
 8003236:	d907      	bls.n	8003248 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003240:	1ad2      	subs	r2, r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	619a      	str	r2, [r3, #24]
 8003246:	e002      	b.n	800324e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 80b9 	bne.w	80033ca <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	785b      	ldrb	r3, [r3, #1]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d126      	bne.n	80032ae <HAL_PCD_EP_DB_Transmit+0xc8>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800326e:	b29b      	uxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003274:	4413      	add	r3, r2
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	011a      	lsls	r2, r3, #4
 800327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003280:	4413      	add	r3, r2
 8003282:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003286:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003292:	b29a      	uxth	r2, r3
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	801a      	strh	r2, [r3, #0]
 8003298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032aa:	801a      	strh	r2, [r3, #0]
 80032ac:	e01a      	b.n	80032e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	785b      	ldrb	r3, [r3, #1]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d116      	bne.n	80032e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ca:	4413      	add	r3, r2
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	011a      	lsls	r2, r3, #4
 80032d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d6:	4413      	add	r3, r2
 80032d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80032de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e0:	2200      	movs	r2, #0
 80032e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d126      	bne.n	8003340 <HAL_PCD_EP_DB_Transmit+0x15a>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003300:	b29b      	uxth	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	011a      	lsls	r2, r3, #4
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003324:	b29a      	uxth	r2, r3
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	801a      	strh	r2, [r3, #0]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003338:	b29a      	uxth	r2, r3
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	801a      	strh	r2, [r3, #0]
 800333e:	e017      	b.n	8003370 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	785b      	ldrb	r3, [r3, #1]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d113      	bne.n	8003370 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003350:	b29b      	uxth	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	4413      	add	r3, r2
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	011a      	lsls	r2, r3, #4
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	4413      	add	r3, r2
 8003364:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003368:	623b      	str	r3, [r7, #32]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	2200      	movs	r2, #0
 800336e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f005 fbe7 	bl	8008b4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 82fc 	beq.w	8003980 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b29b      	uxth	r3, r3
 800339a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800339e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a2:	82fb      	strh	r3, [r7, #22]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	441a      	add	r2, r3
 80033b2:	8afb      	ldrh	r3, [r7, #22]
 80033b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	8013      	strh	r3, [r2, #0]
 80033c8:	e2da      	b.n	8003980 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d021      	beq.n	8003418 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	441a      	add	r2, r3
 8003400:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800340c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003414:	b29b      	uxth	r3, r3
 8003416:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800341e:	2b01      	cmp	r3, #1
 8003420:	f040 82ae 	bne.w	8003980 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800342c:	441a      	add	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800343a:	441a      	add	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	429a      	cmp	r2, r3
 800344a:	d30b      	bcc.n	8003464 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	6a1a      	ldr	r2, [r3, #32]
 8003458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800345c:	1ad2      	subs	r2, r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	621a      	str	r2, [r3, #32]
 8003462:	e017      	b.n	8003494 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d108      	bne.n	800347e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800346c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003470:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800347c:	e00a      	b.n	8003494 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2200      	movs	r2, #0
 8003492:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	785b      	ldrb	r3, [r3, #1]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d165      	bne.n	8003568 <HAL_PCD_EP_DB_Transmit+0x382>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b0:	4413      	add	r3, r2
 80034b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	011a      	lsls	r2, r3, #4
 80034ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034bc:	4413      	add	r3, r2
 80034be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80034c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d2:	801a      	strh	r2, [r3, #0]
 80034d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80034da:	d91d      	bls.n	8003518 <HAL_PCD_EP_DB_Transmit+0x332>
 80034dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x310>
 80034f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034f2:	3b01      	subs	r3, #1
 80034f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034fe:	b29b      	uxth	r3, r3
 8003500:	029b      	lsls	r3, r3, #10
 8003502:	b29b      	uxth	r3, r3
 8003504:	4313      	orrs	r3, r2
 8003506:	b29b      	uxth	r3, r3
 8003508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800350c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003510:	b29a      	uxth	r2, r3
 8003512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003514:	801a      	strh	r2, [r3, #0]
 8003516:	e044      	b.n	80035a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0x350>
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800352a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352e:	b29a      	uxth	r2, r3
 8003530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003532:	801a      	strh	r2, [r3, #0]
 8003534:	e035      	b.n	80035a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800353e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_PCD_EP_DB_Transmit+0x36a>
 800354a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800354c:	3301      	adds	r3, #1
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b29a      	uxth	r2, r3
 8003556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003558:	b29b      	uxth	r3, r3
 800355a:	029b      	lsls	r3, r3, #10
 800355c:	b29b      	uxth	r3, r3
 800355e:	4313      	orrs	r3, r2
 8003560:	b29a      	uxth	r2, r3
 8003562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003564:	801a      	strh	r2, [r3, #0]
 8003566:	e01c      	b.n	80035a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	785b      	ldrb	r3, [r3, #1]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d118      	bne.n	80035a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	647b      	str	r3, [r7, #68]	@ 0x44
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800357e:	b29b      	uxth	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003584:	4413      	add	r3, r2
 8003586:	647b      	str	r3, [r7, #68]	@ 0x44
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	011a      	lsls	r2, r3, #4
 800358e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003590:	4413      	add	r3, r2
 8003592:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003596:	643b      	str	r3, [r7, #64]	@ 0x40
 8003598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800359c:	b29a      	uxth	r2, r3
 800359e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	6959      	ldr	r1, [r3, #20]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	891a      	ldrh	r2, [r3, #8]
 80035ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f003 feb7 	bl	8007326 <USB_WritePMA>
 80035b8:	e1e2      	b.n	8003980 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	3306      	adds	r3, #6
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d307      	bcc.n	8003602 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035fa:	1ad2      	subs	r2, r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	619a      	str	r2, [r3, #24]
 8003600:	e002      	b.n	8003608 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2200      	movs	r2, #0
 8003606:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f040 80c0 	bne.w	8003792 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d126      	bne.n	8003668 <HAL_PCD_EP_DB_Transmit+0x482>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003628:	b29b      	uxth	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800362e:	4413      	add	r3, r2
 8003630:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	011a      	lsls	r2, r3, #4
 8003638:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800363a:	4413      	add	r3, r2
 800363c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003642:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800364c:	b29a      	uxth	r2, r3
 800364e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003660:	b29a      	uxth	r2, r3
 8003662:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	e01a      	b.n	800369e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d116      	bne.n	800369e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	667b      	str	r3, [r7, #100]	@ 0x64
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800367e:	b29b      	uxth	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003684:	4413      	add	r3, r2
 8003686:	667b      	str	r3, [r7, #100]	@ 0x64
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	011a      	lsls	r2, r3, #4
 800368e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003690:	4413      	add	r3, r2
 8003692:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003696:	663b      	str	r3, [r7, #96]	@ 0x60
 8003698:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800369a:	2200      	movs	r2, #0
 800369c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d12b      	bne.n	8003704 <HAL_PCD_EP_DB_Transmit+0x51e>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c0:	4413      	add	r3, r2
 80036c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	011a      	lsls	r2, r3, #4
 80036ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036cc:	4413      	add	r3, r2
 80036ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036e8:	801a      	strh	r2, [r3, #0]
 80036ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	e017      	b.n	8003734 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d113      	bne.n	8003734 <HAL_PCD_EP_DB_Transmit+0x54e>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003714:	b29b      	uxth	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800371a:	4413      	add	r3, r2
 800371c:	677b      	str	r3, [r7, #116]	@ 0x74
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	011a      	lsls	r2, r3, #4
 8003724:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003726:	4413      	add	r3, r2
 8003728:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800372c:	673b      	str	r3, [r7, #112]	@ 0x70
 800372e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003730:	2200      	movs	r2, #0
 8003732:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	4619      	mov	r1, r3
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f005 fa05 	bl	8008b4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 811a 	bne.w	8003980 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003766:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	441a      	add	r2, r3
 8003778:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800377c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003784:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800378c:	b29b      	uxth	r3, r3
 800378e:	8013      	strh	r3, [r2, #0]
 8003790:	e0f6      	b.n	8003980 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d121      	bne.n	80037e0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	441a      	add	r2, r3
 80037c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80037cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037dc:	b29b      	uxth	r3, r3
 80037de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	f040 80ca 	bne.w	8003980 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037f4:	441a      	add	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003802:	441a      	add	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d30b      	bcc.n	800382c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003824:	1ad2      	subs	r2, r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	621a      	str	r2, [r3, #32]
 800382a:	e017      	b.n	800385c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d108      	bne.n	8003846 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003834:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003838:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003844:	e00a      	b.n	800385c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2200      	movs	r2, #0
 8003852:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	657b      	str	r3, [r7, #84]	@ 0x54
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	785b      	ldrb	r3, [r3, #1]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d165      	bne.n	8003936 <HAL_PCD_EP_DB_Transmit+0x750>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003878:	b29b      	uxth	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800387e:	4413      	add	r3, r2
 8003880:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	011a      	lsls	r2, r3, #4
 8003888:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800388a:	4413      	add	r3, r2
 800388c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003890:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003892:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800389c:	b29a      	uxth	r2, r3
 800389e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80038a8:	d91d      	bls.n	80038e6 <HAL_PCD_EP_DB_Transmit+0x700>
 80038aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80038be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038c0:	3b01      	subs	r3, #1
 80038c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	029b      	lsls	r3, r3, #10
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038de:	b29a      	uxth	r2, r3
 80038e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	e041      	b.n	800396a <HAL_PCD_EP_DB_Transmit+0x784>
 80038e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_PCD_EP_DB_Transmit+0x71e>
 80038ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003900:	801a      	strh	r2, [r3, #0]
 8003902:	e032      	b.n	800396a <HAL_PCD_EP_DB_Transmit+0x784>
 8003904:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800390c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <HAL_PCD_EP_DB_Transmit+0x738>
 8003918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800391a:	3301      	adds	r3, #1
 800391c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800391e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29a      	uxth	r2, r3
 8003924:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003926:	b29b      	uxth	r3, r3
 8003928:	029b      	lsls	r3, r3, #10
 800392a:	b29b      	uxth	r3, r3
 800392c:	4313      	orrs	r3, r2
 800392e:	b29a      	uxth	r2, r3
 8003930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003932:	801a      	strh	r2, [r3, #0]
 8003934:	e019      	b.n	800396a <HAL_PCD_EP_DB_Transmit+0x784>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	785b      	ldrb	r3, [r3, #1]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d115      	bne.n	800396a <HAL_PCD_EP_DB_Transmit+0x784>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003946:	b29b      	uxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394c:	4413      	add	r3, r2
 800394e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	011a      	lsls	r2, r3, #4
 8003956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003958:	4413      	add	r3, r2
 800395a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800395e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003964:	b29a      	uxth	r2, r3
 8003966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003968:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6959      	ldr	r1, [r3, #20]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	895a      	ldrh	r2, [r3, #10]
 8003976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800397a:	b29b      	uxth	r3, r3
 800397c:	f003 fcd3 	bl	8007326 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800399a:	82bb      	strh	r3, [r7, #20]
 800399c:	8abb      	ldrh	r3, [r7, #20]
 800399e:	f083 0310 	eor.w	r3, r3, #16
 80039a2:	82bb      	strh	r3, [r7, #20]
 80039a4:	8abb      	ldrh	r3, [r7, #20]
 80039a6:	f083 0320 	eor.w	r3, r3, #32
 80039aa:	82bb      	strh	r3, [r7, #20]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	441a      	add	r2, r3
 80039ba:	8abb      	ldrh	r3, [r7, #20]
 80039bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3790      	adds	r7, #144	@ 0x90
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80039da:	b480      	push	{r7}
 80039dc:	b087      	sub	sp, #28
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	817b      	strh	r3, [r7, #10]
 80039e8:	4613      	mov	r3, r2
 80039ea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80039ec:	897b      	ldrh	r3, [r7, #10]
 80039ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00b      	beq.n	8003a10 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f8:	897b      	ldrh	r3, [r7, #10]
 80039fa:	f003 0207 	and.w	r2, r3, #7
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	3310      	adds	r3, #16
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e009      	b.n	8003a24 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a10:	897a      	ldrh	r2, [r7, #10]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a24:	893b      	ldrh	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	80da      	strh	r2, [r3, #6]
 8003a38:	e00b      	b.n	8003a52 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e272      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8087 	beq.w	8003b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a80:	4b92      	ldr	r3, [pc, #584]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d00c      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d112      	bne.n	8003abe <HAL_RCC_OscConfig+0x5e>
 8003a98:	4b8c      	ldr	r3, [pc, #560]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa4:	d10b      	bne.n	8003abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa6:	4b89      	ldr	r3, [pc, #548]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d06c      	beq.n	8003b8c <HAL_RCC_OscConfig+0x12c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d168      	bne.n	8003b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e24c      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x76>
 8003ac8:	4b80      	ldr	r3, [pc, #512]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7f      	ldr	r2, [pc, #508]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e02e      	b.n	8003b34 <HAL_RCC_OscConfig+0xd4>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x98>
 8003ade:	4b7b      	ldr	r3, [pc, #492]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a7a      	ldr	r2, [pc, #488]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	4b78      	ldr	r3, [pc, #480]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a77      	ldr	r2, [pc, #476]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e01d      	b.n	8003b34 <HAL_RCC_OscConfig+0xd4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0xbc>
 8003b02:	4b72      	ldr	r3, [pc, #456]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a71      	ldr	r2, [pc, #452]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6e      	ldr	r2, [pc, #440]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_OscConfig+0xd4>
 8003b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a6a      	ldr	r2, [pc, #424]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4b68      	ldr	r3, [pc, #416]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a67      	ldr	r2, [pc, #412]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fb00 	bl	8001140 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fd fafc 	bl	8001140 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	@ 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e200      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	4b5d      	ldr	r3, [pc, #372]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0xe4>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd faec 	bl	8001140 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd fae8 	bl	8001140 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	@ 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e1ec      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	4b53      	ldr	r3, [pc, #332]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x10c>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d063      	beq.n	8003c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ba6:	4b49      	ldr	r3, [pc, #292]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d11c      	bne.n	8003bec <HAL_RCC_OscConfig+0x18c>
 8003bb2:	4b46      	ldr	r3, [pc, #280]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d116      	bne.n	8003bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bbe:	4b43      	ldr	r3, [pc, #268]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x176>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e1c0      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4939      	ldr	r1, [pc, #228]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	e03a      	b.n	8003c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf4:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fd faa1 	bl	8001140 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fd fa9d 	bl	8001140 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e1a1      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	4b2d      	ldr	r3, [pc, #180]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c20:	4b2a      	ldr	r3, [pc, #168]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4927      	ldr	r1, [pc, #156]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
 8003c34:	e015      	b.n	8003c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c36:	4b26      	ldr	r3, [pc, #152]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fa80 	bl	8001140 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c44:	f7fd fa7c 	bl	8001140 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e180      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d03a      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d019      	beq.n	8003caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c76:	4b17      	ldr	r3, [pc, #92]	@ (8003cd4 <HAL_RCC_OscConfig+0x274>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7c:	f7fd fa60 	bl	8001140 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fd fa5c 	bl	8001140 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e160      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f000 faba 	bl	800421c <RCC_Delay>
 8003ca8:	e01c      	b.n	8003ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003caa:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <HAL_RCC_OscConfig+0x274>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb0:	f7fd fa46 	bl	8001140 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb6:	e00f      	b.n	8003cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb8:	f7fd fa42 	bl	8001140 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d908      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e146      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	42420000 	.word	0x42420000
 8003cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd8:	4b92      	ldr	r3, [pc, #584]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e9      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a6 	beq.w	8003e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	4b88      	ldr	r3, [pc, #544]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	4a87      	ldr	r2, [pc, #540]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	61d3      	str	r3, [r2, #28]
 8003d0e:	4b85      	ldr	r3, [pc, #532]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1e:	4b82      	ldr	r3, [pc, #520]	@ (8003f28 <HAL_RCC_OscConfig+0x4c8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d118      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f28 <HAL_RCC_OscConfig+0x4c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f28 <HAL_RCC_OscConfig+0x4c8>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fd fa03 	bl	8001140 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd f9ff 	bl	8001140 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b64      	cmp	r3, #100	@ 0x64
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e103      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d50:	4b75      	ldr	r3, [pc, #468]	@ (8003f28 <HAL_RCC_OscConfig+0x4c8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x312>
 8003d64:	4b6f      	ldr	r3, [pc, #444]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4a6e      	ldr	r2, [pc, #440]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6213      	str	r3, [r2, #32]
 8003d70:	e02d      	b.n	8003dce <HAL_RCC_OscConfig+0x36e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x334>
 8003d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a69      	ldr	r2, [pc, #420]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6213      	str	r3, [r2, #32]
 8003d86:	4b67      	ldr	r3, [pc, #412]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	4a66      	ldr	r2, [pc, #408]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	6213      	str	r3, [r2, #32]
 8003d92:	e01c      	b.n	8003dce <HAL_RCC_OscConfig+0x36e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d10c      	bne.n	8003db6 <HAL_RCC_OscConfig+0x356>
 8003d9c:	4b61      	ldr	r3, [pc, #388]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4a60      	ldr	r2, [pc, #384]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	6213      	str	r3, [r2, #32]
 8003da8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4a5d      	ldr	r2, [pc, #372]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6213      	str	r3, [r2, #32]
 8003db4:	e00b      	b.n	8003dce <HAL_RCC_OscConfig+0x36e>
 8003db6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4a5a      	ldr	r2, [pc, #360]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6213      	str	r3, [r2, #32]
 8003dc2:	4b58      	ldr	r3, [pc, #352]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4a57      	ldr	r2, [pc, #348]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	f023 0304 	bic.w	r3, r3, #4
 8003dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d015      	beq.n	8003e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd f9b3 	bl	8001140 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fd f9af 	bl	8001140 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0b1      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ee      	beq.n	8003dde <HAL_RCC_OscConfig+0x37e>
 8003e00:	e014      	b.n	8003e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fd f99d 	bl	8001140 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fd f999 	bl	8001140 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e09b      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e20:	4b40      	ldr	r3, [pc, #256]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ee      	bne.n	8003e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d105      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4b3c      	ldr	r3, [pc, #240]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4a3b      	ldr	r2, [pc, #236]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8087 	beq.w	8003f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e48:	4b36      	ldr	r3, [pc, #216]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d061      	beq.n	8003f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d146      	bne.n	8003eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	4b33      	ldr	r3, [pc, #204]	@ (8003f2c <HAL_RCC_OscConfig+0x4cc>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e62:	f7fd f96d 	bl	8001140 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fd f969 	bl	8001140 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e06d      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7c:	4b29      	ldr	r3, [pc, #164]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f0      	bne.n	8003e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e90:	d108      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e92:	4b24      	ldr	r3, [pc, #144]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	4921      	ldr	r1, [pc, #132]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a19      	ldr	r1, [r3, #32]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	491b      	ldr	r1, [pc, #108]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <HAL_RCC_OscConfig+0x4cc>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fd f93d 	bl	8001140 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fd f939 	bl	8001140 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e03d      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003edc:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x46a>
 8003ee8:	e035      	b.n	8003f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <HAL_RCC_OscConfig+0x4cc>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fd f926 	bl	8001140 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fd f922 	bl	8001140 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e026      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x498>
 8003f16:	e01e      	b.n	8003f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e019      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f30:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <HAL_RCC_OscConfig+0x500>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d106      	bne.n	8003f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0d0      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f78:	4b6a      	ldr	r3, [pc, #424]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d910      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b67      	ldr	r3, [pc, #412]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 0207 	bic.w	r2, r3, #7
 8003f8e:	4965      	ldr	r1, [pc, #404]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b63      	ldr	r3, [pc, #396]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0b8      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d020      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc0:	4b59      	ldr	r3, [pc, #356]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a58      	ldr	r2, [pc, #352]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd8:	4b53      	ldr	r3, [pc, #332]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a52      	ldr	r2, [pc, #328]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe4:	4b50      	ldr	r3, [pc, #320]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	494d      	ldr	r1, [pc, #308]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d040      	beq.n	8004084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d107      	bne.n	800401a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b47      	ldr	r3, [pc, #284]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d115      	bne.n	8004042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e07f      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	4b41      	ldr	r3, [pc, #260]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e073      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004032:	4b3d      	ldr	r3, [pc, #244]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e06b      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004042:	4b39      	ldr	r3, [pc, #228]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f023 0203 	bic.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4936      	ldr	r1, [pc, #216]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004054:	f7fd f874 	bl	8001140 <HAL_GetTick>
 8004058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405a:	e00a      	b.n	8004072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405c:	f7fd f870 	bl	8001140 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e053      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	4b2d      	ldr	r3, [pc, #180]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 020c 	and.w	r2, r3, #12
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	429a      	cmp	r2, r3
 8004082:	d1eb      	bne.n	800405c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004084:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d210      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 0207 	bic.w	r2, r3, #7
 800409a:	4922      	ldr	r1, [pc, #136]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b20      	ldr	r3, [pc, #128]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e032      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c0:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4916      	ldr	r1, [pc, #88]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040de:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	490e      	ldr	r1, [pc, #56]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040f2:	f000 f821 	bl	8004138 <HAL_RCC_GetSysClockFreq>
 80040f6:	4602      	mov	r2, r0
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	490a      	ldr	r1, [pc, #40]	@ (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	5ccb      	ldrb	r3, [r1, r3]
 8004106:	fa22 f303 	lsr.w	r3, r2, r3
 800410a:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <HAL_RCC_ClockConfig+0x1cc>)
 800410c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800410e:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_RCC_ClockConfig+0x1d0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc ffd2 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40022000 	.word	0x40022000
 8004128:	40021000 	.word	0x40021000
 800412c:	080092ac 	.word	0x080092ac
 8004130:	20000014 	.word	0x20000014
 8004134:	20000018 	.word	0x20000018

08004138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	2300      	movs	r3, #0
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004152:	4b1e      	ldr	r3, [pc, #120]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b04      	cmp	r3, #4
 8004160:	d002      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x30>
 8004162:	2b08      	cmp	r3, #8
 8004164:	d003      	beq.n	800416e <HAL_RCC_GetSysClockFreq+0x36>
 8004166:	e027      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004168:	4b19      	ldr	r3, [pc, #100]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800416a:	613b      	str	r3, [r7, #16]
      break;
 800416c:	e027      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	0c9b      	lsrs	r3, r3, #18
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	4a17      	ldr	r2, [pc, #92]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004178:	5cd3      	ldrb	r3, [r2, r3]
 800417a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d010      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004186:	4b11      	ldr	r3, [pc, #68]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	0c5b      	lsrs	r3, r3, #17
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	4a11      	ldr	r2, [pc, #68]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004192:	5cd3      	ldrb	r3, [r2, r3]
 8004194:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a0d      	ldr	r2, [pc, #52]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800419a:	fb03 f202 	mul.w	r2, r3, r2
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e004      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a0c      	ldr	r2, [pc, #48]	@ (80041dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80041ac:	fb02 f303 	mul.w	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	613b      	str	r3, [r7, #16]
      break;
 80041b6:	e002      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ba:	613b      	str	r3, [r7, #16]
      break;
 80041bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041be:	693b      	ldr	r3, [r7, #16]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	007a1200 	.word	0x007a1200
 80041d4:	080092c4 	.word	0x080092c4
 80041d8:	080092d4 	.word	0x080092d4
 80041dc:	003d0900 	.word	0x003d0900

080041e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e4:	4b02      	ldr	r3, [pc, #8]	@ (80041f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80041e6:	681b      	ldr	r3, [r3, #0]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr
 80041f0:	20000014 	.word	0x20000014

080041f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041f8:	f7ff fff2 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	0adb      	lsrs	r3, r3, #11
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	@ (8004218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	080092bc 	.word	0x080092bc

0800421c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004224:	4b0a      	ldr	r3, [pc, #40]	@ (8004250 <RCC_Delay+0x34>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0a      	ldr	r2, [pc, #40]	@ (8004254 <RCC_Delay+0x38>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0a5b      	lsrs	r3, r3, #9
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004238:	bf00      	nop
  }
  while (Delay --);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1e5a      	subs	r2, r3, #1
 800423e:	60fa      	str	r2, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f9      	bne.n	8004238 <RCC_Delay+0x1c>
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	20000014 	.word	0x20000014
 8004254:	10624dd3 	.word	0x10624dd3

08004258 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d07d      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004274:	2300      	movs	r3, #0
 8004276:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004278:	4b4f      	ldr	r3, [pc, #316]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10d      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004284:	4b4c      	ldr	r3, [pc, #304]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	4a4b      	ldr	r2, [pc, #300]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428e:	61d3      	str	r3, [r2, #28]
 8004290:	4b49      	ldr	r3, [pc, #292]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	4b46      	ldr	r3, [pc, #280]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d118      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ac:	4b43      	ldr	r3, [pc, #268]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a42      	ldr	r2, [pc, #264]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b8:	f7fc ff42 	bl	8001140 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	e008      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c0:	f7fc ff3e 	bl	8001140 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	@ 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e06d      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d2:	4b3a      	ldr	r3, [pc, #232]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042de:	4b36      	ldr	r3, [pc, #216]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02e      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d027      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042fc:	4b2e      	ldr	r3, [pc, #184]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004304:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004306:	4b2e      	ldr	r3, [pc, #184]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800430c:	4b2c      	ldr	r3, [pc, #176]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004312:	4a29      	ldr	r2, [pc, #164]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d014      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004322:	f7fc ff0d 	bl	8001140 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004328:	e00a      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fc ff09 	bl	8001140 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e036      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004340:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ee      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800434c:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4917      	ldr	r1, [pc, #92]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435a:	4313      	orrs	r3, r2
 800435c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800435e:	7dfb      	ldrb	r3, [r7, #23]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004364:	4b14      	ldr	r3, [pc, #80]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800437c:	4b0e      	ldr	r3, [pc, #56]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	490b      	ldr	r1, [pc, #44]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800439a:	4b07      	ldr	r3, [pc, #28]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	4904      	ldr	r1, [pc, #16]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40007000 	.word	0x40007000
 80043c0:	42420440 	.word	0x42420440

080043c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	2300      	movs	r3, #0
 80043de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	f200 808a 	bhi.w	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d045      	beq.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d075      	beq.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80043fa:	e082      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80043fc:	4b46      	ldr	r3, [pc, #280]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004402:	4b45      	ldr	r3, [pc, #276]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d07b      	beq.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	0c9b      	lsrs	r3, r3, #18
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	4a41      	ldr	r2, [pc, #260]	@ (800451c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004418:	5cd3      	ldrb	r3, [r2, r3]
 800441a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d015      	beq.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004426:	4b3c      	ldr	r3, [pc, #240]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	0c5b      	lsrs	r3, r3, #17
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	4a3b      	ldr	r2, [pc, #236]	@ (8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004432:	5cd3      	ldrb	r3, [r2, r3]
 8004434:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004440:	4a38      	ldr	r2, [pc, #224]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	fbb2 f2f3 	udiv	r2, r2, r3
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e004      	b.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4a34      	ldr	r2, [pc, #208]	@ (8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800445c:	4b2e      	ldr	r3, [pc, #184]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004464:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004468:	d102      	bne.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	61bb      	str	r3, [r7, #24]
      break;
 800446e:	e04a      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4a2d      	ldr	r2, [pc, #180]	@ (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	61bb      	str	r3, [r7, #24]
      break;
 800447e:	e042      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004480:	4b25      	ldr	r3, [pc, #148]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800448c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004490:	d108      	bne.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800449c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e01f      	b.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ae:	d109      	bne.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80044b0:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80044bc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	e00f      	b.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ce:	d11c      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044d0:	4b11      	ldr	r3, [pc, #68]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d016      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80044dc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80044e0:	61bb      	str	r3, [r7, #24]
      break;
 80044e2:	e012      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044e4:	e011      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80044e6:	f7ff fe85 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0b9b      	lsrs	r3, r3, #14
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	3301      	adds	r3, #1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	61bb      	str	r3, [r7, #24]
      break;
 8004500:	e004      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004502:	bf00      	nop
 8004504:	e002      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800450a:	bf00      	nop
    }
  }
  return (frequency);
 800450c:	69bb      	ldr	r3, [r7, #24]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
 800451c:	080092d8 	.word	0x080092d8
 8004520:	080092e8 	.word	0x080092e8
 8004524:	007a1200 	.word	0x007a1200
 8004528:	003d0900 	.word	0x003d0900
 800452c:	aaaaaaab 	.word	0xaaaaaaab

08004530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e041      	b.n	80045c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc fa52 	bl	8000a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f000 fa64 	bl	8004a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e03a      	b.n	800465e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a18      	ldr	r2, [pc, #96]	@ (8004668 <HAL_TIM_Base_Start_IT+0x98>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x58>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004612:	d009      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x58>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a14      	ldr	r2, [pc, #80]	@ (800466c <HAL_TIM_Base_Start_IT+0x9c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x58>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a13      	ldr	r2, [pc, #76]	@ (8004670 <HAL_TIM_Base_Start_IT+0xa0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d111      	bne.n	800464c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b06      	cmp	r3, #6
 8004638:	d010      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464a:	e007      	b.n	800465c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800

08004674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d020      	beq.n	80046d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01b      	beq.n	80046d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0202 	mvn.w	r2, #2
 80046a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9a1 	bl	8004a06 <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f994 	bl	80049f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f9a3 	bl	8004a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d020      	beq.n	8004724 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01b      	beq.n	8004724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0204 	mvn.w	r2, #4
 80046f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f97b 	bl	8004a06 <HAL_TIM_IC_CaptureCallback>
 8004710:	e005      	b.n	800471e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f96e 	bl	80049f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f97d 	bl	8004a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d020      	beq.n	8004770 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01b      	beq.n	8004770 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0208 	mvn.w	r2, #8
 8004740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2204      	movs	r2, #4
 8004746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f955 	bl	8004a06 <HAL_TIM_IC_CaptureCallback>
 800475c:	e005      	b.n	800476a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f948 	bl	80049f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f957 	bl	8004a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	d020      	beq.n	80047bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01b      	beq.n	80047bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0210 	mvn.w	r2, #16
 800478c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2208      	movs	r2, #8
 8004792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f92f 	bl	8004a06 <HAL_TIM_IC_CaptureCallback>
 80047a8:	e005      	b.n	80047b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f922 	bl	80049f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f931 	bl	8004a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0201 	mvn.w	r2, #1
 80047d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f901 	bl	80049e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa87 	bl	8004d12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f901 	bl	8004a2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0220 	mvn.w	r2, #32
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa5a 	bl	8004d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_TIM_ConfigClockSource+0x1c>
 800486c:	2302      	movs	r3, #2
 800486e:	e0b4      	b.n	80049da <HAL_TIM_ConfigClockSource+0x186>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800488e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004896:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048a8:	d03e      	beq.n	8004928 <HAL_TIM_ConfigClockSource+0xd4>
 80048aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ae:	f200 8087 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b6:	f000 8086 	beq.w	80049c6 <HAL_TIM_ConfigClockSource+0x172>
 80048ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048be:	d87f      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b70      	cmp	r3, #112	@ 0x70
 80048c2:	d01a      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0xa6>
 80048c4:	2b70      	cmp	r3, #112	@ 0x70
 80048c6:	d87b      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b60      	cmp	r3, #96	@ 0x60
 80048ca:	d050      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x11a>
 80048cc:	2b60      	cmp	r3, #96	@ 0x60
 80048ce:	d877      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b50      	cmp	r3, #80	@ 0x50
 80048d2:	d03c      	beq.n	800494e <HAL_TIM_ConfigClockSource+0xfa>
 80048d4:	2b50      	cmp	r3, #80	@ 0x50
 80048d6:	d873      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b40      	cmp	r3, #64	@ 0x40
 80048da:	d058      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x13a>
 80048dc:	2b40      	cmp	r3, #64	@ 0x40
 80048de:	d86f      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b30      	cmp	r3, #48	@ 0x30
 80048e2:	d064      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048e4:	2b30      	cmp	r3, #48	@ 0x30
 80048e6:	d86b      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d060      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d867      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d05c      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d05a      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048f8:	e062      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800490a:	f000 f97c 	bl	8004c06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800491c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	609a      	str	r2, [r3, #8]
      break;
 8004926:	e04f      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004938:	f000 f965 	bl	8004c06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800494a:	609a      	str	r2, [r3, #8]
      break;
 800494c:	e03c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800495a:	461a      	mov	r2, r3
 800495c:	f000 f8dc 	bl	8004b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2150      	movs	r1, #80	@ 0x50
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f933 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 800496c:	e02c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800497a:	461a      	mov	r2, r3
 800497c:	f000 f8fa 	bl	8004b74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2160      	movs	r1, #96	@ 0x60
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f923 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 800498c:	e01c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800499a:	461a      	mov	r2, r3
 800499c:	f000 f8bc 	bl	8004b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2140      	movs	r1, #64	@ 0x40
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f913 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 80049ac:	e00c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f000 f90a 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 80049be:	e003      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      break;
 80049c4:	e000      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc80      	pop	{r7}
 8004a04:	4770      	bx	lr

08004a06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr

08004a2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b0c <TIM_Base_SetConfig+0xd0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_Base_SetConfig+0x30>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5a:	d007      	beq.n	8004a6c <TIM_Base_SetConfig+0x30>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b10 <TIM_Base_SetConfig+0xd4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0x30>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a2b      	ldr	r2, [pc, #172]	@ (8004b14 <TIM_Base_SetConfig+0xd8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a22      	ldr	r2, [pc, #136]	@ (8004b0c <TIM_Base_SetConfig+0xd0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_Base_SetConfig+0x62>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a8c:	d007      	beq.n	8004a9e <TIM_Base_SetConfig+0x62>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1f      	ldr	r2, [pc, #124]	@ (8004b10 <TIM_Base_SetConfig+0xd4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_Base_SetConfig+0x62>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1e      	ldr	r2, [pc, #120]	@ (8004b14 <TIM_Base_SetConfig+0xd8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d108      	bne.n	8004ab0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8004b0c <TIM_Base_SetConfig+0xd0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d103      	bne.n	8004ae4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f023 0201 	bic.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	611a      	str	r2, [r3, #16]
  }
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800

08004b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0201 	bic.w	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 030a 	bic.w	r3, r3, #10
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0210 	bic.w	r2, r3, #16
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	031b      	lsls	r3, r3, #12
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f043 0307 	orr.w	r3, r3, #7
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	609a      	str	r2, [r3, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr

08004c06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b087      	sub	sp, #28
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	021a      	lsls	r2, r3, #8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	609a      	str	r2, [r3, #8]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e046      	b.n	8004cea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	@ (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a12      	ldr	r2, [pc, #72]	@ (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a10      	ldr	r2, [pc, #64]	@ (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	40012c00 	.word	0x40012c00
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800

08004d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr

08004d12 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr

08004d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d4e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004d52:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr

08004d6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d72:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004d76:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	4013      	ands	r3, r2
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b09d      	sub	sp, #116	@ 0x74
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e16:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	78db      	ldrb	r3, [r3, #3]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d81f      	bhi.n	8004e62 <USB_ActivateEndpoint+0x72>
 8004e22:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <USB_ActivateEndpoint+0x38>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e55 	.word	0x08004e55
 8004e30:	08004e6b 	.word	0x08004e6b
 8004e34:	08004e47 	.word	0x08004e47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004e38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004e44:	e012      	b.n	8004e6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004e46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e4a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004e4e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004e52:	e00b      	b.n	8004e6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004e60:	e004      	b.n	8004e6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004e68:	e000      	b.n	8004e6c <USB_ActivateEndpoint+0x7c>
      break;
 8004e6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	7b1b      	ldrb	r3, [r3, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f040 8178 	bne.w	80051cc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8084 	beq.w	8004fee <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	011a      	lsls	r2, r3, #4
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	88db      	ldrh	r3, [r3, #6]
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	827b      	strh	r3, [r7, #18]
 8004f28:	8a7b      	ldrh	r3, [r7, #18]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01b      	beq.n	8004f6a <USB_ActivateEndpoint+0x17a>
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f48:	823b      	strh	r3, [r7, #16]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	8a3b      	ldrh	r3, [r7, #16]
 8004f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	78db      	ldrb	r3, [r3, #3]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d020      	beq.n	8004fb4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f88:	81bb      	strh	r3, [r7, #12]
 8004f8a:	89bb      	ldrh	r3, [r7, #12]
 8004f8c:	f083 0320 	eor.w	r3, r3, #32
 8004f90:	81bb      	strh	r3, [r7, #12]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	89bb      	ldrh	r3, [r7, #12]
 8004f9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	8013      	strh	r3, [r2, #0]
 8004fb2:	e2d5      	b.n	8005560 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fca:	81fb      	strh	r3, [r7, #14]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	8013      	strh	r3, [r2, #0]
 8004fec:	e2b8      	b.n	8005560 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	4413      	add	r3, r2
 8005000:	633b      	str	r3, [r7, #48]	@ 0x30
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	011a      	lsls	r2, r3, #4
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	4413      	add	r3, r2
 800500c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	88db      	ldrh	r3, [r3, #6]
 8005016:	085b      	lsrs	r3, r3, #1
 8005018:	b29b      	uxth	r3, r3
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005020:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800502c:	b29b      	uxth	r3, r3
 800502e:	461a      	mov	r2, r3
 8005030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005032:	4413      	add	r3, r2
 8005034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	011a      	lsls	r2, r3, #4
 800503c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503e:	4413      	add	r3, r2
 8005040:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005050:	b29a      	uxth	r2, r3
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b3e      	cmp	r3, #62	@ 0x3e
 800505c:	d91d      	bls.n	800509a <USB_ActivateEndpoint+0x2aa>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <USB_ActivateEndpoint+0x288>
 8005072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005074:	3b01      	subs	r3, #1
 8005076:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29a      	uxth	r2, r3
 800507e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005080:	b29b      	uxth	r3, r3
 8005082:	029b      	lsls	r3, r3, #10
 8005084:	b29b      	uxth	r3, r3
 8005086:	4313      	orrs	r3, r2
 8005088:	b29b      	uxth	r3, r3
 800508a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005092:	b29a      	uxth	r2, r3
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	e026      	b.n	80050e8 <USB_ActivateEndpoint+0x2f8>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <USB_ActivateEndpoint+0x2c8>
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	e017      	b.n	80050e8 <USB_ActivateEndpoint+0x2f8>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <USB_ActivateEndpoint+0x2e2>
 80050cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ce:	3301      	adds	r3, #1
 80050d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050da:	b29b      	uxth	r3, r3
 80050dc:	029b      	lsls	r3, r3, #10
 80050de:	b29b      	uxth	r3, r3
 80050e0:	4313      	orrs	r3, r2
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80050f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01b      	beq.n	8005138 <USB_ActivateEndpoint+0x348>
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005116:	843b      	strh	r3, [r7, #32]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	8c3b      	ldrh	r3, [r7, #32]
 8005124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800512c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005134:	b29b      	uxth	r3, r3
 8005136:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d124      	bne.n	800518a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	83bb      	strh	r3, [r7, #28]
 8005158:	8bbb      	ldrh	r3, [r7, #28]
 800515a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800515e:	83bb      	strh	r3, [r7, #28]
 8005160:	8bbb      	ldrh	r3, [r7, #28]
 8005162:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005166:	83bb      	strh	r3, [r7, #28]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	8bbb      	ldrh	r3, [r7, #28]
 8005174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800517c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005184:	b29b      	uxth	r3, r3
 8005186:	8013      	strh	r3, [r2, #0]
 8005188:	e1ea      	b.n	8005560 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800519c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a0:	83fb      	strh	r3, [r7, #30]
 80051a2:	8bfb      	ldrh	r3, [r7, #30]
 80051a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051a8:	83fb      	strh	r3, [r7, #30]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	441a      	add	r2, r3
 80051b4:	8bfb      	ldrh	r3, [r7, #30]
 80051b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	8013      	strh	r3, [r2, #0]
 80051ca:	e1c9      	b.n	8005560 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	78db      	ldrb	r3, [r3, #3]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d11e      	bne.n	8005212 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80051fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005200:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005204:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800520c:	b29b      	uxth	r3, r3
 800520e:	8013      	strh	r3, [r2, #0]
 8005210:	e01d      	b.n	800524e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005228:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800523a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800523e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800524a:	b29b      	uxth	r3, r3
 800524c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005258:	b29b      	uxth	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800525e:	4413      	add	r3, r2
 8005260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	011a      	lsls	r2, r3, #4
 8005268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800526a:	4413      	add	r3, r2
 800526c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005270:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	891b      	ldrh	r3, [r3, #8]
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	b29b      	uxth	r3, r3
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	657b      	str	r3, [r7, #84]	@ 0x54
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800528c:	b29b      	uxth	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005292:	4413      	add	r3, r2
 8005294:	657b      	str	r3, [r7, #84]	@ 0x54
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	011a      	lsls	r2, r3, #4
 800529c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80052a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	895b      	ldrh	r3, [r3, #10]
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 8093 	bne.w	80053e6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80052d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80052d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01b      	beq.n	8005314 <USB_ActivateEndpoint+0x524>
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	441a      	add	r2, r3
 80052fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005308:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800530c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005310:	b29b      	uxth	r3, r3
 8005312:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005322:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01b      	beq.n	8005364 <USB_ActivateEndpoint+0x574>
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005342:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800535c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005360:	b29b      	uxth	r3, r3
 8005362:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	b29b      	uxth	r3, r3
 8005372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800537c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800537e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005382:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005384:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005386:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800538a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	441a      	add	r2, r3
 8005396:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800539c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80053d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	8013      	strh	r3, [r2, #0]
 80053e4:	e0bc      	b.n	8005560 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80053f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80053fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01d      	beq.n	800543e <USB_ActivateEndpoint+0x64e>
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005418:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800542a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800542e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005432:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800544e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01d      	beq.n	8005496 <USB_ActivateEndpoint+0x6a6>
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800546c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005470:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	78db      	ldrb	r3, [r3, #3]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d024      	beq.n	80054e8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80054b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80054bc:	f083 0320 	eor.w	r3, r3, #32
 80054c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	441a      	add	r2, r3
 80054ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]
 80054e6:	e01d      	b.n	8005524 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800551c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	441a      	add	r2, r3
 8005548:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800554c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005560:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005564:	4618      	mov	r0, r3
 8005566:	3774      	adds	r7, #116	@ 0x74
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop

08005570 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005570:	b480      	push	{r7}
 8005572:	b08d      	sub	sp, #52	@ 0x34
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	7b1b      	ldrb	r3, [r3, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f040 808e 	bne.w	80056a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d044      	beq.n	8005616 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	81bb      	strh	r3, [r7, #12]
 800559a:	89bb      	ldrh	r3, [r7, #12]
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <USB_DeactivateEndpoint+0x6c>
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ba:	817b      	strh	r3, [r7, #10]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	441a      	add	r2, r3
 80055c6:	897b      	ldrh	r3, [r7, #10]
 80055c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055d8:	b29b      	uxth	r3, r3
 80055da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055f2:	813b      	strh	r3, [r7, #8]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	893b      	ldrh	r3, [r7, #8]
 8005600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800560c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005610:	b29b      	uxth	r3, r3
 8005612:	8013      	strh	r3, [r2, #0]
 8005614:	e192      	b.n	800593c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	827b      	strh	r3, [r7, #18]
 8005624:	8a7b      	ldrh	r3, [r7, #18]
 8005626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01b      	beq.n	8005666 <USB_DeactivateEndpoint+0xf6>
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005644:	823b      	strh	r3, [r7, #16]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	441a      	add	r2, r3
 8005650:	8a3b      	ldrh	r3, [r7, #16]
 8005652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800565a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800565e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005662:	b29b      	uxth	r3, r3
 8005664:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567c:	81fb      	strh	r3, [r7, #14]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	441a      	add	r2, r3
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800568e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569a:	b29b      	uxth	r3, r3
 800569c:	8013      	strh	r3, [r2, #0]
 800569e:	e14d      	b.n	800593c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	785b      	ldrb	r3, [r3, #1]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f040 80a5 	bne.w	80057f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	843b      	strh	r3, [r7, #32]
 80056b8:	8c3b      	ldrh	r3, [r7, #32]
 80056ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01b      	beq.n	80056fa <USB_DeactivateEndpoint+0x18a>
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d8:	83fb      	strh	r3, [r7, #30]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	441a      	add	r2, r3
 80056e4:	8bfb      	ldrh	r3, [r7, #30]
 80056e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	83bb      	strh	r3, [r7, #28]
 8005708:	8bbb      	ldrh	r3, [r7, #28]
 800570a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01b      	beq.n	800574a <USB_DeactivateEndpoint+0x1da>
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005728:	837b      	strh	r3, [r7, #26]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	8b7b      	ldrh	r3, [r7, #26]
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800573e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005742:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800575c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005760:	833b      	strh	r3, [r7, #24]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	441a      	add	r2, r3
 800576c:	8b3b      	ldrh	r3, [r7, #24]
 800576e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800577a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800577e:	b29b      	uxth	r3, r3
 8005780:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005798:	82fb      	strh	r3, [r7, #22]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	441a      	add	r2, r3
 80057a4:	8afb      	ldrh	r3, [r7, #22]
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d0:	82bb      	strh	r3, [r7, #20]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	441a      	add	r2, r3
 80057dc:	8abb      	ldrh	r3, [r7, #20]
 80057de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	8013      	strh	r3, [r2, #0]
 80057f2:	e0a3      	b.n	800593c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005802:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01b      	beq.n	8005844 <USB_DeactivateEndpoint+0x2d4>
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005822:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005838:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800583c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005840:	b29b      	uxth	r3, r3
 8005842:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005852:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <USB_DeactivateEndpoint+0x324>
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800586e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005872:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	441a      	add	r2, r3
 800587e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800588c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005890:	b29b      	uxth	r3, r3
 8005892:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80058b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	441a      	add	r2, r3
 80058ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005900:	b29b      	uxth	r3, r3
 8005902:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	441a      	add	r2, r3
 8005926:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005928:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800592c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005938:	b29b      	uxth	r3, r3
 800593a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3734      	adds	r7, #52	@ 0x34
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b0c2      	sub	sp, #264	@ 0x108
 800594c:	af00      	add	r7, sp, #0
 800594e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005952:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005956:	6018      	str	r0, [r3, #0]
 8005958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005960:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	2b01      	cmp	r3, #1
 8005970:	f040 86b7 	bne.w	80066e2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d908      	bls.n	80059a2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80059a0:	e007      	b.n	80059b2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80059a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80059b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	7b1b      	ldrb	r3, [r3, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d13a      	bne.n	8005a38 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6959      	ldr	r1, [r3, #20]
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	88da      	ldrh	r2, [r3, #6]
 80059da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059e8:	6800      	ldr	r0, [r0, #0]
 80059ea:	f001 fc9c 	bl	8007326 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	011a      	lsls	r2, r3, #4
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	4413      	add	r3, r2
 8005a24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	f000 be1f 	b.w	8006676 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	78db      	ldrb	r3, [r3, #3]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	f040 8462 	bne.w	800630e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6a1a      	ldr	r2, [r3, #32]
 8005a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	f240 83df 	bls.w	8006226 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad4:	1ad2      	subs	r2, r2, r3
 8005ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 81c7 	beq.w	8005e98 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d177      	bne.n	8005c16 <USB_EPStartXfer+0x2ce>
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b46:	4413      	add	r3, r2
 8005b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	011a      	lsls	r2, r3, #4
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b76:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b78:	d921      	bls.n	8005bbe <USB_EPStartXfer+0x276>
 8005b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d104      	bne.n	8005b9a <USB_EPStartXfer+0x252>
 8005b90:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b94:	3b01      	subs	r3, #1
 8005b96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	029b      	lsls	r3, r3, #10
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	4313      	orrs	r3, r2
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	e050      	b.n	8005c60 <USB_EPStartXfer+0x318>
 8005bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <USB_EPStartXfer+0x294>
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	e041      	b.n	8005c60 <USB_EPStartXfer+0x318>
 8005bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <USB_EPStartXfer+0x2b4>
 8005bf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	e024      	b.n	8005c60 <USB_EPStartXfer+0x318>
 8005c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d11c      	bne.n	8005c60 <USB_EPStartXfer+0x318>
 8005c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3a:	4413      	add	r3, r2
 8005c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	011a      	lsls	r2, r3, #4
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4e:	4413      	add	r3, r2
 8005c50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	895b      	ldrh	r3, [r3, #10]
 8005c6c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6959      	ldr	r1, [r3, #20]
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c86:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c8a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c8e:	6800      	ldr	r0, [r0, #0]
 8005c90:	f001 fb49 	bl	8007326 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca4:	441a      	add	r2, r3
 8005ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d90f      	bls.n	8005cee <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6a1a      	ldr	r2, [r3, #32]
 8005cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	621a      	str	r2, [r3, #32]
 8005cec:	e00e      	b.n	8005d0c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d177      	bne.n	8005e0c <USB_EPStartXfer+0x4c4>
 8005d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	011a      	lsls	r2, r3, #4
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	4413      	add	r3, r2
 8005d52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d6e:	d921      	bls.n	8005db4 <USB_EPStartXfer+0x46c>
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7e:	f003 031f 	and.w	r3, r3, #31
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d104      	bne.n	8005d90 <USB_EPStartXfer+0x448>
 8005d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	029b      	lsls	r3, r3, #10
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	4313      	orrs	r3, r2
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	e056      	b.n	8005e62 <USB_EPStartXfer+0x51a>
 8005db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <USB_EPStartXfer+0x48a>
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	e047      	b.n	8005e62 <USB_EPStartXfer+0x51a>
 8005dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <USB_EPStartXfer+0x4aa>
 8005de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dec:	3301      	adds	r3, #1
 8005dee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	029b      	lsls	r3, r3, #10
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	4313      	orrs	r3, r2
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	e02a      	b.n	8005e62 <USB_EPStartXfer+0x51a>
 8005e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d122      	bne.n	8005e62 <USB_EPStartXfer+0x51a>
 8005e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	623b      	str	r3, [r7, #32]
 8005e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	623b      	str	r3, [r7, #32]
 8005e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	011a      	lsls	r2, r3, #4
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	4413      	add	r3, r2
 8005e52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	891b      	ldrh	r3, [r3, #8]
 8005e6e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6959      	ldr	r1, [r3, #20]
 8005e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e88:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e8c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e90:	6800      	ldr	r0, [r0, #0]
 8005e92:	f001 fa48 	bl	8007326 <USB_WritePMA>
 8005e96:	e3ee      	b.n	8006676 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d177      	bne.n	8005f98 <USB_EPStartXfer+0x650>
 8005ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ec8:	4413      	add	r3, r2
 8005eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	011a      	lsls	r2, r3, #4
 8005eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ee2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005efa:	d921      	bls.n	8005f40 <USB_EPStartXfer+0x5f8>
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d104      	bne.n	8005f1c <USB_EPStartXfer+0x5d4>
 8005f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f16:	3b01      	subs	r3, #1
 8005f18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	029b      	lsls	r3, r3, #10
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e056      	b.n	8005fee <USB_EPStartXfer+0x6a6>
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <USB_EPStartXfer+0x616>
 8005f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	e047      	b.n	8005fee <USB_EPStartXfer+0x6a6>
 8005f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <USB_EPStartXfer+0x636>
 8005f74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f78:	3301      	adds	r3, #1
 8005f7a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	029b      	lsls	r3, r3, #10
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	e02a      	b.n	8005fee <USB_EPStartXfer+0x6a6>
 8005f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d122      	bne.n	8005fee <USB_EPStartXfer+0x6a6>
 8005fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc8:	4413      	add	r3, r2
 8005fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	011a      	lsls	r2, r3, #4
 8005fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fdc:	4413      	add	r3, r2
 8005fde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	891b      	ldrh	r3, [r3, #8]
 8005ffa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6959      	ldr	r1, [r3, #20]
 800600a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600e:	b29b      	uxth	r3, r3
 8006010:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006014:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006018:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800601c:	6800      	ldr	r0, [r0, #0]
 800601e:	f001 f982 	bl	8007326 <USB_WritePMA>
            ep->xfer_buff += len;
 8006022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695a      	ldr	r2, [r3, #20]
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006032:	441a      	add	r2, r3
 8006034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	429a      	cmp	r2, r3
 800605a:	d90f      	bls.n	800607c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800605c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a1a      	ldr	r2, [r3, #32]
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	1ad2      	subs	r2, r2, r3
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	621a      	str	r2, [r3, #32]
 800607a:	e00e      	b.n	800609a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800607c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800608c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2200      	movs	r2, #0
 8006098:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800609a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80060a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d177      	bne.n	80061a6 <USB_EPStartXfer+0x85e>
 80060b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d6:	4413      	add	r3, r2
 80060d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	011a      	lsls	r2, r3, #4
 80060e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ea:	4413      	add	r3, r2
 80060ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006106:	2b3e      	cmp	r3, #62	@ 0x3e
 8006108:	d921      	bls.n	800614e <USB_EPStartXfer+0x806>
 800610a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <USB_EPStartXfer+0x7e2>
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006124:	3b01      	subs	r3, #1
 8006126:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800612a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29a      	uxth	r2, r3
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006134:	b29b      	uxth	r3, r3
 8006136:	029b      	lsls	r3, r3, #10
 8006138:	b29b      	uxth	r3, r3
 800613a:	4313      	orrs	r3, r2
 800613c:	b29b      	uxth	r3, r3
 800613e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006146:	b29a      	uxth	r2, r3
 8006148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	e050      	b.n	80061f0 <USB_EPStartXfer+0x8a8>
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <USB_EPStartXfer+0x824>
 8006156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006164:	b29a      	uxth	r2, r3
 8006166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	e041      	b.n	80061f0 <USB_EPStartXfer+0x8a8>
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006170:	085b      	lsrs	r3, r3, #1
 8006172:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <USB_EPStartXfer+0x844>
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006186:	3301      	adds	r3, #1
 8006188:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800618c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29a      	uxth	r2, r3
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006196:	b29b      	uxth	r3, r3
 8006198:	029b      	lsls	r3, r3, #10
 800619a:	b29b      	uxth	r3, r3
 800619c:	4313      	orrs	r3, r2
 800619e:	b29a      	uxth	r2, r3
 80061a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	e024      	b.n	80061f0 <USB_EPStartXfer+0x8a8>
 80061a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	785b      	ldrb	r3, [r3, #1]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d11c      	bne.n	80061f0 <USB_EPStartXfer+0x8a8>
 80061b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ca:	4413      	add	r3, r2
 80061cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80061ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	011a      	lsls	r2, r3, #4
 80061dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061de:	4413      	add	r3, r2
 80061e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80061f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	895b      	ldrh	r3, [r3, #10]
 80061fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6959      	ldr	r1, [r3, #20]
 800620c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006210:	b29b      	uxth	r3, r3
 8006212:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006216:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800621a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800621e:	6800      	ldr	r0, [r0, #0]
 8006220:	f001 f881 	bl	8007326 <USB_WritePMA>
 8006224:	e227      	b.n	8006676 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800627e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800628a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800628e:	b29b      	uxth	r3, r3
 8006290:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800629e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062b2:	4413      	add	r3, r2
 80062b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	011a      	lsls	r2, r3, #4
 80062c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062c6:	4413      	add	r3, r2
 80062c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80062d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	891b      	ldrh	r3, [r3, #8]
 80062e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6959      	ldr	r1, [r3, #20]
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062fe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006302:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006306:	6800      	ldr	r0, [r0, #0]
 8006308:	f001 f80d 	bl	8007326 <USB_WritePMA>
 800630c:	e1b3      	b.n	8006676 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800630e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6a1a      	ldr	r2, [r3, #32]
 800631a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800632c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006330:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80c6 	beq.w	80064e0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d177      	bne.n	8006460 <USB_EPStartXfer+0xb18>
 8006370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800637c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006380:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800638a:	b29b      	uxth	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006390:	4413      	add	r3, r2
 8006392:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	011a      	lsls	r2, r3, #4
 80063a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063a4:	4413      	add	r3, r2
 80063a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80063ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80063c2:	d921      	bls.n	8006408 <USB_EPStartXfer+0xac0>
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <USB_EPStartXfer+0xa9c>
 80063da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063de:	3b01      	subs	r3, #1
 80063e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4313      	orrs	r3, r2
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006400:	b29a      	uxth	r2, r3
 8006402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	e050      	b.n	80064aa <USB_EPStartXfer+0xb62>
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <USB_EPStartXfer+0xade>
 8006410:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641e:	b29a      	uxth	r2, r3
 8006420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e041      	b.n	80064aa <USB_EPStartXfer+0xb62>
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <USB_EPStartXfer+0xafe>
 800643c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006440:	3301      	adds	r3, #1
 8006442:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006446:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29a      	uxth	r2, r3
 800644c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006450:	b29b      	uxth	r3, r3
 8006452:	029b      	lsls	r3, r3, #10
 8006454:	b29b      	uxth	r3, r3
 8006456:	4313      	orrs	r3, r2
 8006458:	b29a      	uxth	r2, r3
 800645a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800645c:	801a      	strh	r2, [r3, #0]
 800645e:	e024      	b.n	80064aa <USB_EPStartXfer+0xb62>
 8006460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d11c      	bne.n	80064aa <USB_EPStartXfer+0xb62>
 8006470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006474:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800647e:	b29b      	uxth	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006484:	4413      	add	r3, r2
 8006486:	673b      	str	r3, [r7, #112]	@ 0x70
 8006488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	011a      	lsls	r2, r3, #4
 8006496:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006498:	4413      	add	r3, r2
 800649a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800649e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80064aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	895b      	ldrh	r3, [r3, #10]
 80064b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6959      	ldr	r1, [r3, #20]
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80064d8:	6800      	ldr	r0, [r0, #0]
 80064da:	f000 ff24 	bl	8007326 <USB_WritePMA>
 80064de:	e0ca      	b.n	8006676 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d177      	bne.n	80065e0 <USB_EPStartXfer+0xc98>
 80064f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006500:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800650a:	b29b      	uxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006510:	4413      	add	r3, r2
 8006512:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	011a      	lsls	r2, r3, #4
 8006522:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006524:	4413      	add	r3, r2
 8006526:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800652a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800652c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006536:	b29a      	uxth	r2, r3
 8006538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	2b3e      	cmp	r3, #62	@ 0x3e
 8006542:	d921      	bls.n	8006588 <USB_EPStartXfer+0xc40>
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800654e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <USB_EPStartXfer+0xc1c>
 800655a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800655e:	3b01      	subs	r3, #1
 8006560:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29a      	uxth	r2, r3
 800656a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800656e:	b29b      	uxth	r3, r3
 8006570:	029b      	lsls	r3, r3, #10
 8006572:	b29b      	uxth	r3, r3
 8006574:	4313      	orrs	r3, r2
 8006576:	b29b      	uxth	r3, r3
 8006578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006580:	b29a      	uxth	r2, r3
 8006582:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	e05c      	b.n	8006642 <USB_EPStartXfer+0xcfa>
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <USB_EPStartXfer+0xc5e>
 8006590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659e:	b29a      	uxth	r2, r3
 80065a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e04d      	b.n	8006642 <USB_EPStartXfer+0xcfa>
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <USB_EPStartXfer+0xc7e>
 80065bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80065c0:	3301      	adds	r3, #1
 80065c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	029b      	lsls	r3, r3, #10
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	4313      	orrs	r3, r2
 80065d8:	b29a      	uxth	r2, r3
 80065da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	e030      	b.n	8006642 <USB_EPStartXfer+0xcfa>
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d128      	bne.n	8006642 <USB_EPStartXfer+0xcfa>
 80065f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800660c:	b29b      	uxth	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006614:	4413      	add	r3, r2
 8006616:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800661a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	011a      	lsls	r2, r3, #4
 8006628:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800662c:	4413      	add	r3, r2
 800662e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006632:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663a:	b29a      	uxth	r2, r3
 800663c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006640:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	891b      	ldrh	r3, [r3, #8]
 800664e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6959      	ldr	r1, [r3, #20]
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006662:	b29b      	uxth	r3, r3
 8006664:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006668:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800666c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006670:	6800      	ldr	r0, [r0, #0]
 8006672:	f000 fe58 	bl	8007326 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800669c:	817b      	strh	r3, [r7, #10]
 800669e:	897b      	ldrh	r3, [r7, #10]
 80066a0:	f083 0310 	eor.w	r3, r3, #16
 80066a4:	817b      	strh	r3, [r7, #10]
 80066a6:	897b      	ldrh	r3, [r7, #10]
 80066a8:	f083 0320 	eor.w	r3, r3, #32
 80066ac:	817b      	strh	r3, [r7, #10]
 80066ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	897b      	ldrh	r3, [r7, #10]
 80066ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]
 80066de:	f000 bcde 	b.w	800709e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	7b1b      	ldrb	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 80bb 	bne.w	800686a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80066f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699a      	ldr	r2, [r3, #24]
 8006700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	429a      	cmp	r2, r3
 800670e:	d917      	bls.n	8006740 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006730:	1ad2      	subs	r2, r2, r3
 8006732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	619a      	str	r2, [r3, #24]
 800673e:	e00e      	b.n	800675e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2200      	movs	r2, #0
 800675c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800675e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006762:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800676c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800677a:	b29b      	uxth	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006782:	4413      	add	r3, r2
 8006784:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	011a      	lsls	r2, r3, #4
 8006796:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800679a:	4413      	add	r3, r2
 800679c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80067be:	d924      	bls.n	800680a <USB_EPStartXfer+0xec2>
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <USB_EPStartXfer+0xe98>
 80067d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067da:	3b01      	subs	r3, #1
 80067dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	029b      	lsls	r3, r3, #10
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	4313      	orrs	r3, r2
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fe:	b29a      	uxth	r2, r3
 8006800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006804:	801a      	strh	r2, [r3, #0]
 8006806:	f000 bc10 	b.w	800702a <USB_EPStartXfer+0x16e2>
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10c      	bne.n	800682c <USB_EPStartXfer+0xee4>
 8006812:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e3fe      	b.n	800702a <USB_EPStartXfer+0x16e2>
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <USB_EPStartXfer+0xf04>
 8006842:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006846:	3301      	adds	r3, #1
 8006848:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800684c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29a      	uxth	r2, r3
 8006854:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006858:	b29b      	uxth	r3, r3
 800685a:	029b      	lsls	r3, r3, #10
 800685c:	b29b      	uxth	r3, r3
 800685e:	4313      	orrs	r3, r2
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e3df      	b.n	800702a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800686a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	78db      	ldrb	r3, [r3, #3]
 8006876:	2b02      	cmp	r3, #2
 8006878:	f040 8218 	bne.w	8006cac <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800687c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f040 809d 	bne.w	80069c8 <USB_EPStartXfer+0x1080>
 800688e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800689c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	461a      	mov	r2, r3
 80068ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068b2:	4413      	add	r3, r2
 80068b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	011a      	lsls	r2, r3, #4
 80068c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068ca:	4413      	add	r3, r2
 80068cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80068f6:	d92b      	bls.n	8006950 <USB_EPStartXfer+0x1008>
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <USB_EPStartXfer+0xfe0>
 800691e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006922:	3b01      	subs	r3, #1
 8006924:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29a      	uxth	r2, r3
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006934:	b29b      	uxth	r3, r3
 8006936:	029b      	lsls	r3, r3, #10
 8006938:	b29b      	uxth	r3, r3
 800693a:	4313      	orrs	r3, r2
 800693c:	b29b      	uxth	r3, r3
 800693e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006946:	b29a      	uxth	r2, r3
 8006948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e070      	b.n	8006a32 <USB_EPStartXfer+0x10ea>
 8006950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10c      	bne.n	800697a <USB_EPStartXfer+0x1032>
 8006960:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006970:	b29a      	uxth	r2, r3
 8006972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e05b      	b.n	8006a32 <USB_EPStartXfer+0x10ea>
 800697a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800698c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <USB_EPStartXfer+0x1062>
 80069a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a4:	3301      	adds	r3, #1
 80069a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	029b      	lsls	r3, r3, #10
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	4313      	orrs	r3, r2
 80069be:	b29a      	uxth	r2, r3
 80069c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	e034      	b.n	8006a32 <USB_EPStartXfer+0x10ea>
 80069c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d12c      	bne.n	8006a32 <USB_EPStartXfer+0x10ea>
 80069d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069fc:	4413      	add	r3, r2
 80069fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	011a      	lsls	r2, r3, #4
 8006a10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f040 809d 	bne.w	8006b8c <USB_EPStartXfer+0x1244>
 8006a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a76:	4413      	add	r3, r2
 8006a78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	011a      	lsls	r2, r3, #4
 8006a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a8e:	4413      	add	r3, r2
 8006a90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006aba:	d92b      	bls.n	8006b14 <USB_EPStartXfer+0x11cc>
 8006abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	095b      	lsrs	r3, r3, #5
 8006aca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <USB_EPStartXfer+0x11a4>
 8006ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	029b      	lsls	r3, r3, #10
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4313      	orrs	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b10:	801a      	strh	r2, [r3, #0]
 8006b12:	e069      	b.n	8006be8 <USB_EPStartXfer+0x12a0>
 8006b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10c      	bne.n	8006b3e <USB_EPStartXfer+0x11f6>
 8006b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e054      	b.n	8006be8 <USB_EPStartXfer+0x12a0>
 8006b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d004      	beq.n	8006b6e <USB_EPStartXfer+0x1226>
 8006b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b68:	3301      	adds	r3, #1
 8006b6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	029b      	lsls	r3, r3, #10
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4313      	orrs	r3, r2
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b88:	801a      	strh	r2, [r3, #0]
 8006b8a:	e02d      	b.n	8006be8 <USB_EPStartXfer+0x12a0>
 8006b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	785b      	ldrb	r3, [r3, #1]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d125      	bne.n	8006be8 <USB_EPStartXfer+0x12a0>
 8006b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	011a      	lsls	r2, r3, #4
 8006bc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006bca:	4413      	add	r3, r2
 8006bcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006be6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 8218 	beq.w	800702a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <USB_EPStartXfer+0x12ea>
 8006c26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10d      	bne.n	8006c4e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f040 81f5 	bne.w	800702a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c40:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f040 81ee 	bne.w	800702a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c74:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	441a      	add	r2, r3
 8006c92:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	8013      	strh	r3, [r2, #0]
 8006caa:	e1be      	b.n	800702a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	78db      	ldrb	r3, [r3, #3]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	f040 81b4 	bne.w	8007026 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d917      	bls.n	8006d0a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfa:	1ad2      	subs	r2, r2, r3
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	619a      	str	r2, [r3, #24]
 8006d08:	e00e      	b.n	8006d28 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2200      	movs	r2, #0
 8006d26:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f040 8085 	bne.w	8006e44 <USB_EPStartXfer+0x14fc>
 8006d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d5e:	4413      	add	r3, r2
 8006d60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	011a      	lsls	r2, r3, #4
 8006d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d76:	4413      	add	r3, r2
 8006d78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d98:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d9a:	d923      	bls.n	8006de4 <USB_EPStartXfer+0x149c>
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d104      	bne.n	8006dbc <USB_EPStartXfer+0x1474>
 8006db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006db6:	3b01      	subs	r3, #1
 8006db8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006dbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	029b      	lsls	r3, r3, #10
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006de0:	801a      	strh	r2, [r3, #0]
 8006de2:	e060      	b.n	8006ea6 <USB_EPStartXfer+0x155e>
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10c      	bne.n	8006e06 <USB_EPStartXfer+0x14be>
 8006dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	e04f      	b.n	8006ea6 <USB_EPStartXfer+0x155e>
 8006e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0a:	085b      	lsrs	r3, r3, #1
 8006e0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <USB_EPStartXfer+0x14de>
 8006e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e20:	3301      	adds	r3, #1
 8006e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	029b      	lsls	r3, r3, #10
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e40:	801a      	strh	r2, [r3, #0]
 8006e42:	e030      	b.n	8006ea6 <USB_EPStartXfer+0x155e>
 8006e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d128      	bne.n	8006ea6 <USB_EPStartXfer+0x155e>
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e78:	4413      	add	r3, r2
 8006e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	011a      	lsls	r2, r3, #4
 8006e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e90:	4413      	add	r3, r2
 8006e92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006ea4:	801a      	strh	r2, [r3, #0]
 8006ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	785b      	ldrb	r3, [r3, #1]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f040 8085 	bne.w	8006fd0 <USB_EPStartXfer+0x1688>
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006eea:	4413      	add	r3, r2
 8006eec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	011a      	lsls	r2, r3, #4
 8006efe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f02:	4413      	add	r3, r2
 8006f04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f1e:	801a      	strh	r2, [r3, #0]
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f24:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f26:	d923      	bls.n	8006f70 <USB_EPStartXfer+0x1628>
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	f003 031f 	and.w	r3, r3, #31
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <USB_EPStartXfer+0x1600>
 8006f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f42:	3b01      	subs	r3, #1
 8006f44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	029b      	lsls	r3, r3, #10
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	e05c      	b.n	800702a <USB_EPStartXfer+0x16e2>
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10c      	bne.n	8006f92 <USB_EPStartXfer+0x164a>
 8006f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	e04b      	b.n	800702a <USB_EPStartXfer+0x16e2>
 8006f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <USB_EPStartXfer+0x166a>
 8006fa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fac:	3301      	adds	r3, #1
 8006fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	029b      	lsls	r3, r3, #10
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fcc:	801a      	strh	r2, [r3, #0]
 8006fce:	e02c      	b.n	800702a <USB_EPStartXfer+0x16e2>
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	785b      	ldrb	r3, [r3, #1]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d124      	bne.n	800702a <USB_EPStartXfer+0x16e2>
 8006fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	011a      	lsls	r2, r3, #4
 800700a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800700e:	4413      	add	r3, r2
 8007010:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007014:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	e001      	b.n	800702a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e03a      	b.n	80070a0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800702a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b29b      	uxth	r3, r3
 8007048:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800704c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007050:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007054:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007058:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800705c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007060:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007064:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007068:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800706c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	441a      	add	r2, r3
 8007086:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800708a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800708e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709a:	b29b      	uxth	r3, r3
 800709c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d020      	beq.n	80070fe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070d2:	81bb      	strh	r3, [r7, #12]
 80070d4:	89bb      	ldrh	r3, [r7, #12]
 80070d6:	f083 0310 	eor.w	r3, r3, #16
 80070da:	81bb      	strh	r3, [r7, #12]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	89bb      	ldrh	r3, [r7, #12]
 80070e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	8013      	strh	r3, [r2, #0]
 80070fc:	e01f      	b.n	800713e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007114:	81fb      	strh	r3, [r7, #14]
 8007116:	89fb      	ldrh	r3, [r7, #14]
 8007118:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800711c:	81fb      	strh	r3, [r7, #14]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	441a      	add	r2, r3
 8007128:	89fb      	ldrh	r3, [r7, #14]
 800712a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800712e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713a:	b29b      	uxth	r3, r3
 800713c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr

0800714a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800714a:	b480      	push	{r7}
 800714c:	b087      	sub	sp, #28
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	7b1b      	ldrb	r3, [r3, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 809d 	bne.w	8007298 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d04c      	beq.n	8007200 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	823b      	strh	r3, [r7, #16]
 8007174:	8a3b      	ldrh	r3, [r7, #16]
 8007176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d01b      	beq.n	80071b6 <USB_EPClearStall+0x6c>
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007194:	81fb      	strh	r3, [r7, #14]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	441a      	add	r2, r3
 80071a0:	89fb      	ldrh	r3, [r7, #14]
 80071a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	78db      	ldrb	r3, [r3, #3]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d06c      	beq.n	8007298 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071d4:	81bb      	strh	r3, [r7, #12]
 80071d6:	89bb      	ldrh	r3, [r7, #12]
 80071d8:	f083 0320 	eor.w	r3, r3, #32
 80071dc:	81bb      	strh	r3, [r7, #12]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	441a      	add	r2, r3
 80071e8:	89bb      	ldrh	r3, [r7, #12]
 80071ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	8013      	strh	r3, [r2, #0]
 80071fe:	e04b      	b.n	8007298 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	82fb      	strh	r3, [r7, #22]
 800720e:	8afb      	ldrh	r3, [r7, #22]
 8007210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01b      	beq.n	8007250 <USB_EPClearStall+0x106>
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800722a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722e:	82bb      	strh	r3, [r7, #20]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	8abb      	ldrh	r3, [r7, #20]
 800723c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800724c:	b29b      	uxth	r3, r3
 800724e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007266:	827b      	strh	r3, [r7, #18]
 8007268:	8a7b      	ldrh	r3, [r7, #18]
 800726a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800726e:	827b      	strh	r3, [r7, #18]
 8007270:	8a7b      	ldrh	r3, [r7, #18]
 8007272:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007276:	827b      	strh	r3, [r7, #18]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	441a      	add	r2, r3
 8007282:	8a7b      	ldrh	r3, [r7, #18]
 8007284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800728c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007294:	b29b      	uxth	r3, r3
 8007296:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr

080072a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d103      	bne.n	80072be <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2280      	movs	r2, #128	@ 0x80
 80072ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr

080072ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	bc80      	pop	{r7}
 80072dc:	4770      	bx	lr

080072de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bc80      	pop	{r7}
 80072f0:	4770      	bx	lr

080072f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b085      	sub	sp, #20
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007300:	b29b      	uxth	r3, r3
 8007302:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007304:	68fb      	ldr	r3, [r7, #12]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr

08007310 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr

08007326 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007326:	b480      	push	{r7}
 8007328:	b08b      	sub	sp, #44	@ 0x2c
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	4611      	mov	r1, r2
 8007332:	461a      	mov	r2, r3
 8007334:	460b      	mov	r3, r1
 8007336:	80fb      	strh	r3, [r7, #6]
 8007338:	4613      	mov	r3, r2
 800733a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800733c:	88bb      	ldrh	r3, [r7, #4]
 800733e:	3301      	adds	r3, #1
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	005a      	lsls	r2, r3, #1
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007358:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24
 800735e:	e01e      	b.n	800739e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	3301      	adds	r3, #1
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	b21a      	sxth	r2, r3
 8007370:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007374:	4313      	orrs	r3, r2
 8007376:	b21b      	sxth	r3, r3
 8007378:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	8a7a      	ldrh	r2, [r7, #18]
 800737e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	3302      	adds	r3, #2
 8007384:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	3302      	adds	r3, #2
 800738a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	3301      	adds	r3, #1
 8007390:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	3301      	adds	r3, #1
 8007396:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	3b01      	subs	r3, #1
 800739c:	627b      	str	r3, [r7, #36]	@ 0x24
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1dd      	bne.n	8007360 <USB_WritePMA+0x3a>
  }
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	372c      	adds	r7, #44	@ 0x2c
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b08b      	sub	sp, #44	@ 0x2c
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4611      	mov	r1, r2
 80073bc:	461a      	mov	r2, r3
 80073be:	460b      	mov	r3, r1
 80073c0:	80fb      	strh	r3, [r7, #6]
 80073c2:	4613      	mov	r3, r2
 80073c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80073c6:	88bb      	ldrh	r3, [r7, #4]
 80073c8:	085b      	lsrs	r3, r3, #1
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	005a      	lsls	r2, r3, #1
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073e2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80073e8:	e01b      	b.n	8007422 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	3302      	adds	r3, #2
 80073f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	3301      	adds	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	0a1b      	lsrs	r3, r3, #8
 800740a:	b2da      	uxtb	r2, r3
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	3301      	adds	r3, #1
 8007414:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	3302      	adds	r3, #2
 800741a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	3b01      	subs	r3, #1
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e0      	bne.n	80073ea <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007428:	88bb      	ldrh	r3, [r7, #4]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	b29b      	uxth	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	b2da      	uxtb	r2, r3
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	701a      	strb	r2, [r3, #0]
  }
}
 8007444:	bf00      	nop
 8007446:	372c      	adds	r7, #44	@ 0x2c
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr
	...

08007450 <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]

  USBD_LL_OpenEP(pdev,
 8007460:	2340      	movs	r3, #64	@ 0x40
 8007462:	2202      	movs	r2, #2
 8007464:	2181      	movs	r1, #129	@ 0x81
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fc49 	bl	8008cfe <USBD_LL_OpenEP>
                 MIDI_EPIN_ADDR,
                 USBD_EP_TYPE_BULK,
                 MIDI_EPIN_SIZE);

  USBD_LL_OpenEP(pdev,
 800746c:	2340      	movs	r3, #64	@ 0x40
 800746e:	2202      	movs	r2, #2
 8007470:	2101      	movs	r1, #1
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fc43 	bl	8008cfe <USBD_LL_OpenEP>
               MIDI_EPOUT_ADDR,
               USBD_EP_TYPE_BULK,
               MIDI_EPOUT_SIZE);

  USBD_LL_PrepareReceive(pdev,
 8007478:	2340      	movs	r3, #64	@ 0x40
 800747a:	4a0f      	ldr	r2, [pc, #60]	@ (80074b8 <USBD_MIDI_Init+0x68>)
 800747c:	2101      	movs	r1, #1
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fd2d 	bl	8008ede <USBD_LL_PrepareReceive>
               MIDI_EPOUT_ADDR,
               usb_rx_buffer,
               MIDI_EPOUT_SIZE);

  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 8007484:	2010      	movs	r0, #16
 8007486:	f001 fd4d 	bl	8008f24 <USBD_static_malloc>
 800748a:	4602      	mov	r2, r0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if(pdev->pClassData == NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007498:	2b00      	cmp	r3, #0
 800749a:	d102      	bne.n	80074a2 <USBD_MIDI_Init+0x52>
  {
    ret = 1;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
 80074a0:	e004      	b.n	80074ac <USBD_MIDI_Init+0x5c>
  }
  else
  {
    ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a8:	2200      	movs	r2, #0
 80074aa:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000288 	.word	0x20000288

080074bc <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  /* Close MIDI EPs */
  USBD_LL_CloseEP(pdev, MIDI_EPIN_SIZE);
 80074c8:	2140      	movs	r1, #64	@ 0x40
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 fc3d 	bl	8008d4a <USBD_LL_CloseEP>

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <USBD_MIDI_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fd2b 	bl	8008f3c <USBD_static_free>
    pdev->pClassData = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 8007506:	2300      	movs	r3, #0
 8007508:	613b      	str	r3, [r7, #16]
  USBD_MIDI_HandleTypeDef     *hmidi = pdev->pClassData;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007510:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800751a:	2b00      	cmp	r3, #0
 800751c:	d044      	beq.n	80075a8 <USBD_MIDI_Setup+0xb0>
 800751e:	2b20      	cmp	r3, #32
 8007520:	d171      	bne.n	8007606 <USBD_MIDI_Setup+0x10e>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	3b02      	subs	r3, #2
 8007528:	2b09      	cmp	r3, #9
 800752a:	d836      	bhi.n	800759a <USBD_MIDI_Setup+0xa2>
 800752c:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <USBD_MIDI_Setup+0x3c>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	0800758b 	.word	0x0800758b
 8007538:	0800756b 	.word	0x0800756b
 800753c:	0800759b 	.word	0x0800759b
 8007540:	0800759b 	.word	0x0800759b
 8007544:	0800759b 	.word	0x0800759b
 8007548:	0800759b 	.word	0x0800759b
 800754c:	0800759b 	.word	0x0800759b
 8007550:	0800759b 	.word	0x0800759b
 8007554:	08007579 	.word	0x08007579
 8007558:	0800755d 	.word	0x0800755d
    {
      case MIDI_REQ_SET_PROTOCOL:
        hmidi->Protocol = (uint8_t)(req->wValue);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	885b      	ldrh	r3, [r3, #2]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	461a      	mov	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	601a      	str	r2, [r3, #0]
        break;
 8007568:	e01d      	b.n	80075a6 <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_PROTOCOL:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->Protocol,
 800756a:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 800756c:	2201      	movs	r2, #1
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 f8fd 	bl	8008770 <USBD_CtlSendData>
                          1);
        break;
 8007576:	e016      	b.n	80075a6 <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_SET_IDLE:
        hmidi->IdleState = (uint8_t)(req->wValue >> 8);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	885b      	ldrh	r3, [r3, #2]
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	b29b      	uxth	r3, r3
 8007580:	b2db      	uxtb	r3, r3
 8007582:	461a      	mov	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	605a      	str	r2, [r3, #4]
        break;
 8007588:	e00d      	b.n	80075a6 <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_IDLE:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->IdleState,
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3304      	adds	r3, #4
        USBD_CtlSendData (pdev,
 800758e:	2201      	movs	r2, #1
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 f8ec 	bl	8008770 <USBD_CtlSendData>
                          1);
        break;
 8007598:	e005      	b.n	80075a6 <USBD_MIDI_Setup+0xae>

      default:
        USBD_CtlError (pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 f87d 	bl	800869c <USBD_CtlError>
        return USBD_FAIL;
 80075a2:	2302      	movs	r3, #2
 80075a4:	e030      	b.n	8007608 <USBD_MIDI_Setup+0x110>
    }
    break;
 80075a6:	e02e      	b.n	8007606 <USBD_MIDI_Setup+0x10e>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	2b0b      	cmp	r3, #11
 80075ae:	d023      	beq.n	80075f8 <USBD_MIDI_Setup+0x100>
 80075b0:	2b0b      	cmp	r3, #11
 80075b2:	dc28      	bgt.n	8007606 <USBD_MIDI_Setup+0x10e>
 80075b4:	2b06      	cmp	r3, #6
 80075b6:	d002      	beq.n	80075be <USBD_MIDI_Setup+0xc6>
 80075b8:	2b0a      	cmp	r3, #10
 80075ba:	d015      	beq.n	80075e8 <USBD_MIDI_Setup+0xf0>
 80075bc:	e023      	b.n	8007606 <USBD_MIDI_Setup+0x10e>
    {
      case USB_REQ_GET_DESCRIPTOR:
        if( req->wValue >> 8 == MIDI_DESCRIPTOR_TYPE)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	885b      	ldrh	r3, [r3, #2]
 80075c2:	0a1b      	lsrs	r3, r3, #8
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b21      	cmp	r3, #33	@ 0x21
 80075c8:	d107      	bne.n	80075da <USBD_MIDI_Setup+0xe2>
        {
          pbuf = USBD_MIDI_CfgDesc + USB_MIDI_CLASS_DESC_SHIFT;
 80075ca:	4b11      	ldr	r3, [pc, #68]	@ (8007610 <USBD_MIDI_Setup+0x118>)
 80075cc:	613b      	str	r3, [r7, #16]
          len = MIN(USB_MIDI_DESC_SIZE , req->wLength);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	88db      	ldrh	r3, [r3, #6]
 80075d2:	2b07      	cmp	r3, #7
 80075d4:	bf28      	it	cs
 80075d6:	2307      	movcs	r3, #7
 80075d8:	82fb      	strh	r3, [r7, #22]
        }

        USBD_CtlSendData (pdev, pbuf, len);
 80075da:	8afb      	ldrh	r3, [r7, #22]
 80075dc:	461a      	mov	r2, r3
 80075de:	6939      	ldr	r1, [r7, #16]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 f8c5 	bl	8008770 <USBD_CtlSendData>
        break;
 80075e6:	e00e      	b.n	8007606 <USBD_MIDI_Setup+0x10e>

      case USB_REQ_GET_INTERFACE :
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->AltSetting,
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3308      	adds	r3, #8
        USBD_CtlSendData (pdev,
 80075ec:	2201      	movs	r2, #1
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 f8bd 	bl	8008770 <USBD_CtlSendData>
                          1);
        break;
 80075f6:	e006      	b.n	8007606 <USBD_MIDI_Setup+0x10e>

      case USB_REQ_SET_INTERFACE :
        hmidi->AltSetting = (uint8_t)(req->wValue);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	885b      	ldrh	r3, [r3, #2]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	609a      	str	r2, [r3, #8]
        break;
 8007604:	bf00      	nop
    }
  }
  return USBD_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	2000006a 	.word	0x2000006a

08007614 <USBD_MIDI_GetState>:
  *         Get MIDI State
  * @param  pdev: device instance
  * @retval usb state  (MIDI_IDLE, MIDI_BUSY)
  */
uint8_t USBD_MIDI_GetState(USBD_HandleTypeDef  *pdev)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  return ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007622:	7b1b      	ldrb	r3, [r3, #12]
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr

0800762e <USBD_MIDI_SendPackets>:
  * @retval status
  */
uint8_t USBD_MIDI_SendPackets(USBD_HandleTypeDef  *pdev,
                                 uint8_t *data,
                                 uint16_t len)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b086      	sub	sp, #24
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	4613      	mov	r3, r2
 800763a:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef *hmidi = pdev->pClassData;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007642:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800764a:	2b03      	cmp	r3, #3
 800764c:	d10c      	bne.n	8007668 <USBD_MIDI_SendPackets+0x3a>
  {
    if(hmidi->state == MIDI_IDLE)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	7b1b      	ldrb	r3, [r3, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d108      	bne.n	8007668 <USBD_MIDI_SendPackets+0x3a>
    {
      hmidi->state = MIDI_BUSY;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2201      	movs	r2, #1
 800765a:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev, MIDI_EPIN_ADDR, data, len);
 800765c:	88fb      	ldrh	r3, [r7, #6]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	2181      	movs	r1, #129	@ 0x81
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f001 fc18 	bl	8008e98 <USBD_LL_Transmit>
    }
  }
  return USBD_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2253      	movs	r2, #83	@ 0x53
 8007680:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8007682:	4b03      	ldr	r3, [pc, #12]	@ (8007690 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	20000058 	.word	0x20000058

08007694 <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076a6:	2200      	movs	r2, #0
 80076a8:	731a      	strb	r2, [r3, #12]

  USBD_MIDI_OnPacketsSent();
 80076aa:	f000 f805 	bl	80076b8 <USBD_MIDI_OnPacketsSent>

  return USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_MIDI_OnPacketsSent>:
/**
  * @brief  USBD_MIDI_OnPacketsSent
  *         on usb midi packets sent to the host callback
  */
__weak extern void USBD_MIDI_OnPacketsSent(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
}
 80076bc:	bf00      	nop
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr

080076c4 <USBD_MIDI_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  uint8_t len;

  if (epnum != (MIDI_EPOUT_ADDR & 0x0F)) return USBD_FAIL;
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d001      	beq.n	80076da <USBD_MIDI_DataOut+0x16>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e015      	b.n	8007706 <USBD_MIDI_DataOut+0x42>

  len = (uint8_t)HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, epnum);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fa ffa0 	bl	800262a <HAL_PCD_EP_GetRxCount>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]

  USBD_MIDI_OnPacketsReceived(usb_rx_buffer, len);
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	4619      	mov	r1, r3
 80076f2:	4807      	ldr	r0, [pc, #28]	@ (8007710 <USBD_MIDI_DataOut+0x4c>)
 80076f4:	f000 f80e 	bl	8007714 <USBD_MIDI_OnPacketsReceived>

  USBD_LL_PrepareReceive(pdev, MIDI_EPOUT_ADDR, usb_rx_buffer, MIDI_EPOUT_SIZE);
 80076f8:	2340      	movs	r3, #64	@ 0x40
 80076fa:	4a05      	ldr	r2, [pc, #20]	@ (8007710 <USBD_MIDI_DataOut+0x4c>)
 80076fc:	2101      	movs	r1, #1
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 fbed 	bl	8008ede <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000288 	.word	0x20000288

08007714 <USBD_MIDI_OnPacketsReceived>:
  *         on usb midi packets received from the host callback
  * @param  data: pointer to the data packet
  * @param  len: size of the data
  */
__weak extern void USBD_MIDI_OnPacketsReceived(uint8_t *data, uint8_t len)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  UNUSED(data);
  UNUSED(len);
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	bc80      	pop	{r7}
 8007728:	4770      	bx	lr
	...

0800772c <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	220a      	movs	r2, #10
 8007738:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 800773a:	4b03      	ldr	r3, [pc, #12]	@ (8007748 <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	200000ac 	.word	0x200000ac

0800774c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007760:	2302      	movs	r3, #2
 8007762:	e01a      	b.n	800779a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	79fa      	ldrb	r2, [r7, #7]
 8007790:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f001 fa48 	bl	8008c28 <USBD_LL_Init>

  return USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d006      	beq.n	80077c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
 80077c2:	e001      	b.n	80077c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80077c4:	2302      	movs	r3, #2
 80077c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 fa73 	bl	8008cc8 <USBD_LL_Start>

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bc80      	pop	{r7}
 80077fe:	4770      	bx	lr

08007800 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800780c:	2302      	movs	r3, #2
 800780e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00c      	beq.n	8007834 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	4611      	mov	r1, r2
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007834:	7bfb      	ldrb	r3, [r7, #15]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	460b      	mov	r3, r1
 8007848:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	4611      	mov	r1, r2
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3

  return USBD_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fed7 	bl	800862a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800788a:	461a      	mov	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007898:	f003 031f 	and.w	r3, r3, #31
 800789c:	2b02      	cmp	r3, #2
 800789e:	d016      	beq.n	80078ce <USBD_LL_SetupStage+0x6a>
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d81c      	bhi.n	80078de <USBD_LL_SetupStage+0x7a>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <USBD_LL_SetupStage+0x4a>
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d008      	beq.n	80078be <USBD_LL_SetupStage+0x5a>
 80078ac:	e017      	b.n	80078de <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9ca 	bl	8007c50 <USBD_StdDevReq>
      break;
 80078bc:	e01a      	b.n	80078f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa2c 	bl	8007d24 <USBD_StdItfReq>
      break;
 80078cc:	e012      	b.n	80078f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fa6c 	bl	8007db4 <USBD_StdEPReq>
      break;
 80078dc:	e00a      	b.n	80078f4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80078e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 fa4b 	bl	8008d88 <USBD_LL_StallEP>
      break;
 80078f2:	bf00      	nop
  }

  return USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b086      	sub	sp, #24
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	460b      	mov	r3, r1
 8007908:	607a      	str	r2, [r7, #4]
 800790a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d14b      	bne.n	80079aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007918:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007920:	2b03      	cmp	r3, #3
 8007922:	d134      	bne.n	800798e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	429a      	cmp	r2, r3
 800792e:	d919      	bls.n	8007964 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	1ad2      	subs	r2, r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007946:	429a      	cmp	r2, r3
 8007948:	d203      	bcs.n	8007952 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800794e:	b29b      	uxth	r3, r3
 8007950:	e002      	b.n	8007958 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007956:	b29b      	uxth	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 ff35 	bl	80087cc <USBD_CtlContinueRx>
 8007962:	e038      	b.n	80079d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007976:	2b03      	cmp	r3, #3
 8007978:	d105      	bne.n	8007986 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 ff32 	bl	80087f0 <USBD_CtlSendStatus>
 800798c:	e023      	b.n	80079d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007994:	2b05      	cmp	r3, #5
 8007996:	d11e      	bne.n	80079d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80079a0:	2100      	movs	r1, #0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f001 f9f0 	bl	8008d88 <USBD_LL_StallEP>
 80079a8:	e015      	b.n	80079d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d108      	bne.n	80079d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	7afa      	ldrb	r2, [r7, #11]
 80079ca:	4611      	mov	r1, r2
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	4798      	blx	r3
 80079d0:	e001      	b.n	80079d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079d2:	2302      	movs	r3, #2
 80079d4:	e000      	b.n	80079d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	460b      	mov	r3, r1
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d17f      	bne.n	8007af4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3314      	adds	r3, #20
 80079f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d15c      	bne.n	8007abe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	68da      	ldr	r2, [r3, #12]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d915      	bls.n	8007a3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	1ad2      	subs	r2, r2, r3
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 febd 	bl	80087a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2200      	movs	r2, #0
 8007a32:	2100      	movs	r1, #0
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f001 fa52 	bl	8008ede <USBD_LL_PrepareReceive>
 8007a3a:	e04e      	b.n	8007ada <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	6912      	ldr	r2, [r2, #16]
 8007a44:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a48:	fb01 f202 	mul.w	r2, r1, r2
 8007a4c:	1a9b      	subs	r3, r3, r2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d11c      	bne.n	8007a8c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d316      	bcc.n	8007a8c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d20f      	bcs.n	8007a8c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2100      	movs	r1, #0
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fe99 	bl	80087a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2200      	movs	r2, #0
 8007a82:	2100      	movs	r1, #0
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f001 fa2a 	bl	8008ede <USBD_LL_PrepareReceive>
 8007a8a:	e026      	b.n	8007ada <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d105      	bne.n	8007aae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007aae:	2180      	movs	r1, #128	@ 0x80
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f001 f969 	bl	8008d88 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fead 	bl	8008816 <USBD_CtlReceiveStatus>
 8007abc:	e00d      	b.n	8007ada <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d004      	beq.n	8007ad2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d103      	bne.n	8007ada <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007ad2:	2180      	movs	r1, #128	@ 0x80
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f001 f957 	bl	8008d88 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d11d      	bne.n	8007b20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff fe81 	bl	80077ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007af2:	e015      	b.n	8007b20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00d      	beq.n	8007b1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d108      	bne.n	8007b1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	7afa      	ldrb	r2, [r7, #11]
 8007b14:	4611      	mov	r1, r2
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	4798      	blx	r3
 8007b1a:	e001      	b.n	8007b20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e000      	b.n	8007b22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b32:	2340      	movs	r3, #64	@ 0x40
 8007b34:	2200      	movs	r2, #0
 8007b36:	2100      	movs	r1, #0
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f8e0 	bl	8008cfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2240      	movs	r2, #64	@ 0x40
 8007b4a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b4e:	2340      	movs	r3, #64	@ 0x40
 8007b50:	2200      	movs	r2, #0
 8007b52:	2180      	movs	r1, #128	@ 0x80
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 f8d2 	bl	8008cfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2240      	movs	r2, #64	@ 0x40
 8007b64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6852      	ldr	r2, [r2, #4]
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
  }

  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bc80      	pop	{r7}
 8007bc8:	4770      	bx	lr

08007bca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2204      	movs	r2, #4
 8007be2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr

08007bf2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d105      	bne.n	8007c10 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr

08007c1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d10b      	bne.n	8007c46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c66:	2b40      	cmp	r3, #64	@ 0x40
 8007c68:	d005      	beq.n	8007c76 <USBD_StdDevReq+0x26>
 8007c6a:	2b40      	cmp	r3, #64	@ 0x40
 8007c6c:	d84f      	bhi.n	8007d0e <USBD_StdDevReq+0xbe>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <USBD_StdDevReq+0x36>
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	d14b      	bne.n	8007d0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
      break;
 8007c84:	e048      	b.n	8007d18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	d839      	bhi.n	8007d02 <USBD_StdDevReq+0xb2>
 8007c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <USBD_StdDevReq+0x44>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007ce5 	.word	0x08007ce5
 8007c98:	08007cf9 	.word	0x08007cf9
 8007c9c:	08007d03 	.word	0x08007d03
 8007ca0:	08007cef 	.word	0x08007cef
 8007ca4:	08007d03 	.word	0x08007d03
 8007ca8:	08007cc7 	.word	0x08007cc7
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007d03 	.word	0x08007d03
 8007cb4:	08007cdb 	.word	0x08007cdb
 8007cb8:	08007cd1 	.word	0x08007cd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f9dc 	bl	800807c <USBD_GetDescriptor>
          break;
 8007cc4:	e022      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fb3f 	bl	800834c <USBD_SetAddress>
          break;
 8007cce:	e01d      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fb7e 	bl	80083d4 <USBD_SetConfig>
          break;
 8007cd8:	e018      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fc07 	bl	80084f0 <USBD_GetConfig>
          break;
 8007ce2:	e013      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fc37 	bl	800855a <USBD_GetStatus>
          break;
 8007cec:	e00e      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fc65 	bl	80085c0 <USBD_SetFeature>
          break;
 8007cf6:	e009      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fc74 	bl	80085e8 <USBD_ClrFeature>
          break;
 8007d00:	e004      	b.n	8007d0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fcc9 	bl	800869c <USBD_CtlError>
          break;
 8007d0a:	bf00      	nop
      }
      break;
 8007d0c:	e004      	b.n	8007d18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fcc3 	bl	800869c <USBD_CtlError>
      break;
 8007d16:	bf00      	nop
  }

  return ret;
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop

08007d24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d3a:	2b40      	cmp	r3, #64	@ 0x40
 8007d3c:	d005      	beq.n	8007d4a <USBD_StdItfReq+0x26>
 8007d3e:	2b40      	cmp	r3, #64	@ 0x40
 8007d40:	d82e      	bhi.n	8007da0 <USBD_StdItfReq+0x7c>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <USBD_StdItfReq+0x26>
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d12a      	bne.n	8007da0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d50:	3b01      	subs	r3, #1
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d81d      	bhi.n	8007d92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	889b      	ldrh	r3, [r3, #4]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d813      	bhi.n	8007d88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	88db      	ldrh	r3, [r3, #6]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d110      	bne.n	8007d9c <USBD_StdItfReq+0x78>
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10d      	bne.n	8007d9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fd35 	bl	80087f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d86:	e009      	b.n	8007d9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fc86 	bl	800869c <USBD_CtlError>
          break;
 8007d90:	e004      	b.n	8007d9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fc81 	bl	800869c <USBD_CtlError>
          break;
 8007d9a:	e000      	b.n	8007d9e <USBD_StdItfReq+0x7a>
          break;
 8007d9c:	bf00      	nop
      }
      break;
 8007d9e:	e004      	b.n	8007daa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fc7a 	bl	800869c <USBD_CtlError>
      break;
 8007da8:	bf00      	nop
  }

  return USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	889b      	ldrh	r3, [r3, #4]
 8007dc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dd0:	2b40      	cmp	r3, #64	@ 0x40
 8007dd2:	d007      	beq.n	8007de4 <USBD_StdEPReq+0x30>
 8007dd4:	2b40      	cmp	r3, #64	@ 0x40
 8007dd6:	f200 8146 	bhi.w	8008066 <USBD_StdEPReq+0x2b2>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <USBD_StdEPReq+0x40>
 8007dde:	2b20      	cmp	r3, #32
 8007de0:	f040 8141 	bne.w	8008066 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
      break;
 8007df2:	e13d      	b.n	8008070 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d10a      	bne.n	8007e16 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	e12d      	b.n	8008072 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	785b      	ldrb	r3, [r3, #1]
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d007      	beq.n	8007e2e <USBD_StdEPReq+0x7a>
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	f300 811b 	bgt.w	800805a <USBD_StdEPReq+0x2a6>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d072      	beq.n	8007f0e <USBD_StdEPReq+0x15a>
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d03a      	beq.n	8007ea2 <USBD_StdEPReq+0xee>
 8007e2c:	e115      	b.n	800805a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d002      	beq.n	8007e3e <USBD_StdEPReq+0x8a>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d015      	beq.n	8007e68 <USBD_StdEPReq+0xb4>
 8007e3c:	e02b      	b.n	8007e96 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00c      	beq.n	8007e5e <USBD_StdEPReq+0xaa>
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b80      	cmp	r3, #128	@ 0x80
 8007e48:	d009      	beq.n	8007e5e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 ff9a 	bl	8008d88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e54:	2180      	movs	r1, #128	@ 0x80
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 ff96 	bl	8008d88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e5c:	e020      	b.n	8007ea0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fc1b 	bl	800869c <USBD_CtlError>
              break;
 8007e66:	e01b      	b.n	8007ea0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	885b      	ldrh	r3, [r3, #2]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10e      	bne.n	8007e8e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <USBD_StdEPReq+0xda>
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b80      	cmp	r3, #128	@ 0x80
 8007e7a:	d008      	beq.n	8007e8e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	88db      	ldrh	r3, [r3, #6]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 ff7d 	bl	8008d88 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fcae 	bl	80087f0 <USBD_CtlSendStatus>

              break;
 8007e94:	e004      	b.n	8007ea0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fbff 	bl	800869c <USBD_CtlError>
              break;
 8007e9e:	bf00      	nop
          }
          break;
 8007ea0:	e0e0      	b.n	8008064 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d002      	beq.n	8007eb2 <USBD_StdEPReq+0xfe>
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d015      	beq.n	8007edc <USBD_StdEPReq+0x128>
 8007eb0:	e026      	b.n	8007f00 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00c      	beq.n	8007ed2 <USBD_StdEPReq+0x11e>
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	2b80      	cmp	r3, #128	@ 0x80
 8007ebc:	d009      	beq.n	8007ed2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 ff60 	bl	8008d88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ec8:	2180      	movs	r1, #128	@ 0x80
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 ff5c 	bl	8008d88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ed0:	e01c      	b.n	8007f0c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fbe1 	bl	800869c <USBD_CtlError>
              break;
 8007eda:	e017      	b.n	8007f0c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	885b      	ldrh	r3, [r3, #2]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d112      	bne.n	8007f0a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 ff67 	bl	8008dc6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fc79 	bl	80087f0 <USBD_CtlSendStatus>
              }
              break;
 8007efe:	e004      	b.n	8007f0a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fbca 	bl	800869c <USBD_CtlError>
              break;
 8007f08:	e000      	b.n	8007f0c <USBD_StdEPReq+0x158>
              break;
 8007f0a:	bf00      	nop
          }
          break;
 8007f0c:	e0aa      	b.n	8008064 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d002      	beq.n	8007f1e <USBD_StdEPReq+0x16a>
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d032      	beq.n	8007f82 <USBD_StdEPReq+0x1ce>
 8007f1c:	e097      	b.n	800804e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <USBD_StdEPReq+0x180>
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b80      	cmp	r3, #128	@ 0x80
 8007f28:	d004      	beq.n	8007f34 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fbb5 	bl	800869c <USBD_CtlError>
                break;
 8007f32:	e091      	b.n	8008058 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da0b      	bge.n	8007f54 <USBD_StdEPReq+0x1a0>
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	3310      	adds	r3, #16
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4413      	add	r3, r2
 8007f50:	3304      	adds	r3, #4
 8007f52:	e00b      	b.n	8007f6c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	4413      	add	r3, r2
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2202      	movs	r2, #2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fbf8 	bl	8008770 <USBD_CtlSendData>
              break;
 8007f80:	e06a      	b.n	8008058 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da11      	bge.n	8007fae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	3318      	adds	r3, #24
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d117      	bne.n	8007fd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fb78 	bl	800869c <USBD_CtlError>
                  break;
 8007fac:	e054      	b.n	8008058 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	f003 020f 	and.w	r2, r3, #15
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d104      	bne.n	8007fd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fb65 	bl	800869c <USBD_CtlError>
                  break;
 8007fd2:	e041      	b.n	8008058 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da0b      	bge.n	8007ff4 <USBD_StdEPReq+0x240>
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	3310      	adds	r3, #16
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	4413      	add	r3, r2
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	e00b      	b.n	800800c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4413      	add	r3, r2
 800800a:	3304      	adds	r3, #4
 800800c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <USBD_StdEPReq+0x266>
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b80      	cmp	r3, #128	@ 0x80
 8008018:	d103      	bne.n	8008022 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	e00e      	b.n	8008040 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 feec 	bl	8008e04 <USBD_LL_IsStallEP>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2201      	movs	r2, #1
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e002      	b.n	8008040 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2202      	movs	r2, #2
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fb92 	bl	8008770 <USBD_CtlSendData>
              break;
 800804c:	e004      	b.n	8008058 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fb23 	bl	800869c <USBD_CtlError>
              break;
 8008056:	bf00      	nop
          }
          break;
 8008058:	e004      	b.n	8008064 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb1d 	bl	800869c <USBD_CtlError>
          break;
 8008062:	bf00      	nop
      }
      break;
 8008064:	e004      	b.n	8008070 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fb17 	bl	800869c <USBD_CtlError>
      break;
 800806e:	bf00      	nop
  }

  return ret;
 8008070:	7bfb      	ldrb	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	885b      	ldrh	r3, [r3, #2]
 8008096:	0a1b      	lsrs	r3, r3, #8
 8008098:	b29b      	uxth	r3, r3
 800809a:	3b01      	subs	r3, #1
 800809c:	2b06      	cmp	r3, #6
 800809e:	f200 8128 	bhi.w	80082f2 <USBD_GetDescriptor+0x276>
 80080a2:	a201      	add	r2, pc, #4	@ (adr r2, 80080a8 <USBD_GetDescriptor+0x2c>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080c5 	.word	0x080080c5
 80080ac:	080080dd 	.word	0x080080dd
 80080b0:	0800811d 	.word	0x0800811d
 80080b4:	080082f3 	.word	0x080082f3
 80080b8:	080082f3 	.word	0x080082f3
 80080bc:	08008293 	.word	0x08008293
 80080c0:	080082bf 	.word	0x080082bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	7c12      	ldrb	r2, [r2, #16]
 80080d0:	f107 0108 	add.w	r1, r7, #8
 80080d4:	4610      	mov	r0, r2
 80080d6:	4798      	blx	r3
 80080d8:	60f8      	str	r0, [r7, #12]
      break;
 80080da:	e112      	b.n	8008302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7c1b      	ldrb	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10d      	bne.n	8008100 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ec:	f107 0208 	add.w	r2, r7, #8
 80080f0:	4610      	mov	r0, r2
 80080f2:	4798      	blx	r3
 80080f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3301      	adds	r3, #1
 80080fa:	2202      	movs	r2, #2
 80080fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080fe:	e100      	b.n	8008302 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008108:	f107 0208 	add.w	r2, r7, #8
 800810c:	4610      	mov	r0, r2
 800810e:	4798      	blx	r3
 8008110:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3301      	adds	r3, #1
 8008116:	2202      	movs	r2, #2
 8008118:	701a      	strb	r2, [r3, #0]
      break;
 800811a:	e0f2      	b.n	8008302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	885b      	ldrh	r3, [r3, #2]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b05      	cmp	r3, #5
 8008124:	f200 80ac 	bhi.w	8008280 <USBD_GetDescriptor+0x204>
 8008128:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <USBD_GetDescriptor+0xb4>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008149 	.word	0x08008149
 8008134:	0800817d 	.word	0x0800817d
 8008138:	080081b1 	.word	0x080081b1
 800813c:	080081e5 	.word	0x080081e5
 8008140:	08008219 	.word	0x08008219
 8008144:	0800824d 	.word	0x0800824d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	f107 0108 	add.w	r1, r7, #8
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816a:	e091      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fa94 	bl	800869c <USBD_CtlError>
            err++;
 8008174:	7afb      	ldrb	r3, [r7, #11]
 8008176:	3301      	adds	r3, #1
 8008178:	72fb      	strb	r3, [r7, #11]
          break;
 800817a:	e089      	b.n	8008290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00b      	beq.n	80081a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7c12      	ldrb	r2, [r2, #16]
 8008194:	f107 0108 	add.w	r1, r7, #8
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819e:	e077      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa7a 	bl	800869c <USBD_CtlError>
            err++;
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	3301      	adds	r3, #1
 80081ac:	72fb      	strb	r3, [r7, #11]
          break;
 80081ae:	e06f      	b.n	8008290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00b      	beq.n	80081d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	7c12      	ldrb	r2, [r2, #16]
 80081c8:	f107 0108 	add.w	r1, r7, #8
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081d2:	e05d      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa60 	bl	800869c <USBD_CtlError>
            err++;
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	3301      	adds	r3, #1
 80081e0:	72fb      	strb	r3, [r7, #11]
          break;
 80081e2:	e055      	b.n	8008290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7c12      	ldrb	r2, [r2, #16]
 80081fc:	f107 0108 	add.w	r1, r7, #8
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008206:	e043      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa46 	bl	800869c <USBD_CtlError>
            err++;
 8008210:	7afb      	ldrb	r3, [r7, #11]
 8008212:	3301      	adds	r3, #1
 8008214:	72fb      	strb	r3, [r7, #11]
          break;
 8008216:	e03b      	b.n	8008290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7c12      	ldrb	r2, [r2, #16]
 8008230:	f107 0108 	add.w	r1, r7, #8
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
 8008238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800823a:	e029      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa2c 	bl	800869c <USBD_CtlError>
            err++;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	3301      	adds	r3, #1
 8008248:	72fb      	strb	r3, [r7, #11]
          break;
 800824a:	e021      	b.n	8008290 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	7c12      	ldrb	r2, [r2, #16]
 8008264:	f107 0108 	add.w	r1, r7, #8
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826e:	e00f      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa12 	bl	800869c <USBD_CtlError>
            err++;
 8008278:	7afb      	ldrb	r3, [r7, #11]
 800827a:	3301      	adds	r3, #1
 800827c:	72fb      	strb	r3, [r7, #11]
          break;
 800827e:	e007      	b.n	8008290 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fa0a 	bl	800869c <USBD_CtlError>
          err++;
 8008288:	7afb      	ldrb	r3, [r7, #11]
 800828a:	3301      	adds	r3, #1
 800828c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800828e:	e038      	b.n	8008302 <USBD_GetDescriptor+0x286>
 8008290:	e037      	b.n	8008302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	7c1b      	ldrb	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d109      	bne.n	80082ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a2:	f107 0208 	add.w	r2, r7, #8
 80082a6:	4610      	mov	r0, r2
 80082a8:	4798      	blx	r3
 80082aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082ac:	e029      	b.n	8008302 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f9f3 	bl	800869c <USBD_CtlError>
        err++;
 80082b6:	7afb      	ldrb	r3, [r7, #11]
 80082b8:	3301      	adds	r3, #1
 80082ba:	72fb      	strb	r3, [r7, #11]
      break;
 80082bc:	e021      	b.n	8008302 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7c1b      	ldrb	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10d      	bne.n	80082e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ce:	f107 0208 	add.w	r2, r7, #8
 80082d2:	4610      	mov	r0, r2
 80082d4:	4798      	blx	r3
 80082d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3301      	adds	r3, #1
 80082dc:	2207      	movs	r2, #7
 80082de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082e0:	e00f      	b.n	8008302 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f9d9 	bl	800869c <USBD_CtlError>
        err++;
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	3301      	adds	r3, #1
 80082ee:	72fb      	strb	r3, [r7, #11]
      break;
 80082f0:	e007      	b.n	8008302 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f9d1 	bl	800869c <USBD_CtlError>
      err++;
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	3301      	adds	r3, #1
 80082fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008300:	bf00      	nop
  }

  if (err != 0U)
 8008302:	7afb      	ldrb	r3, [r7, #11]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d11c      	bne.n	8008342 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008308:	893b      	ldrh	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d011      	beq.n	8008332 <USBD_GetDescriptor+0x2b6>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	88db      	ldrh	r3, [r3, #6]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00d      	beq.n	8008332 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	88da      	ldrh	r2, [r3, #6]
 800831a:	893b      	ldrh	r3, [r7, #8]
 800831c:	4293      	cmp	r3, r2
 800831e:	bf28      	it	cs
 8008320:	4613      	movcs	r3, r2
 8008322:	b29b      	uxth	r3, r3
 8008324:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008326:	893b      	ldrh	r3, [r7, #8]
 8008328:	461a      	mov	r2, r3
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fa1f 	bl	8008770 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	88db      	ldrh	r3, [r3, #6]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d104      	bne.n	8008344 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa58 	bl	80087f0 <USBD_CtlSendStatus>
 8008340:	e000      	b.n	8008344 <USBD_GetDescriptor+0x2c8>
    return;
 8008342:	bf00      	nop
    }
  }
}
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop

0800834c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	889b      	ldrh	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d130      	bne.n	80083c0 <USBD_SetAddress+0x74>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88db      	ldrh	r3, [r3, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d12c      	bne.n	80083c0 <USBD_SetAddress+0x74>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	885b      	ldrh	r3, [r3, #2]
 800836a:	2b7f      	cmp	r3, #127	@ 0x7f
 800836c:	d828      	bhi.n	80083c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	885b      	ldrh	r3, [r3, #2]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008378:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008380:	2b03      	cmp	r3, #3
 8008382:	d104      	bne.n	800838e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f988 	bl	800869c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838c:	e01d      	b.n	80083ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	7bfa      	ldrb	r2, [r7, #15]
 8008392:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fd5d 	bl	8008e5a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fa25 	bl	80087f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d004      	beq.n	80083b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b4:	e009      	b.n	80083ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083be:	e004      	b.n	80083ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f96a 	bl	800869c <USBD_CtlError>
  }
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	885b      	ldrh	r3, [r3, #2]
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	4b41      	ldr	r3, [pc, #260]	@ (80084ec <USBD_SetConfig+0x118>)
 80083e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083e8:	4b40      	ldr	r3, [pc, #256]	@ (80084ec <USBD_SetConfig+0x118>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d904      	bls.n	80083fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f952 	bl	800869c <USBD_CtlError>
 80083f8:	e075      	b.n	80084e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008400:	2b02      	cmp	r3, #2
 8008402:	d002      	beq.n	800840a <USBD_SetConfig+0x36>
 8008404:	2b03      	cmp	r3, #3
 8008406:	d023      	beq.n	8008450 <USBD_SetConfig+0x7c>
 8008408:	e062      	b.n	80084d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800840a:	4b38      	ldr	r3, [pc, #224]	@ (80084ec <USBD_SetConfig+0x118>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01a      	beq.n	8008448 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008412:	4b36      	ldr	r3, [pc, #216]	@ (80084ec <USBD_SetConfig+0x118>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2203      	movs	r2, #3
 8008420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008424:	4b31      	ldr	r3, [pc, #196]	@ (80084ec <USBD_SetConfig+0x118>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff f9e8 	bl	8007800 <USBD_SetClassConfig>
 8008430:	4603      	mov	r3, r0
 8008432:	2b02      	cmp	r3, #2
 8008434:	d104      	bne.n	8008440 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f92f 	bl	800869c <USBD_CtlError>
            return;
 800843e:	e052      	b.n	80084e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f9d5 	bl	80087f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008446:	e04e      	b.n	80084e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f9d1 	bl	80087f0 <USBD_CtlSendStatus>
        break;
 800844e:	e04a      	b.n	80084e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008450:	4b26      	ldr	r3, [pc, #152]	@ (80084ec <USBD_SetConfig+0x118>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d112      	bne.n	800847e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008460:	4b22      	ldr	r3, [pc, #136]	@ (80084ec <USBD_SetConfig+0x118>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800846a:	4b20      	ldr	r3, [pc, #128]	@ (80084ec <USBD_SetConfig+0x118>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff f9e4 	bl	800783e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9ba 	bl	80087f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800847c:	e033      	b.n	80084e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800847e:	4b1b      	ldr	r3, [pc, #108]	@ (80084ec <USBD_SetConfig+0x118>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	429a      	cmp	r2, r3
 800848a:	d01d      	beq.n	80084c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff f9d2 	bl	800783e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800849a:	4b14      	ldr	r3, [pc, #80]	@ (80084ec <USBD_SetConfig+0x118>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084a4:	4b11      	ldr	r3, [pc, #68]	@ (80084ec <USBD_SetConfig+0x118>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff f9a8 	bl	8007800 <USBD_SetClassConfig>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d104      	bne.n	80084c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f8ef 	bl	800869c <USBD_CtlError>
            return;
 80084be:	e012      	b.n	80084e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f995 	bl	80087f0 <USBD_CtlSendStatus>
        break;
 80084c6:	e00e      	b.n	80084e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f991 	bl	80087f0 <USBD_CtlSendStatus>
        break;
 80084ce:	e00a      	b.n	80084e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f8e2 	bl	800869c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80084d8:	4b04      	ldr	r3, [pc, #16]	@ (80084ec <USBD_SetConfig+0x118>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff f9ad 	bl	800783e <USBD_ClrClassConfig>
        break;
 80084e4:	bf00      	nop
    }
  }
}
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	200002c8 	.word	0x200002c8

080084f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	88db      	ldrh	r3, [r3, #6]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d004      	beq.n	800850c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f8c9 	bl	800869c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800850a:	e022      	b.n	8008552 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008512:	2b02      	cmp	r3, #2
 8008514:	dc02      	bgt.n	800851c <USBD_GetConfig+0x2c>
 8008516:	2b00      	cmp	r3, #0
 8008518:	dc03      	bgt.n	8008522 <USBD_GetConfig+0x32>
 800851a:	e015      	b.n	8008548 <USBD_GetConfig+0x58>
 800851c:	2b03      	cmp	r3, #3
 800851e:	d00b      	beq.n	8008538 <USBD_GetConfig+0x48>
 8008520:	e012      	b.n	8008548 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3308      	adds	r3, #8
 800852c:	2201      	movs	r2, #1
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f91d 	bl	8008770 <USBD_CtlSendData>
        break;
 8008536:	e00c      	b.n	8008552 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3304      	adds	r3, #4
 800853c:	2201      	movs	r2, #1
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f915 	bl	8008770 <USBD_CtlSendData>
        break;
 8008546:	e004      	b.n	8008552 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f8a6 	bl	800869c <USBD_CtlError>
        break;
 8008550:	bf00      	nop
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800856a:	3b01      	subs	r3, #1
 800856c:	2b02      	cmp	r3, #2
 800856e:	d81e      	bhi.n	80085ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	88db      	ldrh	r3, [r3, #6]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d004      	beq.n	8008582 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f88e 	bl	800869c <USBD_CtlError>
        break;
 8008580:	e01a      	b.n	80085b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800858e:	2b00      	cmp	r3, #0
 8008590:	d005      	beq.n	800859e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f043 0202 	orr.w	r2, r3, #2
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	330c      	adds	r3, #12
 80085a2:	2202      	movs	r2, #2
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f8e2 	bl	8008770 <USBD_CtlSendData>
      break;
 80085ac:	e004      	b.n	80085b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f873 	bl	800869c <USBD_CtlError>
      break;
 80085b6:	bf00      	nop
  }
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	885b      	ldrh	r3, [r3, #2]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d106      	bne.n	80085e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f908 	bl	80087f0 <USBD_CtlSendStatus>
  }
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f8:	3b01      	subs	r3, #1
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d80b      	bhi.n	8008616 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	885b      	ldrh	r3, [r3, #2]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d10c      	bne.n	8008620 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f8ee 	bl	80087f0 <USBD_CtlSendStatus>
      }
      break;
 8008614:	e004      	b.n	8008620 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f83f 	bl	800869c <USBD_CtlError>
      break;
 800861e:	e000      	b.n	8008622 <USBD_ClrFeature+0x3a>
      break;
 8008620:	bf00      	nop
  }
}
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	781a      	ldrb	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	785a      	ldrb	r2, [r3, #1]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	3302      	adds	r3, #2
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	3303      	adds	r3, #3
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	b29b      	uxth	r3, r3
 8008656:	4413      	add	r3, r2
 8008658:	b29a      	uxth	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	3304      	adds	r3, #4
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	3305      	adds	r3, #5
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	b29b      	uxth	r3, r3
 8008670:	4413      	add	r3, r2
 8008672:	b29a      	uxth	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	3306      	adds	r3, #6
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	3307      	adds	r3, #7
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	021b      	lsls	r3, r3, #8
 8008688:	b29b      	uxth	r3, r3
 800868a:	4413      	add	r3, r2
 800868c:	b29a      	uxth	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	80da      	strh	r2, [r3, #6]

}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80086a6:	2180      	movs	r1, #128	@ 0x80
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fb6d 	bl	8008d88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086ae:	2100      	movs	r1, #0
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fb69 	bl	8008d88 <USBD_LL_StallEP>
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d032      	beq.n	800873a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f834 	bl	8008742 <USBD_GetLen>
 80086da:	4603      	mov	r3, r0
 80086dc:	3301      	adds	r3, #1
 80086de:	b29b      	uxth	r3, r3
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	75fa      	strb	r2, [r7, #23]
 80086ee:	461a      	mov	r2, r3
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	4413      	add	r3, r2
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	7812      	ldrb	r2, [r2, #0]
 80086f8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	75fa      	strb	r2, [r7, #23]
 8008700:	461a      	mov	r2, r3
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	4413      	add	r3, r2
 8008706:	2203      	movs	r2, #3
 8008708:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800870a:	e012      	b.n	8008732 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	60fa      	str	r2, [r7, #12]
 8008712:	7dfa      	ldrb	r2, [r7, #23]
 8008714:	1c51      	adds	r1, r2, #1
 8008716:	75f9      	strb	r1, [r7, #23]
 8008718:	4611      	mov	r1, r2
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	440a      	add	r2, r1
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	75fa      	strb	r2, [r7, #23]
 8008728:	461a      	mov	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e8      	bne.n	800870c <USBD_GetString+0x4e>
    }
  }
}
 800873a:	bf00      	nop
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008742:	b480      	push	{r7}
 8008744:	b085      	sub	sp, #20
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800874e:	e005      	b.n	800875c <USBD_GetLen+0x1a>
  {
    len++;
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	3301      	adds	r3, #1
 8008754:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	3301      	adds	r3, #1
 800875a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1f5      	bne.n	8008750 <USBD_GetLen+0xe>
  }

  return len;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	bc80      	pop	{r7}
 800876e:	4770      	bx	lr

08008770 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2202      	movs	r2, #2
 8008782:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008786:	88fa      	ldrh	r2, [r7, #6]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800878c:	88fa      	ldrh	r2, [r7, #6]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	2100      	movs	r1, #0
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 fb7d 	bl	8008e98 <USBD_LL_Transmit>

  return USBD_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	4613      	mov	r3, r2
 80087b4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087b6:	88fb      	ldrh	r3, [r7, #6]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	2100      	movs	r1, #0
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 fb6b 	bl	8008e98 <USBD_LL_Transmit>

  return USBD_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087da:	88fb      	ldrh	r3, [r7, #6]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	2100      	movs	r1, #0
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 fb7c 	bl	8008ede <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2204      	movs	r2, #4
 80087fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008800:	2300      	movs	r3, #0
 8008802:	2200      	movs	r2, #0
 8008804:	2100      	movs	r1, #0
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fb46 	bl	8008e98 <USBD_LL_Transmit>

  return USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2205      	movs	r2, #5
 8008822:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008826:	2300      	movs	r3, #0
 8008828:	2200      	movs	r2, #0
 800882a:	2100      	movs	r1, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fb56 	bl	8008ede <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008840:	2200      	movs	r2, #0
 8008842:	490e      	ldr	r1, [pc, #56]	@ (800887c <MX_USB_DEVICE_Init+0x40>)
 8008844:	480e      	ldr	r0, [pc, #56]	@ (8008880 <MX_USB_DEVICE_Init+0x44>)
 8008846:	f7fe ff81 	bl	800774c <USBD_Init>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008850:	f7f7 ff6c 	bl	800072c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 8008854:	490b      	ldr	r1, [pc, #44]	@ (8008884 <MX_USB_DEVICE_Init+0x48>)
 8008856:	480a      	ldr	r0, [pc, #40]	@ (8008880 <MX_USB_DEVICE_Init+0x44>)
 8008858:	f7fe ffa3 	bl	80077a2 <USBD_RegisterClass>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d001      	beq.n	8008866 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008862:	f7f7 ff63 	bl	800072c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008866:	4806      	ldr	r0, [pc, #24]	@ (8008880 <MX_USB_DEVICE_Init+0x44>)
 8008868:	f7fe ffb4 	bl	80077d4 <USBD_Start>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008872:	f7f7 ff5b 	bl	800072c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008876:	bf00      	nop
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	200000b8 	.word	0x200000b8
 8008880:	200002cc 	.word	0x200002cc
 8008884:	20000020 	.word	0x20000020

08008888 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2212      	movs	r2, #18
 8008898:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800889a:	4b03      	ldr	r3, [pc, #12]	@ (80088a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	200000d4 	.word	0x200000d4

080088ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	6039      	str	r1, [r7, #0]
 80088b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2204      	movs	r2, #4
 80088bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088be:	4b03      	ldr	r3, [pc, #12]	@ (80088cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	200000e8 	.word	0x200000e8

080088d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	6039      	str	r1, [r7, #0]
 80088da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088dc:	79fb      	ldrb	r3, [r7, #7]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d105      	bne.n	80088ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	4907      	ldr	r1, [pc, #28]	@ (8008904 <USBD_FS_ProductStrDescriptor+0x34>)
 80088e6:	4808      	ldr	r0, [pc, #32]	@ (8008908 <USBD_FS_ProductStrDescriptor+0x38>)
 80088e8:	f7ff fee9 	bl	80086be <USBD_GetString>
 80088ec:	e004      	b.n	80088f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	4904      	ldr	r1, [pc, #16]	@ (8008904 <USBD_FS_ProductStrDescriptor+0x34>)
 80088f2:	4805      	ldr	r0, [pc, #20]	@ (8008908 <USBD_FS_ProductStrDescriptor+0x38>)
 80088f4:	f7ff fee3 	bl	80086be <USBD_GetString>
  }
  return USBD_StrDesc;
 80088f8:	4b02      	ldr	r3, [pc, #8]	@ (8008904 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20000590 	.word	0x20000590
 8008908:	08009268 	.word	0x08009268

0800890c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	6039      	str	r1, [r7, #0]
 8008916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	4904      	ldr	r1, [pc, #16]	@ (800892c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800891c:	4804      	ldr	r0, [pc, #16]	@ (8008930 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800891e:	f7ff fece 	bl	80086be <USBD_GetString>
  return USBD_StrDesc;
 8008922:	4b02      	ldr	r3, [pc, #8]	@ (800892c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	20000590 	.word	0x20000590
 8008930:	08009280 	.word	0x08009280

08008934 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	6039      	str	r1, [r7, #0]
 800893e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	221a      	movs	r2, #26
 8008944:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008946:	f000 f843 	bl	80089d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800894a:	4b02      	ldr	r3, [pc, #8]	@ (8008954 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800894c:	4618      	mov	r0, r3
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	200000ec 	.word	0x200000ec

08008958 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	6039      	str	r1, [r7, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008964:	79fb      	ldrb	r3, [r7, #7]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d105      	bne.n	8008976 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	4907      	ldr	r1, [pc, #28]	@ (800898c <USBD_FS_ConfigStrDescriptor+0x34>)
 800896e:	4808      	ldr	r0, [pc, #32]	@ (8008990 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008970:	f7ff fea5 	bl	80086be <USBD_GetString>
 8008974:	e004      	b.n	8008980 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	4904      	ldr	r1, [pc, #16]	@ (800898c <USBD_FS_ConfigStrDescriptor+0x34>)
 800897a:	4805      	ldr	r0, [pc, #20]	@ (8008990 <USBD_FS_ConfigStrDescriptor+0x38>)
 800897c:	f7ff fe9f 	bl	80086be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008980:	4b02      	ldr	r3, [pc, #8]	@ (800898c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20000590 	.word	0x20000590
 8008990:	08009290 	.word	0x08009290

08008994 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d105      	bne.n	80089b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	4907      	ldr	r1, [pc, #28]	@ (80089c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089aa:	4808      	ldr	r0, [pc, #32]	@ (80089cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089ac:	f7ff fe87 	bl	80086be <USBD_GetString>
 80089b0:	e004      	b.n	80089bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	4904      	ldr	r1, [pc, #16]	@ (80089c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089b6:	4805      	ldr	r0, [pc, #20]	@ (80089cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089b8:	f7ff fe81 	bl	80086be <USBD_GetString>
  }
  return USBD_StrDesc;
 80089bc:	4b02      	ldr	r3, [pc, #8]	@ (80089c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000590 	.word	0x20000590
 80089cc:	0800929c 	.word	0x0800929c

080089d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008a14 <Get_SerialNum+0x44>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80089dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008a18 <Get_SerialNum+0x48>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80089e2:	4b0e      	ldr	r3, [pc, #56]	@ (8008a1c <Get_SerialNum+0x4c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d009      	beq.n	8008a0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089f6:	2208      	movs	r2, #8
 80089f8:	4909      	ldr	r1, [pc, #36]	@ (8008a20 <Get_SerialNum+0x50>)
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 f814 	bl	8008a28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a00:	2204      	movs	r2, #4
 8008a02:	4908      	ldr	r1, [pc, #32]	@ (8008a24 <Get_SerialNum+0x54>)
 8008a04:	68b8      	ldr	r0, [r7, #8]
 8008a06:	f000 f80f 	bl	8008a28 <IntToUnicode>
  }
}
 8008a0a:	bf00      	nop
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	1ffff7e8 	.word	0x1ffff7e8
 8008a18:	1ffff7ec 	.word	0x1ffff7ec
 8008a1c:	1ffff7f0 	.word	0x1ffff7f0
 8008a20:	200000ee 	.word	0x200000ee
 8008a24:	200000fe 	.word	0x200000fe

08008a28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	4613      	mov	r3, r2
 8008a34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75fb      	strb	r3, [r7, #23]
 8008a3e:	e027      	b.n	8008a90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	0f1b      	lsrs	r3, r3, #28
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	d80b      	bhi.n	8008a60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	0f1b      	lsrs	r3, r3, #28
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	005b      	lsls	r3, r3, #1
 8008a52:	4619      	mov	r1, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	440b      	add	r3, r1
 8008a58:	3230      	adds	r2, #48	@ 0x30
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	e00a      	b.n	8008a76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	0f1b      	lsrs	r3, r3, #28
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	7dfb      	ldrb	r3, [r7, #23]
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	440b      	add	r3, r1
 8008a70:	3237      	adds	r2, #55	@ 0x37
 8008a72:	b2d2      	uxtb	r2, r2
 8008a74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	3301      	adds	r3, #1
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	4413      	add	r3, r2
 8008a86:	2200      	movs	r2, #0
 8008a88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	75fb      	strb	r3, [r7, #23]
 8008a90:	7dfa      	ldrb	r2, [r7, #23]
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d3d3      	bcc.n	8008a40 <IntToUnicode+0x18>
  }
}
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8008ae8 <HAL_PCD_MspInit+0x44>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d113      	bne.n	8008ade <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8008aec <HAL_PCD_MspInit+0x48>)
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	4a0c      	ldr	r2, [pc, #48]	@ (8008aec <HAL_PCD_MspInit+0x48>)
 8008abc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008ac0:	61d3      	str	r3, [r2, #28]
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8008aec <HAL_PCD_MspInit+0x48>)
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	2014      	movs	r0, #20
 8008ad4:	f7f9 f891 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008ad8:	2014      	movs	r0, #20
 8008ada:	f7f9 f8aa 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	40005c00 	.word	0x40005c00
 8008aec:	40021000 	.word	0x40021000

08008af0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008b04:	4619      	mov	r1, r3
 8008b06:	4610      	mov	r0, r2
 8008b08:	f7fe feac 	bl	8007864 <USBD_LL_SetupStage>
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	440b      	add	r3, r1
 8008b34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	78fb      	ldrb	r3, [r7, #3]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	f7fe fede 	bl	80078fe <USBD_LL_DataOutStage>
}
 8008b42:	bf00      	nop
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008b5c:	78fa      	ldrb	r2, [r7, #3]
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	440b      	add	r3, r1
 8008b6a:	3324      	adds	r3, #36	@ 0x24
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	78fb      	ldrb	r3, [r7, #3]
 8008b70:	4619      	mov	r1, r3
 8008b72:	f7fe ff35 	bl	80079e0 <USBD_LL_DataInStage>
}
 8008b76:	bf00      	nop
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff f845 	bl	8007c1c <USBD_LL_SOF>
}
 8008b92:	bf00      	nop
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	799b      	ldrb	r3, [r3, #6]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d001      	beq.n	8008bb2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008bae:	f7f7 fdbd 	bl	800072c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bb8:	7bfa      	ldrb	r2, [r7, #15]
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe fff5 	bl	8007bac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fe ffae 	bl	8007b2a <USBD_LL_Reset>
}
 8008bce:	bf00      	nop
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe ffef 	bl	8007bca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	7a9b      	ldrb	r3, [r3, #10]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bf4:	4b04      	ldr	r3, [pc, #16]	@ (8008c08 <HAL_PCD_SuspendCallback+0x30>)
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	4a03      	ldr	r2, [pc, #12]	@ (8008c08 <HAL_PCD_SuspendCallback+0x30>)
 8008bfa:	f043 0306 	orr.w	r3, r3, #6
 8008bfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	e000ed00 	.word	0xe000ed00

08008c0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe ffe9 	bl	8007bf2 <USBD_LL_Resume>
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008c30:	4a23      	ldr	r2, [pc, #140]	@ (8008cc0 <USBD_LL_Init+0x98>)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a21      	ldr	r2, [pc, #132]	@ (8008cc0 <USBD_LL_Init+0x98>)
 8008c3c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008c40:	4b1f      	ldr	r3, [pc, #124]	@ (8008cc0 <USBD_LL_Init+0x98>)
 8008c42:	4a20      	ldr	r2, [pc, #128]	@ (8008cc4 <USBD_LL_Init+0x9c>)
 8008c44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008c46:	4b1e      	ldr	r3, [pc, #120]	@ (8008cc0 <USBD_LL_Init+0x98>)
 8008c48:	2208      	movs	r2, #8
 8008c4a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc0 <USBD_LL_Init+0x98>)
 8008c4e:	2202      	movs	r2, #2
 8008c50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008c52:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc0 <USBD_LL_Init+0x98>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008c58:	4b19      	ldr	r3, [pc, #100]	@ (8008cc0 <USBD_LL_Init+0x98>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008c5e:	4b18      	ldr	r3, [pc, #96]	@ (8008cc0 <USBD_LL_Init+0x98>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008c64:	4816      	ldr	r0, [pc, #88]	@ (8008cc0 <USBD_LL_Init+0x98>)
 8008c66:	f7f9 f99a 	bl	8001f9e <HAL_PCD_Init>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008c70:	f7f7 fd5c 	bl	800072c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c7a:	2318      	movs	r3, #24
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2100      	movs	r1, #0
 8008c80:	f7fa feab 	bl	80039da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c8a:	2358      	movs	r3, #88	@ 0x58
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2180      	movs	r1, #128	@ 0x80
 8008c90:	f7fa fea3 	bl	80039da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xC0);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c9a:	23c0      	movs	r3, #192	@ 0xc0
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	f7fa fe9b 	bl	80039da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008caa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2181      	movs	r1, #129	@ 0x81
 8008cb2:	f7fa fe92 	bl	80039da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20000790 	.word	0x20000790
 8008cc4:	40005c00 	.word	0x40005c00

08008cc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7f9 fa53 	bl	800218a <HAL_PCD_Start>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 f93a 	bl	8008f64 <USBD_Get_USB_Status>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	4608      	mov	r0, r1
 8008d08:	4611      	mov	r1, r2
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	70fb      	strb	r3, [r7, #3]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70bb      	strb	r3, [r7, #2]
 8008d14:	4613      	mov	r3, r2
 8008d16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008d26:	78bb      	ldrb	r3, [r7, #2]
 8008d28:	883a      	ldrh	r2, [r7, #0]
 8008d2a:	78f9      	ldrb	r1, [r7, #3]
 8008d2c:	f7f9 fba7 	bl	800247e <HAL_PCD_EP_Open>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 f914 	bl	8008f64 <USBD_Get_USB_Status>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d64:	78fa      	ldrb	r2, [r7, #3]
 8008d66:	4611      	mov	r1, r2
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7f9 fbe5 	bl	8002538 <HAL_PCD_EP_Close>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 f8f5 	bl	8008f64 <USBD_Get_USB_Status>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008da2:	78fa      	ldrb	r2, [r7, #3]
 8008da4:	4611      	mov	r1, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7f9 fc8d 	bl	80026c6 <HAL_PCD_EP_SetStall>
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f8d6 	bl	8008f64 <USBD_Get_USB_Status>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	4611      	mov	r1, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7f9 fcce 	bl	8002786 <HAL_PCD_EP_ClrStall>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 f8b7 	bl	8008f64 <USBD_Get_USB_Status>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	da0b      	bge.n	8008e38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e26:	68f9      	ldr	r1, [r7, #12]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	440b      	add	r3, r1
 8008e32:	3312      	adds	r3, #18
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	e00b      	b.n	8008e50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e3e:	68f9      	ldr	r1, [r7, #12]
 8008e40:	4613      	mov	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	00db      	lsls	r3, r3, #3
 8008e48:	440b      	add	r3, r1
 8008e4a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008e4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr

08008e5a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	460b      	mov	r3, r1
 8008e64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e74:	78fa      	ldrb	r2, [r7, #3]
 8008e76:	4611      	mov	r1, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7f9 fadc 	bl	8002436 <HAL_PCD_SetAddress>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 f86d 	bl	8008f64 <USBD_Get_USB_Status>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	72fb      	strb	r3, [r7, #11]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008eba:	893b      	ldrh	r3, [r7, #8]
 8008ebc:	7af9      	ldrb	r1, [r7, #11]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	f7f9 fbca 	bl	8002658 <HAL_PCD_EP_Transmit>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 f84a 	bl	8008f64 <USBD_Get_USB_Status>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ed4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b086      	sub	sp, #24
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	460b      	mov	r3, r1
 8008eec:	72fb      	strb	r3, [r7, #11]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f00:	893b      	ldrh	r3, [r7, #8]
 8008f02:	7af9      	ldrb	r1, [r7, #11]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	f7f9 fb5f 	bl	80025c8 <HAL_PCD_EP_Receive>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 f827 	bl	8008f64 <USBD_Get_USB_Status>
 8008f16:	4603      	mov	r3, r0
 8008f18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MIDI_HandleTypeDef)/4)+1];;/* On 32-bit boundary */
  return mem;
 8008f2c:	4b02      	ldr	r3, [pc, #8]	@ (8008f38 <USBD_static_malloc+0x14>)
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bc80      	pop	{r7}
 8008f36:	4770      	bx	lr
 8008f38:	20000a68 	.word	0x20000a68

08008f3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]

}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bc80      	pop	{r7}
 8008f4c:	4770      	bx	lr

08008f4e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b083      	sub	sp, #12
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bc80      	pop	{r7}
 8008f62:	4770      	bx	lr

08008f64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d817      	bhi.n	8008fa8 <USBD_Get_USB_Status+0x44>
 8008f78:	a201      	add	r2, pc, #4	@ (adr r2, 8008f80 <USBD_Get_USB_Status+0x1c>)
 8008f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7e:	bf00      	nop
 8008f80:	08008f91 	.word	0x08008f91
 8008f84:	08008f97 	.word	0x08008f97
 8008f88:	08008f9d 	.word	0x08008f9d
 8008f8c:	08008fa3 	.word	0x08008fa3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
    break;
 8008f94:	e00b      	b.n	8008fae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f96:	2302      	movs	r3, #2
 8008f98:	73fb      	strb	r3, [r7, #15]
    break;
 8008f9a:	e008      	b.n	8008fae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa0:	e005      	b.n	8008fae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa6:	e002      	b.n	8008fae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008fa8:	2302      	movs	r3, #2
 8008faa:	73fb      	strb	r3, [r7, #15]
    break;
 8008fac:	bf00      	nop
  }
  return usb_status;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop

08008fbc <malloc>:
 8008fbc:	4b02      	ldr	r3, [pc, #8]	@ (8008fc8 <malloc+0xc>)
 8008fbe:	4601      	mov	r1, r0
 8008fc0:	6818      	ldr	r0, [r3, #0]
 8008fc2:	f000 b82d 	b.w	8009020 <_malloc_r>
 8008fc6:	bf00      	nop
 8008fc8:	20000108 	.word	0x20000108

08008fcc <free>:
 8008fcc:	4b02      	ldr	r3, [pc, #8]	@ (8008fd8 <free+0xc>)
 8008fce:	4601      	mov	r1, r0
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	f000 b8f5 	b.w	80091c0 <_free_r>
 8008fd6:	bf00      	nop
 8008fd8:	20000108 	.word	0x20000108

08008fdc <sbrk_aligned>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	4e0f      	ldr	r6, [pc, #60]	@ (800901c <sbrk_aligned+0x40>)
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	6831      	ldr	r1, [r6, #0]
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	b911      	cbnz	r1, 8008fee <sbrk_aligned+0x12>
 8008fe8:	f000 f8ae 	bl	8009148 <_sbrk_r>
 8008fec:	6030      	str	r0, [r6, #0]
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f000 f8a9 	bl	8009148 <_sbrk_r>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d103      	bne.n	8009002 <sbrk_aligned+0x26>
 8008ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8008ffe:	4620      	mov	r0, r4
 8009000:	bd70      	pop	{r4, r5, r6, pc}
 8009002:	1cc4      	adds	r4, r0, #3
 8009004:	f024 0403 	bic.w	r4, r4, #3
 8009008:	42a0      	cmp	r0, r4
 800900a:	d0f8      	beq.n	8008ffe <sbrk_aligned+0x22>
 800900c:	1a21      	subs	r1, r4, r0
 800900e:	4628      	mov	r0, r5
 8009010:	f000 f89a 	bl	8009148 <_sbrk_r>
 8009014:	3001      	adds	r0, #1
 8009016:	d1f2      	bne.n	8008ffe <sbrk_aligned+0x22>
 8009018:	e7ef      	b.n	8008ffa <sbrk_aligned+0x1e>
 800901a:	bf00      	nop
 800901c:	20000a7c 	.word	0x20000a7c

08009020 <_malloc_r>:
 8009020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009024:	1ccd      	adds	r5, r1, #3
 8009026:	f025 0503 	bic.w	r5, r5, #3
 800902a:	3508      	adds	r5, #8
 800902c:	2d0c      	cmp	r5, #12
 800902e:	bf38      	it	cc
 8009030:	250c      	movcc	r5, #12
 8009032:	2d00      	cmp	r5, #0
 8009034:	4606      	mov	r6, r0
 8009036:	db01      	blt.n	800903c <_malloc_r+0x1c>
 8009038:	42a9      	cmp	r1, r5
 800903a:	d904      	bls.n	8009046 <_malloc_r+0x26>
 800903c:	230c      	movs	r3, #12
 800903e:	6033      	str	r3, [r6, #0]
 8009040:	2000      	movs	r0, #0
 8009042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800911c <_malloc_r+0xfc>
 800904a:	f000 f869 	bl	8009120 <__malloc_lock>
 800904e:	f8d8 3000 	ldr.w	r3, [r8]
 8009052:	461c      	mov	r4, r3
 8009054:	bb44      	cbnz	r4, 80090a8 <_malloc_r+0x88>
 8009056:	4629      	mov	r1, r5
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff ffbf 	bl	8008fdc <sbrk_aligned>
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	4604      	mov	r4, r0
 8009062:	d158      	bne.n	8009116 <_malloc_r+0xf6>
 8009064:	f8d8 4000 	ldr.w	r4, [r8]
 8009068:	4627      	mov	r7, r4
 800906a:	2f00      	cmp	r7, #0
 800906c:	d143      	bne.n	80090f6 <_malloc_r+0xd6>
 800906e:	2c00      	cmp	r4, #0
 8009070:	d04b      	beq.n	800910a <_malloc_r+0xea>
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	4639      	mov	r1, r7
 8009076:	4630      	mov	r0, r6
 8009078:	eb04 0903 	add.w	r9, r4, r3
 800907c:	f000 f864 	bl	8009148 <_sbrk_r>
 8009080:	4581      	cmp	r9, r0
 8009082:	d142      	bne.n	800910a <_malloc_r+0xea>
 8009084:	6821      	ldr	r1, [r4, #0]
 8009086:	4630      	mov	r0, r6
 8009088:	1a6d      	subs	r5, r5, r1
 800908a:	4629      	mov	r1, r5
 800908c:	f7ff ffa6 	bl	8008fdc <sbrk_aligned>
 8009090:	3001      	adds	r0, #1
 8009092:	d03a      	beq.n	800910a <_malloc_r+0xea>
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	442b      	add	r3, r5
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	f8d8 3000 	ldr.w	r3, [r8]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	bb62      	cbnz	r2, 80090fc <_malloc_r+0xdc>
 80090a2:	f8c8 7000 	str.w	r7, [r8]
 80090a6:	e00f      	b.n	80090c8 <_malloc_r+0xa8>
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	1b52      	subs	r2, r2, r5
 80090ac:	d420      	bmi.n	80090f0 <_malloc_r+0xd0>
 80090ae:	2a0b      	cmp	r2, #11
 80090b0:	d917      	bls.n	80090e2 <_malloc_r+0xc2>
 80090b2:	1961      	adds	r1, r4, r5
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	6025      	str	r5, [r4, #0]
 80090b8:	bf18      	it	ne
 80090ba:	6059      	strne	r1, [r3, #4]
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	bf08      	it	eq
 80090c0:	f8c8 1000 	streq.w	r1, [r8]
 80090c4:	5162      	str	r2, [r4, r5]
 80090c6:	604b      	str	r3, [r1, #4]
 80090c8:	4630      	mov	r0, r6
 80090ca:	f000 f82f 	bl	800912c <__malloc_unlock>
 80090ce:	f104 000b 	add.w	r0, r4, #11
 80090d2:	1d23      	adds	r3, r4, #4
 80090d4:	f020 0007 	bic.w	r0, r0, #7
 80090d8:	1ac2      	subs	r2, r0, r3
 80090da:	bf1c      	itt	ne
 80090dc:	1a1b      	subne	r3, r3, r0
 80090de:	50a3      	strne	r3, [r4, r2]
 80090e0:	e7af      	b.n	8009042 <_malloc_r+0x22>
 80090e2:	6862      	ldr	r2, [r4, #4]
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	bf0c      	ite	eq
 80090e8:	f8c8 2000 	streq.w	r2, [r8]
 80090ec:	605a      	strne	r2, [r3, #4]
 80090ee:	e7eb      	b.n	80090c8 <_malloc_r+0xa8>
 80090f0:	4623      	mov	r3, r4
 80090f2:	6864      	ldr	r4, [r4, #4]
 80090f4:	e7ae      	b.n	8009054 <_malloc_r+0x34>
 80090f6:	463c      	mov	r4, r7
 80090f8:	687f      	ldr	r7, [r7, #4]
 80090fa:	e7b6      	b.n	800906a <_malloc_r+0x4a>
 80090fc:	461a      	mov	r2, r3
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	42a3      	cmp	r3, r4
 8009102:	d1fb      	bne.n	80090fc <_malloc_r+0xdc>
 8009104:	2300      	movs	r3, #0
 8009106:	6053      	str	r3, [r2, #4]
 8009108:	e7de      	b.n	80090c8 <_malloc_r+0xa8>
 800910a:	230c      	movs	r3, #12
 800910c:	4630      	mov	r0, r6
 800910e:	6033      	str	r3, [r6, #0]
 8009110:	f000 f80c 	bl	800912c <__malloc_unlock>
 8009114:	e794      	b.n	8009040 <_malloc_r+0x20>
 8009116:	6005      	str	r5, [r0, #0]
 8009118:	e7d6      	b.n	80090c8 <_malloc_r+0xa8>
 800911a:	bf00      	nop
 800911c:	20000a80 	.word	0x20000a80

08009120 <__malloc_lock>:
 8009120:	4801      	ldr	r0, [pc, #4]	@ (8009128 <__malloc_lock+0x8>)
 8009122:	f000 b84b 	b.w	80091bc <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	20000bc0 	.word	0x20000bc0

0800912c <__malloc_unlock>:
 800912c:	4801      	ldr	r0, [pc, #4]	@ (8009134 <__malloc_unlock+0x8>)
 800912e:	f000 b846 	b.w	80091be <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	20000bc0 	.word	0x20000bc0

08009138 <memset>:
 8009138:	4603      	mov	r3, r0
 800913a:	4402      	add	r2, r0
 800913c:	4293      	cmp	r3, r2
 800913e:	d100      	bne.n	8009142 <memset+0xa>
 8009140:	4770      	bx	lr
 8009142:	f803 1b01 	strb.w	r1, [r3], #1
 8009146:	e7f9      	b.n	800913c <memset+0x4>

08009148 <_sbrk_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	2300      	movs	r3, #0
 800914c:	4d05      	ldr	r5, [pc, #20]	@ (8009164 <_sbrk_r+0x1c>)
 800914e:	4604      	mov	r4, r0
 8009150:	4608      	mov	r0, r1
 8009152:	602b      	str	r3, [r5, #0]
 8009154:	f7f7 ff3a 	bl	8000fcc <_sbrk>
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	d102      	bne.n	8009162 <_sbrk_r+0x1a>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	b103      	cbz	r3, 8009162 <_sbrk_r+0x1a>
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	20000bbc 	.word	0x20000bbc

08009168 <__errno>:
 8009168:	4b01      	ldr	r3, [pc, #4]	@ (8009170 <__errno+0x8>)
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	20000108 	.word	0x20000108

08009174 <__libc_init_array>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	2600      	movs	r6, #0
 8009178:	4d0c      	ldr	r5, [pc, #48]	@ (80091ac <__libc_init_array+0x38>)
 800917a:	4c0d      	ldr	r4, [pc, #52]	@ (80091b0 <__libc_init_array+0x3c>)
 800917c:	1b64      	subs	r4, r4, r5
 800917e:	10a4      	asrs	r4, r4, #2
 8009180:	42a6      	cmp	r6, r4
 8009182:	d109      	bne.n	8009198 <__libc_init_array+0x24>
 8009184:	f000 f864 	bl	8009250 <_init>
 8009188:	2600      	movs	r6, #0
 800918a:	4d0a      	ldr	r5, [pc, #40]	@ (80091b4 <__libc_init_array+0x40>)
 800918c:	4c0a      	ldr	r4, [pc, #40]	@ (80091b8 <__libc_init_array+0x44>)
 800918e:	1b64      	subs	r4, r4, r5
 8009190:	10a4      	asrs	r4, r4, #2
 8009192:	42a6      	cmp	r6, r4
 8009194:	d105      	bne.n	80091a2 <__libc_init_array+0x2e>
 8009196:	bd70      	pop	{r4, r5, r6, pc}
 8009198:	f855 3b04 	ldr.w	r3, [r5], #4
 800919c:	4798      	blx	r3
 800919e:	3601      	adds	r6, #1
 80091a0:	e7ee      	b.n	8009180 <__libc_init_array+0xc>
 80091a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091a6:	4798      	blx	r3
 80091a8:	3601      	adds	r6, #1
 80091aa:	e7f2      	b.n	8009192 <__libc_init_array+0x1e>
 80091ac:	080092ec 	.word	0x080092ec
 80091b0:	080092ec 	.word	0x080092ec
 80091b4:	080092ec 	.word	0x080092ec
 80091b8:	080092f0 	.word	0x080092f0

080091bc <__retarget_lock_acquire_recursive>:
 80091bc:	4770      	bx	lr

080091be <__retarget_lock_release_recursive>:
 80091be:	4770      	bx	lr

080091c0 <_free_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4605      	mov	r5, r0
 80091c4:	2900      	cmp	r1, #0
 80091c6:	d040      	beq.n	800924a <_free_r+0x8a>
 80091c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091cc:	1f0c      	subs	r4, r1, #4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfb8      	it	lt
 80091d2:	18e4      	addlt	r4, r4, r3
 80091d4:	f7ff ffa4 	bl	8009120 <__malloc_lock>
 80091d8:	4a1c      	ldr	r2, [pc, #112]	@ (800924c <_free_r+0x8c>)
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	b933      	cbnz	r3, 80091ec <_free_r+0x2c>
 80091de:	6063      	str	r3, [r4, #4]
 80091e0:	6014      	str	r4, [r2, #0]
 80091e2:	4628      	mov	r0, r5
 80091e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091e8:	f7ff bfa0 	b.w	800912c <__malloc_unlock>
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d908      	bls.n	8009202 <_free_r+0x42>
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	1821      	adds	r1, r4, r0
 80091f4:	428b      	cmp	r3, r1
 80091f6:	bf01      	itttt	eq
 80091f8:	6819      	ldreq	r1, [r3, #0]
 80091fa:	685b      	ldreq	r3, [r3, #4]
 80091fc:	1809      	addeq	r1, r1, r0
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	e7ed      	b.n	80091de <_free_r+0x1e>
 8009202:	461a      	mov	r2, r3
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	b10b      	cbz	r3, 800920c <_free_r+0x4c>
 8009208:	42a3      	cmp	r3, r4
 800920a:	d9fa      	bls.n	8009202 <_free_r+0x42>
 800920c:	6811      	ldr	r1, [r2, #0]
 800920e:	1850      	adds	r0, r2, r1
 8009210:	42a0      	cmp	r0, r4
 8009212:	d10b      	bne.n	800922c <_free_r+0x6c>
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	4401      	add	r1, r0
 8009218:	1850      	adds	r0, r2, r1
 800921a:	4283      	cmp	r3, r0
 800921c:	6011      	str	r1, [r2, #0]
 800921e:	d1e0      	bne.n	80091e2 <_free_r+0x22>
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	4408      	add	r0, r1
 8009226:	6010      	str	r0, [r2, #0]
 8009228:	6053      	str	r3, [r2, #4]
 800922a:	e7da      	b.n	80091e2 <_free_r+0x22>
 800922c:	d902      	bls.n	8009234 <_free_r+0x74>
 800922e:	230c      	movs	r3, #12
 8009230:	602b      	str	r3, [r5, #0]
 8009232:	e7d6      	b.n	80091e2 <_free_r+0x22>
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	1821      	adds	r1, r4, r0
 8009238:	428b      	cmp	r3, r1
 800923a:	bf01      	itttt	eq
 800923c:	6819      	ldreq	r1, [r3, #0]
 800923e:	685b      	ldreq	r3, [r3, #4]
 8009240:	1809      	addeq	r1, r1, r0
 8009242:	6021      	streq	r1, [r4, #0]
 8009244:	6063      	str	r3, [r4, #4]
 8009246:	6054      	str	r4, [r2, #4]
 8009248:	e7cb      	b.n	80091e2 <_free_r+0x22>
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20000a80 	.word	0x20000a80

08009250 <_init>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr

0800925c <_fini>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	bf00      	nop
 8009260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009262:	bc08      	pop	{r3}
 8009264:	469e      	mov	lr, r3
 8009266:	4770      	bx	lr
