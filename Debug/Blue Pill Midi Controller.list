
Blue Pill Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ffc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08009108  08009108  0000a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800918c  0800918c  0000b158  2**0
                  CONTENTS
  4 .ARM          00000000  0800918c  0800918c  0000b158  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800918c  0800918c  0000b158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800918c  0800918c  0000a18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009190  08009190  0000a190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08009194  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000158  080092ec  0000b158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  080092ec  0000bbc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012430  00000000  00000000  0000b181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000338f  00000000  00000000  0001d5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00020940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfa  00000000  00000000  00021a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af51  00000000  00000000  0002275a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015520  00000000  00000000  0003d6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009257b  00000000  00000000  00052bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004938  00000000  00000000  000e518c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e9ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	080090f0 	.word	0x080090f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	080090f0 	.word	0x080090f0

0800014c <ADC_Convert_Rank1>:
uint16_t ADC_Convert_Rank2 (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_Convert_Rank1 (void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	463b      	mov	r3, r7
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 800015c:	2308      	movs	r3, #8
 800015e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000160:	2301      	movs	r3, #1
 8000162:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000164:	2300      	movs	r3, #0
 8000166:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000168:	463b      	mov	r3, r7
 800016a:	4619      	mov	r1, r3
 800016c:	480d      	ldr	r0, [pc, #52]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800016e:	f001 fa29 	bl	80015c4 <HAL_ADC_ConfigChannel>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <ADC_Convert_Rank1+0x30>
	{
		Error_Handler();
 8000178:	f000 fa4e 	bl	8000618 <Error_Handler>
	}

	HAL_ADC_Start (&hadc1);
 800017c:	4809      	ldr	r0, [pc, #36]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800017e:	f001 f835 	bl	80011ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc1, 100);
 8000182:	2164      	movs	r1, #100	@ 0x64
 8000184:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 8000186:	f001 f90b 	bl	80013a0 <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue (&hadc1);
 800018a:	4806      	ldr	r0, [pc, #24]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800018c:	f001 fa0e 	bl	80015ac <HAL_ADC_GetValue>
 8000190:	4603      	mov	r3, r0
 8000192:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop (&hadc1);
 8000194:	4803      	ldr	r0, [pc, #12]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 8000196:	f001 f8d7 	bl	8001348 <HAL_ADC_Stop>

	return val;
 800019a:	89fb      	ldrh	r3, [r7, #14]
}
 800019c:	4618      	mov	r0, r3
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20000174 	.word	0x20000174

080001a8 <ADC_Convert_Rank2>:

uint16_t ADC_Convert_Rank2 (void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80001ae:	463b      	mov	r3, r7
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9; // ADC_CHANNEL_0
 80001b8:	2309      	movs	r3, #9
 80001ba:	603b      	str	r3, [r7, #0]
 	sConfig.Rank = ADC_REGULAR_RANK_1;
 80001bc:	2301      	movs	r3, #1
 80001be:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2 /*&hadc1*/, &sConfig) != HAL_OK)
 80001c4:	463b      	mov	r3, r7
 80001c6:	4619      	mov	r1, r3
 80001c8:	480d      	ldr	r0, [pc, #52]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001ca:	f001 f9fb 	bl	80015c4 <HAL_ADC_ConfigChannel>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <ADC_Convert_Rank2+0x30>
	{
		Error_Handler();
 80001d4:	f000 fa20 	bl	8000618 <Error_Handler>
	}

	HAL_ADC_Start (&hadc2 /*&hadc1*/);
 80001d8:	4809      	ldr	r0, [pc, #36]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001da:	f001 f807 	bl	80011ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc2 /*&hadc1*/, 100);
 80001de:	2164      	movs	r1, #100	@ 0x64
 80001e0:	4807      	ldr	r0, [pc, #28]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001e2:	f001 f8dd 	bl	80013a0 <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue (&hadc2 /*&hadc1*/);
 80001e6:	4806      	ldr	r0, [pc, #24]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001e8:	f001 f9e0 	bl	80015ac <HAL_ADC_GetValue>
 80001ec:	4603      	mov	r3, r0
 80001ee:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop (&hadc2 /*&hadc1*/);
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001f2:	f001 f8a9 	bl	8001348 <HAL_ADC_Stop>

	return val;
 80001f6:	89fb      	ldrh	r3, [r7, #14]
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3710      	adds	r7, #16
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	200001a4 	.word	0x200001a4

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 feb6 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f82c 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f000 f9b0 	bl	8000574 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000214:	f008 fa62 	bl	80086dc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000218:	f000 f884 	bl	8000324 <MX_ADC1_Init>
  MX_TIM2_Init();
 800021c:	f000 f90e 	bl	800043c <MX_TIM2_Init>
  MX_ADC2_Init();
 8000220:	f000 f8ce 	bl	80003c0 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000224:	f000 f958 	bl	80004d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Queue_Init (DEFAULT_QUEUE_SIZE);
 8000228:	201e      	movs	r0, #30
 800022a:	f000 f9fb 	bl	8000624 <Queue_Init>
//	//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//		USBD_MIDI_SendPackets (&hUsbDeviceFS, P_vol_message, 4);
//	//		Enqueue (P_vol_message);
//	}

  HAL_NVIC_SetPriority (TIM2_IRQn, 0, 0);
 800022e:	2200      	movs	r2, #0
 8000230:	2100      	movs	r1, #0
 8000232:	201c      	movs	r0, #28
 8000234:	f001 fc31 	bl	8001a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM2_IRQn);
 8000238:	201c      	movs	r0, #28
 800023a:	f001 fc4a 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim2);
 800023e:	4808      	ldr	r0, [pc, #32]	@ (8000260 <main+0x5c>)
 8000240:	f004 f916 	bl	8004470 <HAL_TIM_Base_Start_IT>

  HAL_NVIC_SetPriority (TIM3_IRQn , 0, 0);
 8000244:	2200      	movs	r2, #0
 8000246:	2100      	movs	r1, #0
 8000248:	201d      	movs	r0, #29
 800024a:	f001 fc26 	bl	8001a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM3_IRQn );
 800024e:	201d      	movs	r0, #29
 8000250:	f001 fc3f 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim3);
 8000254:	4803      	ldr	r0, [pc, #12]	@ (8000264 <main+0x60>)
 8000256:	f004 f90b 	bl	8004470 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025a:	bf00      	nop
 800025c:	e7fd      	b.n	800025a <main+0x56>
 800025e:	bf00      	nop
 8000260:	200001d4 	.word	0x200001d4
 8000264:	2000021c 	.word	0x2000021c

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b094      	sub	sp, #80	@ 0x50
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000272:	2228      	movs	r2, #40	@ 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f008 feae 	bl	8008fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000298:	2301      	movs	r3, #1
 800029a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a6:	2301      	movs	r3, #1
 80002a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002aa:	2302      	movs	r3, #2
 80002ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 fb1e 	bl	8003900 <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ca:	f000 f9a5 	bl	8000618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	230f      	movs	r3, #15
 80002d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	2101      	movs	r1, #1
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 fd8a 	bl	8003e04 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002f6:	f000 f98f 	bl	8000618 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80002fa:	2312      	movs	r3, #18
 80002fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80002fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000302:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000304:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000308:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f003 fef3 	bl	80040f8 <HAL_RCCEx_PeriphCLKConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000318:	f000 f97e 	bl	8000618 <Error_Handler>
  }
}
 800031c:	bf00      	nop
 800031e:	3750      	adds	r7, #80	@ 0x50
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000334:	4b20      	ldr	r3, [pc, #128]	@ (80003b8 <MX_ADC1_Init+0x94>)
 8000336:	4a21      	ldr	r2, [pc, #132]	@ (80003bc <MX_ADC1_Init+0x98>)
 8000338:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800033a:	4b1f      	ldr	r3, [pc, #124]	@ (80003b8 <MX_ADC1_Init+0x94>)
 800033c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000342:	4b1d      	ldr	r3, [pc, #116]	@ (80003b8 <MX_ADC1_Init+0x94>)
 8000344:	2200      	movs	r2, #0
 8000346:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <MX_ADC1_Init+0x94>)
 800034a:	2200      	movs	r2, #0
 800034c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034e:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <MX_ADC1_Init+0x94>)
 8000350:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000354:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000356:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <MX_ADC1_Init+0x94>)
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800035c:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <MX_ADC1_Init+0x94>)
 800035e:	2202      	movs	r2, #2
 8000360:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000362:	4815      	ldr	r0, [pc, #84]	@ (80003b8 <MX_ADC1_Init+0x94>)
 8000364:	f000 fe6a 	bl	800103c <HAL_ADC_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800036e:	f000 f953 	bl	8000618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000372:	2308      	movs	r3, #8
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2301      	movs	r3, #1
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <MX_ADC1_Init+0x94>)
 8000384:	f001 f91e 	bl	80015c4 <HAL_ADC_ConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800038e:	f000 f943 	bl	8000618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000396:	2302      	movs	r3, #2
 8000398:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4619      	mov	r1, r3
 800039e:	4806      	ldr	r0, [pc, #24]	@ (80003b8 <MX_ADC1_Init+0x94>)
 80003a0:	f001 f910 	bl	80015c4 <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003aa:	f000 f935 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000174 	.word	0x20000174
 80003bc:	40012400 	.word	0x40012400

080003c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003d0:	4b18      	ldr	r3, [pc, #96]	@ (8000434 <MX_ADC2_Init+0x74>)
 80003d2:	4a19      	ldr	r2, [pc, #100]	@ (8000438 <MX_ADC2_Init+0x78>)
 80003d4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003d6:	4b17      	ldr	r3, [pc, #92]	@ (8000434 <MX_ADC2_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003dc:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <MX_ADC2_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003e2:	4b14      	ldr	r3, [pc, #80]	@ (8000434 <MX_ADC2_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e8:	4b12      	ldr	r3, [pc, #72]	@ (8000434 <MX_ADC2_Init+0x74>)
 80003ea:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003ee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003f0:	4b10      	ldr	r3, [pc, #64]	@ (8000434 <MX_ADC2_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80003f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <MX_ADC2_Init+0x74>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003fc:	480d      	ldr	r0, [pc, #52]	@ (8000434 <MX_ADC2_Init+0x74>)
 80003fe:	f000 fe1d 	bl	800103c <HAL_ADC_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000408:	f000 f906 	bl	8000618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800040c:	2309      	movs	r3, #9
 800040e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000410:	2301      	movs	r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4619      	mov	r1, r3
 800041c:	4805      	ldr	r0, [pc, #20]	@ (8000434 <MX_ADC2_Init+0x74>)
 800041e:	f001 f8d1 	bl	80015c4 <HAL_ADC_ConfigChannel>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000428:	f000 f8f6 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	200001a4 	.word	0x200001a4
 8000438:	40012800 	.word	0x40012800

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	463b      	mov	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000458:	4b1e      	ldr	r3, [pc, #120]	@ (80004d4 <MX_TIM2_Init+0x98>)
 800045a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800045e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 359;
 8000460:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <MX_TIM2_Init+0x98>)
 8000462:	f240 1267 	movw	r2, #359	@ 0x167
 8000466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000468:	4b1a      	ldr	r3, [pc, #104]	@ (80004d4 <MX_TIM2_Init+0x98>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 800046e:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <MX_TIM2_Init+0x98>)
 8000470:	f240 321f 	movw	r2, #799	@ 0x31f
 8000474:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000476:	4b17      	ldr	r3, [pc, #92]	@ (80004d4 <MX_TIM2_Init+0x98>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <MX_TIM2_Init+0x98>)
 800047e:	2200      	movs	r2, #0
 8000480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000482:	4814      	ldr	r0, [pc, #80]	@ (80004d4 <MX_TIM2_Init+0x98>)
 8000484:	f003 ffa4 	bl	80043d0 <HAL_TIM_Base_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800048e:	f000 f8c3 	bl	8000618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000496:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000498:	f107 0308 	add.w	r3, r7, #8
 800049c:	4619      	mov	r1, r3
 800049e:	480d      	ldr	r0, [pc, #52]	@ (80004d4 <MX_TIM2_Init+0x98>)
 80004a0:	f004 f928 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80004aa:	f000 f8b5 	bl	8000618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b6:	463b      	mov	r3, r7
 80004b8:	4619      	mov	r1, r3
 80004ba:	4806      	ldr	r0, [pc, #24]	@ (80004d4 <MX_TIM2_Init+0x98>)
 80004bc:	f004 fb12 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004c6:	f000 f8a7 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200001d4 	.word	0x200001d4

080004d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ec:	463b      	mov	r3, r7
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004f4:	4b1d      	ldr	r3, [pc, #116]	@ (800056c <MX_TIM3_Init+0x94>)
 80004f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000570 <MX_TIM3_Init+0x98>)
 80004f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1799;
 80004fa:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <MX_TIM3_Init+0x94>)
 80004fc:	f240 7207 	movw	r2, #1799	@ 0x707
 8000500:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000502:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <MX_TIM3_Init+0x94>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 799;
 8000508:	4b18      	ldr	r3, [pc, #96]	@ (800056c <MX_TIM3_Init+0x94>)
 800050a:	f240 321f 	movw	r2, #799	@ 0x31f
 800050e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000510:	4b16      	ldr	r3, [pc, #88]	@ (800056c <MX_TIM3_Init+0x94>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000516:	4b15      	ldr	r3, [pc, #84]	@ (800056c <MX_TIM3_Init+0x94>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800051c:	4813      	ldr	r0, [pc, #76]	@ (800056c <MX_TIM3_Init+0x94>)
 800051e:	f003 ff57 	bl	80043d0 <HAL_TIM_Base_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000528:	f000 f876 	bl	8000618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	4619      	mov	r1, r3
 8000538:	480c      	ldr	r0, [pc, #48]	@ (800056c <MX_TIM3_Init+0x94>)
 800053a:	f004 f8db 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000544:	f000 f868 	bl	8000618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000548:	2300      	movs	r3, #0
 800054a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_TIM3_Init+0x94>)
 8000556:	f004 fac5 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000560:	f000 f85a 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000021c 	.word	0x2000021c
 8000570:	40000400 	.word	0x40000400

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000588:	4b20      	ldr	r3, [pc, #128]	@ (800060c <MX_GPIO_Init+0x98>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a1f      	ldr	r2, [pc, #124]	@ (800060c <MX_GPIO_Init+0x98>)
 800058e:	f043 0320 	orr.w	r3, r3, #32
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <MX_GPIO_Init+0x98>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0320 	and.w	r3, r3, #32
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <MX_GPIO_Init+0x98>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a19      	ldr	r2, [pc, #100]	@ (800060c <MX_GPIO_Init+0x98>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b17      	ldr	r3, [pc, #92]	@ (800060c <MX_GPIO_Init+0x98>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <MX_GPIO_Init+0x98>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a13      	ldr	r2, [pc, #76]	@ (800060c <MX_GPIO_Init+0x98>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_GPIO_Init+0x98>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : C_B_Pin CS_B_Pin D_B_Pin DS_B_Pin
                           E_B_Pin F_B_Pin FS_B_Pin */
  GPIO_InitStruct.Pin = C_B_Pin|CS_B_Pin|D_B_Pin|DS_B_Pin
 80005d0:	f248 03fc 	movw	r3, #33020	@ 0x80fc
 80005d4:	613b      	str	r3, [r7, #16]
                          |E_B_Pin|F_B_Pin|FS_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	480a      	ldr	r0, [pc, #40]	@ (8000610 <MX_GPIO_Init+0x9c>)
 80005e6:	f001 fa8f 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_B_Pin GS_B_Pin A_B_Pin AS_B_Pin
                           B_B_Pin SP_B_Pin */
  GPIO_InitStruct.Pin = G_B_Pin|GS_B_Pin|A_B_Pin|AS_B_Pin
 80005ea:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80005ee:	613b      	str	r3, [r7, #16]
                          |B_B_Pin|SP_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_GPIO_Init+0xa0>)
 8000600:	f001 fa82 	bl	8001b08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800
 8000614:	40010c00 	.word	0x40010c00

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
}
 800061e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <Error_Handler+0x8>

08000624 <Queue_Init>:
void *max_size_v =  &max_size;
void *curr_size_v =  &curr_size;


/* INITIALIZATION FUNCTION */
void Queue_Init (uint16_t size) {
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
    // Allocate memory for head and tail
    head = (queue_t *) malloc (sizeof (queue_t));
 800062e:	2008      	movs	r0, #8
 8000630:	f008 fc14 	bl	8008e5c <malloc>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <Queue_Init+0x64>)
 800063a:	601a      	str	r2, [r3, #0]
    head->next = (queue_t *) malloc (sizeof (queue_t));
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <Queue_Init+0x64>)
 800063e:	681c      	ldr	r4, [r3, #0]
 8000640:	2008      	movs	r0, #8
 8000642:	f008 fc0b 	bl	8008e5c <malloc>
 8000646:	4603      	mov	r3, r0
 8000648:	6063      	str	r3, [r4, #4]

    tail = (queue_t *) malloc (sizeof (queue_t));
 800064a:	2008      	movs	r0, #8
 800064c:	f008 fc06 	bl	8008e5c <malloc>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <Queue_Init+0x68>)
 8000656:	601a      	str	r2, [r3, #0]
    tail->next = (queue_t *) malloc (sizeof (queue_t));
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <Queue_Init+0x68>)
 800065a:	681c      	ldr	r4, [r3, #0]
 800065c:	2008      	movs	r0, #8
 800065e:	f008 fbfd 	bl	8008e5c <malloc>
 8000662:	4603      	mov	r3, r0
 8000664:	6063      	str	r3, [r4, #4]

    head = tail = NULL;
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <Queue_Init+0x68>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <Queue_Init+0x68>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <Queue_Init+0x64>)
 8000672:	6013      	str	r3, [r2, #0]

    // Initialize max_size and curr_size
    max_size = size;
 8000674:	4a06      	ldr	r2, [pc, #24]	@ (8000690 <Queue_Init+0x6c>)
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	8013      	strh	r3, [r2, #0]
    curr_size = 0;
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <Queue_Init+0x70>)
 800067c:	2200      	movs	r2, #0
 800067e:	801a      	strh	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	20000264 	.word	0x20000264
 800068c:	20000268 	.word	0x20000268
 8000690:	2000026c 	.word	0x2000026c
 8000694:	2000026e 	.word	0x2000026e

08000698 <Enqueue>:
    free (tail_v);
    free (max_size_v);
    free (curr_size_v);
}

bool Enqueue (uint8_t *message) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    // If message is empty, return false
    if (message == NULL)    return false;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <Enqueue+0x12>
 80006a6:	2300      	movs	r3, #0
 80006a8:	e032      	b.n	8000710 <Enqueue+0x78>

    // Create a node to store message
    queue_t *node = (queue_t *) malloc (sizeof (queue_t));
 80006aa:	2008      	movs	r0, #8
 80006ac:	f008 fbd6 	bl	8008e5c <malloc>
 80006b0:	4603      	mov	r3, r0
 80006b2:	60fb      	str	r3, [r7, #12]
    memcpy (node->message, message, 4);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	601a      	str	r2, [r3, #0]
    node->next = NULL;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]

    // If head is NULL or curr_size is 0, node becomes both head and tail
    if (head == NULL || curr_size == 0)    head = tail = node;
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <Enqueue+0x80>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <Enqueue+0x3a>
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <Enqueue+0x84>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d107      	bne.n	80006e2 <Enqueue+0x4a>
 80006d2:	4a13      	ldr	r2, [pc, #76]	@ (8000720 <Enqueue+0x88>)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <Enqueue+0x88>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <Enqueue+0x80>)
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	e00f      	b.n	8000702 <Enqueue+0x6a>
    // else if max size has not been exceeded, node becomes new tail
    else if (curr_size < max_size) {
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <Enqueue+0x84>)
 80006e4:	881a      	ldrh	r2, [r3, #0]
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <Enqueue+0x8c>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d207      	bcs.n	80006fe <Enqueue+0x66>
        tail->next = node;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <Enqueue+0x88>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	605a      	str	r2, [r3, #4]
        tail = node;
 80006f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000720 <Enqueue+0x88>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	e001      	b.n	8000702 <Enqueue+0x6a>
    }

    else    return false;
 80006fe:	2300      	movs	r3, #0
 8000700:	e006      	b.n	8000710 <Enqueue+0x78>

    curr_size++;
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <Enqueue+0x84>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b04      	ldr	r3, [pc, #16]	@ (800071c <Enqueue+0x84>)
 800070c:	801a      	strh	r2, [r3, #0]
    return true;
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000264 	.word	0x20000264
 800071c:	2000026e 	.word	0x2000026e
 8000720:	20000268 	.word	0x20000268
 8000724:	2000026c 	.word	0x2000026c

08000728 <Dequeue>:

uint8_t *Dequeue () {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
    // if head is NULL or curr_size is 0, return NULL
    if (head == NULL || curr_size == 0)     return NULL;
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <Dequeue+0x5c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d003      	beq.n	800073e <Dequeue+0x16>
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <Dequeue+0x60>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <Dequeue+0x1a>
 800073e:	2300      	movs	r3, #0
 8000740:	e01b      	b.n	800077a <Dequeue+0x52>

    queue_t *temp = head;
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <Dequeue+0x5c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	607b      	str	r3, [r7, #4]
    uint8_t *message = malloc (sizeof(uint8_t) * 4);
 8000748:	2004      	movs	r0, #4
 800074a:	f008 fb87 	bl	8008e5c <malloc>
 800074e:	4603      	mov	r3, r0
 8000750:	603b      	str	r3, [r7, #0]
    memcpy (message, temp->message, 4);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	601a      	str	r2, [r3, #0]

    head = head->next;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <Dequeue+0x5c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <Dequeue+0x5c>)
 8000764:	6013      	str	r3, [r2, #0]
    curr_size--;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <Dequeue+0x60>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	3b01      	subs	r3, #1
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <Dequeue+0x60>)
 8000770:	801a      	strh	r2, [r3, #0]

    free (temp);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f008 fb7a 	bl	8008e6c <free>
    return message;
 8000778:	683b      	ldr	r3, [r7, #0]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000264 	.word	0x20000264
 8000788:	2000026e 	.word	0x2000026e

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <HAL_MspInit+0x5c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007c2:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <HAL_MspInit+0x60>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <HAL_MspInit+0x60>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000

080007f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a33      	ldr	r2, [pc, #204]	@ (80008d8 <HAL_ADC_MspInit+0xe8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d138      	bne.n	8000882 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000810:	4b32      	ldr	r3, [pc, #200]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a31      	ldr	r2, [pc, #196]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b2f      	ldr	r3, [pc, #188]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a2b      	ldr	r2, [pc, #172]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a25      	ldr	r2, [pc, #148]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085c:	2303      	movs	r3, #3
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	4619      	mov	r1, r3
 8000866:	481e      	ldr	r0, [pc, #120]	@ (80008e0 <HAL_ADC_MspInit+0xf0>)
 8000868:	f001 f94e 	bl	8001b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D_V_Pin;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000870:	2303      	movs	r3, #3
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(D_V_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	4619      	mov	r1, r3
 800087a:	481a      	ldr	r0, [pc, #104]	@ (80008e4 <HAL_ADC_MspInit+0xf4>)
 800087c:	f001 f944 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000880:	e026      	b.n	80008d0 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <HAL_ADC_MspInit+0xf8>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d121      	bne.n	80008d0 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 8000892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 80008aa:	f043 0308 	orr.w	r3, r3, #8
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <HAL_ADC_MspInit+0xec>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0308 	and.w	r3, r3, #8
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P_V_Pin;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c0:	2303      	movs	r3, #3
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(P_V_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <HAL_ADC_MspInit+0xf4>)
 80008cc:	f001 f91c 	bl	8001b08 <HAL_GPIO_Init>
}
 80008d0:	bf00      	nop
 80008d2:	3730      	adds	r7, #48	@ 0x30
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40012400 	.word	0x40012400
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010800 	.word	0x40010800
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	40012800 	.word	0x40012800

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008fc:	d114      	bne.n	8000928 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a18      	ldr	r2, [pc, #96]	@ (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <HAL_TIM_Base_MspInit+0x78>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	201c      	movs	r0, #28
 800091c:	f001 f8bd 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000920:	201c      	movs	r0, #28
 8000922:	f001 f8d6 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000926:	e018      	b.n	800095a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_TIM_Base_MspInit+0x7c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d113      	bne.n	800095a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a0b      	ldr	r2, [pc, #44]	@ (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_TIM_Base_MspInit+0x78>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	201d      	movs	r0, #29
 8000950:	f001 f8a3 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000954:	201d      	movs	r0, #29
 8000956:	f001 f8bc 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40000400 	.word	0x40000400

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 fb22 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009ca:	f001 fb54 	bl	8002076 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000790 	.word	0x20000790

080009d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	uint8_t *msg = Dequeue ();
 80009de:	f7ff fea3 	bl	8000728 <Dequeue>
 80009e2:	6078      	str	r0, [r7, #4]
	if (msg != NULL) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00b      	beq.n	8000a02 <TIM2_IRQHandler+0x2a>
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 80009ea:	bf00      	nop
 80009ec:	48a7      	ldr	r0, [pc, #668]	@ (8000c8c <TIM2_IRQHandler+0x2b4>)
 80009ee:	f006 fd61 	bl	80074b4 <USBD_MIDI_GetState>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f9      	bne.n	80009ec <TIM2_IRQHandler+0x14>
		USBD_MIDI_SendPackets (&hUsbDeviceFS, msg, 4);
 80009f8:	2204      	movs	r2, #4
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	48a3      	ldr	r0, [pc, #652]	@ (8000c8c <TIM2_IRQHandler+0x2b4>)
 80009fe:	f006 fd66 	bl	80074ce <USBD_MIDI_SendPackets>
	}

	if (!HAL_GPIO_ReadPin (C_B_GPIO_Port, C_B_Pin)) {
 8000a02:	2104      	movs	r1, #4
 8000a04:	48a2      	ldr	r0, [pc, #648]	@ (8000c90 <TIM2_IRQHandler+0x2b8>)
 8000a06:	f001 fa03 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d111      	bne.n	8000a34 <TIM2_IRQHandler+0x5c>
		if (!pressed) {
 8000a10:	4ba0      	ldr	r3, [pc, #640]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	f083 0301 	eor.w	r3, r3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 8158 	beq.w	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000a20:	4b9c      	ldr	r3, [pc, #624]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]

			Note_Change (C);
 8000a26:	2030      	movs	r0, #48	@ 0x30
 8000a28:	f000 fa0e 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000a2c:	489a      	ldr	r0, [pc, #616]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000a2e:	f7ff fe33 	bl	8000698 <Enqueue>
 8000a32:	e14d      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (CS_B_GPIO_Port, CS_B_Pin)) {
 8000a34:	2108      	movs	r1, #8
 8000a36:	4896      	ldr	r0, [pc, #600]	@ (8000c90 <TIM2_IRQHandler+0x2b8>)
 8000a38:	f001 f9ea 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d111      	bne.n	8000a66 <TIM2_IRQHandler+0x8e>
		if (!pressed) {
 8000a42:	4b94      	ldr	r3, [pc, #592]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	f083 0301 	eor.w	r3, r3, #1
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 813f 	beq.w	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000a52:	4b90      	ldr	r3, [pc, #576]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]

			Note_Change (CS);
 8000a58:	2031      	movs	r0, #49	@ 0x31
 8000a5a:	f000 f9f5 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000a5e:	488e      	ldr	r0, [pc, #568]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000a60:	f7ff fe1a 	bl	8000698 <Enqueue>
 8000a64:	e134      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (D_B_GPIO_Port, D_B_Pin)) {
 8000a66:	2110      	movs	r1, #16
 8000a68:	4889      	ldr	r0, [pc, #548]	@ (8000c90 <TIM2_IRQHandler+0x2b8>)
 8000a6a:	f001 f9d1 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d111      	bne.n	8000a98 <TIM2_IRQHandler+0xc0>
		if (!pressed) {
 8000a74:	4b87      	ldr	r3, [pc, #540]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	f083 0301 	eor.w	r3, r3, #1
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f000 8126 	beq.w	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000a84:	4b83      	ldr	r3, [pc, #524]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]

			Note_Change (D);
 8000a8a:	2032      	movs	r0, #50	@ 0x32
 8000a8c:	f000 f9dc 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000a90:	4881      	ldr	r0, [pc, #516]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000a92:	f7ff fe01 	bl	8000698 <Enqueue>
 8000a96:	e11b      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (DS_B_GPIO_Port, DS_B_Pin)) {
 8000a98:	2120      	movs	r1, #32
 8000a9a:	487d      	ldr	r0, [pc, #500]	@ (8000c90 <TIM2_IRQHandler+0x2b8>)
 8000a9c:	f001 f9b8 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d111      	bne.n	8000aca <TIM2_IRQHandler+0xf2>
		if (!pressed) {
 8000aa6:	4b7b      	ldr	r3, [pc, #492]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 810d 	beq.w	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000ab6:	4b77      	ldr	r3, [pc, #476]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]

			Note_Change (DS);
 8000abc:	2033      	movs	r0, #51	@ 0x33
 8000abe:	f000 f9c3 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000ac2:	4875      	ldr	r0, [pc, #468]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000ac4:	f7ff fde8 	bl	8000698 <Enqueue>
 8000ac8:	e102      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (E_B_GPIO_Port, E_B_Pin)) {
 8000aca:	2140      	movs	r1, #64	@ 0x40
 8000acc:	4870      	ldr	r0, [pc, #448]	@ (8000c90 <TIM2_IRQHandler+0x2b8>)
 8000ace:	f001 f99f 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d111      	bne.n	8000afc <TIM2_IRQHandler+0x124>
		if (!pressed) {
 8000ad8:	4b6e      	ldr	r3, [pc, #440]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	f083 0301 	eor.w	r3, r3, #1
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 80f4 	beq.w	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]

			Note_Change (E);
 8000aee:	2034      	movs	r0, #52	@ 0x34
 8000af0:	f000 f9aa 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000af4:	4868      	ldr	r0, [pc, #416]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000af6:	f7ff fdcf 	bl	8000698 <Enqueue>
 8000afa:	e0e9      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (F_B_GPIO_Port, F_B_Pin)) {
 8000afc:	2180      	movs	r1, #128	@ 0x80
 8000afe:	4864      	ldr	r0, [pc, #400]	@ (8000c90 <TIM2_IRQHandler+0x2b8>)
 8000b00:	f001 f986 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d111      	bne.n	8000b2e <TIM2_IRQHandler+0x156>
		if (!pressed) {
 8000b0a:	4b62      	ldr	r3, [pc, #392]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f083 0301 	eor.w	r3, r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 80db 	beq.w	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]

			Note_Change (F);
 8000b20:	2035      	movs	r0, #53	@ 0x35
 8000b22:	f000 f991 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000b26:	485c      	ldr	r0, [pc, #368]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000b28:	f7ff fdb6 	bl	8000698 <Enqueue>
 8000b2c:	e0d0      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (FS_B_GPIO_Port, FS_B_Pin)) {
 8000b2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b32:	4857      	ldr	r0, [pc, #348]	@ (8000c90 <TIM2_IRQHandler+0x2b8>)
 8000b34:	f001 f96c 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d111      	bne.n	8000b62 <TIM2_IRQHandler+0x18a>
		if (!pressed) {
 8000b3e:	4b55      	ldr	r3, [pc, #340]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	f083 0301 	eor.w	r3, r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f000 80c1 	beq.w	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000b4e:	4b51      	ldr	r3, [pc, #324]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]

			Note_Change (FS);
 8000b54:	2036      	movs	r0, #54	@ 0x36
 8000b56:	f000 f977 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000b5a:	484f      	ldr	r0, [pc, #316]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000b5c:	f7ff fd9c 	bl	8000698 <Enqueue>
 8000b60:	e0b6      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (G_B_GPIO_Port, G_B_Pin)) {
 8000b62:	2108      	movs	r1, #8
 8000b64:	484d      	ldr	r0, [pc, #308]	@ (8000c9c <TIM2_IRQHandler+0x2c4>)
 8000b66:	f001 f953 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d111      	bne.n	8000b94 <TIM2_IRQHandler+0x1bc>
		if (!pressed) {
 8000b70:	4b48      	ldr	r3, [pc, #288]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	f083 0301 	eor.w	r3, r3, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 80a8 	beq.w	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000b80:	4b44      	ldr	r3, [pc, #272]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]

			Note_Change (G);
 8000b86:	2037      	movs	r0, #55	@ 0x37
 8000b88:	f000 f95e 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000b8c:	4842      	ldr	r0, [pc, #264]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000b8e:	f7ff fd83 	bl	8000698 <Enqueue>
 8000b92:	e09d      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (GS_B_GPIO_Port, GS_B_Pin)) {
 8000b94:	2110      	movs	r1, #16
 8000b96:	4841      	ldr	r0, [pc, #260]	@ (8000c9c <TIM2_IRQHandler+0x2c4>)
 8000b98:	f001 f93a 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d111      	bne.n	8000bc6 <TIM2_IRQHandler+0x1ee>
		if (!pressed) {
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	f083 0301 	eor.w	r3, r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 808f 	beq.w	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000bb2:	4b38      	ldr	r3, [pc, #224]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]

			Note_Change (GS);
 8000bb8:	2038      	movs	r0, #56	@ 0x38
 8000bba:	f000 f945 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000bbe:	4836      	ldr	r0, [pc, #216]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000bc0:	f7ff fd6a 	bl	8000698 <Enqueue>
 8000bc4:	e084      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (A_B_GPIO_Port, A_B_Pin)) {
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4834      	ldr	r0, [pc, #208]	@ (8000c9c <TIM2_IRQHandler+0x2c4>)
 8000bca:	f001 f921 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d110      	bne.n	8000bf6 <TIM2_IRQHandler+0x21e>
		if (!pressed) {
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	f083 0301 	eor.w	r3, r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d076      	beq.n	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000be2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]

			Note_Change (A);
 8000be8:	2039      	movs	r0, #57	@ 0x39
 8000bea:	f000 f92d 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000bee:	482a      	ldr	r0, [pc, #168]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000bf0:	f7ff fd52 	bl	8000698 <Enqueue>
 8000bf4:	e06c      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (AS_B_GPIO_Port, AS_B_Pin)) {
 8000bf6:	2140      	movs	r1, #64	@ 0x40
 8000bf8:	4828      	ldr	r0, [pc, #160]	@ (8000c9c <TIM2_IRQHandler+0x2c4>)
 8000bfa:	f001 f909 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d110      	bne.n	8000c26 <TIM2_IRQHandler+0x24e>
		if (!pressed) {
 8000c04:	4b23      	ldr	r3, [pc, #140]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	f083 0301 	eor.w	r3, r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d05e      	beq.n	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000c12:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]

			Note_Change (AS);
 8000c18:	203a      	movs	r0, #58	@ 0x3a
 8000c1a:	f000 f915 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000c1e:	481e      	ldr	r0, [pc, #120]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000c20:	f7ff fd3a 	bl	8000698 <Enqueue>
 8000c24:	e054      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (B_B_GPIO_Port, B_B_Pin)) {
 8000c26:	2180      	movs	r1, #128	@ 0x80
 8000c28:	481c      	ldr	r0, [pc, #112]	@ (8000c9c <TIM2_IRQHandler+0x2c4>)
 8000c2a:	f001 f8f1 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d110      	bne.n	8000c56 <TIM2_IRQHandler+0x27e>
		if (!pressed) {
 8000c34:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	f083 0301 	eor.w	r3, r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d046      	beq.n	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]

			Note_Change (B);
 8000c48:	203b      	movs	r0, #59	@ 0x3b
 8000c4a:	f000 f8fd 	bl	8000e48 <Note_Change>
			Enqueue (on_message);
 8000c4e:	4812      	ldr	r0, [pc, #72]	@ (8000c98 <TIM2_IRQHandler+0x2c0>)
 8000c50:	f7ff fd22 	bl	8000698 <Enqueue>
 8000c54:	e03c      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
		}
	} else if (!HAL_GPIO_ReadPin (SP_B_GPIO_Port, SP_B_Pin)) {
 8000c56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c5a:	4810      	ldr	r0, [pc, #64]	@ (8000c9c <TIM2_IRQHandler+0x2c4>)
 8000c5c:	f001 f8d8 	bl	8001e10 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d120      	bne.n	8000ca8 <TIM2_IRQHandler+0x2d0>
		if (!pressed) {
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	f083 0301 	eor.w	r3, r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d02d      	beq.n	8000cd0 <TIM2_IRQHandler+0x2f8>
			pressed = true;
 8000c74:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <TIM2_IRQHandler+0x2bc>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
			control_toggled = true;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <TIM2_IRQHandler+0x2c8>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]

			Toggle_Control ();
 8000c80:	f000 f8f6 	bl	8000e70 <Toggle_Control>
			Enqueue (PS_message);
 8000c84:	4807      	ldr	r0, [pc, #28]	@ (8000ca4 <TIM2_IRQHandler+0x2cc>)
 8000c86:	f7ff fd07 	bl	8000698 <Enqueue>
 8000c8a:	e021      	b.n	8000cd0 <TIM2_IRQHandler+0x2f8>
 8000c8c:	200002cc 	.word	0x200002cc
 8000c90:	40010800 	.word	0x40010800
 8000c94:	20000272 	.word	0x20000272
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	20000270 	.word	0x20000270
 8000ca4:	20000008 	.word	0x20000008
		}
	} else {
		if (pressed && !control_toggled) {
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <TIM2_IRQHandler+0x308>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d009      	beq.n	8000cc4 <TIM2_IRQHandler+0x2ec>
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <TIM2_IRQHandler+0x30c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <TIM2_IRQHandler+0x2ec>
			Enqueue (off_message);
 8000cbe:	480a      	ldr	r0, [pc, #40]	@ (8000ce8 <TIM2_IRQHandler+0x310>)
 8000cc0:	f7ff fcea 	bl	8000698 <Enqueue>
//			Note_Change (END);
		}

		pressed = false;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <TIM2_IRQHandler+0x308>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
		control_toggled = false;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <TIM2_IRQHandler+0x30c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
//		elapsed_times = 0;
//	}
//
//	elapsed_times++;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cd0:	4806      	ldr	r0, [pc, #24]	@ (8000cec <TIM2_IRQHandler+0x314>)
 8000cd2:	f003 fc1f 	bl	8004514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000272 	.word	0x20000272
 8000ce4:	20000270 	.word	0x20000270
 8000ce8:	20000004 	.word	0x20000004
 8000cec:	200001d4 	.word	0x200001d4

08000cf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	for (uint8_t i = 0; i < 16; i++)	D_sum += ADC_Convert_Rank1 ();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e00c      	b.n	8000d16 <TIM3_IRQHandler+0x26>
 8000cfc:	f7ff fa26 	bl	800014c <ADC_Convert_Rank1>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b45      	ldr	r3, [pc, #276]	@ (8000e1c <TIM3_IRQHandler+0x12c>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	4413      	add	r3, r2
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b43      	ldr	r3, [pc, #268]	@ (8000e1c <TIM3_IRQHandler+0x12c>)
 8000d0e:	801a      	strh	r2, [r3, #0]
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	3301      	adds	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d9ef      	bls.n	8000cfc <TIM3_IRQHandler+0xc>

	D_current = ((D_sum >> 4) * 127) / 4095;
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e1c <TIM3_IRQHandler+0x12c>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	091b      	lsrs	r3, r3, #4
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	4613      	mov	r3, r2
 8000d28:	01db      	lsls	r3, r3, #7
 8000d2a:	1a9b      	subs	r3, r3, r2
 8000d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8000e20 <TIM3_IRQHandler+0x130>)
 8000d2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d32:	441a      	add	r2, r3
 8000d34:	12d2      	asrs	r2, r2, #11
 8000d36:	17db      	asrs	r3, r3, #31
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b39      	ldr	r3, [pc, #228]	@ (8000e24 <TIM3_IRQHandler+0x134>)
 8000d3e:	801a      	strh	r2, [r3, #0]
	D_sum = 0;
 8000d40:	4b36      	ldr	r3, [pc, #216]	@ (8000e1c <TIM3_IRQHandler+0x12c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	801a      	strh	r2, [r3, #0]

	if (D_current < D_previous - 3 || D_current > D_previous + 3) {
 8000d46:	4b37      	ldr	r3, [pc, #220]	@ (8000e24 <TIM3_IRQHandler+0x134>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <TIM3_IRQHandler+0x138>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	429a      	cmp	r2, r3
 8000d54:	db07      	blt.n	8000d66 <TIM3_IRQHandler+0x76>
 8000d56:	4b33      	ldr	r3, [pc, #204]	@ (8000e24 <TIM3_IRQHandler+0x134>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <TIM3_IRQHandler+0x138>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	3303      	adds	r3, #3
 8000d62:	429a      	cmp	r2, r3
 8000d64:	dd0d      	ble.n	8000d82 <TIM3_IRQHandler+0x92>
		D_previous = D_current;
 8000d66:	4b2f      	ldr	r3, [pc, #188]	@ (8000e24 <TIM3_IRQHandler+0x134>)
 8000d68:	881a      	ldrh	r2, [r3, #0]
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <TIM3_IRQHandler+0x138>)
 8000d6c:	801a      	strh	r2, [r3, #0]
		D_vol_message [3] = D_current;
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e24 <TIM3_IRQHandler+0x134>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <TIM3_IRQHandler+0x13c>)
 8000d76:	70da      	strb	r2, [r3, #3]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
		USBD_MIDI_SendPackets (&hUsbDeviceFS, D_vol_message, 4);
 8000d78:	2204      	movs	r2, #4
 8000d7a:	492c      	ldr	r1, [pc, #176]	@ (8000e2c <TIM3_IRQHandler+0x13c>)
 8000d7c:	482c      	ldr	r0, [pc, #176]	@ (8000e30 <TIM3_IRQHandler+0x140>)
 8000d7e:	f006 fba6 	bl	80074ce <USBD_MIDI_SendPackets>
//		Enqueue (D_vol_message);
	}

	for (uint8_t i = 0; i < 16; i++)	P_sum += ADC_Convert_Rank2 ();
 8000d82:	2300      	movs	r3, #0
 8000d84:	71bb      	strb	r3, [r7, #6]
 8000d86:	e00c      	b.n	8000da2 <TIM3_IRQHandler+0xb2>
 8000d88:	f7ff fa0e 	bl	80001a8 <ADC_Convert_Rank2>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b28      	ldr	r3, [pc, #160]	@ (8000e34 <TIM3_IRQHandler+0x144>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	4413      	add	r3, r2
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <TIM3_IRQHandler+0x144>)
 8000d9a:	801a      	strh	r2, [r3, #0]
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	71bb      	strb	r3, [r7, #6]
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d9ef      	bls.n	8000d88 <TIM3_IRQHandler+0x98>

	P_current = ((P_sum >> 4) * 127) / 4095;
 8000da8:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <TIM3_IRQHandler+0x144>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	4613      	mov	r3, r2
 8000db4:	01db      	lsls	r3, r3, #7
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	4a19      	ldr	r2, [pc, #100]	@ (8000e20 <TIM3_IRQHandler+0x130>)
 8000dba:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbe:	441a      	add	r2, r3
 8000dc0:	12d2      	asrs	r2, r2, #11
 8000dc2:	17db      	asrs	r3, r3, #31
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <TIM3_IRQHandler+0x148>)
 8000dca:	801a      	strh	r2, [r3, #0]
	P_sum = 0;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <TIM3_IRQHandler+0x144>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	801a      	strh	r2, [r3, #0]

	if (P_current < P_previous - 3 || P_current > P_previous + 3) {
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <TIM3_IRQHandler+0x148>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <TIM3_IRQHandler+0x14c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	429a      	cmp	r2, r3
 8000de0:	db07      	blt.n	8000df2 <TIM3_IRQHandler+0x102>
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <TIM3_IRQHandler+0x148>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <TIM3_IRQHandler+0x14c>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	3303      	adds	r3, #3
 8000dee:	429a      	cmp	r2, r3
 8000df0:	dd0d      	ble.n	8000e0e <TIM3_IRQHandler+0x11e>
		P_previous = P_current;
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <TIM3_IRQHandler+0x148>)
 8000df4:	881a      	ldrh	r2, [r3, #0]
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <TIM3_IRQHandler+0x14c>)
 8000df8:	801a      	strh	r2, [r3, #0]
		P_vol_message [3] = P_current;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <TIM3_IRQHandler+0x148>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <TIM3_IRQHandler+0x150>)
 8000e02:	70da      	strb	r2, [r3, #3]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
		USBD_MIDI_SendPackets (&hUsbDeviceFS, P_vol_message, 4);
 8000e04:	2204      	movs	r2, #4
 8000e06:	490e      	ldr	r1, [pc, #56]	@ (8000e40 <TIM3_IRQHandler+0x150>)
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <TIM3_IRQHandler+0x140>)
 8000e0a:	f006 fb60 	bl	80074ce <USBD_MIDI_SendPackets>
//		Enqueue (P_vol_message);
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e0e:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <TIM3_IRQHandler+0x154>)
 8000e10:	f003 fb80 	bl	8004514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000278 	.word	0x20000278
 8000e20:	80080081 	.word	0x80080081
 8000e24:	20000276 	.word	0x20000276
 8000e28:	20000274 	.word	0x20000274
 8000e2c:	2000000c 	.word	0x2000000c
 8000e30:	200002cc 	.word	0x200002cc
 8000e34:	2000027e 	.word	0x2000027e
 8000e38:	2000027c 	.word	0x2000027c
 8000e3c:	2000027a 	.word	0x2000027a
 8000e40:	20000010 	.word	0x20000010
 8000e44:	2000021c 	.word	0x2000021c

08000e48 <Note_Change>:

/* USER CODE BEGIN 1 */
void Note_Change (uint8_t value) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
//	if (value == END) {
//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//		USBD_MIDI_SendPackets (&hUsbDeviceFS, off_message, 4);
//	} else {
		on_message [2] = value;
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <Note_Change+0x20>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	7093      	strb	r3, [r2, #2]
		off_message [2] = value;
 8000e58:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <Note_Change+0x24>)
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	7093      	strb	r3, [r2, #2]

//		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
//	}
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <Toggle_Control>:

void Toggle_Control () {
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
	play_toggled = !play_toggled;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <Toggle_Control+0x3c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf14      	ite	ne
 8000e7c:	2301      	movne	r3, #1
 8000e7e:	2300      	moveq	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f083 0301 	eor.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <Toggle_Control+0x3c>)
 8000e90:	701a      	strb	r2, [r3, #0]
	PS_message[3] = play_toggled ? PLAY : STOP;
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <Toggle_Control+0x3c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <Toggle_Control+0x2e>
 8000e9a:	227f      	movs	r2, #127	@ 0x7f
 8000e9c:	e000      	b.n	8000ea0 <Toggle_Control+0x30>
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <Toggle_Control+0x40>)
 8000ea2:	70da      	strb	r2, [r3, #3]

//	while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//	USBD_MIDI_SendPackets (&hUsbDeviceFS, PS_message, 4);
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000271 	.word	0x20000271
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	@ (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f008 f890 	bl	8009008 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20005000 	.word	0x20005000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	20000280 	.word	0x20000280
 8000f1c:	20000bc8 	.word	0x20000bc8

08000f20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f2c:	f7ff fff8 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f30:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f32:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f34:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a09      	ldr	r2, [pc, #36]	@ (8000f6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f48:	4c09      	ldr	r4, [pc, #36]	@ (8000f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f008 f85d 	bl	8009014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f5a:	f7ff f953 	bl	8000204 <main>
  bx lr
 8000f5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000f68:	08009194 	.word	0x08009194
  ldr r2, =_sbss
 8000f6c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000f70:	20000bc4 	.word	0x20000bc4

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_Init+0x28>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <HAL_Init+0x28>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 fd7b 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fbfa 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fd93 	bl	8001aee <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fd5b 	bl	8001a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000014 	.word	0x20000014
 8000ffc:	2000001c 	.word	0x2000001c
 8001000:	20000018 	.word	0x20000018

08001004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <HAL_IncTick+0x1c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_IncTick+0x20>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a03      	ldr	r2, [pc, #12]	@ (8001024 <HAL_IncTick+0x20>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	2000001c 	.word	0x2000001c
 8001024:	20000284 	.word	0x20000284

08001028 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b02      	ldr	r3, [pc, #8]	@ (8001038 <HAL_GetTick+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000284 	.word	0x20000284

0800103c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0be      	b.n	80011dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001068:	2b00      	cmp	r3, #0
 800106a:	d109      	bne.n	8001080 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fbb8 	bl	80007f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 fbf1 	bl	8001868 <ADC_ConversionStop_Disable>
 8001086:	4603      	mov	r3, r0
 8001088:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	f040 8099 	bne.w	80011ca <HAL_ADC_Init+0x18e>
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f040 8095 	bne.w	80011ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010a8:	f023 0302 	bic.w	r3, r3, #2
 80010ac:	f043 0202 	orr.w	r2, r3, #2
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7b1b      	ldrb	r3, [r3, #12]
 80010c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010d4:	d003      	beq.n	80010de <HAL_ADC_Init+0xa2>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <HAL_ADC_Init+0xa8>
 80010de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e2:	e000      	b.n	80010e6 <HAL_ADC_Init+0xaa>
 80010e4:	2300      	movs	r3, #0
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7d1b      	ldrb	r3, [r3, #20]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d119      	bne.n	8001128 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7b1b      	ldrb	r3, [r3, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d109      	bne.n	8001110 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	3b01      	subs	r3, #1
 8001102:	035a      	lsls	r2, r3, #13
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	e00b      	b.n	8001128 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001114:	f043 0220 	orr.w	r2, r3, #32
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	430a      	orrs	r2, r1
 800113a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <HAL_ADC_Init+0x1a8>)
 8001144:	4013      	ands	r3, r2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	430b      	orrs	r3, r1
 800114e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001158:	d003      	beq.n	8001162 <HAL_ADC_Init+0x126>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d104      	bne.n	800116c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	3b01      	subs	r3, #1
 8001168:	051b      	lsls	r3, r3, #20
 800116a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001172:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	430a      	orrs	r2, r1
 800117e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <HAL_ADC_Init+0x1ac>)
 8001188:	4013      	ands	r3, r2
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	429a      	cmp	r2, r3
 800118e:	d10b      	bne.n	80011a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800119a:	f023 0303 	bic.w	r3, r3, #3
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011a6:	e018      	b.n	80011da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ac:	f023 0312 	bic.w	r3, r3, #18
 80011b0:	f043 0210 	orr.w	r2, r3, #16
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011bc:	f043 0201 	orr.w	r2, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011c8:	e007      	b.n	80011da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ce:	f043 0210 	orr.w	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011da:	7dfb      	ldrb	r3, [r7, #23]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	ffe1f7fd 	.word	0xffe1f7fd
 80011e8:	ff1f0efe 	.word	0xff1f0efe

080011ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Start+0x1a>
 8001202:	2302      	movs	r3, #2
 8001204:	e098      	b.n	8001338 <HAL_ADC_Start+0x14c>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 fad0 	bl	80017b4 <ADC_Enable>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 8087 	bne.w	800132e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a41      	ldr	r2, [pc, #260]	@ (8001340 <HAL_ADC_Start+0x154>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d105      	bne.n	800124a <HAL_ADC_Start+0x5e>
 800123e:	4b41      	ldr	r3, [pc, #260]	@ (8001344 <HAL_ADC_Start+0x158>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d115      	bne.n	8001276 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001260:	2b00      	cmp	r3, #0
 8001262:	d026      	beq.n	80012b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800126c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001274:	e01d      	b.n	80012b2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a2f      	ldr	r2, [pc, #188]	@ (8001344 <HAL_ADC_Start+0x158>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d004      	beq.n	8001296 <HAL_ADC_Start+0xaa>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a2b      	ldr	r2, [pc, #172]	@ (8001340 <HAL_ADC_Start+0x154>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d10d      	bne.n	80012b2 <HAL_ADC_Start+0xc6>
 8001296:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <HAL_ADC_Start+0x158>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c2:	f023 0206 	bic.w	r2, r3, #6
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012ca:	e002      	b.n	80012d2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f06f 0202 	mvn.w	r2, #2
 80012e2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80012ee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80012f2:	d113      	bne.n	800131c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012f8:	4a11      	ldr	r2, [pc, #68]	@ (8001340 <HAL_ADC_Start+0x154>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d105      	bne.n	800130a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_ADC_Start+0x158>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001306:	2b00      	cmp	r3, #0
 8001308:	d108      	bne.n	800131c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	e00c      	b.n	8001336 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	e003      	b.n	8001336 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40012800 	.word	0x40012800
 8001344:	40012400 	.word	0x40012400

08001348 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_ADC_Stop+0x1a>
 800135e:	2302      	movs	r3, #2
 8001360:	e01a      	b.n	8001398 <HAL_ADC_Stop+0x50>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fa7c 	bl	8001868 <ADC_ConversionStop_Disable>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80013b6:	f7ff fe37 	bl	8001028 <HAL_GetTick>
 80013ba:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ce:	f043 0220 	orr.w	r2, r3, #32
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0d3      	b.n	800158a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d131      	bne.n	8001454 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d12a      	bne.n	8001454 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013fe:	e021      	b.n	8001444 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001406:	d01d      	beq.n	8001444 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_ADC_PollForConversion+0x7e>
 800140e:	f7ff fe0b 	bl	8001028 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d212      	bcs.n	8001444 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10b      	bne.n	8001444 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001430:	f043 0204 	orr.w	r2, r3, #4
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0a2      	b.n	800158a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0d6      	beq.n	8001400 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001452:	e070      	b.n	8001536 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001454:	4b4f      	ldr	r3, [pc, #316]	@ (8001594 <HAL_ADC_PollForConversion+0x1f4>)
 8001456:	681c      	ldr	r4, [r3, #0]
 8001458:	2002      	movs	r0, #2
 800145a:	f002 ff03 	bl	8004264 <HAL_RCCEx_GetPeriphCLKFreq>
 800145e:	4603      	mov	r3, r0
 8001460:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6919      	ldr	r1, [r3, #16]
 800146a:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <HAL_ADC_PollForConversion+0x1f8>)
 800146c:	400b      	ands	r3, r1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_ADC_PollForConversion+0x104>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68d9      	ldr	r1, [r3, #12]
 8001478:	4b48      	ldr	r3, [pc, #288]	@ (800159c <HAL_ADC_PollForConversion+0x1fc>)
 800147a:	400b      	ands	r3, r1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d111      	bne.n	80014a4 <HAL_ADC_PollForConversion+0x104>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6919      	ldr	r1, [r3, #16]
 8001486:	4b46      	ldr	r3, [pc, #280]	@ (80015a0 <HAL_ADC_PollForConversion+0x200>)
 8001488:	400b      	ands	r3, r1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d108      	bne.n	80014a0 <HAL_ADC_PollForConversion+0x100>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68d9      	ldr	r1, [r3, #12]
 8001494:	4b43      	ldr	r3, [pc, #268]	@ (80015a4 <HAL_ADC_PollForConversion+0x204>)
 8001496:	400b      	ands	r3, r1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_ADC_PollForConversion+0x100>
 800149c:	2314      	movs	r3, #20
 800149e:	e020      	b.n	80014e2 <HAL_ADC_PollForConversion+0x142>
 80014a0:	2329      	movs	r3, #41	@ 0x29
 80014a2:	e01e      	b.n	80014e2 <HAL_ADC_PollForConversion+0x142>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <HAL_ADC_PollForConversion+0x200>)
 80014ac:	400b      	ands	r3, r1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x120>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68d9      	ldr	r1, [r3, #12]
 80014b8:	4b3a      	ldr	r3, [pc, #232]	@ (80015a4 <HAL_ADC_PollForConversion+0x204>)
 80014ba:	400b      	ands	r3, r1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00d      	beq.n	80014dc <HAL_ADC_PollForConversion+0x13c>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6919      	ldr	r1, [r3, #16]
 80014c6:	4b38      	ldr	r3, [pc, #224]	@ (80015a8 <HAL_ADC_PollForConversion+0x208>)
 80014c8:	400b      	ands	r3, r1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d108      	bne.n	80014e0 <HAL_ADC_PollForConversion+0x140>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68d9      	ldr	r1, [r3, #12]
 80014d4:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <HAL_ADC_PollForConversion+0x208>)
 80014d6:	400b      	ands	r3, r1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_ADC_PollForConversion+0x140>
 80014dc:	2354      	movs	r3, #84	@ 0x54
 80014de:	e000      	b.n	80014e2 <HAL_ADC_PollForConversion+0x142>
 80014e0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014e8:	e021      	b.n	800152e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d01a      	beq.n	8001528 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_ADC_PollForConversion+0x168>
 80014f8:	f7ff fd96 	bl	8001028 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d20f      	bcs.n	8001528 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d90b      	bls.n	8001528 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001514:	f043 0204 	orr.w	r2, r3, #4
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e030      	b.n	800158a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3301      	adds	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	429a      	cmp	r2, r3
 8001534:	d8d9      	bhi.n	80014ea <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f06f 0212 	mvn.w	r2, #18
 800153e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001544:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001556:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800155a:	d115      	bne.n	8001588 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001560:	2b00      	cmp	r3, #0
 8001562:	d111      	bne.n	8001588 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001568:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	f043 0201 	orr.w	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	371c      	adds	r7, #28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}
 8001592:	bf00      	nop
 8001594:	20000014 	.word	0x20000014
 8001598:	24924924 	.word	0x24924924
 800159c:	00924924 	.word	0x00924924
 80015a0:	12492492 	.word	0x12492492
 80015a4:	00492492 	.word	0x00492492
 80015a8:	00249249 	.word	0x00249249

080015ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x20>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e0dc      	b.n	800179e <HAL_ADC_ConfigChannel+0x1da>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b06      	cmp	r3, #6
 80015f2:	d81c      	bhi.n	800162e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b05      	subs	r3, #5
 8001606:	221f      	movs	r2, #31
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	4019      	ands	r1, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	3b05      	subs	r3, #5
 8001620:	fa00 f203 	lsl.w	r2, r0, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	635a      	str	r2, [r3, #52]	@ 0x34
 800162c:	e03c      	b.n	80016a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d81c      	bhi.n	8001670 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	3b23      	subs	r3, #35	@ 0x23
 8001648:	221f      	movs	r2, #31
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	4019      	ands	r1, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	3b23      	subs	r3, #35	@ 0x23
 8001662:	fa00 f203 	lsl.w	r2, r0, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	631a      	str	r2, [r3, #48]	@ 0x30
 800166e:	e01b      	b.n	80016a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	3b41      	subs	r3, #65	@ 0x41
 8001682:	221f      	movs	r2, #31
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	4019      	ands	r1, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3b41      	subs	r3, #65	@ 0x41
 800169c:	fa00 f203 	lsl.w	r2, r0, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b09      	cmp	r3, #9
 80016ae:	d91c      	bls.n	80016ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68d9      	ldr	r1, [r3, #12]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	3b1e      	subs	r3, #30
 80016c2:	2207      	movs	r2, #7
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	4019      	ands	r1, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6898      	ldr	r0, [r3, #8]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	3b1e      	subs	r3, #30
 80016dc:	fa00 f203 	lsl.w	r2, r0, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	e019      	b.n	800171e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6919      	ldr	r1, [r3, #16]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	2207      	movs	r2, #7
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	4019      	ands	r1, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6898      	ldr	r0, [r3, #8]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d003      	beq.n	800172e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800172a:	2b11      	cmp	r3, #17
 800172c:	d132      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1d      	ldr	r2, [pc, #116]	@ (80017a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d125      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d126      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001754:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b10      	cmp	r3, #16
 800175c:	d11a      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <HAL_ADC_ConfigChannel+0x1e8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a13      	ldr	r2, [pc, #76]	@ (80017b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	0c9a      	lsrs	r2, r3, #18
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001774:	e002      	b.n	800177c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3b01      	subs	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x1b2>
 8001782:	e007      	b.n	8001794 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001788:	f043 0220 	orr.w	r2, r3, #32
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40012400 	.word	0x40012400
 80017ac:	20000014 	.word	0x20000014
 80017b0:	431bde83 	.word	0x431bde83

080017b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d040      	beq.n	8001854 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <ADC_Enable+0xac>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001864 <ADC_Enable+0xb0>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017f0:	e002      	b.n	80017f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f9      	bne.n	80017f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017fe:	f7ff fc13 	bl	8001028 <HAL_GetTick>
 8001802:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001804:	e01f      	b.n	8001846 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001806:	f7ff fc0f 	bl	8001028 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d918      	bls.n	8001846 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b01      	cmp	r3, #1
 8001820:	d011      	beq.n	8001846 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	f043 0210 	orr.w	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e007      	b.n	8001856 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b01      	cmp	r3, #1
 8001852:	d1d8      	bne.n	8001806 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000014 	.word	0x20000014
 8001864:	431bde83 	.word	0x431bde83

08001868 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b01      	cmp	r3, #1
 8001880:	d12e      	bne.n	80018e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0201 	bic.w	r2, r2, #1
 8001890:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001892:	f7ff fbc9 	bl	8001028 <HAL_GetTick>
 8001896:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001898:	e01b      	b.n	80018d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800189a:	f7ff fbc5 	bl	8001028 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d914      	bls.n	80018d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d10d      	bne.n	80018d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ba:	f043 0210 	orr.w	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e007      	b.n	80018e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d0dc      	beq.n	800189a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	@ (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4906      	ldr	r1, [pc, #24]	@ (8001984 <__NVIC_EnableIRQ+0x34>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	@ (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	@ 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	@ 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f7ff ff90 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff2d 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff42 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ff90 	bl	80019dc <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5f 	bl	8001988 <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff35 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffa2 	bl	8001a40 <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b08b      	sub	sp, #44	@ 0x2c
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	e169      	b.n	8001df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 8158 	bne.w	8001dea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a9a      	ldr	r2, [pc, #616]	@ (8001da8 <HAL_GPIO_Init+0x2a0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d05e      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b44:	4a98      	ldr	r2, [pc, #608]	@ (8001da8 <HAL_GPIO_Init+0x2a0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d875      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b4a:	4a98      	ldr	r2, [pc, #608]	@ (8001dac <HAL_GPIO_Init+0x2a4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d058      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b50:	4a96      	ldr	r2, [pc, #600]	@ (8001dac <HAL_GPIO_Init+0x2a4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d86f      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b56:	4a96      	ldr	r2, [pc, #600]	@ (8001db0 <HAL_GPIO_Init+0x2a8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d052      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b5c:	4a94      	ldr	r2, [pc, #592]	@ (8001db0 <HAL_GPIO_Init+0x2a8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d869      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b62:	4a94      	ldr	r2, [pc, #592]	@ (8001db4 <HAL_GPIO_Init+0x2ac>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d04c      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b68:	4a92      	ldr	r2, [pc, #584]	@ (8001db4 <HAL_GPIO_Init+0x2ac>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d863      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b6e:	4a92      	ldr	r2, [pc, #584]	@ (8001db8 <HAL_GPIO_Init+0x2b0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d046      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b74:	4a90      	ldr	r2, [pc, #576]	@ (8001db8 <HAL_GPIO_Init+0x2b0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d85d      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b7a:	2b12      	cmp	r3, #18
 8001b7c:	d82a      	bhi.n	8001bd4 <HAL_GPIO_Init+0xcc>
 8001b7e:	2b12      	cmp	r3, #18
 8001b80:	d859      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b82:	a201      	add	r2, pc, #4	@ (adr r2, 8001b88 <HAL_GPIO_Init+0x80>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001c03 	.word	0x08001c03
 8001b8c:	08001bdd 	.word	0x08001bdd
 8001b90:	08001bef 	.word	0x08001bef
 8001b94:	08001c31 	.word	0x08001c31
 8001b98:	08001c37 	.word	0x08001c37
 8001b9c:	08001c37 	.word	0x08001c37
 8001ba0:	08001c37 	.word	0x08001c37
 8001ba4:	08001c37 	.word	0x08001c37
 8001ba8:	08001c37 	.word	0x08001c37
 8001bac:	08001c37 	.word	0x08001c37
 8001bb0:	08001c37 	.word	0x08001c37
 8001bb4:	08001c37 	.word	0x08001c37
 8001bb8:	08001c37 	.word	0x08001c37
 8001bbc:	08001c37 	.word	0x08001c37
 8001bc0:	08001c37 	.word	0x08001c37
 8001bc4:	08001c37 	.word	0x08001c37
 8001bc8:	08001c37 	.word	0x08001c37
 8001bcc:	08001be5 	.word	0x08001be5
 8001bd0:	08001bf9 	.word	0x08001bf9
 8001bd4:	4a79      	ldr	r2, [pc, #484]	@ (8001dbc <HAL_GPIO_Init+0x2b4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bda:	e02c      	b.n	8001c36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	623b      	str	r3, [r7, #32]
          break;
 8001be2:	e029      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	3304      	adds	r3, #4
 8001bea:	623b      	str	r3, [r7, #32]
          break;
 8001bec:	e024      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	3308      	adds	r3, #8
 8001bf4:	623b      	str	r3, [r7, #32]
          break;
 8001bf6:	e01f      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e01a      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e013      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d105      	bne.n	8001c24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	611a      	str	r2, [r3, #16]
          break;
 8001c22:	e009      	b.n	8001c38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c24:	2308      	movs	r3, #8
 8001c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	615a      	str	r2, [r3, #20]
          break;
 8001c2e:	e003      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          break;
 8001c36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2bff      	cmp	r3, #255	@ 0xff
 8001c3c:	d801      	bhi.n	8001c42 <HAL_GPIO_Init+0x13a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	e001      	b.n	8001c46 <HAL_GPIO_Init+0x13e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3304      	adds	r3, #4
 8001c46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2bff      	cmp	r3, #255	@ 0xff
 8001c4c:	d802      	bhi.n	8001c54 <HAL_GPIO_Init+0x14c>
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x152>
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	3b08      	subs	r3, #8
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	210f      	movs	r1, #15
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	6a39      	ldr	r1, [r7, #32]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	431a      	orrs	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80b1 	beq.w	8001dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c88:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc0 <HAL_GPIO_Init+0x2b8>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001dc0 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc0 <HAL_GPIO_Init+0x2b8>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ca0:	4a48      	ldr	r2, [pc, #288]	@ (8001dc4 <HAL_GPIO_Init+0x2bc>)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a40      	ldr	r2, [pc, #256]	@ (8001dc8 <HAL_GPIO_Init+0x2c0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d013      	beq.n	8001cf4 <HAL_GPIO_Init+0x1ec>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3f      	ldr	r2, [pc, #252]	@ (8001dcc <HAL_GPIO_Init+0x2c4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_GPIO_Init+0x1e8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3e      	ldr	r2, [pc, #248]	@ (8001dd0 <HAL_GPIO_Init+0x2c8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d007      	beq.n	8001cec <HAL_GPIO_Init+0x1e4>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3d      	ldr	r2, [pc, #244]	@ (8001dd4 <HAL_GPIO_Init+0x2cc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <HAL_GPIO_Init+0x1e0>
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e006      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001ce8:	2304      	movs	r3, #4
 8001cea:	e004      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e002      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf8:	f002 0203 	and.w	r2, r2, #3
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	4093      	lsls	r3, r2
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d06:	492f      	ldr	r1, [pc, #188]	@ (8001dc4 <HAL_GPIO_Init+0x2bc>)
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d20:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	492c      	ldr	r1, [pc, #176]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4928      	ldr	r1, [pc, #160]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d48:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	4922      	ldr	r1, [pc, #136]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60cb      	str	r3, [r1, #12]
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	491e      	ldr	r1, [pc, #120]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4918      	ldr	r1, [pc, #96]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4914      	ldr	r1, [pc, #80]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d021      	beq.n	8001ddc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	490e      	ldr	r1, [pc, #56]	@ (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e021      	b.n	8001dea <HAL_GPIO_Init+0x2e2>
 8001da6:	bf00      	nop
 8001da8:	10320000 	.word	0x10320000
 8001dac:	10310000 	.word	0x10310000
 8001db0:	10220000 	.word	0x10220000
 8001db4:	10210000 	.word	0x10210000
 8001db8:	10120000 	.word	0x10120000
 8001dbc:	10110000 	.word	0x10110000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	40010c00 	.word	0x40010c00
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40011400 	.word	0x40011400
 8001dd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4909      	ldr	r1, [pc, #36]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	3301      	adds	r3, #1
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f47f ae8e 	bne.w	8001b1c <HAL_GPIO_Init+0x14>
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	372c      	adds	r7, #44	@ 0x2c
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	e001      	b.n	8001e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0e8      	b.n	8002022 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f006 fd6d 	bl	8008944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 fec4 	bl	8004c0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e8c:	f002 fe9a 	bl	8004bc4 <USB_CoreInit>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0bf      	b.n	8002022 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fec8 	bl	8004c3e <USB_SetCurrentMode>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b0      	b.n	8002022 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e03e      	b.n	8001f44 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3311      	adds	r3, #17
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3310      	adds	r3, #16
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3313      	adds	r3, #19
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	3320      	adds	r3, #32
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	3324      	adds	r3, #36	@ 0x24
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	3301      	adds	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	791b      	ldrb	r3, [r3, #4]
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d3bb      	bcc.n	8001ec6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
 8001f52:	e044      	b.n	8001fde <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	791b      	ldrb	r3, [r3, #4]
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3b5      	bcc.n	8001f54 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff2:	f002 fe30 	bl	8004c56 <USB_DevInit>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e00c      	b.n	8002022 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f005 f8af 	bl	800717e <USB_DevDisconnect>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_PCD_Start+0x16>
 800203c:	2302      	movs	r3, #2
 800203e:	e016      	b.n	800206e <HAL_PCD_Start+0x44>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f002 fdc6 	bl	8004bde <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002052:	2101      	movs	r1, #1
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f006 feca 	bl	8008dee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f005 f883 	bl	800716a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b088      	sub	sp, #32
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f005 f885 	bl	8007192 <USB_ReadInterrupts>
 8002088:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fb1a 	bl	80026ce <PCD_EP_ISR_Handler>

    return;
 800209a:	e119      	b.n	80022d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d013      	beq.n	80020ce <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020b8:	b292      	uxth	r2, r2
 80020ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f006 fcbb 	bl	8008a3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80020c4:	2100      	movs	r1, #0
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f905 	bl	80022d6 <HAL_PCD_SetAddress>

    return;
 80020cc:	e100      	b.n	80022d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00c      	beq.n	80020f2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80020ea:	b292      	uxth	r2, r2
 80020ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80020f0:	e0ee      	b.n	80022d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00c      	beq.n	8002116 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800210e:	b292      	uxth	r2, r2
 8002110:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002114:	e0dc      	b.n	80022d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d027      	beq.n	8002170 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002128:	b29a      	uxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	b292      	uxth	r2, r2
 8002134:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002140:	b29a      	uxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0208 	bic.w	r2, r2, #8
 800214a:	b292      	uxth	r2, r2
 800214c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f006 fcab 	bl	8008aac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800215e:	b29a      	uxth	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002168:	b292      	uxth	r2, r2
 800216a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800216e:	e0af      	b.n	80022d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8083 	beq.w	8002282 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800217c:	2300      	movs	r3, #0
 800217e:	77fb      	strb	r3, [r7, #31]
 8002180:	e010      	b.n	80021a4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	7ffb      	ldrb	r3, [r7, #31]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	7ffb      	ldrb	r3, [r7, #31]
 8002190:	8812      	ldrh	r2, [r2, #0]
 8002192:	b292      	uxth	r2, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	3320      	adds	r3, #32
 8002198:	443b      	add	r3, r7
 800219a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800219e:	7ffb      	ldrb	r3, [r7, #31]
 80021a0:	3301      	adds	r3, #1
 80021a2:	77fb      	strb	r3, [r7, #31]
 80021a4:	7ffb      	ldrb	r3, [r7, #31]
 80021a6:	2b07      	cmp	r3, #7
 80021a8:	d9eb      	bls.n	8002182 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	b292      	uxth	r2, r2
 80021be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	b292      	uxth	r2, r2
 80021d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80021da:	bf00      	nop
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f6      	beq.n	80021dc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002200:	b292      	uxth	r2, r2
 8002202:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002206:	2300      	movs	r3, #0
 8002208:	77fb      	strb	r3, [r7, #31]
 800220a:	e00f      	b.n	800222c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800220c:	7ffb      	ldrb	r3, [r7, #31]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4611      	mov	r1, r2
 8002214:	7ffa      	ldrb	r2, [r7, #31]
 8002216:	0092      	lsls	r2, r2, #2
 8002218:	440a      	add	r2, r1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	3320      	adds	r3, #32
 800221e:	443b      	add	r3, r7
 8002220:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002224:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	3301      	adds	r3, #1
 800222a:	77fb      	strb	r3, [r7, #31]
 800222c:	7ffb      	ldrb	r3, [r7, #31]
 800222e:	2b07      	cmp	r3, #7
 8002230:	d9ec      	bls.n	800220c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800223a:	b29a      	uxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0208 	orr.w	r2, r2, #8
 8002244:	b292      	uxth	r2, r2
 8002246:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800225c:	b292      	uxth	r2, r2
 800225e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0204 	orr.w	r2, r2, #4
 8002274:	b292      	uxth	r2, r2
 8002276:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f006 fbfc 	bl	8008a78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002280:	e026      	b.n	80022d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00f      	beq.n	80022ac <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002294:	b29a      	uxth	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800229e:	b292      	uxth	r2, r2
 80022a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f006 fbba 	bl	8008a1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80022aa:	e011      	b.n	80022d0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022be:	b29a      	uxth	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022c8:	b292      	uxth	r2, r2
 80022ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80022ce:	bf00      	nop
  }
}
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_PCD_SetAddress+0x1a>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e012      	b.n	8002316 <HAL_PCD_SetAddress+0x40>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f004 ff1c 	bl	8007144 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	4608      	mov	r0, r1
 8002328:	4611      	mov	r1, r2
 800232a:	461a      	mov	r2, r3
 800232c:	4603      	mov	r3, r0
 800232e:	70fb      	strb	r3, [r7, #3]
 8002330:	460b      	mov	r3, r1
 8002332:	803b      	strh	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800233c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002340:	2b00      	cmp	r3, #0
 8002342:	da0e      	bge.n	8002362 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	f003 0207 	and.w	r2, r3, #7
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	3310      	adds	r3, #16
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	705a      	strb	r2, [r3, #1]
 8002360:	e00e      	b.n	8002380 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	f003 0207 	and.w	r2, r3, #7
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	b2da      	uxtb	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800238c:	883a      	ldrh	r2, [r7, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	78ba      	ldrb	r2, [r7, #2]
 8002396:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002398:	78bb      	ldrb	r3, [r7, #2]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d102      	bne.n	80023a4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_PCD_EP_Open+0x94>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e00e      	b.n	80023d0 <HAL_PCD_EP_Open+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68f9      	ldr	r1, [r7, #12]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fc65 	bl	8004c90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80023ce:	7afb      	ldrb	r3, [r7, #11]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	da0e      	bge.n	800240a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	f003 0207 	and.w	r2, r3, #7
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	3310      	adds	r3, #16
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	4413      	add	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	705a      	strb	r2, [r3, #1]
 8002408:	e00e      	b.n	8002428 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	f003 0207 	and.w	r2, r3, #7
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	b2da      	uxtb	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_PCD_EP_Close+0x6a>
 800243e:	2302      	movs	r3, #2
 8002440:	e00e      	b.n	8002460 <HAL_PCD_EP_Close+0x88>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68f9      	ldr	r1, [r7, #12]
 8002450:	4618      	mov	r0, r3
 8002452:	f002 ffdd 	bl	8005410 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	460b      	mov	r3, r1
 8002476:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002478:	7afb      	ldrb	r3, [r7, #11]
 800247a:	f003 0207 	and.w	r2, r3, #7
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4413      	add	r3, r2
 800248e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2200      	movs	r2, #0
 80024a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a8:	7afb      	ldrb	r3, [r7, #11]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6979      	ldr	r1, [r7, #20]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 f994 	bl	80057e8 <USB_EPStartXfer>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 0207 	and.w	r2, r3, #7
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80024ec:	681b      	ldr	r3, [r3, #0]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	460b      	mov	r3, r1
 8002506:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002508:	7afb      	ldrb	r3, [r7, #11]
 800250a:	f003 0207 	and.w	r2, r3, #7
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	3310      	adds	r3, #16
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2201      	movs	r2, #1
 8002542:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	b2da      	uxtb	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6979      	ldr	r1, [r7, #20]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 f946 	bl	80057e8 <USB_EPStartXfer>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	7912      	ldrb	r2, [r2, #4]
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e04c      	b.n	800261e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002588:	2b00      	cmp	r3, #0
 800258a:	da0e      	bge.n	80025aa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 0207 	and.w	r2, r3, #7
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	3310      	adds	r3, #16
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	705a      	strb	r2, [r3, #1]
 80025a8:	e00c      	b.n	80025c4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_PCD_EP_SetStall+0x7e>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e01c      	b.n	800261e <HAL_PCD_EP_SetStall+0xb8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68f9      	ldr	r1, [r7, #12]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 fca9 	bl	8006f4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f004 fdce 	bl	80071b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	7912      	ldrb	r2, [r2, #4]
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e040      	b.n	80026c6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002648:	2b00      	cmp	r3, #0
 800264a:	da0e      	bge.n	800266a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	f003 0207 	and.w	r2, r3, #7
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	3310      	adds	r3, #16
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4413      	add	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	705a      	strb	r2, [r3, #1]
 8002668:	e00e      	b.n	8002688 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	f003 0207 	and.w	r2, r3, #7
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_PCD_EP_ClrStall+0x82>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e00e      	b.n	80026c6 <HAL_PCD_EP_ClrStall+0xa0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fc97 	bl	8006fea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b096      	sub	sp, #88	@ 0x58
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026d6:	e3bb      	b.n	8002e50 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80026e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80026f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 8175 	bne.w	80029e6 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80026fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d14e      	bne.n	80027a6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002718:	81fb      	strh	r3, [r7, #14]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	89fb      	ldrh	r3, [r7, #14]
 8002720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002728:	b29b      	uxth	r3, r3
 800272a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3310      	adds	r3, #16
 8002730:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800273a:	b29b      	uxth	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	3302      	adds	r3, #2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800275a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800275e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	441a      	add	r2, r3
 8002768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800276c:	2100      	movs	r1, #0
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f006 f93b 	bl	80089ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7b5b      	ldrb	r3, [r3, #13]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8368 	beq.w	8002e50 <PCD_EP_ISR_Handler+0x782>
 8002780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f040 8363 	bne.w	8002e50 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7b5b      	ldrb	r3, [r3, #13]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	735a      	strb	r2, [r3, #13]
 80027a4:	e354      	b.n	8002e50 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027ac:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80027b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d034      	beq.n	800282e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	3306      	adds	r3, #6
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80027fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027fc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80027fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002800:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002802:	b29b      	uxth	r3, r3
 8002804:	f004 fd24 	bl	8007250 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29a      	uxth	r2, r3
 8002810:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002814:	4013      	ands	r3, r2
 8002816:	823b      	strh	r3, [r7, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	8a3a      	ldrh	r2, [r7, #16]
 800281e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002822:	b292      	uxth	r2, r2
 8002824:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f006 f8b2 	bl	8008990 <HAL_PCD_SetupStageCallback>
 800282c:	e310      	b.n	8002e50 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800282e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002832:	2b00      	cmp	r3, #0
 8002834:	f280 830c 	bge.w	8002e50 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	b29a      	uxth	r2, r3
 8002840:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002844:	4013      	ands	r3, r2
 8002846:	83fb      	strh	r3, [r7, #30]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	8bfa      	ldrh	r2, [r7, #30]
 800284e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002852:	b292      	uxth	r2, r2
 8002854:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	3306      	adds	r3, #6
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800287e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002880:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d019      	beq.n	80028be <PCD_EP_ISR_Handler+0x1f0>
 800288a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d015      	beq.n	80028be <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002898:	6959      	ldr	r1, [r3, #20]
 800289a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800289c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800289e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f004 fcd4 	bl	8007250 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80028a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	441a      	add	r2, r3
 80028b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028b4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80028b6:	2100      	movs	r1, #0
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f006 f87b 	bl	80089b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80028c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80028cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 82bd 	bne.w	8002e50 <PCD_EP_ISR_Handler+0x782>
 80028d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80028da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80028de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80028e2:	f000 82b5 	beq.w	8002e50 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002910:	b29a      	uxth	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	801a      	strh	r2, [r3, #0]
 8002916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b3e      	cmp	r3, #62	@ 0x3e
 800291c:	d91d      	bls.n	800295a <PCD_EP_ISR_Handler+0x28c>
 800291e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	647b      	str	r3, [r7, #68]	@ 0x44
 8002926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <PCD_EP_ISR_Handler+0x26a>
 8002932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002934:	3b01      	subs	r3, #1
 8002936:	647b      	str	r3, [r7, #68]	@ 0x44
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b29a      	uxth	r2, r3
 800293e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002940:	b29b      	uxth	r3, r3
 8002942:	029b      	lsls	r3, r3, #10
 8002944:	b29b      	uxth	r3, r3
 8002946:	4313      	orrs	r3, r2
 8002948:	b29b      	uxth	r3, r3
 800294a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002952:	b29a      	uxth	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	801a      	strh	r2, [r3, #0]
 8002958:	e026      	b.n	80029a8 <PCD_EP_ISR_Handler+0x2da>
 800295a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <PCD_EP_ISR_Handler+0x2aa>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800296c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002970:	b29a      	uxth	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	801a      	strh	r2, [r3, #0]
 8002976:	e017      	b.n	80029a8 <PCD_EP_ISR_Handler+0x2da>
 8002978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <PCD_EP_ISR_Handler+0x2c4>
 800298c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800298e:	3301      	adds	r3, #1
 8002990:	647b      	str	r3, [r7, #68]	@ 0x44
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29a      	uxth	r2, r3
 8002998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800299a:	b29b      	uxth	r3, r3
 800299c:	029b      	lsls	r3, r3, #10
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4313      	orrs	r3, r2
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b8:	827b      	strh	r3, [r7, #18]
 80029ba:	8a7b      	ldrh	r3, [r7, #18]
 80029bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80029c0:	827b      	strh	r3, [r7, #18]
 80029c2:	8a7b      	ldrh	r3, [r7, #18]
 80029c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80029c8:	827b      	strh	r3, [r7, #18]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	8a7b      	ldrh	r3, [r7, #18]
 80029d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	8013      	strh	r3, [r2, #0]
 80029e4:	e234      	b.n	8002e50 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029fa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f280 80fc 	bge.w	8002bfc <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002a32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a36:	b292      	uxth	r2, r2
 8002a38:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a3a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a52:	7b1b      	ldrb	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d125      	bne.n	8002aa4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3306      	adds	r3, #6
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a80:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002a84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8092 	beq.w	8002bb2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a94:	6959      	ldr	r1, [r3, #20]
 8002a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a98:	88da      	ldrh	r2, [r3, #6]
 8002a9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a9e:	f004 fbd7 	bl	8007250 <USB_ReadPMA>
 8002aa2:	e086      	b.n	8002bb2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa6:	78db      	ldrb	r3, [r3, #3]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d10a      	bne.n	8002ac2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002aac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f9d9 	bl	8002e6c <HAL_PCD_EP_DB_Receive>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002ac0:	e077      	b.n	8002bb2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002adc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	441a      	add	r2, r3
 8002aee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002af2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002af6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002afe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d024      	beq.n	8002b6a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	3302      	adds	r3, #2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b48:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002b4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d02e      	beq.n	8002bb2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5a:	6959      	ldr	r1, [r3, #20]
 8002b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5e:	891a      	ldrh	r2, [r3, #8]
 8002b60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b64:	f004 fb74 	bl	8007250 <USB_ReadPMA>
 8002b68:	e023      	b.n	8002bb2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3306      	adds	r3, #6
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b92:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002b96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba4:	6959      	ldr	r1, [r3, #20]
 8002ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba8:	895a      	ldrh	r2, [r3, #10]
 8002baa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bae:	f004 fb4f 	bl	8007250 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bba:	441a      	add	r2, r3
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bc8:	441a      	add	r2, r3
 8002bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bcc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <PCD_EP_ISR_Handler+0x514>
 8002bd6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d206      	bcs.n	8002bf0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f005 fee3 	bl	80089b4 <HAL_PCD_DataOutStageCallback>
 8002bee:	e005      	b.n	8002bfc <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 fdf6 	bl	80057e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002bfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8123 	beq.w	8002e50 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c0a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	3310      	adds	r3, #16
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c38:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5c:	78db      	ldrb	r3, [r3, #3]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	f040 80a2 	bne.w	8002da8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c66:	2200      	movs	r2, #0
 8002c68:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6c:	7b1b      	ldrb	r3, [r3, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8093 	beq.w	8002d9a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d046      	beq.n	8002d0e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c82:	785b      	ldrb	r3, [r3, #1]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d126      	bne.n	8002cd6 <PCD_EP_ISR_Handler+0x608>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	4413      	add	r3, r2
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	011a      	lsls	r2, r3, #4
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	4413      	add	r3, r2
 8002caa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cae:	623b      	str	r3, [r7, #32]
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	e061      	b.n	8002d9a <PCD_EP_ISR_Handler+0x6cc>
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d15d      	bne.n	8002d9a <PCD_EP_ISR_Handler+0x6cc>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf2:	4413      	add	r3, r2
 8002cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	011a      	lsls	r2, r3, #4
 8002cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfe:	4413      	add	r3, r2
 8002d00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	e045      	b.n	8002d9a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d126      	bne.n	8002d6a <PCD_EP_ISR_Handler+0x69c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d30:	4413      	add	r3, r2
 8002d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	011a      	lsls	r2, r3, #4
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	e017      	b.n	8002d9a <PCD_EP_ISR_Handler+0x6cc>
 8002d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d113      	bne.n	8002d9a <PCD_EP_ISR_Handler+0x6cc>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d80:	4413      	add	r3, r2
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	011a      	lsls	r2, r3, #4
 8002d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d96:	2200      	movs	r2, #0
 8002d98:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f005 fe22 	bl	80089ea <HAL_PCD_DataInStageCallback>
 8002da6:	e053      	b.n	8002e50 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002da8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d146      	bne.n	8002e42 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d907      	bls.n	8002dfc <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002df4:	1ad2      	subs	r2, r2, r3
 8002df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df8:	619a      	str	r2, [r3, #24]
 8002dfa:	e002      	b.n	8002e02 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfe:	2200      	movs	r2, #0
 8002e00:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f005 fdea 	bl	80089ea <HAL_PCD_DataInStageCallback>
 8002e16:	e01b      	b.n	8002e50 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e20:	441a      	add	r2, r3
 8002e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e24:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e2e:	441a      	add	r2, r3
 8002e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e32:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 fcd4 	bl	80057e8 <USB_EPStartXfer>
 8002e40:	e006      	b.n	8002e50 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e46:	461a      	mov	r2, r3
 8002e48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f91b 	bl	8003086 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	b21b      	sxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f6ff ac3b 	blt.w	80026d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3758      	adds	r7, #88	@ 0x58
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d07e      	beq.n	8002f82 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	3302      	adds	r3, #2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	8b7b      	ldrh	r3, [r7, #26]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d306      	bcc.n	8002ec6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	699a      	ldr	r2, [r3, #24]
 8002ebc:	8b7b      	ldrh	r3, [r7, #26]
 8002ebe:	1ad2      	subs	r2, r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	619a      	str	r2, [r3, #24]
 8002ec4:	e002      	b.n	8002ecc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d123      	bne.n	8002f1c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eee:	833b      	strh	r3, [r7, #24]
 8002ef0:	8b3b      	ldrh	r3, [r7, #24]
 8002ef2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ef6:	833b      	strh	r3, [r7, #24]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	441a      	add	r2, r3
 8002f06:	8b3b      	ldrh	r3, [r7, #24]
 8002f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01f      	beq.n	8002f66 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f40:	82fb      	strh	r3, [r7, #22]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	441a      	add	r2, r3
 8002f50:	8afb      	ldrh	r3, [r7, #22]
 8002f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f66:	8b7b      	ldrh	r3, [r7, #26]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8087 	beq.w	800307c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6959      	ldr	r1, [r3, #20]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	891a      	ldrh	r2, [r3, #8]
 8002f7a:	8b7b      	ldrh	r3, [r7, #26]
 8002f7c:	f004 f968 	bl	8007250 <USB_ReadPMA>
 8002f80:	e07c      	b.n	800307c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	3306      	adds	r3, #6
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002faa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	8b7b      	ldrh	r3, [r7, #26]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d306      	bcc.n	8002fc4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	8b7b      	ldrh	r3, [r7, #26]
 8002fbc:	1ad2      	subs	r2, r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	619a      	str	r2, [r3, #24]
 8002fc2:	e002      	b.n	8002fca <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d123      	bne.n	800301a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fec:	83fb      	strh	r3, [r7, #30]
 8002fee:	8bfb      	ldrh	r3, [r7, #30]
 8002ff0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ff4:	83fb      	strh	r3, [r7, #30]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	441a      	add	r2, r3
 8003004:	8bfb      	ldrh	r3, [r7, #30]
 8003006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800300a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800300e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003016:	b29b      	uxth	r3, r3
 8003018:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d11f      	bne.n	8003064 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800303a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303e:	83bb      	strh	r3, [r7, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	441a      	add	r2, r3
 800304e:	8bbb      	ldrh	r3, [r7, #28]
 8003050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800305c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003060:	b29b      	uxth	r3, r3
 8003062:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003064:	8b7b      	ldrh	r3, [r7, #26]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	6959      	ldr	r1, [r3, #20]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	895a      	ldrh	r2, [r3, #10]
 8003076:	8b7b      	ldrh	r3, [r7, #26]
 8003078:	f004 f8ea 	bl	8007250 <USB_ReadPMA>
    }
  }

  return count;
 800307c:	8b7b      	ldrh	r3, [r7, #26]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b0a4      	sub	sp, #144	@ 0x90
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	4613      	mov	r3, r2
 8003092:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 81dd 	beq.w	800345a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	3302      	adds	r3, #2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	699a      	ldr	r2, [r3, #24]
 80030d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d907      	bls.n	80030e8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030e0:	1ad2      	subs	r2, r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	619a      	str	r2, [r3, #24]
 80030e6:	e002      	b.n	80030ee <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2200      	movs	r2, #0
 80030ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 80b9 	bne.w	800326a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d126      	bne.n	800314e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800310e:	b29b      	uxth	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003114:	4413      	add	r3, r2
 8003116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	011a      	lsls	r2, r3, #4
 800311e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003120:	4413      	add	r3, r2
 8003122:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003132:	b29a      	uxth	r2, r3
 8003134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003136:	801a      	strh	r2, [r3, #0]
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003146:	b29a      	uxth	r2, r3
 8003148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314a:	801a      	strh	r2, [r3, #0]
 800314c:	e01a      	b.n	8003184 <HAL_PCD_EP_DB_Transmit+0xfe>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d116      	bne.n	8003184 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	637b      	str	r3, [r7, #52]	@ 0x34
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003164:	b29b      	uxth	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316a:	4413      	add	r3, r2
 800316c:	637b      	str	r3, [r7, #52]	@ 0x34
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	011a      	lsls	r2, r3, #4
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	4413      	add	r3, r2
 8003178:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800317c:	633b      	str	r3, [r7, #48]	@ 0x30
 800317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003180:	2200      	movs	r2, #0
 8003182:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	785b      	ldrb	r3, [r3, #1]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d126      	bne.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4413      	add	r3, r2
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	011a      	lsls	r2, r3, #4
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	801a      	strh	r2, [r3, #0]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031d8:	b29a      	uxth	r2, r3
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	801a      	strh	r2, [r3, #0]
 80031de:	e017      	b.n	8003210 <HAL_PCD_EP_DB_Transmit+0x18a>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	785b      	ldrb	r3, [r3, #1]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d113      	bne.n	8003210 <HAL_PCD_EP_DB_Transmit+0x18a>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	4413      	add	r3, r2
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	011a      	lsls	r2, r3, #4
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	4413      	add	r3, r2
 8003204:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2200      	movs	r2, #0
 800320e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f005 fbe7 	bl	80089ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 82fc 	beq.w	8003820 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800323e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003242:	82fb      	strh	r3, [r7, #22]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	8afb      	ldrh	r3, [r7, #22]
 8003254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800325c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003264:	b29b      	uxth	r3, r3
 8003266:	8013      	strh	r3, [r2, #0]
 8003268:	e2da      	b.n	8003820 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d021      	beq.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800328a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	441a      	add	r2, r3
 80032a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80032a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032be:	2b01      	cmp	r3, #1
 80032c0:	f040 82ae 	bne.w	8003820 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80032cc:	441a      	add	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80032da:	441a      	add	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6a1a      	ldr	r2, [r3, #32]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d30b      	bcc.n	8003304 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032fc:	1ad2      	subs	r2, r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	621a      	str	r2, [r3, #32]
 8003302:	e017      	b.n	8003334 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d108      	bne.n	800331e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800330c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800331c:	e00a      	b.n	8003334 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2200      	movs	r2, #0
 8003332:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	785b      	ldrb	r3, [r3, #1]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d165      	bne.n	8003408 <HAL_PCD_EP_DB_Transmit+0x382>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800334a:	b29b      	uxth	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003350:	4413      	add	r3, r2
 8003352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	011a      	lsls	r2, r3, #4
 800335a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335c:	4413      	add	r3, r2
 800335e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003362:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	b29b      	uxth	r3, r3
 800336a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336e:	b29a      	uxth	r2, r3
 8003370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003372:	801a      	strh	r2, [r3, #0]
 8003374:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003378:	2b3e      	cmp	r3, #62	@ 0x3e
 800337a:	d91d      	bls.n	80033b8 <HAL_PCD_EP_DB_Transmit+0x332>
 800337c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003384:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <HAL_PCD_EP_DB_Transmit+0x310>
 8003390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003392:	3b01      	subs	r3, #1
 8003394:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29a      	uxth	r2, r3
 800339c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800339e:	b29b      	uxth	r3, r3
 80033a0:	029b      	lsls	r3, r3, #10
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	4313      	orrs	r3, r2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	e044      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x350>
 80033c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	e035      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80033ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ec:	3301      	adds	r3, #1
 80033ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	4313      	orrs	r3, r2
 8003400:	b29a      	uxth	r2, r3
 8003402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003404:	801a      	strh	r2, [r3, #0]
 8003406:	e01c      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	785b      	ldrb	r3, [r3, #1]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d118      	bne.n	8003442 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	647b      	str	r3, [r7, #68]	@ 0x44
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800341e:	b29b      	uxth	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003424:	4413      	add	r3, r2
 8003426:	647b      	str	r3, [r7, #68]	@ 0x44
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	011a      	lsls	r2, r3, #4
 800342e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003430:	4413      	add	r3, r2
 8003432:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003436:	643b      	str	r3, [r7, #64]	@ 0x40
 8003438:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800343c:	b29a      	uxth	r2, r3
 800343e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003440:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	6959      	ldr	r1, [r3, #20]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	891a      	ldrh	r2, [r3, #8]
 800344e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003452:	b29b      	uxth	r3, r3
 8003454:	f003 feb7 	bl	80071c6 <USB_WritePMA>
 8003458:	e1e2      	b.n	8003820 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003462:	b29b      	uxth	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	3306      	adds	r3, #6
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003482:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800348e:	429a      	cmp	r2, r3
 8003490:	d307      	bcc.n	80034a2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800349a:	1ad2      	subs	r2, r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	619a      	str	r2, [r3, #24]
 80034a0:	e002      	b.n	80034a8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2200      	movs	r2, #0
 80034a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 80c0 	bne.w	8003632 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d126      	bne.n	8003508 <HAL_PCD_EP_DB_Transmit+0x482>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034ce:	4413      	add	r3, r2
 80034d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	011a      	lsls	r2, r3, #4
 80034d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034da:	4413      	add	r3, r2
 80034dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80034e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003500:	b29a      	uxth	r2, r3
 8003502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003504:	801a      	strh	r2, [r3, #0]
 8003506:	e01a      	b.n	800353e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	785b      	ldrb	r3, [r3, #1]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d116      	bne.n	800353e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	667b      	str	r3, [r7, #100]	@ 0x64
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003524:	4413      	add	r3, r2
 8003526:	667b      	str	r3, [r7, #100]	@ 0x64
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	011a      	lsls	r2, r3, #4
 800352e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003530:	4413      	add	r3, r2
 8003532:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003536:	663b      	str	r3, [r7, #96]	@ 0x60
 8003538:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800353a:	2200      	movs	r2, #0
 800353c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	677b      	str	r3, [r7, #116]	@ 0x74
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	785b      	ldrb	r3, [r3, #1]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d12b      	bne.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003560:	4413      	add	r3, r2
 8003562:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	011a      	lsls	r2, r3, #4
 800356a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800356c:	4413      	add	r3, r2
 800356e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003572:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003576:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003582:	b29a      	uxth	r2, r3
 8003584:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800359a:	b29a      	uxth	r2, r3
 800359c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	e017      	b.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d113      	bne.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ba:	4413      	add	r3, r2
 80035bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	011a      	lsls	r2, r3, #4
 80035c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c6:	4413      	add	r3, r2
 80035c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035d0:	2200      	movs	r2, #0
 80035d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	4619      	mov	r1, r3
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f005 fa05 	bl	80089ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 811a 	bne.w	8003820 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003606:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	441a      	add	r2, r3
 8003618:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800361c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003624:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800362c:	b29b      	uxth	r3, r3
 800362e:	8013      	strh	r3, [r2, #0]
 8003630:	e0f6      	b.n	8003820 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d121      	bne.n	8003680 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003656:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	441a      	add	r2, r3
 8003668:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800366c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003674:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800367c:	b29b      	uxth	r3, r3
 800367e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003686:	2b01      	cmp	r3, #1
 8003688:	f040 80ca 	bne.w	8003820 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003694:	441a      	add	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036a2:	441a      	add	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	6a1a      	ldr	r2, [r3, #32]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d30b      	bcc.n	80036cc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036c4:	1ad2      	subs	r2, r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	621a      	str	r2, [r3, #32]
 80036ca:	e017      	b.n	80036fc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d108      	bne.n	80036e6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80036d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80036e4:	e00a      	b.n	80036fc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2200      	movs	r2, #0
 80036f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	657b      	str	r3, [r7, #84]	@ 0x54
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	785b      	ldrb	r3, [r3, #1]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d165      	bne.n	80037d6 <HAL_PCD_EP_DB_Transmit+0x750>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003718:	b29b      	uxth	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800371e:	4413      	add	r3, r2
 8003720:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	011a      	lsls	r2, r3, #4
 8003728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800372a:	4413      	add	r3, r2
 800372c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003730:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003732:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373c:	b29a      	uxth	r2, r3
 800373e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003746:	2b3e      	cmp	r3, #62	@ 0x3e
 8003748:	d91d      	bls.n	8003786 <HAL_PCD_EP_DB_Transmit+0x700>
 800374a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <HAL_PCD_EP_DB_Transmit+0x6de>
 800375e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003760:	3b01      	subs	r3, #1
 8003762:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003764:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b29a      	uxth	r2, r3
 800376a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800376c:	b29b      	uxth	r3, r3
 800376e:	029b      	lsls	r3, r3, #10
 8003770:	b29b      	uxth	r3, r3
 8003772:	4313      	orrs	r3, r2
 8003774:	b29b      	uxth	r3, r3
 8003776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800377a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800377e:	b29a      	uxth	r2, r3
 8003780:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003782:	801a      	strh	r2, [r3, #0]
 8003784:	e041      	b.n	800380a <HAL_PCD_EP_DB_Transmit+0x784>
 8003786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <HAL_PCD_EP_DB_Transmit+0x71e>
 800378e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379c:	b29a      	uxth	r2, r3
 800379e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	e032      	b.n	800380a <HAL_PCD_EP_DB_Transmit+0x784>
 80037a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_PCD_EP_DB_Transmit+0x738>
 80037b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ba:	3301      	adds	r3, #1
 80037bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	029b      	lsls	r3, r3, #10
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	4313      	orrs	r3, r2
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037d2:	801a      	strh	r2, [r3, #0]
 80037d4:	e019      	b.n	800380a <HAL_PCD_EP_DB_Transmit+0x784>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d115      	bne.n	800380a <HAL_PCD_EP_DB_Transmit+0x784>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ec:	4413      	add	r3, r2
 80037ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	011a      	lsls	r2, r3, #4
 80037f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f8:	4413      	add	r3, r2
 80037fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003804:	b29a      	uxth	r2, r3
 8003806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003808:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6959      	ldr	r1, [r3, #20]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	895a      	ldrh	r2, [r3, #10]
 8003816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800381a:	b29b      	uxth	r3, r3
 800381c:	f003 fcd3 	bl	80071c6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800383a:	82bb      	strh	r3, [r7, #20]
 800383c:	8abb      	ldrh	r3, [r7, #20]
 800383e:	f083 0310 	eor.w	r3, r3, #16
 8003842:	82bb      	strh	r3, [r7, #20]
 8003844:	8abb      	ldrh	r3, [r7, #20]
 8003846:	f083 0320 	eor.w	r3, r3, #32
 800384a:	82bb      	strh	r3, [r7, #20]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	441a      	add	r2, r3
 800385a:	8abb      	ldrh	r3, [r7, #20]
 800385c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800386c:	b29b      	uxth	r3, r3
 800386e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3790      	adds	r7, #144	@ 0x90
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800387a:	b480      	push	{r7}
 800387c:	b087      	sub	sp, #28
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	817b      	strh	r3, [r7, #10]
 8003888:	4613      	mov	r3, r2
 800388a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800388c:	897b      	ldrh	r3, [r7, #10]
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003898:	897b      	ldrh	r3, [r7, #10]
 800389a:	f003 0207 	and.w	r2, r3, #7
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	3310      	adds	r3, #16
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e009      	b.n	80038c4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038b0:	897a      	ldrh	r2, [r7, #10]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80038c4:	893b      	ldrh	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d107      	bne.n	80038da <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	80da      	strh	r2, [r3, #6]
 80038d8:	e00b      	b.n	80038f2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2201      	movs	r2, #1
 80038de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0c1b      	lsrs	r3, r3, #16
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e272      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8087 	beq.w	8003a2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003920:	4b92      	ldr	r3, [pc, #584]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b04      	cmp	r3, #4
 800392a:	d00c      	beq.n	8003946 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800392c:	4b8f      	ldr	r3, [pc, #572]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d112      	bne.n	800395e <HAL_RCC_OscConfig+0x5e>
 8003938:	4b8c      	ldr	r3, [pc, #560]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003944:	d10b      	bne.n	800395e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003946:	4b89      	ldr	r3, [pc, #548]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d06c      	beq.n	8003a2c <HAL_RCC_OscConfig+0x12c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d168      	bne.n	8003a2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e24c      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x76>
 8003968:	4b80      	ldr	r3, [pc, #512]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a7f      	ldr	r2, [pc, #508]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 800396e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	e02e      	b.n	80039d4 <HAL_RCC_OscConfig+0xd4>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x98>
 800397e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a7a      	ldr	r2, [pc, #488]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b78      	ldr	r3, [pc, #480]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a77      	ldr	r2, [pc, #476]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003990:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e01d      	b.n	80039d4 <HAL_RCC_OscConfig+0xd4>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039a0:	d10c      	bne.n	80039bc <HAL_RCC_OscConfig+0xbc>
 80039a2:	4b72      	ldr	r3, [pc, #456]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a71      	ldr	r2, [pc, #452]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b6f      	ldr	r3, [pc, #444]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6e      	ldr	r2, [pc, #440]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e00b      	b.n	80039d4 <HAL_RCC_OscConfig+0xd4>
 80039bc:	4b6b      	ldr	r3, [pc, #428]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	4b68      	ldr	r3, [pc, #416]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a67      	ldr	r2, [pc, #412]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d013      	beq.n	8003a04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fd fb24 	bl	8001028 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fd fb20 	bl	8001028 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	@ 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e200      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0xe4>
 8003a02:	e014      	b.n	8003a2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fd fb10 	bl	8001028 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fb0c 	bl	8001028 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	@ 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e1ec      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1e:	4b53      	ldr	r3, [pc, #332]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x10c>
 8003a2a:	e000      	b.n	8003a2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d063      	beq.n	8003b02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00b      	beq.n	8003a5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a46:	4b49      	ldr	r3, [pc, #292]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d11c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x18c>
 8003a52:	4b46      	ldr	r3, [pc, #280]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d116      	bne.n	8003a8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	4b43      	ldr	r3, [pc, #268]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_RCC_OscConfig+0x176>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e1c0      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a76:	4b3d      	ldr	r3, [pc, #244]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4939      	ldr	r1, [pc, #228]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8a:	e03a      	b.n	8003b02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a94:	4b36      	ldr	r3, [pc, #216]	@ (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9a:	f7fd fac5 	bl	8001028 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa2:	f7fd fac1 	bl	8001028 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e1a1      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4927      	ldr	r1, [pc, #156]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]
 8003ad4:	e015      	b.n	8003b02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad6:	4b26      	ldr	r3, [pc, #152]	@ (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fd faa4 	bl	8001028 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae4:	f7fd faa0 	bl	8001028 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e180      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d03a      	beq.n	8003b84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d019      	beq.n	8003b4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b16:	4b17      	ldr	r3, [pc, #92]	@ (8003b74 <HAL_RCC_OscConfig+0x274>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1c:	f7fd fa84 	bl	8001028 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b24:	f7fd fa80 	bl	8001028 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e160      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b36:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b42:	2001      	movs	r0, #1
 8003b44:	f000 faba 	bl	80040bc <RCC_Delay>
 8003b48:	e01c      	b.n	8003b84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b74 <HAL_RCC_OscConfig+0x274>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b50:	f7fd fa6a 	bl	8001028 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b56:	e00f      	b.n	8003b78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b58:	f7fd fa66 	bl	8001028 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d908      	bls.n	8003b78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e146      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	42420000 	.word	0x42420000
 8003b74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	4b92      	ldr	r3, [pc, #584]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e9      	bne.n	8003b58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80a6 	beq.w	8003cde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b96:	4b8b      	ldr	r3, [pc, #556]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10d      	bne.n	8003bbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	4b88      	ldr	r3, [pc, #544]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4a87      	ldr	r2, [pc, #540]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bac:	61d3      	str	r3, [r2, #28]
 8003bae:	4b85      	ldr	r3, [pc, #532]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbe:	4b82      	ldr	r3, [pc, #520]	@ (8003dc8 <HAL_RCC_OscConfig+0x4c8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d118      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bca:	4b7f      	ldr	r3, [pc, #508]	@ (8003dc8 <HAL_RCC_OscConfig+0x4c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a7e      	ldr	r2, [pc, #504]	@ (8003dc8 <HAL_RCC_OscConfig+0x4c8>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd6:	f7fd fa27 	bl	8001028 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bde:	f7fd fa23 	bl	8001028 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b64      	cmp	r3, #100	@ 0x64
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e103      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	4b75      	ldr	r3, [pc, #468]	@ (8003dc8 <HAL_RCC_OscConfig+0x4c8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x312>
 8003c04:	4b6f      	ldr	r3, [pc, #444]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a6e      	ldr	r2, [pc, #440]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	e02d      	b.n	8003c6e <HAL_RCC_OscConfig+0x36e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x334>
 8003c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4a69      	ldr	r2, [pc, #420]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	6213      	str	r3, [r2, #32]
 8003c26:	4b67      	ldr	r3, [pc, #412]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4a66      	ldr	r2, [pc, #408]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	f023 0304 	bic.w	r3, r3, #4
 8003c30:	6213      	str	r3, [r2, #32]
 8003c32:	e01c      	b.n	8003c6e <HAL_RCC_OscConfig+0x36e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCC_OscConfig+0x356>
 8003c3c:	4b61      	ldr	r3, [pc, #388]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4a60      	ldr	r2, [pc, #384]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	f043 0304 	orr.w	r3, r3, #4
 8003c46:	6213      	str	r3, [r2, #32]
 8003c48:	4b5e      	ldr	r3, [pc, #376]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4a5d      	ldr	r2, [pc, #372]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6213      	str	r3, [r2, #32]
 8003c54:	e00b      	b.n	8003c6e <HAL_RCC_OscConfig+0x36e>
 8003c56:	4b5b      	ldr	r3, [pc, #364]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a5a      	ldr	r2, [pc, #360]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6213      	str	r3, [r2, #32]
 8003c62:	4b58      	ldr	r3, [pc, #352]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	4a57      	ldr	r2, [pc, #348]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	f023 0304 	bic.w	r3, r3, #4
 8003c6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d015      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7fd f9d7 	bl	8001028 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd f9d3 	bl	8001028 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0b1      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c94:	4b4b      	ldr	r3, [pc, #300]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ee      	beq.n	8003c7e <HAL_RCC_OscConfig+0x37e>
 8003ca0:	e014      	b.n	8003ccc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca2:	f7fd f9c1 	bl	8001028 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd f9bd 	bl	8001028 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e09b      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc0:	4b40      	ldr	r3, [pc, #256]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ee      	bne.n	8003caa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d105      	bne.n	8003cde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	4a3b      	ldr	r2, [pc, #236]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8087 	beq.w	8003df6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ce8:	4b36      	ldr	r3, [pc, #216]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d061      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d146      	bne.n	8003d8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfc:	4b33      	ldr	r3, [pc, #204]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fd f991 	bl	8001028 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fd f98d 	bl	8001028 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e06d      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1c:	4b29      	ldr	r3, [pc, #164]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d30:	d108      	bne.n	8003d44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d32:	4b24      	ldr	r3, [pc, #144]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4921      	ldr	r1, [pc, #132]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d44:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a19      	ldr	r1, [r3, #32]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	430b      	orrs	r3, r1
 8003d56:	491b      	ldr	r1, [pc, #108]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fd f961 	bl	8001028 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd f95d 	bl	8001028 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e03d      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d7c:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x46a>
 8003d88:	e035      	b.n	8003df6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b10      	ldr	r3, [pc, #64]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd f94a 	bl	8001028 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd f946 	bl	8001028 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e026      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003daa:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x498>
 8003db6:	e01e      	b.n	8003df6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e019      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <HAL_RCC_OscConfig+0x500>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d106      	bne.n	8003df2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000

08003e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0d0      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d910      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b67      	ldr	r3, [pc, #412]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 0207 	bic.w	r2, r3, #7
 8003e2e:	4965      	ldr	r1, [pc, #404]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b63      	ldr	r3, [pc, #396]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0b8      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d020      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e60:	4b59      	ldr	r3, [pc, #356]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4a58      	ldr	r2, [pc, #352]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e78:	4b53      	ldr	r3, [pc, #332]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4a52      	ldr	r2, [pc, #328]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e84:	4b50      	ldr	r3, [pc, #320]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	494d      	ldr	r1, [pc, #308]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d040      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eaa:	4b47      	ldr	r3, [pc, #284]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d115      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	4b41      	ldr	r3, [pc, #260]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e073      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e06b      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee2:	4b39      	ldr	r3, [pc, #228]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f023 0203 	bic.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4936      	ldr	r1, [pc, #216]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef4:	f7fd f898 	bl	8001028 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fd f894 	bl	8001028 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e053      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 020c 	and.w	r2, r3, #12
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d1eb      	bne.n	8003efc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f24:	4b27      	ldr	r3, [pc, #156]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d210      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 0207 	bic.w	r2, r3, #7
 8003f3a:	4922      	ldr	r1, [pc, #136]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b20      	ldr	r3, [pc, #128]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e032      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f60:	4b19      	ldr	r3, [pc, #100]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4916      	ldr	r1, [pc, #88]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f7e:	4b12      	ldr	r3, [pc, #72]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	490e      	ldr	r1, [pc, #56]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f92:	f000 f821 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	490a      	ldr	r1, [pc, #40]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003faa:	4a09      	ldr	r2, [pc, #36]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fae:	4b09      	ldr	r3, [pc, #36]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fff6 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40022000 	.word	0x40022000
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	0800914c 	.word	0x0800914c
 8003fd0:	20000014 	.word	0x20000014
 8003fd4:	20000018 	.word	0x20000018

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d002      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x30>
 8004002:	2b08      	cmp	r3, #8
 8004004:	d003      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x36>
 8004006:	e027      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004008:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x98>)
 800400a:	613b      	str	r3, [r7, #16]
      break;
 800400c:	e027      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	0c9b      	lsrs	r3, r3, #18
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	4a17      	ldr	r2, [pc, #92]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004018:	5cd3      	ldrb	r3, [r2, r3]
 800401a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004026:	4b11      	ldr	r3, [pc, #68]	@ (800406c <HAL_RCC_GetSysClockFreq+0x94>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	0c5b      	lsrs	r3, r3, #17
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	4a11      	ldr	r2, [pc, #68]	@ (8004078 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004032:	5cd3      	ldrb	r3, [r2, r3]
 8004034:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a0d      	ldr	r2, [pc, #52]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x98>)
 800403a:	fb03 f202 	mul.w	r2, r3, r2
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e004      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a0c      	ldr	r2, [pc, #48]	@ (800407c <HAL_RCC_GetSysClockFreq+0xa4>)
 800404c:	fb02 f303 	mul.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	613b      	str	r3, [r7, #16]
      break;
 8004056:	e002      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x98>)
 800405a:	613b      	str	r3, [r7, #16]
      break;
 800405c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405e:	693b      	ldr	r3, [r7, #16]
}
 8004060:	4618      	mov	r0, r3
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40021000 	.word	0x40021000
 8004070:	007a1200 	.word	0x007a1200
 8004074:	08009164 	.word	0x08009164
 8004078:	08009174 	.word	0x08009174
 800407c:	003d0900 	.word	0x003d0900

08004080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004084:	4b02      	ldr	r3, [pc, #8]	@ (8004090 <HAL_RCC_GetHCLKFreq+0x10>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	20000014 	.word	0x20000014

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004098:	f7ff fff2 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	0adb      	lsrs	r3, r3, #11
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4903      	ldr	r1, [pc, #12]	@ (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40021000 	.word	0x40021000
 80040b8:	0800915c 	.word	0x0800915c

080040bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040c4:	4b0a      	ldr	r3, [pc, #40]	@ (80040f0 <RCC_Delay+0x34>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0a      	ldr	r2, [pc, #40]	@ (80040f4 <RCC_Delay+0x38>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	0a5b      	lsrs	r3, r3, #9
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040d8:	bf00      	nop
  }
  while (Delay --);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1e5a      	subs	r2, r3, #1
 80040de:	60fa      	str	r2, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f9      	bne.n	80040d8 <RCC_Delay+0x1c>
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	20000014 	.word	0x20000014
 80040f4:	10624dd3 	.word	0x10624dd3

080040f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d07d      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004114:	2300      	movs	r3, #0
 8004116:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004118:	4b4f      	ldr	r3, [pc, #316]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10d      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004124:	4b4c      	ldr	r3, [pc, #304]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	4a4b      	ldr	r2, [pc, #300]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800412e:	61d3      	str	r3, [r2, #28]
 8004130:	4b49      	ldr	r3, [pc, #292]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413c:	2301      	movs	r3, #1
 800413e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	4b46      	ldr	r3, [pc, #280]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d118      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800414c:	4b43      	ldr	r3, [pc, #268]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a42      	ldr	r2, [pc, #264]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004156:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004158:	f7fc ff66 	bl	8001028 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	e008      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004160:	f7fc ff62 	bl	8001028 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	@ 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e06d      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004172:	4b3a      	ldr	r3, [pc, #232]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800417e:	4b36      	ldr	r3, [pc, #216]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004186:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d02e      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	429a      	cmp	r2, r3
 800419a:	d027      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800419c:	4b2e      	ldr	r3, [pc, #184]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041b2:	4a29      	ldr	r2, [pc, #164]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d014      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fc ff31 	bl	8001028 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c8:	e00a      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fc ff2d 	bl	8001028 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d8:	4293      	cmp	r3, r2
 80041da:	d901      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e036      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ee      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4917      	ldr	r1, [pc, #92]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d105      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004204:	4b14      	ldr	r3, [pc, #80]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4a13      	ldr	r2, [pc, #76]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800421c:	4b0e      	ldr	r3, [pc, #56]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	490b      	ldr	r1, [pc, #44]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800423a:	4b07      	ldr	r3, [pc, #28]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4904      	ldr	r1, [pc, #16]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	40007000 	.word	0x40007000
 8004260:	42420440 	.word	0x42420440

08004264 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	2300      	movs	r3, #0
 800427e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b10      	cmp	r3, #16
 8004284:	d00a      	beq.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b10      	cmp	r3, #16
 800428a:	f200 808a 	bhi.w	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d045      	beq.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d075      	beq.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800429a:	e082      	b.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800429c:	4b46      	ldr	r3, [pc, #280]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042a2:	4b45      	ldr	r3, [pc, #276]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d07b      	beq.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	0c9b      	lsrs	r3, r3, #18
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	4a41      	ldr	r2, [pc, #260]	@ (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80042b8:	5cd3      	ldrb	r3, [r2, r3]
 80042ba:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d015      	beq.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042c6:	4b3c      	ldr	r3, [pc, #240]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	0c5b      	lsrs	r3, r3, #17
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	4a3b      	ldr	r2, [pc, #236]	@ (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80042d2:	5cd3      	ldrb	r3, [r2, r3]
 80042d4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042e0:	4a38      	ldr	r2, [pc, #224]	@ (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	e004      	b.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4a34      	ldr	r2, [pc, #208]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80042fc:	4b2e      	ldr	r3, [pc, #184]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004304:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004308:	d102      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	61bb      	str	r3, [r7, #24]
      break;
 800430e:	e04a      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4a2d      	ldr	r2, [pc, #180]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	61bb      	str	r3, [r7, #24]
      break;
 800431e:	e042      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004320:	4b25      	ldr	r3, [pc, #148]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800432c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004330:	d108      	bne.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800433c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	e01f      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800434a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800434e:	d109      	bne.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004350:	4b19      	ldr	r3, [pc, #100]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800435c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e00f      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800436a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800436e:	d11c      	bne.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004370:	4b11      	ldr	r3, [pc, #68]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d016      	beq.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800437c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004380:	61bb      	str	r3, [r7, #24]
      break;
 8004382:	e012      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004384:	e011      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004386:	f7ff fe85 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 800438a:	4602      	mov	r2, r0
 800438c:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0b9b      	lsrs	r3, r3, #14
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	3301      	adds	r3, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	61bb      	str	r3, [r7, #24]
      break;
 80043a0:	e004      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043a2:	bf00      	nop
 80043a4:	e002      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043a6:	bf00      	nop
 80043a8:	e000      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043aa:	bf00      	nop
    }
  }
  return (frequency);
 80043ac:	69bb      	ldr	r3, [r7, #24]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	08009178 	.word	0x08009178
 80043c0:	08009188 	.word	0x08009188
 80043c4:	007a1200 	.word	0x007a1200
 80043c8:	003d0900 	.word	0x003d0900
 80043cc:	aaaaaaab 	.word	0xaaaaaaab

080043d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e041      	b.n	8004466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc fa78 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f000 fa64 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d001      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e03a      	b.n	80044fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a18      	ldr	r2, [pc, #96]	@ (8004508 <HAL_TIM_Base_Start_IT+0x98>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00e      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x58>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b2:	d009      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x58>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a14      	ldr	r2, [pc, #80]	@ (800450c <HAL_TIM_Base_Start_IT+0x9c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x58>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a13      	ldr	r2, [pc, #76]	@ (8004510 <HAL_TIM_Base_Start_IT+0xa0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d111      	bne.n	80044ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b06      	cmp	r3, #6
 80044d8:	d010      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	e007      	b.n	80044fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800

08004514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d020      	beq.n	8004578 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01b      	beq.n	8004578 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0202 	mvn.w	r2, #2
 8004548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f9a1 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f994 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f9a3 	bl	80048b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d020      	beq.n	80045c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01b      	beq.n	80045c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0204 	mvn.w	r2, #4
 8004594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f97b 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f96e 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f97d 	bl	80048b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d020      	beq.n	8004610 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01b      	beq.n	8004610 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0208 	mvn.w	r2, #8
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2204      	movs	r2, #4
 80045e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f955 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f948 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f957 	bl	80048b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0310 	and.w	r3, r3, #16
 8004616:	2b00      	cmp	r3, #0
 8004618:	d020      	beq.n	800465c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01b      	beq.n	800465c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0210 	mvn.w	r2, #16
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2208      	movs	r2, #8
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f92f 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f922 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f931 	bl	80048b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00c      	beq.n	8004680 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0201 	mvn.w	r2, #1
 8004678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f901 	bl	8004882 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00c      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fa87 	bl	8004bb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f901 	bl	80048ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0220 	mvn.w	r2, #32
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa5a 	bl	8004ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIM_ConfigClockSource+0x1c>
 800470c:	2302      	movs	r3, #2
 800470e:	e0b4      	b.n	800487a <HAL_TIM_ConfigClockSource+0x186>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800472e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004748:	d03e      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0xd4>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800474e:	f200 8087 	bhi.w	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004756:	f000 8086 	beq.w	8004866 <HAL_TIM_ConfigClockSource+0x172>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800475e:	d87f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b70      	cmp	r3, #112	@ 0x70
 8004762:	d01a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xa6>
 8004764:	2b70      	cmp	r3, #112	@ 0x70
 8004766:	d87b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b60      	cmp	r3, #96	@ 0x60
 800476a:	d050      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x11a>
 800476c:	2b60      	cmp	r3, #96	@ 0x60
 800476e:	d877      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b50      	cmp	r3, #80	@ 0x50
 8004772:	d03c      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0xfa>
 8004774:	2b50      	cmp	r3, #80	@ 0x50
 8004776:	d873      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b40      	cmp	r3, #64	@ 0x40
 800477a:	d058      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x13a>
 800477c:	2b40      	cmp	r3, #64	@ 0x40
 800477e:	d86f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b30      	cmp	r3, #48	@ 0x30
 8004782:	d064      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b30      	cmp	r3, #48	@ 0x30
 8004786:	d86b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b20      	cmp	r3, #32
 800478a:	d060      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d867      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d05c      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b10      	cmp	r3, #16
 8004796:	d05a      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	e062      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047aa:	f000 f97c 	bl	8004aa6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	609a      	str	r2, [r3, #8]
      break;
 80047c6:	e04f      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047d8:	f000 f965 	bl	8004aa6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047ea:	609a      	str	r2, [r3, #8]
      break;
 80047ec:	e03c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 f8dc 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2150      	movs	r1, #80	@ 0x50
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f933 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 800480c:	e02c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800481a:	461a      	mov	r2, r3
 800481c:	f000 f8fa 	bl	8004a14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2160      	movs	r1, #96	@ 0x60
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f923 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 800482c:	e01c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f8bc 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2140      	movs	r1, #64	@ 0x40
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f913 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 800484c:	e00c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f000 f90a 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 800485e:	e003      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      break;
 8004864:	e000      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a2f      	ldr	r2, [pc, #188]	@ (80049ac <TIM_Base_SetConfig+0xd0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00b      	beq.n	800490c <TIM_Base_SetConfig+0x30>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048fa:	d007      	beq.n	800490c <TIM_Base_SetConfig+0x30>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a2c      	ldr	r2, [pc, #176]	@ (80049b0 <TIM_Base_SetConfig+0xd4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_Base_SetConfig+0x30>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a2b      	ldr	r2, [pc, #172]	@ (80049b4 <TIM_Base_SetConfig+0xd8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d108      	bne.n	800491e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a22      	ldr	r2, [pc, #136]	@ (80049ac <TIM_Base_SetConfig+0xd0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0x62>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0x62>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a1f      	ldr	r2, [pc, #124]	@ (80049b0 <TIM_Base_SetConfig+0xd4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0x62>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a1e      	ldr	r2, [pc, #120]	@ (80049b4 <TIM_Base_SetConfig+0xd8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0d      	ldr	r2, [pc, #52]	@ (80049ac <TIM_Base_SetConfig+0xd0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d103      	bne.n	8004984 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f023 0201 	bic.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	611a      	str	r2, [r3, #16]
  }
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800

080049b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 030a 	bic.w	r3, r3, #10
 80049f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f023 0210 	bic.w	r2, r3, #16
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	031b      	lsls	r3, r3, #12
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	621a      	str	r2, [r3, #32]
}
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr

08004a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f043 0307 	orr.w	r3, r3, #7
 8004a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	609a      	str	r2, [r3, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b087      	sub	sp, #28
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	021a      	lsls	r2, r3, #8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	609a      	str	r2, [r3, #8]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e046      	b.n	8004b8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	@ (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00e      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b48:	d009      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a12      	ldr	r2, [pc, #72]	@ (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a10      	ldr	r2, [pc, #64]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10c      	bne.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800

08004ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	4638      	mov	r0, r7
 8004bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bee:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004bf2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c12:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004c16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	4013      	ands	r3, r2
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr

08004c3e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	4638      	mov	r0, r7
 8004c60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b09d      	sub	sp, #116	@ 0x74
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	78db      	ldrb	r3, [r3, #3]
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d81f      	bhi.n	8004d02 <USB_ActivateEndpoint+0x72>
 8004cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc8 <USB_ActivateEndpoint+0x38>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004cf5 	.word	0x08004cf5
 8004cd0:	08004d0b 	.word	0x08004d0b
 8004cd4:	08004ce7 	.word	0x08004ce7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004cdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ce0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004ce4:	e012      	b.n	8004d0c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ce6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004cea:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004cee:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004cf2:	e00b      	b.n	8004d0c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004cf4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004cf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cfc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004d00:	e004      	b.n	8004d0c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004d08:	e000      	b.n	8004d0c <USB_ActivateEndpoint+0x7c>
      break;
 8004d0a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	7b1b      	ldrb	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 8178 	bne.w	800506c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8084 	beq.w	8004e8e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	4413      	add	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	011a      	lsls	r2, r3, #4
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	88db      	ldrh	r3, [r3, #6]
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	827b      	strh	r3, [r7, #18]
 8004dc8:	8a7b      	ldrh	r3, [r7, #18]
 8004dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01b      	beq.n	8004e0a <USB_ActivateEndpoint+0x17a>
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de8:	823b      	strh	r3, [r7, #16]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	441a      	add	r2, r3
 8004df4:	8a3b      	ldrh	r3, [r7, #16]
 8004df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	78db      	ldrb	r3, [r3, #3]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d020      	beq.n	8004e54 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e28:	81bb      	strh	r3, [r7, #12]
 8004e2a:	89bb      	ldrh	r3, [r7, #12]
 8004e2c:	f083 0320 	eor.w	r3, r3, #32
 8004e30:	81bb      	strh	r3, [r7, #12]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	441a      	add	r2, r3
 8004e3c:	89bb      	ldrh	r3, [r7, #12]
 8004e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	8013      	strh	r3, [r2, #0]
 8004e52:	e2d5      	b.n	8005400 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e6a:	81fb      	strh	r3, [r7, #14]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	89fb      	ldrh	r3, [r7, #14]
 8004e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	8013      	strh	r3, [r2, #0]
 8004e8c:	e2b8      	b.n	8005400 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	4413      	add	r3, r2
 8004ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	011a      	lsls	r2, r3, #4
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	88db      	ldrh	r3, [r3, #6]
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	4413      	add	r3, r2
 8004ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	011a      	lsls	r2, r3, #4
 8004edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ede:	4413      	add	r3, r2
 8004ee0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b3e      	cmp	r3, #62	@ 0x3e
 8004efc:	d91d      	bls.n	8004f3a <USB_ActivateEndpoint+0x2aa>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <USB_ActivateEndpoint+0x288>
 8004f12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f14:	3b01      	subs	r3, #1
 8004f16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	029b      	lsls	r3, r3, #10
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	4313      	orrs	r3, r2
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	e026      	b.n	8004f88 <USB_ActivateEndpoint+0x2f8>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <USB_ActivateEndpoint+0x2c8>
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	e017      	b.n	8004f88 <USB_ActivateEndpoint+0x2f8>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <USB_ActivateEndpoint+0x2e2>
 8004f6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f6e:	3301      	adds	r3, #1
 8004f70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	029b      	lsls	r3, r3, #10
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004f96:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01b      	beq.n	8004fd8 <USB_ActivateEndpoint+0x348>
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb6:	843b      	strh	r3, [r7, #32]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	8c3b      	ldrh	r3, [r7, #32]
 8004fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d124      	bne.n	800502a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff6:	83bb      	strh	r3, [r7, #28]
 8004ff8:	8bbb      	ldrh	r3, [r7, #28]
 8004ffa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004ffe:	83bb      	strh	r3, [r7, #28]
 8005000:	8bbb      	ldrh	r3, [r7, #28]
 8005002:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005006:	83bb      	strh	r3, [r7, #28]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	441a      	add	r2, r3
 8005012:	8bbb      	ldrh	r3, [r7, #28]
 8005014:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005018:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800501c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005024:	b29b      	uxth	r3, r3
 8005026:	8013      	strh	r3, [r2, #0]
 8005028:	e1ea      	b.n	8005400 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800503c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005040:	83fb      	strh	r3, [r7, #30]
 8005042:	8bfb      	ldrh	r3, [r7, #30]
 8005044:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005048:	83fb      	strh	r3, [r7, #30]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	8bfb      	ldrh	r3, [r7, #30]
 8005056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800505a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800505e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005066:	b29b      	uxth	r3, r3
 8005068:	8013      	strh	r3, [r2, #0]
 800506a:	e1c9      	b.n	8005400 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	78db      	ldrb	r3, [r3, #3]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d11e      	bne.n	80050b2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800509c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050a4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80050a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	8013      	strh	r3, [r2, #0]
 80050b0:	e01d      	b.n	80050ee <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80050c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050fe:	4413      	add	r3, r2
 8005100:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	011a      	lsls	r2, r3, #4
 8005108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800510a:	4413      	add	r3, r2
 800510c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005110:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	891b      	ldrh	r3, [r3, #8]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	b29b      	uxth	r3, r3
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	657b      	str	r3, [r7, #84]	@ 0x54
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800512c:	b29b      	uxth	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005132:	4413      	add	r3, r2
 8005134:	657b      	str	r3, [r7, #84]	@ 0x54
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	011a      	lsls	r2, r3, #4
 800513c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513e:	4413      	add	r3, r2
 8005140:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005144:	653b      	str	r3, [r7, #80]	@ 0x50
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	895b      	ldrh	r3, [r3, #10]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	b29b      	uxth	r3, r3
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005154:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	2b00      	cmp	r3, #0
 800515c:	f040 8093 	bne.w	8005286 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005170:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01b      	beq.n	80051b4 <USB_ActivateEndpoint+0x524>
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800518e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005192:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80051a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80051c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80051c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01b      	beq.n	8005204 <USB_ActivateEndpoint+0x574>
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80051f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005200:	b29b      	uxth	r3, r3
 8005202:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800521c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800521e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005222:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005224:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005226:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800522a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800525e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005262:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800527c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005280:	b29b      	uxth	r3, r3
 8005282:	8013      	strh	r3, [r2, #0]
 8005284:	e0bc      	b.n	8005400 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005296:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800529a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01d      	beq.n	80052de <USB_ActivateEndpoint+0x64e>
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	441a      	add	r2, r3
 80052c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80052ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80052f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01d      	beq.n	8005336 <USB_ActivateEndpoint+0x6a6>
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800530c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005310:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	441a      	add	r2, r3
 800531e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800532a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800532e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005332:	b29b      	uxth	r3, r3
 8005334:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	78db      	ldrb	r3, [r3, #3]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d024      	beq.n	8005388 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005354:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005358:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800535c:	f083 0320 	eor.w	r3, r3, #32
 8005360:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800537e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]
 8005386:	e01d      	b.n	80053c4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800539a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800539e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80053b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	441a      	add	r2, r3
 80053e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80053ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005400:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005404:	4618      	mov	r0, r3
 8005406:	3774      	adds	r7, #116	@ 0x74
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop

08005410 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005410:	b480      	push	{r7}
 8005412:	b08d      	sub	sp, #52	@ 0x34
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	7b1b      	ldrb	r3, [r3, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f040 808e 	bne.w	8005540 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d044      	beq.n	80054b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	81bb      	strh	r3, [r7, #12]
 800543a:	89bb      	ldrh	r3, [r7, #12]
 800543c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01b      	beq.n	800547c <USB_DeactivateEndpoint+0x6c>
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800545a:	817b      	strh	r3, [r7, #10]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	897b      	ldrh	r3, [r7, #10]
 8005468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800546c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005474:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005478:	b29b      	uxth	r3, r3
 800547a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800548e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005492:	813b      	strh	r3, [r7, #8]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	893b      	ldrh	r3, [r7, #8]
 80054a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	8013      	strh	r3, [r2, #0]
 80054b4:	e192      	b.n	80057dc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	827b      	strh	r3, [r7, #18]
 80054c4:	8a7b      	ldrh	r3, [r7, #18]
 80054c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01b      	beq.n	8005506 <USB_DeactivateEndpoint+0xf6>
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e4:	823b      	strh	r3, [r7, #16]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	441a      	add	r2, r3
 80054f0:	8a3b      	ldrh	r3, [r7, #16]
 80054f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005502:	b29b      	uxth	r3, r3
 8005504:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551c:	81fb      	strh	r3, [r7, #14]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	441a      	add	r2, r3
 8005528:	89fb      	ldrh	r3, [r7, #14]
 800552a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800552e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800553a:	b29b      	uxth	r3, r3
 800553c:	8013      	strh	r3, [r2, #0]
 800553e:	e14d      	b.n	80057dc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f040 80a5 	bne.w	8005694 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	843b      	strh	r3, [r7, #32]
 8005558:	8c3b      	ldrh	r3, [r7, #32]
 800555a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01b      	beq.n	800559a <USB_DeactivateEndpoint+0x18a>
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005578:	83fb      	strh	r3, [r7, #30]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	8bfb      	ldrh	r3, [r7, #30]
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800558e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	83bb      	strh	r3, [r7, #28]
 80055a8:	8bbb      	ldrh	r3, [r7, #28]
 80055aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01b      	beq.n	80055ea <USB_DeactivateEndpoint+0x1da>
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c8:	837b      	strh	r3, [r7, #26]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8b7b      	ldrh	r3, [r7, #26]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005600:	833b      	strh	r3, [r7, #24]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	441a      	add	r2, r3
 800560c:	8b3b      	ldrh	r3, [r7, #24]
 800560e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800561a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005638:	82fb      	strh	r3, [r7, #22]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	8afb      	ldrh	r3, [r7, #22]
 8005646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800564a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800564e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005656:	b29b      	uxth	r3, r3
 8005658:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800566c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005670:	82bb      	strh	r3, [r7, #20]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	441a      	add	r2, r3
 800567c:	8abb      	ldrh	r3, [r7, #20]
 800567e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800568a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800568e:	b29b      	uxth	r3, r3
 8005690:	8013      	strh	r3, [r2, #0]
 8005692:	e0a3      	b.n	80057dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80056a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80056a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01b      	beq.n	80056e4 <USB_DeactivateEndpoint+0x2d4>
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	441a      	add	r2, r3
 80056ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80056d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80056f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80056f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01b      	beq.n	8005734 <USB_DeactivateEndpoint+0x324>
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800570e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005712:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800572c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005730:	b29b      	uxth	r3, r3
 8005732:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	441a      	add	r2, r3
 8005756:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800575c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005760:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005768:	b29b      	uxth	r3, r3
 800576a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800577e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005782:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	441a      	add	r2, r3
 800578e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800579c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	441a      	add	r2, r3
 80057c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80057c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3734      	adds	r7, #52	@ 0x34
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr

080057e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b0c2      	sub	sp, #264	@ 0x108
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f6:	6018      	str	r0, [r3, #0]
 80057f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005800:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	2b01      	cmp	r3, #1
 8005810:	f040 86b7 	bne.w	8006582 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	429a      	cmp	r2, r3
 800582e:	d908      	bls.n	8005842 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005840:	e007      	b.n	8005852 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	7b1b      	ldrb	r3, [r3, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d13a      	bne.n	80058d8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6959      	ldr	r1, [r3, #20]
 800586e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	88da      	ldrh	r2, [r3, #6]
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587e:	b29b      	uxth	r3, r3
 8005880:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005884:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005888:	6800      	ldr	r0, [r0, #0]
 800588a:	f001 fc9c 	bl	80071c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800588e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	011a      	lsls	r2, r3, #4
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4413      	add	r3, r2
 80058c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	f000 be1f 	b.w	8006516 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	78db      	ldrb	r3, [r3, #3]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	f040 8462 	bne.w	80061ae <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	429a      	cmp	r2, r3
 8005904:	f240 83df 	bls.w	80060c6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	b29b      	uxth	r3, r3
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800592a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005936:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005958:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800595c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005960:	b29b      	uxth	r3, r3
 8005962:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 81c7 	beq.w	8005d38 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d177      	bne.n	8005ab6 <USB_EPStartXfer+0x2ce>
 80059c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e6:	4413      	add	r3, r2
 80059e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	011a      	lsls	r2, r3, #4
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	4413      	add	r3, r2
 80059fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a16:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a18:	d921      	bls.n	8005a5e <USB_EPStartXfer+0x276>
 8005a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <USB_EPStartXfer+0x252>
 8005a30:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a34:	3b01      	subs	r3, #1
 8005a36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	029b      	lsls	r3, r3, #10
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e050      	b.n	8005b00 <USB_EPStartXfer+0x318>
 8005a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <USB_EPStartXfer+0x294>
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	e041      	b.n	8005b00 <USB_EPStartXfer+0x318>
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <USB_EPStartXfer+0x2b4>
 8005a92:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a96:	3301      	adds	r3, #1
 8005a98:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	4313      	orrs	r3, r2
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e024      	b.n	8005b00 <USB_EPStartXfer+0x318>
 8005ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d11c      	bne.n	8005b00 <USB_EPStartXfer+0x318>
 8005ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ada:	4413      	add	r3, r2
 8005adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	011a      	lsls	r2, r3, #4
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	4413      	add	r3, r2
 8005af0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	895b      	ldrh	r3, [r3, #10]
 8005b0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6959      	ldr	r1, [r3, #20]
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b2e:	6800      	ldr	r0, [r0, #0]
 8005b30:	f001 fb49 	bl	80071c6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b44:	441a      	add	r2, r3
 8005b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6a1a      	ldr	r2, [r3, #32]
 8005b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d90f      	bls.n	8005b8e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7e:	1ad2      	subs	r2, r2, r3
 8005b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	621a      	str	r2, [r3, #32]
 8005b8c:	e00e      	b.n	8005bac <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d177      	bne.n	8005cac <USB_EPStartXfer+0x4c4>
 8005bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	4413      	add	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	011a      	lsls	r2, r3, #4
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c0e:	d921      	bls.n	8005c54 <USB_EPStartXfer+0x46c>
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <USB_EPStartXfer+0x448>
 8005c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	029b      	lsls	r3, r3, #10
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	4313      	orrs	r3, r2
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	e056      	b.n	8005d02 <USB_EPStartXfer+0x51a>
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <USB_EPStartXfer+0x48a>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e047      	b.n	8005d02 <USB_EPStartXfer+0x51a>
 8005c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <USB_EPStartXfer+0x4aa>
 8005c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	029b      	lsls	r3, r3, #10
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	e02a      	b.n	8005d02 <USB_EPStartXfer+0x51a>
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d122      	bne.n	8005d02 <USB_EPStartXfer+0x51a>
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	623b      	str	r3, [r7, #32]
 8005cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	4413      	add	r3, r2
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	011a      	lsls	r2, r3, #4
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	891b      	ldrh	r3, [r3, #8]
 8005d0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6959      	ldr	r1, [r3, #20]
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d30:	6800      	ldr	r0, [r0, #0]
 8005d32:	f001 fa48 	bl	80071c6 <USB_WritePMA>
 8005d36:	e3ee      	b.n	8006516 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	785b      	ldrb	r3, [r3, #1]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d177      	bne.n	8005e38 <USB_EPStartXfer+0x650>
 8005d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d68:	4413      	add	r3, r2
 8005d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	011a      	lsls	r2, r3, #4
 8005d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d98:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d9a:	d921      	bls.n	8005de0 <USB_EPStartXfer+0x5f8>
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <USB_EPStartXfer+0x5d4>
 8005db2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005db6:	3b01      	subs	r3, #1
 8005db8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	029b      	lsls	r3, r3, #10
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	e056      	b.n	8005e8e <USB_EPStartXfer+0x6a6>
 8005de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <USB_EPStartXfer+0x616>
 8005de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	e047      	b.n	8005e8e <USB_EPStartXfer+0x6a6>
 8005dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <USB_EPStartXfer+0x636>
 8005e14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	029b      	lsls	r3, r3, #10
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	e02a      	b.n	8005e8e <USB_EPStartXfer+0x6a6>
 8005e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d122      	bne.n	8005e8e <USB_EPStartXfer+0x6a6>
 8005e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e68:	4413      	add	r3, r2
 8005e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	011a      	lsls	r2, r3, #4
 8005e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	891b      	ldrh	r3, [r3, #8]
 8005e9a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6959      	ldr	r1, [r3, #20]
 8005eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005eb4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005eb8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f001 f982 	bl	80071c6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed2:	441a      	add	r2, r3
 8005ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a1a      	ldr	r2, [r3, #32]
 8005eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d90f      	bls.n	8005f1c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a1a      	ldr	r2, [r3, #32]
 8005f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0c:	1ad2      	subs	r2, r2, r3
 8005f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	621a      	str	r2, [r3, #32]
 8005f1a:	e00e      	b.n	8005f3a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d177      	bne.n	8006046 <USB_EPStartXfer+0x85e>
 8005f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f76:	4413      	add	r3, r2
 8005f78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	011a      	lsls	r2, r3, #4
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa0:	801a      	strh	r2, [r3, #0]
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fa8:	d921      	bls.n	8005fee <USB_EPStartXfer+0x806>
 8005faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <USB_EPStartXfer+0x7e2>
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	029b      	lsls	r3, r3, #10
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fea:	801a      	strh	r2, [r3, #0]
 8005fec:	e050      	b.n	8006090 <USB_EPStartXfer+0x8a8>
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <USB_EPStartXfer+0x824>
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006004:	b29a      	uxth	r2, r3
 8006006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	e041      	b.n	8006090 <USB_EPStartXfer+0x8a8>
 800600c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006010:	085b      	lsrs	r3, r3, #1
 8006012:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <USB_EPStartXfer+0x844>
 8006022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006026:	3301      	adds	r3, #1
 8006028:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800602c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29a      	uxth	r2, r3
 8006032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006036:	b29b      	uxth	r3, r3
 8006038:	029b      	lsls	r3, r3, #10
 800603a:	b29b      	uxth	r3, r3
 800603c:	4313      	orrs	r3, r2
 800603e:	b29a      	uxth	r2, r3
 8006040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	e024      	b.n	8006090 <USB_EPStartXfer+0x8a8>
 8006046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d11c      	bne.n	8006090 <USB_EPStartXfer+0x8a8>
 8006056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800606a:	4413      	add	r3, r2
 800606c:	643b      	str	r3, [r7, #64]	@ 0x40
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	011a      	lsls	r2, r3, #4
 800607c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800607e:	4413      	add	r3, r2
 8006080:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608a:	b29a      	uxth	r2, r3
 800608c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800608e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	895b      	ldrh	r3, [r3, #10]
 800609c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6959      	ldr	r1, [r3, #20]
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060be:	6800      	ldr	r0, [r0, #0]
 80060c0:	f001 f881 	bl	80071c6 <USB_WritePMA>
 80060c4:	e227      	b.n	8006516 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80060d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80060f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060fc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	441a      	add	r2, r3
 800611a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800611e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800612a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006136:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800613e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006152:	4413      	add	r3, r2
 8006154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	011a      	lsls	r2, r3, #4
 8006164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006166:	4413      	add	r3, r2
 8006168:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800616c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800616e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006172:	b29a      	uxth	r2, r3
 8006174:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006176:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	891b      	ldrh	r3, [r3, #8]
 8006184:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6959      	ldr	r1, [r3, #20]
 8006194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006198:	b29b      	uxth	r3, r3
 800619a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800619e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061a6:	6800      	ldr	r0, [r0, #0]
 80061a8:	f001 f80d 	bl	80071c6 <USB_WritePMA>
 80061ac:	e1b3      	b.n	8006516 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80061ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 80c6 	beq.w	8006380 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d177      	bne.n	8006300 <USB_EPStartXfer+0xb18>
 8006210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800621c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800622a:	b29b      	uxth	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006230:	4413      	add	r3, r2
 8006232:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	011a      	lsls	r2, r3, #4
 8006242:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006244:	4413      	add	r3, r2
 8006246:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800624a:	667b      	str	r3, [r7, #100]	@ 0x64
 800624c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006256:	b29a      	uxth	r2, r3
 8006258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006260:	2b3e      	cmp	r3, #62	@ 0x3e
 8006262:	d921      	bls.n	80062a8 <USB_EPStartXfer+0xac0>
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <USB_EPStartXfer+0xa9c>
 800627a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800627e:	3b01      	subs	r3, #1
 8006280:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29a      	uxth	r2, r3
 800628a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800628e:	b29b      	uxth	r3, r3
 8006290:	029b      	lsls	r3, r3, #10
 8006292:	b29b      	uxth	r3, r3
 8006294:	4313      	orrs	r3, r2
 8006296:	b29b      	uxth	r3, r3
 8006298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	e050      	b.n	800634a <USB_EPStartXfer+0xb62>
 80062a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <USB_EPStartXfer+0xade>
 80062b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062be:	b29a      	uxth	r2, r3
 80062c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	e041      	b.n	800634a <USB_EPStartXfer+0xb62>
 80062c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <USB_EPStartXfer+0xafe>
 80062dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062e0:	3301      	adds	r3, #1
 80062e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	029b      	lsls	r3, r3, #10
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	4313      	orrs	r3, r2
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062fc:	801a      	strh	r2, [r3, #0]
 80062fe:	e024      	b.n	800634a <USB_EPStartXfer+0xb62>
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d11c      	bne.n	800634a <USB_EPStartXfer+0xb62>
 8006310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006324:	4413      	add	r3, r2
 8006326:	673b      	str	r3, [r7, #112]	@ 0x70
 8006328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	011a      	lsls	r2, r3, #4
 8006336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006338:	4413      	add	r3, r2
 800633a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800633e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006344:	b29a      	uxth	r2, r3
 8006346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006348:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800634a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	895b      	ldrh	r3, [r3, #10]
 8006356:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800635a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6959      	ldr	r1, [r3, #20]
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636a:	b29b      	uxth	r3, r3
 800636c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006370:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006374:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006378:	6800      	ldr	r0, [r0, #0]
 800637a:	f000 ff24 	bl	80071c6 <USB_WritePMA>
 800637e:	e0ca      	b.n	8006516 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d177      	bne.n	8006480 <USB_EPStartXfer+0xc98>
 8006390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063b0:	4413      	add	r3, r2
 80063b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	011a      	lsls	r2, r3, #4
 80063c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063da:	801a      	strh	r2, [r3, #0]
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80063e2:	d921      	bls.n	8006428 <USB_EPStartXfer+0xc40>
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80063ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <USB_EPStartXfer+0xc1c>
 80063fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80063fe:	3b01      	subs	r3, #1
 8006400:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006404:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29a      	uxth	r2, r3
 800640a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800640e:	b29b      	uxth	r3, r3
 8006410:	029b      	lsls	r3, r3, #10
 8006412:	b29b      	uxth	r3, r3
 8006414:	4313      	orrs	r3, r2
 8006416:	b29b      	uxth	r3, r3
 8006418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006420:	b29a      	uxth	r2, r3
 8006422:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006424:	801a      	strh	r2, [r3, #0]
 8006426:	e05c      	b.n	80064e2 <USB_EPStartXfer+0xcfa>
 8006428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <USB_EPStartXfer+0xc5e>
 8006430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643e:	b29a      	uxth	r2, r3
 8006440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	e04d      	b.n	80064e2 <USB_EPStartXfer+0xcfa>
 8006446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <USB_EPStartXfer+0xc7e>
 800645c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006460:	3301      	adds	r3, #1
 8006462:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29a      	uxth	r2, r3
 800646c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006470:	b29b      	uxth	r3, r3
 8006472:	029b      	lsls	r3, r3, #10
 8006474:	b29b      	uxth	r3, r3
 8006476:	4313      	orrs	r3, r2
 8006478:	b29a      	uxth	r2, r3
 800647a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e030      	b.n	80064e2 <USB_EPStartXfer+0xcfa>
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d128      	bne.n	80064e2 <USB_EPStartXfer+0xcfa>
 8006490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800649e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064b4:	4413      	add	r3, r2
 80064b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	011a      	lsls	r2, r3, #4
 80064c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064cc:	4413      	add	r3, r2
 80064ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064da:	b29a      	uxth	r2, r3
 80064dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	891b      	ldrh	r3, [r3, #8]
 80064ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6959      	ldr	r1, [r3, #20]
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006502:	b29b      	uxth	r3, r3
 8006504:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006508:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800650c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006510:	6800      	ldr	r0, [r0, #0]
 8006512:	f000 fe58 	bl	80071c6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800653c:	817b      	strh	r3, [r7, #10]
 800653e:	897b      	ldrh	r3, [r7, #10]
 8006540:	f083 0310 	eor.w	r3, r3, #16
 8006544:	817b      	strh	r3, [r7, #10]
 8006546:	897b      	ldrh	r3, [r7, #10]
 8006548:	f083 0320 	eor.w	r3, r3, #32
 800654c:	817b      	strh	r3, [r7, #10]
 800654e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	441a      	add	r2, r3
 8006568:	897b      	ldrh	r3, [r7, #10]
 800656a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800656e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657a:	b29b      	uxth	r3, r3
 800657c:	8013      	strh	r3, [r2, #0]
 800657e:	f000 bcde 	b.w	8006f3e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	7b1b      	ldrb	r3, [r3, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f040 80bb 	bne.w	800670a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699a      	ldr	r2, [r3, #24]
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d917      	bls.n	80065e0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80065b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80065c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699a      	ldr	r2, [r3, #24]
 80065cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d0:	1ad2      	subs	r2, r2, r3
 80065d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	619a      	str	r2, [r3, #24]
 80065de:	e00e      	b.n	80065fe <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80065f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2200      	movs	r2, #0
 80065fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800660c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006610:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800661a:	b29b      	uxth	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006622:	4413      	add	r3, r2
 8006624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	011a      	lsls	r2, r3, #4
 8006636:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800663a:	4413      	add	r3, r2
 800663c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006640:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006650:	b29a      	uxth	r2, r3
 8006652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006656:	801a      	strh	r2, [r3, #0]
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665c:	2b3e      	cmp	r3, #62	@ 0x3e
 800665e:	d924      	bls.n	80066aa <USB_EPStartXfer+0xec2>
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <USB_EPStartXfer+0xe98>
 8006676:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800667a:	3b01      	subs	r3, #1
 800667c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006680:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29a      	uxth	r2, r3
 8006688:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800668c:	b29b      	uxth	r3, r3
 800668e:	029b      	lsls	r3, r3, #10
 8006690:	b29b      	uxth	r3, r3
 8006692:	4313      	orrs	r3, r2
 8006694:	b29b      	uxth	r3, r3
 8006696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	f000 bc10 	b.w	8006eca <USB_EPStartXfer+0x16e2>
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10c      	bne.n	80066cc <USB_EPStartXfer+0xee4>
 80066b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066c8:	801a      	strh	r2, [r3, #0]
 80066ca:	e3fe      	b.n	8006eca <USB_EPStartXfer+0x16e2>
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d004      	beq.n	80066ec <USB_EPStartXfer+0xf04>
 80066e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80066e6:	3301      	adds	r3, #1
 80066e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	029b      	lsls	r3, r3, #10
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b29a      	uxth	r2, r3
 8006702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	e3df      	b.n	8006eca <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800670a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	78db      	ldrb	r3, [r3, #3]
 8006716:	2b02      	cmp	r3, #2
 8006718:	f040 8218 	bne.w	8006b4c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800671c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f040 809d 	bne.w	8006868 <USB_EPStartXfer+0x1080>
 800672e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800673c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006740:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800674a:	b29b      	uxth	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006752:	4413      	add	r3, r2
 8006754:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	011a      	lsls	r2, r3, #4
 8006766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800676a:	4413      	add	r3, r2
 800676c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006774:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006780:	b29a      	uxth	r2, r3
 8006782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006786:	801a      	strh	r2, [r3, #0]
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b3e      	cmp	r3, #62	@ 0x3e
 8006796:	d92b      	bls.n	80067f0 <USB_EPStartXfer+0x1008>
 8006798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <USB_EPStartXfer+0xfe0>
 80067be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c2:	3b01      	subs	r3, #1
 80067c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	029b      	lsls	r3, r3, #10
 80067d8:	b29b      	uxth	r3, r3
 80067da:	4313      	orrs	r3, r2
 80067dc:	b29b      	uxth	r3, r3
 80067de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e070      	b.n	80068d2 <USB_EPStartXfer+0x10ea>
 80067f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10c      	bne.n	800681a <USB_EPStartXfer+0x1032>
 8006800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800680c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006810:	b29a      	uxth	r2, r3
 8006812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	e05b      	b.n	80068d2 <USB_EPStartXfer+0x10ea>
 800681a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800682c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <USB_EPStartXfer+0x1062>
 8006840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006844:	3301      	adds	r3, #1
 8006846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800684a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29a      	uxth	r2, r3
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006856:	b29b      	uxth	r3, r3
 8006858:	029b      	lsls	r3, r3, #10
 800685a:	b29b      	uxth	r3, r3
 800685c:	4313      	orrs	r3, r2
 800685e:	b29a      	uxth	r2, r3
 8006860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006864:	801a      	strh	r2, [r3, #0]
 8006866:	e034      	b.n	80068d2 <USB_EPStartXfer+0x10ea>
 8006868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	785b      	ldrb	r3, [r3, #1]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d12c      	bne.n	80068d2 <USB_EPStartXfer+0x10ea>
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006894:	b29b      	uxth	r3, r3
 8006896:	461a      	mov	r2, r3
 8006898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800689c:	4413      	add	r3, r2
 800689e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	011a      	lsls	r2, r3, #4
 80068b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068b4:	4413      	add	r3, r2
 80068b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 809d 	bne.w	8006a2c <USB_EPStartXfer+0x1244>
 80068f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006916:	4413      	add	r3, r2
 8006918:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800691c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	011a      	lsls	r2, r3, #4
 800692a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800692e:	4413      	add	r3, r2
 8006930:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006938:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006944:	b29a      	uxth	r2, r3
 8006946:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b3e      	cmp	r3, #62	@ 0x3e
 800695a:	d92b      	bls.n	80069b4 <USB_EPStartXfer+0x11cc>
 800695c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800696e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <USB_EPStartXfer+0x11a4>
 8006982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006986:	3b01      	subs	r3, #1
 8006988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800698c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29a      	uxth	r2, r3
 8006994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006998:	b29b      	uxth	r3, r3
 800699a:	029b      	lsls	r3, r3, #10
 800699c:	b29b      	uxth	r3, r3
 800699e:	4313      	orrs	r3, r2
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069b0:	801a      	strh	r2, [r3, #0]
 80069b2:	e069      	b.n	8006a88 <USB_EPStartXfer+0x12a0>
 80069b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10c      	bne.n	80069de <USB_EPStartXfer+0x11f6>
 80069c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e054      	b.n	8006a88 <USB_EPStartXfer+0x12a0>
 80069de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <USB_EPStartXfer+0x1226>
 8006a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a08:	3301      	adds	r3, #1
 8006a0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	029b      	lsls	r3, r3, #10
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4313      	orrs	r3, r2
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e02d      	b.n	8006a88 <USB_EPStartXfer+0x12a0>
 8006a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d125      	bne.n	8006a88 <USB_EPStartXfer+0x12a0>
 8006a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a52:	4413      	add	r3, r2
 8006a54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	011a      	lsls	r2, r3, #4
 8006a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a86:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8218 	beq.w	8006eca <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006aba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d005      	beq.n	8006ad2 <USB_EPStartXfer+0x12ea>
 8006ac6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10d      	bne.n	8006aee <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ad2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 81f5 	bne.w	8006eca <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ae0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f040 81ee 	bne.w	8006eca <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b14:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	8013      	strh	r3, [r2, #0]
 8006b4a:	e1be      	b.n	8006eca <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	78db      	ldrb	r3, [r3, #3]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	f040 81b4 	bne.w	8006ec6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d917      	bls.n	8006baa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9a:	1ad2      	subs	r2, r2, r3
 8006b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	619a      	str	r2, [r3, #24]
 8006ba8:	e00e      	b.n	8006bc8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f040 8085 	bne.w	8006ce4 <USB_EPStartXfer+0x14fc>
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bfe:	4413      	add	r3, r2
 8006c00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	011a      	lsls	r2, r3, #4
 8006c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c38:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c3a:	d923      	bls.n	8006c84 <USB_EPStartXfer+0x149c>
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <USB_EPStartXfer+0x1474>
 8006c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c56:	3b01      	subs	r3, #1
 8006c58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	029b      	lsls	r3, r3, #10
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e060      	b.n	8006d46 <USB_EPStartXfer+0x155e>
 8006c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10c      	bne.n	8006ca6 <USB_EPStartXfer+0x14be>
 8006c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e04f      	b.n	8006d46 <USB_EPStartXfer+0x155e>
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d004      	beq.n	8006cc6 <USB_EPStartXfer+0x14de>
 8006cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	029b      	lsls	r3, r3, #10
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	e030      	b.n	8006d46 <USB_EPStartXfer+0x155e>
 8006ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d128      	bne.n	8006d46 <USB_EPStartXfer+0x155e>
 8006cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d18:	4413      	add	r3, r2
 8006d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	011a      	lsls	r2, r3, #4
 8006d2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d30:	4413      	add	r3, r2
 8006d32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f040 8085 	bne.w	8006e70 <USB_EPStartXfer+0x1688>
 8006d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	011a      	lsls	r2, r3, #4
 8006d9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006da2:	4413      	add	r3, r2
 8006da4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dc6:	d923      	bls.n	8006e10 <USB_EPStartXfer+0x1628>
 8006dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd6:	f003 031f 	and.w	r3, r3, #31
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d104      	bne.n	8006de8 <USB_EPStartXfer+0x1600>
 8006dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006de2:	3b01      	subs	r3, #1
 8006de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	029b      	lsls	r3, r3, #10
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e0c:	801a      	strh	r2, [r3, #0]
 8006e0e:	e05c      	b.n	8006eca <USB_EPStartXfer+0x16e2>
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10c      	bne.n	8006e32 <USB_EPStartXfer+0x164a>
 8006e18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e2e:	801a      	strh	r2, [r3, #0]
 8006e30:	e04b      	b.n	8006eca <USB_EPStartXfer+0x16e2>
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e36:	085b      	lsrs	r3, r3, #1
 8006e38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <USB_EPStartXfer+0x166a>
 8006e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	029b      	lsls	r3, r3, #10
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	4313      	orrs	r3, r2
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e6c:	801a      	strh	r2, [r3, #0]
 8006e6e:	e02c      	b.n	8006eca <USB_EPStartXfer+0x16e2>
 8006e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d124      	bne.n	8006eca <USB_EPStartXfer+0x16e2>
 8006e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e96:	4413      	add	r3, r2
 8006e98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	011a      	lsls	r2, r3, #4
 8006eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006eae:	4413      	add	r3, r2
 8006eb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	e001      	b.n	8006eca <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e03a      	b.n	8006f40 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ef4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ef8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006efc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006f00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f04:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f08:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	441a      	add	r2, r3
 8006f26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b085      	sub	sp, #20
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d020      	beq.n	8006f9e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f72:	81bb      	strh	r3, [r7, #12]
 8006f74:	89bb      	ldrh	r3, [r7, #12]
 8006f76:	f083 0310 	eor.w	r3, r3, #16
 8006f7a:	81bb      	strh	r3, [r7, #12]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	441a      	add	r2, r3
 8006f86:	89bb      	ldrh	r3, [r7, #12]
 8006f88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8013      	strh	r3, [r2, #0]
 8006f9c:	e01f      	b.n	8006fde <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb4:	81fb      	strh	r3, [r7, #14]
 8006fb6:	89fb      	ldrh	r3, [r7, #14]
 8006fb8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fbc:	81fb      	strh	r3, [r7, #14]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	441a      	add	r2, r3
 8006fc8:	89fb      	ldrh	r3, [r7, #14]
 8006fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr

08006fea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b087      	sub	sp, #28
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	7b1b      	ldrb	r3, [r3, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 809d 	bne.w	8007138 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d04c      	beq.n	80070a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	823b      	strh	r3, [r7, #16]
 8007014:	8a3b      	ldrh	r3, [r7, #16]
 8007016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01b      	beq.n	8007056 <USB_EPClearStall+0x6c>
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007034:	81fb      	strh	r3, [r7, #14]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	441a      	add	r2, r3
 8007040:	89fb      	ldrh	r3, [r7, #14]
 8007042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800704a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800704e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007052:	b29b      	uxth	r3, r3
 8007054:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	78db      	ldrb	r3, [r3, #3]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d06c      	beq.n	8007138 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007074:	81bb      	strh	r3, [r7, #12]
 8007076:	89bb      	ldrh	r3, [r7, #12]
 8007078:	f083 0320 	eor.w	r3, r3, #32
 800707c:	81bb      	strh	r3, [r7, #12]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	441a      	add	r2, r3
 8007088:	89bb      	ldrh	r3, [r7, #12]
 800708a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800708e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709a:	b29b      	uxth	r3, r3
 800709c:	8013      	strh	r3, [r2, #0]
 800709e:	e04b      	b.n	8007138 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	82fb      	strh	r3, [r7, #22]
 80070ae:	8afb      	ldrh	r3, [r7, #22]
 80070b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01b      	beq.n	80070f0 <USB_EPClearStall+0x106>
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ce:	82bb      	strh	r3, [r7, #20]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	441a      	add	r2, r3
 80070da:	8abb      	ldrh	r3, [r7, #20]
 80070dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007106:	827b      	strh	r3, [r7, #18]
 8007108:	8a7b      	ldrh	r3, [r7, #18]
 800710a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800710e:	827b      	strh	r3, [r7, #18]
 8007110:	8a7b      	ldrh	r3, [r7, #18]
 8007112:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007116:	827b      	strh	r3, [r7, #18]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	441a      	add	r2, r3
 8007122:	8a7b      	ldrh	r3, [r7, #18]
 8007124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800712c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007134:	b29b      	uxth	r3, r3
 8007136:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr

08007144 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d103      	bne.n	800715e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2280      	movs	r2, #128	@ 0x80
 800715a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr

0800716a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr

0800717e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr

08007192 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007192:	b480      	push	{r7}
 8007194:	b085      	sub	sp, #20
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80071a4:	68fb      	ldr	r3, [r7, #12]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr

080071c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b08b      	sub	sp, #44	@ 0x2c
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	4611      	mov	r1, r2
 80071d2:	461a      	mov	r2, r3
 80071d4:	460b      	mov	r3, r1
 80071d6:	80fb      	strh	r3, [r7, #6]
 80071d8:	4613      	mov	r3, r2
 80071da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071dc:	88bb      	ldrh	r3, [r7, #4]
 80071de:	3301      	adds	r3, #1
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	005a      	lsls	r2, r3, #1
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071fe:	e01e      	b.n	800723e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	3301      	adds	r3, #1
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	021b      	lsls	r3, r3, #8
 800720e:	b21a      	sxth	r2, r3
 8007210:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007214:	4313      	orrs	r3, r2
 8007216:	b21b      	sxth	r3, r3
 8007218:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	8a7a      	ldrh	r2, [r7, #18]
 800721e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	3302      	adds	r3, #2
 8007224:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	3302      	adds	r3, #2
 800722a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	3301      	adds	r3, #1
 8007230:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3301      	adds	r3, #1
 8007236:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	3b01      	subs	r3, #1
 800723c:	627b      	str	r3, [r7, #36]	@ 0x24
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1dd      	bne.n	8007200 <USB_WritePMA+0x3a>
  }
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	372c      	adds	r7, #44	@ 0x2c
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr

08007250 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007250:	b480      	push	{r7}
 8007252:	b08b      	sub	sp, #44	@ 0x2c
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4611      	mov	r1, r2
 800725c:	461a      	mov	r2, r3
 800725e:	460b      	mov	r3, r1
 8007260:	80fb      	strh	r3, [r7, #6]
 8007262:	4613      	mov	r3, r2
 8007264:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007266:	88bb      	ldrh	r3, [r7, #4]
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	b29b      	uxth	r3, r3
 800726c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	005a      	lsls	r2, r3, #1
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007282:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	627b      	str	r3, [r7, #36]	@ 0x24
 8007288:	e01b      	b.n	80072c2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29b      	uxth	r3, r3
 8007290:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	3302      	adds	r3, #2
 8007296:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	3301      	adds	r3, #1
 80072a4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	0a1b      	lsrs	r3, r3, #8
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	3301      	adds	r3, #1
 80072b4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	3302      	adds	r3, #2
 80072ba:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	3b01      	subs	r3, #1
 80072c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e0      	bne.n	800728a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80072c8:	88bb      	ldrh	r3, [r7, #4]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d007      	beq.n	80072e4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	701a      	strb	r2, [r3, #0]
  }
}
 80072e4:	bf00      	nop
 80072e6:	372c      	adds	r7, #44	@ 0x2c
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bc80      	pop	{r7}
 80072ec:	4770      	bx	lr
	...

080072f0 <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	73fb      	strb	r3, [r7, #15]

  USBD_LL_OpenEP(pdev,
 8007300:	2340      	movs	r3, #64	@ 0x40
 8007302:	2202      	movs	r2, #2
 8007304:	2181      	movs	r1, #129	@ 0x81
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 fc49 	bl	8008b9e <USBD_LL_OpenEP>
                 MIDI_EPIN_ADDR,
                 USBD_EP_TYPE_BULK,
                 MIDI_EPIN_SIZE);

  USBD_LL_OpenEP(pdev,
 800730c:	2340      	movs	r3, #64	@ 0x40
 800730e:	2202      	movs	r2, #2
 8007310:	2101      	movs	r1, #1
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 fc43 	bl	8008b9e <USBD_LL_OpenEP>
               MIDI_EPOUT_ADDR,
               USBD_EP_TYPE_BULK,
               MIDI_EPOUT_SIZE);

  USBD_LL_PrepareReceive(pdev,
 8007318:	2340      	movs	r3, #64	@ 0x40
 800731a:	4a0f      	ldr	r2, [pc, #60]	@ (8007358 <USBD_MIDI_Init+0x68>)
 800731c:	2101      	movs	r1, #1
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fd2d 	bl	8008d7e <USBD_LL_PrepareReceive>
               MIDI_EPOUT_ADDR,
               usb_rx_buffer,
               MIDI_EPOUT_SIZE);

  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 8007324:	2010      	movs	r0, #16
 8007326:	f001 fd4d 	bl	8008dc4 <USBD_static_malloc>
 800732a:	4602      	mov	r2, r0
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if(pdev->pClassData == NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <USBD_MIDI_Init+0x52>
  {
    ret = 1;
 800733c:	2301      	movs	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
 8007340:	e004      	b.n	800734c <USBD_MIDI_Init+0x5c>
  }
  else
  {
    ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007348:	2200      	movs	r2, #0
 800734a:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000288 	.word	0x20000288

0800735c <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
  /* Close MIDI EPs */
  USBD_LL_CloseEP(pdev, MIDI_EPIN_SIZE);
 8007368:	2140      	movs	r1, #64	@ 0x40
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 fc3d 	bl	8008bea <USBD_LL_CloseEP>

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <USBD_MIDI_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007380:	4618      	mov	r0, r3
 8007382:	f001 fd2b 	bl	8008ddc <USBD_static_free>
    pdev->pClassData = NULL;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
  USBD_MIDI_HandleTypeDef     *hmidi = pdev->pClassData;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073b0:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d044      	beq.n	8007448 <USBD_MIDI_Setup+0xb0>
 80073be:	2b20      	cmp	r3, #32
 80073c0:	d171      	bne.n	80074a6 <USBD_MIDI_Setup+0x10e>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	3b02      	subs	r3, #2
 80073c8:	2b09      	cmp	r3, #9
 80073ca:	d836      	bhi.n	800743a <USBD_MIDI_Setup+0xa2>
 80073cc:	a201      	add	r2, pc, #4	@ (adr r2, 80073d4 <USBD_MIDI_Setup+0x3c>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	0800742b 	.word	0x0800742b
 80073d8:	0800740b 	.word	0x0800740b
 80073dc:	0800743b 	.word	0x0800743b
 80073e0:	0800743b 	.word	0x0800743b
 80073e4:	0800743b 	.word	0x0800743b
 80073e8:	0800743b 	.word	0x0800743b
 80073ec:	0800743b 	.word	0x0800743b
 80073f0:	0800743b 	.word	0x0800743b
 80073f4:	08007419 	.word	0x08007419
 80073f8:	080073fd 	.word	0x080073fd
    {
      case MIDI_REQ_SET_PROTOCOL:
        hmidi->Protocol = (uint8_t)(req->wValue);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	885b      	ldrh	r3, [r3, #2]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	461a      	mov	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	601a      	str	r2, [r3, #0]
        break;
 8007408:	e01d      	b.n	8007446 <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_PROTOCOL:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->Protocol,
 800740a:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 800740c:	2201      	movs	r2, #1
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 f8fd 	bl	8008610 <USBD_CtlSendData>
                          1);
        break;
 8007416:	e016      	b.n	8007446 <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_SET_IDLE:
        hmidi->IdleState = (uint8_t)(req->wValue >> 8);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	885b      	ldrh	r3, [r3, #2]
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	b29b      	uxth	r3, r3
 8007420:	b2db      	uxtb	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	605a      	str	r2, [r3, #4]
        break;
 8007428:	e00d      	b.n	8007446 <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_IDLE:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->IdleState,
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3304      	adds	r3, #4
        USBD_CtlSendData (pdev,
 800742e:	2201      	movs	r2, #1
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 f8ec 	bl	8008610 <USBD_CtlSendData>
                          1);
        break;
 8007438:	e005      	b.n	8007446 <USBD_MIDI_Setup+0xae>

      default:
        USBD_CtlError (pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 f87d 	bl	800853c <USBD_CtlError>
        return USBD_FAIL;
 8007442:	2302      	movs	r3, #2
 8007444:	e030      	b.n	80074a8 <USBD_MIDI_Setup+0x110>
    }
    break;
 8007446:	e02e      	b.n	80074a6 <USBD_MIDI_Setup+0x10e>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	785b      	ldrb	r3, [r3, #1]
 800744c:	2b0b      	cmp	r3, #11
 800744e:	d023      	beq.n	8007498 <USBD_MIDI_Setup+0x100>
 8007450:	2b0b      	cmp	r3, #11
 8007452:	dc28      	bgt.n	80074a6 <USBD_MIDI_Setup+0x10e>
 8007454:	2b06      	cmp	r3, #6
 8007456:	d002      	beq.n	800745e <USBD_MIDI_Setup+0xc6>
 8007458:	2b0a      	cmp	r3, #10
 800745a:	d015      	beq.n	8007488 <USBD_MIDI_Setup+0xf0>
 800745c:	e023      	b.n	80074a6 <USBD_MIDI_Setup+0x10e>
    {
      case USB_REQ_GET_DESCRIPTOR:
        if( req->wValue >> 8 == MIDI_DESCRIPTOR_TYPE)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	885b      	ldrh	r3, [r3, #2]
 8007462:	0a1b      	lsrs	r3, r3, #8
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b21      	cmp	r3, #33	@ 0x21
 8007468:	d107      	bne.n	800747a <USBD_MIDI_Setup+0xe2>
        {
          pbuf = USBD_MIDI_CfgDesc + USB_MIDI_CLASS_DESC_SHIFT;
 800746a:	4b11      	ldr	r3, [pc, #68]	@ (80074b0 <USBD_MIDI_Setup+0x118>)
 800746c:	613b      	str	r3, [r7, #16]
          len = MIN(USB_MIDI_DESC_SIZE , req->wLength);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	88db      	ldrh	r3, [r3, #6]
 8007472:	2b07      	cmp	r3, #7
 8007474:	bf28      	it	cs
 8007476:	2307      	movcs	r3, #7
 8007478:	82fb      	strh	r3, [r7, #22]
        }

        USBD_CtlSendData (pdev, pbuf, len);
 800747a:	8afb      	ldrh	r3, [r7, #22]
 800747c:	461a      	mov	r2, r3
 800747e:	6939      	ldr	r1, [r7, #16]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 f8c5 	bl	8008610 <USBD_CtlSendData>
        break;
 8007486:	e00e      	b.n	80074a6 <USBD_MIDI_Setup+0x10e>

      case USB_REQ_GET_INTERFACE :
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->AltSetting,
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3308      	adds	r3, #8
        USBD_CtlSendData (pdev,
 800748c:	2201      	movs	r2, #1
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 f8bd 	bl	8008610 <USBD_CtlSendData>
                          1);
        break;
 8007496:	e006      	b.n	80074a6 <USBD_MIDI_Setup+0x10e>

      case USB_REQ_SET_INTERFACE :
        hmidi->AltSetting = (uint8_t)(req->wValue);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	885b      	ldrh	r3, [r3, #2]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	461a      	mov	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	609a      	str	r2, [r3, #8]
        break;
 80074a4:	bf00      	nop
    }
  }
  return USBD_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	2000006a 	.word	0x2000006a

080074b4 <USBD_MIDI_GetState>:
  *         Get MIDI State
  * @param  pdev: device instance
  * @retval usb state  (MIDI_IDLE, MIDI_BUSY)
  */
uint8_t USBD_MIDI_GetState(USBD_HandleTypeDef  *pdev)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  return ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c2:	7b1b      	ldrb	r3, [r3, #12]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bc80      	pop	{r7}
 80074cc:	4770      	bx	lr

080074ce <USBD_MIDI_SendPackets>:
  * @retval status
  */
uint8_t USBD_MIDI_SendPackets(USBD_HandleTypeDef  *pdev,
                                 uint8_t *data,
                                 uint16_t len)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b086      	sub	sp, #24
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	4613      	mov	r3, r2
 80074da:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef *hmidi = pdev->pClassData;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074e2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d10c      	bne.n	8007508 <USBD_MIDI_SendPackets+0x3a>
  {
    if(hmidi->state == MIDI_IDLE)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	7b1b      	ldrb	r3, [r3, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d108      	bne.n	8007508 <USBD_MIDI_SendPackets+0x3a>
    {
      hmidi->state = MIDI_BUSY;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2201      	movs	r2, #1
 80074fa:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev, MIDI_EPIN_ADDR, data, len);
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	2181      	movs	r1, #129	@ 0x81
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f001 fc18 	bl	8008d38 <USBD_LL_Transmit>
    }
  }
  return USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2253      	movs	r2, #83	@ 0x53
 8007520:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8007522:	4b03      	ldr	r3, [pc, #12]	@ (8007530 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	20000058 	.word	0x20000058

08007534 <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007546:	2200      	movs	r2, #0
 8007548:	731a      	strb	r2, [r3, #12]

  USBD_MIDI_OnPacketsSent();
 800754a:	f000 f805 	bl	8007558 <USBD_MIDI_OnPacketsSent>

  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_MIDI_OnPacketsSent>:
/**
  * @brief  USBD_MIDI_OnPacketsSent
  *         on usb midi packets sent to the host callback
  */
__weak extern void USBD_MIDI_OnPacketsSent(void)
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
}
 800755c:	bf00      	nop
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr

08007564 <USBD_MIDI_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	70fb      	strb	r3, [r7, #3]
  uint8_t len;

  if (epnum != (MIDI_EPOUT_ADDR & 0x0F)) return USBD_FAIL;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d001      	beq.n	800757a <USBD_MIDI_DataOut+0x16>
 8007576:	2302      	movs	r3, #2
 8007578:	e015      	b.n	80075a6 <USBD_MIDI_DataOut+0x42>

  len = (uint8_t)HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, epnum);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f7fa ffa0 	bl	80024ca <HAL_PCD_EP_GetRxCount>
 800758a:	4603      	mov	r3, r0
 800758c:	73fb      	strb	r3, [r7, #15]

  USBD_MIDI_OnPacketsReceived(usb_rx_buffer, len);
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	4619      	mov	r1, r3
 8007592:	4807      	ldr	r0, [pc, #28]	@ (80075b0 <USBD_MIDI_DataOut+0x4c>)
 8007594:	f000 f80e 	bl	80075b4 <USBD_MIDI_OnPacketsReceived>

  USBD_LL_PrepareReceive(pdev, MIDI_EPOUT_ADDR, usb_rx_buffer, MIDI_EPOUT_SIZE);
 8007598:	2340      	movs	r3, #64	@ 0x40
 800759a:	4a05      	ldr	r2, [pc, #20]	@ (80075b0 <USBD_MIDI_DataOut+0x4c>)
 800759c:	2101      	movs	r1, #1
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fbed 	bl	8008d7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000288 	.word	0x20000288

080075b4 <USBD_MIDI_OnPacketsReceived>:
  *         on usb midi packets received from the host callback
  * @param  data: pointer to the data packet
  * @param  len: size of the data
  */
__weak extern void USBD_MIDI_OnPacketsReceived(uint8_t *data, uint8_t len)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  UNUSED(data);
  UNUSED(len);
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr
	...

080075cc <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	220a      	movs	r2, #10
 80075d8:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 80075da:	4b03      	ldr	r3, [pc, #12]	@ (80075e8 <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bc80      	pop	{r7}
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	200000ac 	.word	0x200000ac

080075ec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	4613      	mov	r3, r2
 80075f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007600:	2302      	movs	r3, #2
 8007602:	e01a      	b.n	800763a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	79fa      	ldrb	r2, [r7, #7]
 8007630:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f001 fa48 	bl	8008ac8 <USBD_LL_Init>

  return USBD_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d006      	beq.n	8007664 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
 8007662:	e001      	b.n	8007668 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007664:	2302      	movs	r3, #2
 8007666:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007668:	7bfb      	ldrb	r3, [r7, #15]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr

08007674 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 fa73 	bl	8008b68 <USBD_LL_Start>

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80076ac:	2302      	movs	r3, #2
 80076ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00c      	beq.n	80076d4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	4611      	mov	r1, r2
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	78fa      	ldrb	r2, [r7, #3]
 80076f4:	4611      	mov	r1, r2
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3

  return USBD_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fed7 	bl	80084ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007738:	f003 031f 	and.w	r3, r3, #31
 800773c:	2b02      	cmp	r3, #2
 800773e:	d016      	beq.n	800776e <USBD_LL_SetupStage+0x6a>
 8007740:	2b02      	cmp	r3, #2
 8007742:	d81c      	bhi.n	800777e <USBD_LL_SetupStage+0x7a>
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <USBD_LL_SetupStage+0x4a>
 8007748:	2b01      	cmp	r3, #1
 800774a:	d008      	beq.n	800775e <USBD_LL_SetupStage+0x5a>
 800774c:	e017      	b.n	800777e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f9ca 	bl	8007af0 <USBD_StdDevReq>
      break;
 800775c:	e01a      	b.n	8007794 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fa2c 	bl	8007bc4 <USBD_StdItfReq>
      break;
 800776c:	e012      	b.n	8007794 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa6c 	bl	8007c54 <USBD_StdEPReq>
      break;
 800777c:	e00a      	b.n	8007794 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007784:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fa4b 	bl	8008c28 <USBD_LL_StallEP>
      break;
 8007792:	bf00      	nop
  }

  return USBD_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	460b      	mov	r3, r1
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80077ac:	7afb      	ldrb	r3, [r7, #11]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d14b      	bne.n	800784a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80077b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d134      	bne.n	800782e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d919      	bls.n	8007804 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	1ad2      	subs	r2, r2, r3
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d203      	bcs.n	80077f2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	e002      	b.n	80077f8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 ff35 	bl	800866c <USBD_CtlContinueRx>
 8007802:	e038      	b.n	8007876 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00a      	beq.n	8007826 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007816:	2b03      	cmp	r3, #3
 8007818:	d105      	bne.n	8007826 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 ff32 	bl	8008690 <USBD_CtlSendStatus>
 800782c:	e023      	b.n	8007876 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007834:	2b05      	cmp	r3, #5
 8007836:	d11e      	bne.n	8007876 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007840:	2100      	movs	r1, #0
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f001 f9f0 	bl	8008c28 <USBD_LL_StallEP>
 8007848:	e015      	b.n	8007876 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00d      	beq.n	8007872 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800785c:	2b03      	cmp	r3, #3
 800785e:	d108      	bne.n	8007872 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	7afa      	ldrb	r2, [r7, #11]
 800786a:	4611      	mov	r1, r2
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	4798      	blx	r3
 8007870:	e001      	b.n	8007876 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007872:	2302      	movs	r3, #2
 8007874:	e000      	b.n	8007878 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	460b      	mov	r3, r1
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d17f      	bne.n	8007994 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3314      	adds	r3, #20
 8007898:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d15c      	bne.n	800795e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d915      	bls.n	80078dc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	1ad2      	subs	r2, r2, r3
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 febd 	bl	8008648 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078ce:	2300      	movs	r3, #0
 80078d0:	2200      	movs	r2, #0
 80078d2:	2100      	movs	r1, #0
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f001 fa52 	bl	8008d7e <USBD_LL_PrepareReceive>
 80078da:	e04e      	b.n	800797a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	6912      	ldr	r2, [r2, #16]
 80078e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80078e8:	fb01 f202 	mul.w	r2, r1, r2
 80078ec:	1a9b      	subs	r3, r3, r2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d11c      	bne.n	800792c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d316      	bcc.n	800792c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007908:	429a      	cmp	r2, r3
 800790a:	d20f      	bcs.n	800792c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800790c:	2200      	movs	r2, #0
 800790e:	2100      	movs	r1, #0
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 fe99 	bl	8008648 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800791e:	2300      	movs	r3, #0
 8007920:	2200      	movs	r2, #0
 8007922:	2100      	movs	r1, #0
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f001 fa2a 	bl	8008d7e <USBD_LL_PrepareReceive>
 800792a:	e026      	b.n	800797a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800793e:	2b03      	cmp	r3, #3
 8007940:	d105      	bne.n	800794e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800794e:	2180      	movs	r1, #128	@ 0x80
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f001 f969 	bl	8008c28 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fead 	bl	80086b6 <USBD_CtlReceiveStatus>
 800795c:	e00d      	b.n	800797a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007964:	2b04      	cmp	r3, #4
 8007966:	d004      	beq.n	8007972 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800796e:	2b00      	cmp	r3, #0
 8007970:	d103      	bne.n	800797a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007972:	2180      	movs	r1, #128	@ 0x80
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f001 f957 	bl	8008c28 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007980:	2b01      	cmp	r3, #1
 8007982:	d11d      	bne.n	80079c0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7ff fe81 	bl	800768c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007992:	e015      	b.n	80079c0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00d      	beq.n	80079bc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d108      	bne.n	80079bc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	7afa      	ldrb	r2, [r7, #11]
 80079b4:	4611      	mov	r1, r2
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	4798      	blx	r3
 80079ba:	e001      	b.n	80079c0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079bc:	2302      	movs	r3, #2
 80079be:	e000      	b.n	80079c2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079d2:	2340      	movs	r3, #64	@ 0x40
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 f8e0 	bl	8008b9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2240      	movs	r2, #64	@ 0x40
 80079ea:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079ee:	2340      	movs	r3, #64	@ 0x40
 80079f0:	2200      	movs	r2, #0
 80079f2:	2180      	movs	r1, #128	@ 0x80
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 f8d2 	bl	8008b9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2240      	movs	r2, #64	@ 0x40
 8007a04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6852      	ldr	r2, [r2, #4]
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	4798      	blx	r3
  }

  return USBD_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2204      	movs	r2, #4
 8007a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr

08007a92 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d105      	bne.n	8007ab0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr

08007abc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d10b      	bne.n	8007ae6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b06:	2b40      	cmp	r3, #64	@ 0x40
 8007b08:	d005      	beq.n	8007b16 <USBD_StdDevReq+0x26>
 8007b0a:	2b40      	cmp	r3, #64	@ 0x40
 8007b0c:	d84f      	bhi.n	8007bae <USBD_StdDevReq+0xbe>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d009      	beq.n	8007b26 <USBD_StdDevReq+0x36>
 8007b12:	2b20      	cmp	r3, #32
 8007b14:	d14b      	bne.n	8007bae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
      break;
 8007b24:	e048      	b.n	8007bb8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	2b09      	cmp	r3, #9
 8007b2c:	d839      	bhi.n	8007ba2 <USBD_StdDevReq+0xb2>
 8007b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b34 <USBD_StdDevReq+0x44>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b85 	.word	0x08007b85
 8007b38:	08007b99 	.word	0x08007b99
 8007b3c:	08007ba3 	.word	0x08007ba3
 8007b40:	08007b8f 	.word	0x08007b8f
 8007b44:	08007ba3 	.word	0x08007ba3
 8007b48:	08007b67 	.word	0x08007b67
 8007b4c:	08007b5d 	.word	0x08007b5d
 8007b50:	08007ba3 	.word	0x08007ba3
 8007b54:	08007b7b 	.word	0x08007b7b
 8007b58:	08007b71 	.word	0x08007b71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f9dc 	bl	8007f1c <USBD_GetDescriptor>
          break;
 8007b64:	e022      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fb3f 	bl	80081ec <USBD_SetAddress>
          break;
 8007b6e:	e01d      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fb7e 	bl	8008274 <USBD_SetConfig>
          break;
 8007b78:	e018      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fc07 	bl	8008390 <USBD_GetConfig>
          break;
 8007b82:	e013      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fc37 	bl	80083fa <USBD_GetStatus>
          break;
 8007b8c:	e00e      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fc65 	bl	8008460 <USBD_SetFeature>
          break;
 8007b96:	e009      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fc74 	bl	8008488 <USBD_ClrFeature>
          break;
 8007ba0:	e004      	b.n	8007bac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fcc9 	bl	800853c <USBD_CtlError>
          break;
 8007baa:	bf00      	nop
      }
      break;
 8007bac:	e004      	b.n	8007bb8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fcc3 	bl	800853c <USBD_CtlError>
      break;
 8007bb6:	bf00      	nop
  }

  return ret;
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop

08007bc4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bda:	2b40      	cmp	r3, #64	@ 0x40
 8007bdc:	d005      	beq.n	8007bea <USBD_StdItfReq+0x26>
 8007bde:	2b40      	cmp	r3, #64	@ 0x40
 8007be0:	d82e      	bhi.n	8007c40 <USBD_StdItfReq+0x7c>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <USBD_StdItfReq+0x26>
 8007be6:	2b20      	cmp	r3, #32
 8007be8:	d12a      	bne.n	8007c40 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d81d      	bhi.n	8007c32 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	889b      	ldrh	r3, [r3, #4]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d813      	bhi.n	8007c28 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	88db      	ldrh	r3, [r3, #6]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d110      	bne.n	8007c3c <USBD_StdItfReq+0x78>
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10d      	bne.n	8007c3c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fd35 	bl	8008690 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c26:	e009      	b.n	8007c3c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fc86 	bl	800853c <USBD_CtlError>
          break;
 8007c30:	e004      	b.n	8007c3c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fc81 	bl	800853c <USBD_CtlError>
          break;
 8007c3a:	e000      	b.n	8007c3e <USBD_StdItfReq+0x7a>
          break;
 8007c3c:	bf00      	nop
      }
      break;
 8007c3e:	e004      	b.n	8007c4a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fc7a 	bl	800853c <USBD_CtlError>
      break;
 8007c48:	bf00      	nop
  }

  return USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	889b      	ldrh	r3, [r3, #4]
 8007c66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c70:	2b40      	cmp	r3, #64	@ 0x40
 8007c72:	d007      	beq.n	8007c84 <USBD_StdEPReq+0x30>
 8007c74:	2b40      	cmp	r3, #64	@ 0x40
 8007c76:	f200 8146 	bhi.w	8007f06 <USBD_StdEPReq+0x2b2>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <USBD_StdEPReq+0x40>
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	f040 8141 	bne.w	8007f06 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
      break;
 8007c92:	e13d      	b.n	8007f10 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	d10a      	bne.n	8007cb6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	e12d      	b.n	8007f12 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	785b      	ldrb	r3, [r3, #1]
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d007      	beq.n	8007cce <USBD_StdEPReq+0x7a>
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	f300 811b 	bgt.w	8007efa <USBD_StdEPReq+0x2a6>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d072      	beq.n	8007dae <USBD_StdEPReq+0x15a>
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d03a      	beq.n	8007d42 <USBD_StdEPReq+0xee>
 8007ccc:	e115      	b.n	8007efa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d002      	beq.n	8007cde <USBD_StdEPReq+0x8a>
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d015      	beq.n	8007d08 <USBD_StdEPReq+0xb4>
 8007cdc:	e02b      	b.n	8007d36 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00c      	beq.n	8007cfe <USBD_StdEPReq+0xaa>
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	2b80      	cmp	r3, #128	@ 0x80
 8007ce8:	d009      	beq.n	8007cfe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 ff9a 	bl	8008c28 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007cf4:	2180      	movs	r1, #128	@ 0x80
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 ff96 	bl	8008c28 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cfc:	e020      	b.n	8007d40 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fc1b 	bl	800853c <USBD_CtlError>
              break;
 8007d06:	e01b      	b.n	8007d40 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	885b      	ldrh	r3, [r3, #2]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10e      	bne.n	8007d2e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00b      	beq.n	8007d2e <USBD_StdEPReq+0xda>
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b80      	cmp	r3, #128	@ 0x80
 8007d1a:	d008      	beq.n	8007d2e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	88db      	ldrh	r3, [r3, #6]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 ff7d 	bl	8008c28 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fcae 	bl	8008690 <USBD_CtlSendStatus>

              break;
 8007d34:	e004      	b.n	8007d40 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fbff 	bl	800853c <USBD_CtlError>
              break;
 8007d3e:	bf00      	nop
          }
          break;
 8007d40:	e0e0      	b.n	8007f04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d002      	beq.n	8007d52 <USBD_StdEPReq+0xfe>
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d015      	beq.n	8007d7c <USBD_StdEPReq+0x128>
 8007d50:	e026      	b.n	8007da0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00c      	beq.n	8007d72 <USBD_StdEPReq+0x11e>
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2b80      	cmp	r3, #128	@ 0x80
 8007d5c:	d009      	beq.n	8007d72 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 ff60 	bl	8008c28 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d68:	2180      	movs	r1, #128	@ 0x80
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 ff5c 	bl	8008c28 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d70:	e01c      	b.n	8007dac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fbe1 	bl	800853c <USBD_CtlError>
              break;
 8007d7a:	e017      	b.n	8007dac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	885b      	ldrh	r3, [r3, #2]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d112      	bne.n	8007daa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d004      	beq.n	8007d98 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 ff67 	bl	8008c66 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fc79 	bl	8008690 <USBD_CtlSendStatus>
              }
              break;
 8007d9e:	e004      	b.n	8007daa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fbca 	bl	800853c <USBD_CtlError>
              break;
 8007da8:	e000      	b.n	8007dac <USBD_StdEPReq+0x158>
              break;
 8007daa:	bf00      	nop
          }
          break;
 8007dac:	e0aa      	b.n	8007f04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d002      	beq.n	8007dbe <USBD_StdEPReq+0x16a>
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d032      	beq.n	8007e22 <USBD_StdEPReq+0x1ce>
 8007dbc:	e097      	b.n	8007eee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d007      	beq.n	8007dd4 <USBD_StdEPReq+0x180>
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	2b80      	cmp	r3, #128	@ 0x80
 8007dc8:	d004      	beq.n	8007dd4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fbb5 	bl	800853c <USBD_CtlError>
                break;
 8007dd2:	e091      	b.n	8007ef8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	da0b      	bge.n	8007df4 <USBD_StdEPReq+0x1a0>
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	3310      	adds	r3, #16
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	4413      	add	r3, r2
 8007df0:	3304      	adds	r3, #4
 8007df2:	e00b      	b.n	8007e0c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	4413      	add	r3, r2
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2202      	movs	r2, #2
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fbf8 	bl	8008610 <USBD_CtlSendData>
              break;
 8007e20:	e06a      	b.n	8007ef8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da11      	bge.n	8007e4e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	f003 020f 	and.w	r2, r3, #15
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	4613      	mov	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	3318      	adds	r3, #24
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d117      	bne.n	8007e74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fb78 	bl	800853c <USBD_CtlError>
                  break;
 8007e4c:	e054      	b.n	8007ef8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	f003 020f 	and.w	r2, r3, #15
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d104      	bne.n	8007e74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fb65 	bl	800853c <USBD_CtlError>
                  break;
 8007e72:	e041      	b.n	8007ef8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	da0b      	bge.n	8007e94 <USBD_StdEPReq+0x240>
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	3310      	adds	r3, #16
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	4413      	add	r3, r2
 8007e90:	3304      	adds	r3, #4
 8007e92:	e00b      	b.n	8007eac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	3304      	adds	r3, #4
 8007eac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <USBD_StdEPReq+0x266>
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b80      	cmp	r3, #128	@ 0x80
 8007eb8:	d103      	bne.n	8007ec2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	e00e      	b.n	8007ee0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 feec 	bl	8008ca4 <USBD_LL_IsStallEP>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	e002      	b.n	8007ee0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fb92 	bl	8008610 <USBD_CtlSendData>
              break;
 8007eec:	e004      	b.n	8007ef8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fb23 	bl	800853c <USBD_CtlError>
              break;
 8007ef6:	bf00      	nop
          }
          break;
 8007ef8:	e004      	b.n	8007f04 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fb1d 	bl	800853c <USBD_CtlError>
          break;
 8007f02:	bf00      	nop
      }
      break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fb17 	bl	800853c <USBD_CtlError>
      break;
 8007f0e:	bf00      	nop
  }

  return ret;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	885b      	ldrh	r3, [r3, #2]
 8007f36:	0a1b      	lsrs	r3, r3, #8
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	2b06      	cmp	r3, #6
 8007f3e:	f200 8128 	bhi.w	8008192 <USBD_GetDescriptor+0x276>
 8007f42:	a201      	add	r2, pc, #4	@ (adr r2, 8007f48 <USBD_GetDescriptor+0x2c>)
 8007f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f48:	08007f65 	.word	0x08007f65
 8007f4c:	08007f7d 	.word	0x08007f7d
 8007f50:	08007fbd 	.word	0x08007fbd
 8007f54:	08008193 	.word	0x08008193
 8007f58:	08008193 	.word	0x08008193
 8007f5c:	08008133 	.word	0x08008133
 8007f60:	0800815f 	.word	0x0800815f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	7c12      	ldrb	r2, [r2, #16]
 8007f70:	f107 0108 	add.w	r1, r7, #8
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	60f8      	str	r0, [r7, #12]
      break;
 8007f7a:	e112      	b.n	80081a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	7c1b      	ldrb	r3, [r3, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10d      	bne.n	8007fa0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8c:	f107 0208 	add.w	r2, r7, #8
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
 8007f94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f9e:	e100      	b.n	80081a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa8:	f107 0208 	add.w	r2, r7, #8
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	701a      	strb	r2, [r3, #0]
      break;
 8007fba:	e0f2      	b.n	80081a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	885b      	ldrh	r3, [r3, #2]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b05      	cmp	r3, #5
 8007fc4:	f200 80ac 	bhi.w	8008120 <USBD_GetDescriptor+0x204>
 8007fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd0 <USBD_GetDescriptor+0xb4>)
 8007fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fce:	bf00      	nop
 8007fd0:	08007fe9 	.word	0x08007fe9
 8007fd4:	0800801d 	.word	0x0800801d
 8007fd8:	08008051 	.word	0x08008051
 8007fdc:	08008085 	.word	0x08008085
 8007fe0:	080080b9 	.word	0x080080b9
 8007fe4:	080080ed 	.word	0x080080ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00b      	beq.n	800800c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	7c12      	ldrb	r2, [r2, #16]
 8008000:	f107 0108 	add.w	r1, r7, #8
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
 8008008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800800a:	e091      	b.n	8008130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fa94 	bl	800853c <USBD_CtlError>
            err++;
 8008014:	7afb      	ldrb	r3, [r7, #11]
 8008016:	3301      	adds	r3, #1
 8008018:	72fb      	strb	r3, [r7, #11]
          break;
 800801a:	e089      	b.n	8008130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	7c12      	ldrb	r2, [r2, #16]
 8008034:	f107 0108 	add.w	r1, r7, #8
 8008038:	4610      	mov	r0, r2
 800803a:	4798      	blx	r3
 800803c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800803e:	e077      	b.n	8008130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fa7a 	bl	800853c <USBD_CtlError>
            err++;
 8008048:	7afb      	ldrb	r3, [r7, #11]
 800804a:	3301      	adds	r3, #1
 800804c:	72fb      	strb	r3, [r7, #11]
          break;
 800804e:	e06f      	b.n	8008130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	7c12      	ldrb	r2, [r2, #16]
 8008068:	f107 0108 	add.w	r1, r7, #8
 800806c:	4610      	mov	r0, r2
 800806e:	4798      	blx	r3
 8008070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008072:	e05d      	b.n	8008130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa60 	bl	800853c <USBD_CtlError>
            err++;
 800807c:	7afb      	ldrb	r3, [r7, #11]
 800807e:	3301      	adds	r3, #1
 8008080:	72fb      	strb	r3, [r7, #11]
          break;
 8008082:	e055      	b.n	8008130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00b      	beq.n	80080a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	7c12      	ldrb	r2, [r2, #16]
 800809c:	f107 0108 	add.w	r1, r7, #8
 80080a0:	4610      	mov	r0, r2
 80080a2:	4798      	blx	r3
 80080a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080a6:	e043      	b.n	8008130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa46 	bl	800853c <USBD_CtlError>
            err++;
 80080b0:	7afb      	ldrb	r3, [r7, #11]
 80080b2:	3301      	adds	r3, #1
 80080b4:	72fb      	strb	r3, [r7, #11]
          break;
 80080b6:	e03b      	b.n	8008130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00b      	beq.n	80080dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	7c12      	ldrb	r2, [r2, #16]
 80080d0:	f107 0108 	add.w	r1, r7, #8
 80080d4:	4610      	mov	r0, r2
 80080d6:	4798      	blx	r3
 80080d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080da:	e029      	b.n	8008130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fa2c 	bl	800853c <USBD_CtlError>
            err++;
 80080e4:	7afb      	ldrb	r3, [r7, #11]
 80080e6:	3301      	adds	r3, #1
 80080e8:	72fb      	strb	r3, [r7, #11]
          break;
 80080ea:	e021      	b.n	8008130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	7c12      	ldrb	r2, [r2, #16]
 8008104:	f107 0108 	add.w	r1, r7, #8
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
 800810c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800810e:	e00f      	b.n	8008130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa12 	bl	800853c <USBD_CtlError>
            err++;
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	3301      	adds	r3, #1
 800811c:	72fb      	strb	r3, [r7, #11]
          break;
 800811e:	e007      	b.n	8008130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa0a 	bl	800853c <USBD_CtlError>
          err++;
 8008128:	7afb      	ldrb	r3, [r7, #11]
 800812a:	3301      	adds	r3, #1
 800812c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800812e:	e038      	b.n	80081a2 <USBD_GetDescriptor+0x286>
 8008130:	e037      	b.n	80081a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	7c1b      	ldrb	r3, [r3, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d109      	bne.n	800814e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008142:	f107 0208 	add.w	r2, r7, #8
 8008146:	4610      	mov	r0, r2
 8008148:	4798      	blx	r3
 800814a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800814c:	e029      	b.n	80081a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f9f3 	bl	800853c <USBD_CtlError>
        err++;
 8008156:	7afb      	ldrb	r3, [r7, #11]
 8008158:	3301      	adds	r3, #1
 800815a:	72fb      	strb	r3, [r7, #11]
      break;
 800815c:	e021      	b.n	80081a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	7c1b      	ldrb	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10d      	bne.n	8008182 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816e:	f107 0208 	add.w	r2, r7, #8
 8008172:	4610      	mov	r0, r2
 8008174:	4798      	blx	r3
 8008176:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3301      	adds	r3, #1
 800817c:	2207      	movs	r2, #7
 800817e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008180:	e00f      	b.n	80081a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f9d9 	bl	800853c <USBD_CtlError>
        err++;
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	3301      	adds	r3, #1
 800818e:	72fb      	strb	r3, [r7, #11]
      break;
 8008190:	e007      	b.n	80081a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f9d1 	bl	800853c <USBD_CtlError>
      err++;
 800819a:	7afb      	ldrb	r3, [r7, #11]
 800819c:	3301      	adds	r3, #1
 800819e:	72fb      	strb	r3, [r7, #11]
      break;
 80081a0:	bf00      	nop
  }

  if (err != 0U)
 80081a2:	7afb      	ldrb	r3, [r7, #11]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d11c      	bne.n	80081e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80081a8:	893b      	ldrh	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d011      	beq.n	80081d2 <USBD_GetDescriptor+0x2b6>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	88db      	ldrh	r3, [r3, #6]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00d      	beq.n	80081d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	88da      	ldrh	r2, [r3, #6]
 80081ba:	893b      	ldrh	r3, [r7, #8]
 80081bc:	4293      	cmp	r3, r2
 80081be:	bf28      	it	cs
 80081c0:	4613      	movcs	r3, r2
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081c6:	893b      	ldrh	r3, [r7, #8]
 80081c8:	461a      	mov	r2, r3
 80081ca:	68f9      	ldr	r1, [r7, #12]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa1f 	bl	8008610 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	88db      	ldrh	r3, [r3, #6]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d104      	bne.n	80081e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fa58 	bl	8008690 <USBD_CtlSendStatus>
 80081e0:	e000      	b.n	80081e4 <USBD_GetDescriptor+0x2c8>
    return;
 80081e2:	bf00      	nop
    }
  }
}
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop

080081ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	889b      	ldrh	r3, [r3, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d130      	bne.n	8008260 <USBD_SetAddress+0x74>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	88db      	ldrh	r3, [r3, #6]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d12c      	bne.n	8008260 <USBD_SetAddress+0x74>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	885b      	ldrh	r3, [r3, #2]
 800820a:	2b7f      	cmp	r3, #127	@ 0x7f
 800820c:	d828      	bhi.n	8008260 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	885b      	ldrh	r3, [r3, #2]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008218:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008220:	2b03      	cmp	r3, #3
 8008222:	d104      	bne.n	800822e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f988 	bl	800853c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800822c:	e01d      	b.n	800826a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	7bfa      	ldrb	r2, [r7, #15]
 8008232:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fd5d 	bl	8008cfa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fa25 	bl	8008690 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008254:	e009      	b.n	800826a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825e:	e004      	b.n	800826a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f96a 	bl	800853c <USBD_CtlError>
  }
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	885b      	ldrh	r3, [r3, #2]
 8008282:	b2da      	uxtb	r2, r3
 8008284:	4b41      	ldr	r3, [pc, #260]	@ (800838c <USBD_SetConfig+0x118>)
 8008286:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008288:	4b40      	ldr	r3, [pc, #256]	@ (800838c <USBD_SetConfig+0x118>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d904      	bls.n	800829a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f952 	bl	800853c <USBD_CtlError>
 8008298:	e075      	b.n	8008386 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d002      	beq.n	80082aa <USBD_SetConfig+0x36>
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d023      	beq.n	80082f0 <USBD_SetConfig+0x7c>
 80082a8:	e062      	b.n	8008370 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80082aa:	4b38      	ldr	r3, [pc, #224]	@ (800838c <USBD_SetConfig+0x118>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d01a      	beq.n	80082e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80082b2:	4b36      	ldr	r3, [pc, #216]	@ (800838c <USBD_SetConfig+0x118>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2203      	movs	r2, #3
 80082c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082c4:	4b31      	ldr	r3, [pc, #196]	@ (800838c <USBD_SetConfig+0x118>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff f9e8 	bl	80076a0 <USBD_SetClassConfig>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d104      	bne.n	80082e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f92f 	bl	800853c <USBD_CtlError>
            return;
 80082de:	e052      	b.n	8008386 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f9d5 	bl	8008690 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082e6:	e04e      	b.n	8008386 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f9d1 	bl	8008690 <USBD_CtlSendStatus>
        break;
 80082ee:	e04a      	b.n	8008386 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80082f0:	4b26      	ldr	r3, [pc, #152]	@ (800838c <USBD_SetConfig+0x118>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d112      	bne.n	800831e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008300:	4b22      	ldr	r3, [pc, #136]	@ (800838c <USBD_SetConfig+0x118>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800830a:	4b20      	ldr	r3, [pc, #128]	@ (800838c <USBD_SetConfig+0x118>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff f9e4 	bl	80076de <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f9ba 	bl	8008690 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800831c:	e033      	b.n	8008386 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800831e:	4b1b      	ldr	r3, [pc, #108]	@ (800838c <USBD_SetConfig+0x118>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	429a      	cmp	r2, r3
 800832a:	d01d      	beq.n	8008368 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff f9d2 	bl	80076de <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800833a:	4b14      	ldr	r3, [pc, #80]	@ (800838c <USBD_SetConfig+0x118>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008344:	4b11      	ldr	r3, [pc, #68]	@ (800838c <USBD_SetConfig+0x118>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff f9a8 	bl	80076a0 <USBD_SetClassConfig>
 8008350:	4603      	mov	r3, r0
 8008352:	2b02      	cmp	r3, #2
 8008354:	d104      	bne.n	8008360 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f8ef 	bl	800853c <USBD_CtlError>
            return;
 800835e:	e012      	b.n	8008386 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f995 	bl	8008690 <USBD_CtlSendStatus>
        break;
 8008366:	e00e      	b.n	8008386 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f991 	bl	8008690 <USBD_CtlSendStatus>
        break;
 800836e:	e00a      	b.n	8008386 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f8e2 	bl	800853c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008378:	4b04      	ldr	r3, [pc, #16]	@ (800838c <USBD_SetConfig+0x118>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff f9ad 	bl	80076de <USBD_ClrClassConfig>
        break;
 8008384:	bf00      	nop
    }
  }
}
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	200002c8 	.word	0x200002c8

08008390 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	88db      	ldrh	r3, [r3, #6]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d004      	beq.n	80083ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f8c9 	bl	800853c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083aa:	e022      	b.n	80083f2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	dc02      	bgt.n	80083bc <USBD_GetConfig+0x2c>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	dc03      	bgt.n	80083c2 <USBD_GetConfig+0x32>
 80083ba:	e015      	b.n	80083e8 <USBD_GetConfig+0x58>
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d00b      	beq.n	80083d8 <USBD_GetConfig+0x48>
 80083c0:	e012      	b.n	80083e8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3308      	adds	r3, #8
 80083cc:	2201      	movs	r2, #1
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f91d 	bl	8008610 <USBD_CtlSendData>
        break;
 80083d6:	e00c      	b.n	80083f2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3304      	adds	r3, #4
 80083dc:	2201      	movs	r2, #1
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f915 	bl	8008610 <USBD_CtlSendData>
        break;
 80083e6:	e004      	b.n	80083f2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f8a6 	bl	800853c <USBD_CtlError>
        break;
 80083f0:	bf00      	nop
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800840a:	3b01      	subs	r3, #1
 800840c:	2b02      	cmp	r3, #2
 800840e:	d81e      	bhi.n	800844e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	88db      	ldrh	r3, [r3, #6]
 8008414:	2b02      	cmp	r3, #2
 8008416:	d004      	beq.n	8008422 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f88e 	bl	800853c <USBD_CtlError>
        break;
 8008420:	e01a      	b.n	8008458 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800842e:	2b00      	cmp	r3, #0
 8008430:	d005      	beq.n	800843e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f043 0202 	orr.w	r2, r3, #2
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	330c      	adds	r3, #12
 8008442:	2202      	movs	r2, #2
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f8e2 	bl	8008610 <USBD_CtlSendData>
      break;
 800844c:	e004      	b.n	8008458 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f873 	bl	800853c <USBD_CtlError>
      break;
 8008456:	bf00      	nop
  }
}
 8008458:	bf00      	nop
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	885b      	ldrh	r3, [r3, #2]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d106      	bne.n	8008480 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f908 	bl	8008690 <USBD_CtlSendStatus>
  }
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008498:	3b01      	subs	r3, #1
 800849a:	2b02      	cmp	r3, #2
 800849c:	d80b      	bhi.n	80084b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	885b      	ldrh	r3, [r3, #2]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d10c      	bne.n	80084c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f8ee 	bl	8008690 <USBD_CtlSendStatus>
      }
      break;
 80084b4:	e004      	b.n	80084c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f83f 	bl	800853c <USBD_CtlError>
      break;
 80084be:	e000      	b.n	80084c2 <USBD_ClrFeature+0x3a>
      break;
 80084c0:	bf00      	nop
  }
}
 80084c2:	bf00      	nop
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781a      	ldrb	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	785a      	ldrb	r2, [r3, #1]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	3302      	adds	r3, #2
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	461a      	mov	r2, r3
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	3303      	adds	r3, #3
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	4413      	add	r3, r2
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	3304      	adds	r3, #4
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	3305      	adds	r3, #5
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	b29b      	uxth	r3, r3
 8008510:	4413      	add	r3, r2
 8008512:	b29a      	uxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	3306      	adds	r3, #6
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	3307      	adds	r3, #7
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	021b      	lsls	r3, r3, #8
 8008528:	b29b      	uxth	r3, r3
 800852a:	4413      	add	r3, r2
 800852c:	b29a      	uxth	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	80da      	strh	r2, [r3, #6]

}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr

0800853c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008546:	2180      	movs	r1, #128	@ 0x80
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fb6d 	bl	8008c28 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800854e:	2100      	movs	r1, #0
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fb69 	bl	8008c28 <USBD_LL_StallEP>
}
 8008556:	bf00      	nop
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b086      	sub	sp, #24
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d032      	beq.n	80085da <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f834 	bl	80085e2 <USBD_GetLen>
 800857a:	4603      	mov	r3, r0
 800857c:	3301      	adds	r3, #1
 800857e:	b29b      	uxth	r3, r3
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	b29a      	uxth	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	75fa      	strb	r2, [r7, #23]
 800858e:	461a      	mov	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	4413      	add	r3, r2
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	7812      	ldrb	r2, [r2, #0]
 8008598:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	75fa      	strb	r2, [r7, #23]
 80085a0:	461a      	mov	r2, r3
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4413      	add	r3, r2
 80085a6:	2203      	movs	r2, #3
 80085a8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80085aa:	e012      	b.n	80085d2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	60fa      	str	r2, [r7, #12]
 80085b2:	7dfa      	ldrb	r2, [r7, #23]
 80085b4:	1c51      	adds	r1, r2, #1
 80085b6:	75f9      	strb	r1, [r7, #23]
 80085b8:	4611      	mov	r1, r2
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	440a      	add	r2, r1
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	75fa      	strb	r2, [r7, #23]
 80085c8:	461a      	mov	r2, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4413      	add	r3, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e8      	bne.n	80085ac <USBD_GetString+0x4e>
    }
  }
}
 80085da:	bf00      	nop
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80085ee:	e005      	b.n	80085fc <USBD_GetLen+0x1a>
  {
    len++;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	3301      	adds	r3, #1
 80085f4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3301      	adds	r3, #1
 80085fa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1f5      	bne.n	80085f0 <USBD_GetLen+0xe>
  }

  return len;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr

08008610 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	4613      	mov	r3, r2
 800861c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2202      	movs	r2, #2
 8008622:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008626:	88fa      	ldrh	r2, [r7, #6]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800862c:	88fa      	ldrh	r2, [r7, #6]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008632:	88fb      	ldrh	r3, [r7, #6]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	2100      	movs	r1, #0
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fb7d 	bl	8008d38 <USBD_LL_Transmit>

  return USBD_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	2100      	movs	r1, #0
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 fb6b 	bl	8008d38 <USBD_LL_Transmit>

  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800867a:	88fb      	ldrh	r3, [r7, #6]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	2100      	movs	r1, #0
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 fb7c 	bl	8008d7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2204      	movs	r2, #4
 800869c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086a0:	2300      	movs	r3, #0
 80086a2:	2200      	movs	r2, #0
 80086a4:	2100      	movs	r1, #0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fb46 	bl	8008d38 <USBD_LL_Transmit>

  return USBD_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2205      	movs	r2, #5
 80086c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086c6:	2300      	movs	r3, #0
 80086c8:	2200      	movs	r2, #0
 80086ca:	2100      	movs	r1, #0
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fb56 	bl	8008d7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086e0:	2200      	movs	r2, #0
 80086e2:	490e      	ldr	r1, [pc, #56]	@ (800871c <MX_USB_DEVICE_Init+0x40>)
 80086e4:	480e      	ldr	r0, [pc, #56]	@ (8008720 <MX_USB_DEVICE_Init+0x44>)
 80086e6:	f7fe ff81 	bl	80075ec <USBD_Init>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086f0:	f7f7 ff92 	bl	8000618 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 80086f4:	490b      	ldr	r1, [pc, #44]	@ (8008724 <MX_USB_DEVICE_Init+0x48>)
 80086f6:	480a      	ldr	r0, [pc, #40]	@ (8008720 <MX_USB_DEVICE_Init+0x44>)
 80086f8:	f7fe ffa3 	bl	8007642 <USBD_RegisterClass>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008702:	f7f7 ff89 	bl	8000618 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008706:	4806      	ldr	r0, [pc, #24]	@ (8008720 <MX_USB_DEVICE_Init+0x44>)
 8008708:	f7fe ffb4 	bl	8007674 <USBD_Start>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008712:	f7f7 ff81 	bl	8000618 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008716:	bf00      	nop
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	200000b8 	.word	0x200000b8
 8008720:	200002cc 	.word	0x200002cc
 8008724:	20000020 	.word	0x20000020

08008728 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2212      	movs	r2, #18
 8008738:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800873a:	4b03      	ldr	r3, [pc, #12]	@ (8008748 <USBD_FS_DeviceDescriptor+0x20>)
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	200000d4 	.word	0x200000d4

0800874c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	6039      	str	r1, [r7, #0]
 8008756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2204      	movs	r2, #4
 800875c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800875e:	4b03      	ldr	r3, [pc, #12]	@ (800876c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	bc80      	pop	{r7}
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	200000e8 	.word	0x200000e8

08008770 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d105      	bne.n	800878e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	4907      	ldr	r1, [pc, #28]	@ (80087a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008786:	4808      	ldr	r0, [pc, #32]	@ (80087a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008788:	f7ff fee9 	bl	800855e <USBD_GetString>
 800878c:	e004      	b.n	8008798 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	4904      	ldr	r1, [pc, #16]	@ (80087a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008792:	4805      	ldr	r0, [pc, #20]	@ (80087a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008794:	f7ff fee3 	bl	800855e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008798:	4b02      	ldr	r3, [pc, #8]	@ (80087a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000590 	.word	0x20000590
 80087a8:	08009108 	.word	0x08009108

080087ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	6039      	str	r1, [r7, #0]
 80087b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	4904      	ldr	r1, [pc, #16]	@ (80087cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087bc:	4804      	ldr	r0, [pc, #16]	@ (80087d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087be:	f7ff fece 	bl	800855e <USBD_GetString>
  return USBD_StrDesc;
 80087c2:	4b02      	ldr	r3, [pc, #8]	@ (80087cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000590 	.word	0x20000590
 80087d0:	08009120 	.word	0x08009120

080087d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	6039      	str	r1, [r7, #0]
 80087de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	221a      	movs	r2, #26
 80087e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087e6:	f000 f843 	bl	8008870 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ea:	4b02      	ldr	r3, [pc, #8]	@ (80087f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200000ec 	.word	0x200000ec

080087f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	6039      	str	r1, [r7, #0]
 8008802:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d105      	bne.n	8008816 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4907      	ldr	r1, [pc, #28]	@ (800882c <USBD_FS_ConfigStrDescriptor+0x34>)
 800880e:	4808      	ldr	r0, [pc, #32]	@ (8008830 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008810:	f7ff fea5 	bl	800855e <USBD_GetString>
 8008814:	e004      	b.n	8008820 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	4904      	ldr	r1, [pc, #16]	@ (800882c <USBD_FS_ConfigStrDescriptor+0x34>)
 800881a:	4805      	ldr	r0, [pc, #20]	@ (8008830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800881c:	f7ff fe9f 	bl	800855e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008820:	4b02      	ldr	r3, [pc, #8]	@ (800882c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000590 	.word	0x20000590
 8008830:	08009130 	.word	0x08009130

08008834 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	6039      	str	r1, [r7, #0]
 800883e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008840:	79fb      	ldrb	r3, [r7, #7]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d105      	bne.n	8008852 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4907      	ldr	r1, [pc, #28]	@ (8008868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800884a:	4808      	ldr	r0, [pc, #32]	@ (800886c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800884c:	f7ff fe87 	bl	800855e <USBD_GetString>
 8008850:	e004      	b.n	800885c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	4904      	ldr	r1, [pc, #16]	@ (8008868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008856:	4805      	ldr	r0, [pc, #20]	@ (800886c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008858:	f7ff fe81 	bl	800855e <USBD_GetString>
  }
  return USBD_StrDesc;
 800885c:	4b02      	ldr	r3, [pc, #8]	@ (8008868 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20000590 	.word	0x20000590
 800886c:	0800913c 	.word	0x0800913c

08008870 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008876:	4b0f      	ldr	r3, [pc, #60]	@ (80088b4 <Get_SerialNum+0x44>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800887c:	4b0e      	ldr	r3, [pc, #56]	@ (80088b8 <Get_SerialNum+0x48>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008882:	4b0e      	ldr	r3, [pc, #56]	@ (80088bc <Get_SerialNum+0x4c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4413      	add	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008896:	2208      	movs	r2, #8
 8008898:	4909      	ldr	r1, [pc, #36]	@ (80088c0 <Get_SerialNum+0x50>)
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 f814 	bl	80088c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088a0:	2204      	movs	r2, #4
 80088a2:	4908      	ldr	r1, [pc, #32]	@ (80088c4 <Get_SerialNum+0x54>)
 80088a4:	68b8      	ldr	r0, [r7, #8]
 80088a6:	f000 f80f 	bl	80088c8 <IntToUnicode>
  }
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	1ffff7e8 	.word	0x1ffff7e8
 80088b8:	1ffff7ec 	.word	0x1ffff7ec
 80088bc:	1ffff7f0 	.word	0x1ffff7f0
 80088c0:	200000ee 	.word	0x200000ee
 80088c4:	200000fe 	.word	0x200000fe

080088c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	4613      	mov	r3, r2
 80088d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088da:	2300      	movs	r3, #0
 80088dc:	75fb      	strb	r3, [r7, #23]
 80088de:	e027      	b.n	8008930 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	0f1b      	lsrs	r3, r3, #28
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	d80b      	bhi.n	8008900 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	0f1b      	lsrs	r3, r3, #28
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4619      	mov	r1, r3
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	440b      	add	r3, r1
 80088f8:	3230      	adds	r2, #48	@ 0x30
 80088fa:	b2d2      	uxtb	r2, r2
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	e00a      	b.n	8008916 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	0f1b      	lsrs	r3, r3, #28
 8008904:	b2da      	uxtb	r2, r3
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	4619      	mov	r1, r3
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	440b      	add	r3, r1
 8008910:	3237      	adds	r2, #55	@ 0x37
 8008912:	b2d2      	uxtb	r2, r2
 8008914:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	3301      	adds	r3, #1
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	4413      	add	r3, r2
 8008926:	2200      	movs	r2, #0
 8008928:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	3301      	adds	r3, #1
 800892e:	75fb      	strb	r3, [r7, #23]
 8008930:	7dfa      	ldrb	r2, [r7, #23]
 8008932:	79fb      	ldrb	r3, [r7, #7]
 8008934:	429a      	cmp	r2, r3
 8008936:	d3d3      	bcc.n	80088e0 <IntToUnicode+0x18>
  }
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a0d      	ldr	r2, [pc, #52]	@ (8008988 <HAL_PCD_MspInit+0x44>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d113      	bne.n	800897e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008956:	4b0d      	ldr	r3, [pc, #52]	@ (800898c <HAL_PCD_MspInit+0x48>)
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	4a0c      	ldr	r2, [pc, #48]	@ (800898c <HAL_PCD_MspInit+0x48>)
 800895c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008960:	61d3      	str	r3, [r2, #28]
 8008962:	4b0a      	ldr	r3, [pc, #40]	@ (800898c <HAL_PCD_MspInit+0x48>)
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800896e:	2200      	movs	r2, #0
 8008970:	2100      	movs	r1, #0
 8008972:	2014      	movs	r0, #20
 8008974:	f7f9 f891 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008978:	2014      	movs	r0, #20
 800897a:	f7f9 f8aa 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	40005c00 	.word	0x40005c00
 800898c:	40021000 	.word	0x40021000

08008990 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	f7fe feac 	bl	8007704 <USBD_LL_SetupStage>
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	440b      	add	r3, r1
 80089d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	4619      	mov	r1, r3
 80089de:	f7fe fede 	bl	800779e <USBD_LL_DataOutStage>
}
 80089e2:	bf00      	nop
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80089fc:	78fa      	ldrb	r2, [r7, #3]
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	440b      	add	r3, r1
 8008a0a:	3324      	adds	r3, #36	@ 0x24
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	78fb      	ldrb	r3, [r7, #3]
 8008a10:	4619      	mov	r1, r3
 8008a12:	f7fe ff35 	bl	8007880 <USBD_LL_DataInStage>
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7ff f845 	bl	8007abc <USBD_LL_SOF>
}
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a42:	2301      	movs	r3, #1
 8008a44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	799b      	ldrb	r3, [r3, #6]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d001      	beq.n	8008a52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a4e:	f7f7 fde3 	bl	8000618 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a58:	7bfa      	ldrb	r2, [r7, #15]
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fe fff5 	bl	8007a4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe ffae 	bl	80079ca <USBD_LL_Reset>
}
 8008a6e:	bf00      	nop
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe ffef 	bl	8007a6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	7a9b      	ldrb	r3, [r3, #10]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d005      	beq.n	8008aa0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a94:	4b04      	ldr	r3, [pc, #16]	@ (8008aa8 <HAL_PCD_SuspendCallback+0x30>)
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	4a03      	ldr	r2, [pc, #12]	@ (8008aa8 <HAL_PCD_SuspendCallback+0x30>)
 8008a9a:	f043 0306 	orr.w	r3, r3, #6
 8008a9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	e000ed00 	.word	0xe000ed00

08008aac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe ffe9 	bl	8007a92 <USBD_LL_Resume>
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008ad0:	4a23      	ldr	r2, [pc, #140]	@ (8008b60 <USBD_LL_Init+0x98>)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a21      	ldr	r2, [pc, #132]	@ (8008b60 <USBD_LL_Init+0x98>)
 8008adc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8008b60 <USBD_LL_Init+0x98>)
 8008ae2:	4a20      	ldr	r2, [pc, #128]	@ (8008b64 <USBD_LL_Init+0x9c>)
 8008ae4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b60 <USBD_LL_Init+0x98>)
 8008ae8:	2208      	movs	r2, #8
 8008aea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008aec:	4b1c      	ldr	r3, [pc, #112]	@ (8008b60 <USBD_LL_Init+0x98>)
 8008aee:	2202      	movs	r2, #2
 8008af0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008af2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b60 <USBD_LL_Init+0x98>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008af8:	4b19      	ldr	r3, [pc, #100]	@ (8008b60 <USBD_LL_Init+0x98>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008afe:	4b18      	ldr	r3, [pc, #96]	@ (8008b60 <USBD_LL_Init+0x98>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b04:	4816      	ldr	r0, [pc, #88]	@ (8008b60 <USBD_LL_Init+0x98>)
 8008b06:	f7f9 f99a 	bl	8001e3e <HAL_PCD_Init>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008b10:	f7f7 fd82 	bl	8000618 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b1a:	2318      	movs	r3, #24
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2100      	movs	r1, #0
 8008b20:	f7fa feab 	bl	800387a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b2a:	2358      	movs	r3, #88	@ 0x58
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2180      	movs	r1, #128	@ 0x80
 8008b30:	f7fa fea3 	bl	800387a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xC0);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b3a:	23c0      	movs	r3, #192	@ 0xc0
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2101      	movs	r1, #1
 8008b40:	f7fa fe9b 	bl	800387a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2181      	movs	r1, #129	@ 0x81
 8008b52:	f7fa fe92 	bl	800387a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20000790 	.word	0x20000790
 8008b64:	40005c00 	.word	0x40005c00

08008b68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7f9 fa53 	bl	800202a <HAL_PCD_Start>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f93a 	bl	8008e04 <USBD_Get_USB_Status>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	4611      	mov	r1, r2
 8008baa:	461a      	mov	r2, r3
 8008bac:	4603      	mov	r3, r0
 8008bae:	70fb      	strb	r3, [r7, #3]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70bb      	strb	r3, [r7, #2]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bc6:	78bb      	ldrb	r3, [r7, #2]
 8008bc8:	883a      	ldrh	r2, [r7, #0]
 8008bca:	78f9      	ldrb	r1, [r7, #3]
 8008bcc:	f7f9 fba7 	bl	800231e <HAL_PCD_EP_Open>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 f914 	bl	8008e04 <USBD_Get_USB_Status>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c04:	78fa      	ldrb	r2, [r7, #3]
 8008c06:	4611      	mov	r1, r2
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7f9 fbe5 	bl	80023d8 <HAL_PCD_EP_Close>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 f8f5 	bl	8008e04 <USBD_Get_USB_Status>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	4611      	mov	r1, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7f9 fc8d 	bl	8002566 <HAL_PCD_EP_SetStall>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 f8d6 	bl	8008e04 <USBD_Get_USB_Status>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c80:	78fa      	ldrb	r2, [r7, #3]
 8008c82:	4611      	mov	r1, r2
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7f9 fcce 	bl	8002626 <HAL_PCD_EP_ClrStall>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 f8b7 	bl	8008e04 <USBD_Get_USB_Status>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	da0b      	bge.n	8008cd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cc6:	68f9      	ldr	r1, [r7, #12]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4413      	add	r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	440b      	add	r3, r1
 8008cd2:	3312      	adds	r3, #18
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	e00b      	b.n	8008cf0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	440b      	add	r3, r1
 8008cea:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008cee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bc80      	pop	{r7}
 8008cf8:	4770      	bx	lr

08008cfa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d14:	78fa      	ldrb	r2, [r7, #3]
 8008d16:	4611      	mov	r1, r2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7f9 fadc 	bl	80022d6 <HAL_PCD_SetAddress>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f86d 	bl	8008e04 <USBD_Get_USB_Status>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	607a      	str	r2, [r7, #4]
 8008d42:	461a      	mov	r2, r3
 8008d44:	460b      	mov	r3, r1
 8008d46:	72fb      	strb	r3, [r7, #11]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008d5a:	893b      	ldrh	r3, [r7, #8]
 8008d5c:	7af9      	ldrb	r1, [r7, #11]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	f7f9 fbca 	bl	80024f8 <HAL_PCD_EP_Transmit>
 8008d64:	4603      	mov	r3, r0
 8008d66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 f84a 	bl	8008e04 <USBD_Get_USB_Status>
 8008d70:	4603      	mov	r3, r0
 8008d72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d74:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b086      	sub	sp, #24
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	72fb      	strb	r3, [r7, #11]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008da0:	893b      	ldrh	r3, [r7, #8]
 8008da2:	7af9      	ldrb	r1, [r7, #11]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	f7f9 fb5f 	bl	8002468 <HAL_PCD_EP_Receive>
 8008daa:	4603      	mov	r3, r0
 8008dac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 f827 	bl	8008e04 <USBD_Get_USB_Status>
 8008db6:	4603      	mov	r3, r0
 8008db8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dba:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MIDI_HandleTypeDef)/4)+1];;/* On 32-bit boundary */
  return mem;
 8008dcc:	4b02      	ldr	r3, [pc, #8]	@ (8008dd8 <USBD_static_malloc+0x14>)
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bc80      	pop	{r7}
 8008dd6:	4770      	bx	lr
 8008dd8:	20000a68 	.word	0x20000a68

08008ddc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]

}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bc80      	pop	{r7}
 8008dec:	4770      	bx	lr

08008dee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	460b      	mov	r3, r1
 8008df8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr

08008e04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d817      	bhi.n	8008e48 <USBD_Get_USB_Status+0x44>
 8008e18:	a201      	add	r2, pc, #4	@ (adr r2, 8008e20 <USBD_Get_USB_Status+0x1c>)
 8008e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1e:	bf00      	nop
 8008e20:	08008e31 	.word	0x08008e31
 8008e24:	08008e37 	.word	0x08008e37
 8008e28:	08008e3d 	.word	0x08008e3d
 8008e2c:	08008e43 	.word	0x08008e43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
    break;
 8008e34:	e00b      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e36:	2302      	movs	r3, #2
 8008e38:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3a:	e008      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e40:	e005      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e42:	2302      	movs	r3, #2
 8008e44:	73fb      	strb	r3, [r7, #15]
    break;
 8008e46:	e002      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e48:	2302      	movs	r3, #2
 8008e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4c:	bf00      	nop
  }
  return usb_status;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop

08008e5c <malloc>:
 8008e5c:	4b02      	ldr	r3, [pc, #8]	@ (8008e68 <malloc+0xc>)
 8008e5e:	4601      	mov	r1, r0
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	f000 b82d 	b.w	8008ec0 <_malloc_r>
 8008e66:	bf00      	nop
 8008e68:	20000108 	.word	0x20000108

08008e6c <free>:
 8008e6c:	4b02      	ldr	r3, [pc, #8]	@ (8008e78 <free+0xc>)
 8008e6e:	4601      	mov	r1, r0
 8008e70:	6818      	ldr	r0, [r3, #0]
 8008e72:	f000 b8f5 	b.w	8009060 <_free_r>
 8008e76:	bf00      	nop
 8008e78:	20000108 	.word	0x20000108

08008e7c <sbrk_aligned>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8008ebc <sbrk_aligned+0x40>)
 8008e80:	460c      	mov	r4, r1
 8008e82:	6831      	ldr	r1, [r6, #0]
 8008e84:	4605      	mov	r5, r0
 8008e86:	b911      	cbnz	r1, 8008e8e <sbrk_aligned+0x12>
 8008e88:	f000 f8ae 	bl	8008fe8 <_sbrk_r>
 8008e8c:	6030      	str	r0, [r6, #0]
 8008e8e:	4621      	mov	r1, r4
 8008e90:	4628      	mov	r0, r5
 8008e92:	f000 f8a9 	bl	8008fe8 <_sbrk_r>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	d103      	bne.n	8008ea2 <sbrk_aligned+0x26>
 8008e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}
 8008ea2:	1cc4      	adds	r4, r0, #3
 8008ea4:	f024 0403 	bic.w	r4, r4, #3
 8008ea8:	42a0      	cmp	r0, r4
 8008eaa:	d0f8      	beq.n	8008e9e <sbrk_aligned+0x22>
 8008eac:	1a21      	subs	r1, r4, r0
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 f89a 	bl	8008fe8 <_sbrk_r>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d1f2      	bne.n	8008e9e <sbrk_aligned+0x22>
 8008eb8:	e7ef      	b.n	8008e9a <sbrk_aligned+0x1e>
 8008eba:	bf00      	nop
 8008ebc:	20000a7c 	.word	0x20000a7c

08008ec0 <_malloc_r>:
 8008ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec4:	1ccd      	adds	r5, r1, #3
 8008ec6:	f025 0503 	bic.w	r5, r5, #3
 8008eca:	3508      	adds	r5, #8
 8008ecc:	2d0c      	cmp	r5, #12
 8008ece:	bf38      	it	cc
 8008ed0:	250c      	movcc	r5, #12
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	db01      	blt.n	8008edc <_malloc_r+0x1c>
 8008ed8:	42a9      	cmp	r1, r5
 8008eda:	d904      	bls.n	8008ee6 <_malloc_r+0x26>
 8008edc:	230c      	movs	r3, #12
 8008ede:	6033      	str	r3, [r6, #0]
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fbc <_malloc_r+0xfc>
 8008eea:	f000 f869 	bl	8008fc0 <__malloc_lock>
 8008eee:	f8d8 3000 	ldr.w	r3, [r8]
 8008ef2:	461c      	mov	r4, r3
 8008ef4:	bb44      	cbnz	r4, 8008f48 <_malloc_r+0x88>
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff ffbf 	bl	8008e7c <sbrk_aligned>
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	4604      	mov	r4, r0
 8008f02:	d158      	bne.n	8008fb6 <_malloc_r+0xf6>
 8008f04:	f8d8 4000 	ldr.w	r4, [r8]
 8008f08:	4627      	mov	r7, r4
 8008f0a:	2f00      	cmp	r7, #0
 8008f0c:	d143      	bne.n	8008f96 <_malloc_r+0xd6>
 8008f0e:	2c00      	cmp	r4, #0
 8008f10:	d04b      	beq.n	8008faa <_malloc_r+0xea>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	4639      	mov	r1, r7
 8008f16:	4630      	mov	r0, r6
 8008f18:	eb04 0903 	add.w	r9, r4, r3
 8008f1c:	f000 f864 	bl	8008fe8 <_sbrk_r>
 8008f20:	4581      	cmp	r9, r0
 8008f22:	d142      	bne.n	8008faa <_malloc_r+0xea>
 8008f24:	6821      	ldr	r1, [r4, #0]
 8008f26:	4630      	mov	r0, r6
 8008f28:	1a6d      	subs	r5, r5, r1
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f7ff ffa6 	bl	8008e7c <sbrk_aligned>
 8008f30:	3001      	adds	r0, #1
 8008f32:	d03a      	beq.n	8008faa <_malloc_r+0xea>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	442b      	add	r3, r5
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	bb62      	cbnz	r2, 8008f9c <_malloc_r+0xdc>
 8008f42:	f8c8 7000 	str.w	r7, [r8]
 8008f46:	e00f      	b.n	8008f68 <_malloc_r+0xa8>
 8008f48:	6822      	ldr	r2, [r4, #0]
 8008f4a:	1b52      	subs	r2, r2, r5
 8008f4c:	d420      	bmi.n	8008f90 <_malloc_r+0xd0>
 8008f4e:	2a0b      	cmp	r2, #11
 8008f50:	d917      	bls.n	8008f82 <_malloc_r+0xc2>
 8008f52:	1961      	adds	r1, r4, r5
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	6025      	str	r5, [r4, #0]
 8008f58:	bf18      	it	ne
 8008f5a:	6059      	strne	r1, [r3, #4]
 8008f5c:	6863      	ldr	r3, [r4, #4]
 8008f5e:	bf08      	it	eq
 8008f60:	f8c8 1000 	streq.w	r1, [r8]
 8008f64:	5162      	str	r2, [r4, r5]
 8008f66:	604b      	str	r3, [r1, #4]
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f000 f82f 	bl	8008fcc <__malloc_unlock>
 8008f6e:	f104 000b 	add.w	r0, r4, #11
 8008f72:	1d23      	adds	r3, r4, #4
 8008f74:	f020 0007 	bic.w	r0, r0, #7
 8008f78:	1ac2      	subs	r2, r0, r3
 8008f7a:	bf1c      	itt	ne
 8008f7c:	1a1b      	subne	r3, r3, r0
 8008f7e:	50a3      	strne	r3, [r4, r2]
 8008f80:	e7af      	b.n	8008ee2 <_malloc_r+0x22>
 8008f82:	6862      	ldr	r2, [r4, #4]
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	bf0c      	ite	eq
 8008f88:	f8c8 2000 	streq.w	r2, [r8]
 8008f8c:	605a      	strne	r2, [r3, #4]
 8008f8e:	e7eb      	b.n	8008f68 <_malloc_r+0xa8>
 8008f90:	4623      	mov	r3, r4
 8008f92:	6864      	ldr	r4, [r4, #4]
 8008f94:	e7ae      	b.n	8008ef4 <_malloc_r+0x34>
 8008f96:	463c      	mov	r4, r7
 8008f98:	687f      	ldr	r7, [r7, #4]
 8008f9a:	e7b6      	b.n	8008f0a <_malloc_r+0x4a>
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	d1fb      	bne.n	8008f9c <_malloc_r+0xdc>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	6053      	str	r3, [r2, #4]
 8008fa8:	e7de      	b.n	8008f68 <_malloc_r+0xa8>
 8008faa:	230c      	movs	r3, #12
 8008fac:	4630      	mov	r0, r6
 8008fae:	6033      	str	r3, [r6, #0]
 8008fb0:	f000 f80c 	bl	8008fcc <__malloc_unlock>
 8008fb4:	e794      	b.n	8008ee0 <_malloc_r+0x20>
 8008fb6:	6005      	str	r5, [r0, #0]
 8008fb8:	e7d6      	b.n	8008f68 <_malloc_r+0xa8>
 8008fba:	bf00      	nop
 8008fbc:	20000a80 	.word	0x20000a80

08008fc0 <__malloc_lock>:
 8008fc0:	4801      	ldr	r0, [pc, #4]	@ (8008fc8 <__malloc_lock+0x8>)
 8008fc2:	f000 b84b 	b.w	800905c <__retarget_lock_acquire_recursive>
 8008fc6:	bf00      	nop
 8008fc8:	20000bc0 	.word	0x20000bc0

08008fcc <__malloc_unlock>:
 8008fcc:	4801      	ldr	r0, [pc, #4]	@ (8008fd4 <__malloc_unlock+0x8>)
 8008fce:	f000 b846 	b.w	800905e <__retarget_lock_release_recursive>
 8008fd2:	bf00      	nop
 8008fd4:	20000bc0 	.word	0x20000bc0

08008fd8 <memset>:
 8008fd8:	4603      	mov	r3, r0
 8008fda:	4402      	add	r2, r0
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d100      	bne.n	8008fe2 <memset+0xa>
 8008fe0:	4770      	bx	lr
 8008fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fe6:	e7f9      	b.n	8008fdc <memset+0x4>

08008fe8 <_sbrk_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	2300      	movs	r3, #0
 8008fec:	4d05      	ldr	r5, [pc, #20]	@ (8009004 <_sbrk_r+0x1c>)
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	f7f7 ff5e 	bl	8000eb4 <_sbrk>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_sbrk_r+0x1a>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_sbrk_r+0x1a>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	20000bbc 	.word	0x20000bbc

08009008 <__errno>:
 8009008:	4b01      	ldr	r3, [pc, #4]	@ (8009010 <__errno+0x8>)
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20000108 	.word	0x20000108

08009014 <__libc_init_array>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	2600      	movs	r6, #0
 8009018:	4d0c      	ldr	r5, [pc, #48]	@ (800904c <__libc_init_array+0x38>)
 800901a:	4c0d      	ldr	r4, [pc, #52]	@ (8009050 <__libc_init_array+0x3c>)
 800901c:	1b64      	subs	r4, r4, r5
 800901e:	10a4      	asrs	r4, r4, #2
 8009020:	42a6      	cmp	r6, r4
 8009022:	d109      	bne.n	8009038 <__libc_init_array+0x24>
 8009024:	f000 f864 	bl	80090f0 <_init>
 8009028:	2600      	movs	r6, #0
 800902a:	4d0a      	ldr	r5, [pc, #40]	@ (8009054 <__libc_init_array+0x40>)
 800902c:	4c0a      	ldr	r4, [pc, #40]	@ (8009058 <__libc_init_array+0x44>)
 800902e:	1b64      	subs	r4, r4, r5
 8009030:	10a4      	asrs	r4, r4, #2
 8009032:	42a6      	cmp	r6, r4
 8009034:	d105      	bne.n	8009042 <__libc_init_array+0x2e>
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	f855 3b04 	ldr.w	r3, [r5], #4
 800903c:	4798      	blx	r3
 800903e:	3601      	adds	r6, #1
 8009040:	e7ee      	b.n	8009020 <__libc_init_array+0xc>
 8009042:	f855 3b04 	ldr.w	r3, [r5], #4
 8009046:	4798      	blx	r3
 8009048:	3601      	adds	r6, #1
 800904a:	e7f2      	b.n	8009032 <__libc_init_array+0x1e>
 800904c:	0800918c 	.word	0x0800918c
 8009050:	0800918c 	.word	0x0800918c
 8009054:	0800918c 	.word	0x0800918c
 8009058:	08009190 	.word	0x08009190

0800905c <__retarget_lock_acquire_recursive>:
 800905c:	4770      	bx	lr

0800905e <__retarget_lock_release_recursive>:
 800905e:	4770      	bx	lr

08009060 <_free_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4605      	mov	r5, r0
 8009064:	2900      	cmp	r1, #0
 8009066:	d040      	beq.n	80090ea <_free_r+0x8a>
 8009068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906c:	1f0c      	subs	r4, r1, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfb8      	it	lt
 8009072:	18e4      	addlt	r4, r4, r3
 8009074:	f7ff ffa4 	bl	8008fc0 <__malloc_lock>
 8009078:	4a1c      	ldr	r2, [pc, #112]	@ (80090ec <_free_r+0x8c>)
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	b933      	cbnz	r3, 800908c <_free_r+0x2c>
 800907e:	6063      	str	r3, [r4, #4]
 8009080:	6014      	str	r4, [r2, #0]
 8009082:	4628      	mov	r0, r5
 8009084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009088:	f7ff bfa0 	b.w	8008fcc <__malloc_unlock>
 800908c:	42a3      	cmp	r3, r4
 800908e:	d908      	bls.n	80090a2 <_free_r+0x42>
 8009090:	6820      	ldr	r0, [r4, #0]
 8009092:	1821      	adds	r1, r4, r0
 8009094:	428b      	cmp	r3, r1
 8009096:	bf01      	itttt	eq
 8009098:	6819      	ldreq	r1, [r3, #0]
 800909a:	685b      	ldreq	r3, [r3, #4]
 800909c:	1809      	addeq	r1, r1, r0
 800909e:	6021      	streq	r1, [r4, #0]
 80090a0:	e7ed      	b.n	800907e <_free_r+0x1e>
 80090a2:	461a      	mov	r2, r3
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	b10b      	cbz	r3, 80090ac <_free_r+0x4c>
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	d9fa      	bls.n	80090a2 <_free_r+0x42>
 80090ac:	6811      	ldr	r1, [r2, #0]
 80090ae:	1850      	adds	r0, r2, r1
 80090b0:	42a0      	cmp	r0, r4
 80090b2:	d10b      	bne.n	80090cc <_free_r+0x6c>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	4401      	add	r1, r0
 80090b8:	1850      	adds	r0, r2, r1
 80090ba:	4283      	cmp	r3, r0
 80090bc:	6011      	str	r1, [r2, #0]
 80090be:	d1e0      	bne.n	8009082 <_free_r+0x22>
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	4408      	add	r0, r1
 80090c6:	6010      	str	r0, [r2, #0]
 80090c8:	6053      	str	r3, [r2, #4]
 80090ca:	e7da      	b.n	8009082 <_free_r+0x22>
 80090cc:	d902      	bls.n	80090d4 <_free_r+0x74>
 80090ce:	230c      	movs	r3, #12
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	e7d6      	b.n	8009082 <_free_r+0x22>
 80090d4:	6820      	ldr	r0, [r4, #0]
 80090d6:	1821      	adds	r1, r4, r0
 80090d8:	428b      	cmp	r3, r1
 80090da:	bf01      	itttt	eq
 80090dc:	6819      	ldreq	r1, [r3, #0]
 80090de:	685b      	ldreq	r3, [r3, #4]
 80090e0:	1809      	addeq	r1, r1, r0
 80090e2:	6021      	streq	r1, [r4, #0]
 80090e4:	6063      	str	r3, [r4, #4]
 80090e6:	6054      	str	r4, [r2, #4]
 80090e8:	e7cb      	b.n	8009082 <_free_r+0x22>
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	20000a80 	.word	0x20000a80

080090f0 <_init>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	bf00      	nop
 80090f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f6:	bc08      	pop	{r3}
 80090f8:	469e      	mov	lr, r3
 80090fa:	4770      	bx	lr

080090fc <_fini>:
 80090fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fe:	bf00      	nop
 8009100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009102:	bc08      	pop	{r3}
 8009104:	469e      	mov	lr, r3
 8009106:	4770      	bx	lr
