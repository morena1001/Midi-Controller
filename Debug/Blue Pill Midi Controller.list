
Blue Pill Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c10  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08008d1c  08008d1c  00009d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008da0  08008da0  0000a10c  2**0
                  CONTENTS
  4 .ARM          00000000  08008da0  08008da0  0000a10c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008da0  08008da0  0000a10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008da0  08008da0  00009da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008da4  08008da4  00009da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08008da8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d0  2000010c  08008eb4  0000a10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  08008eb4  0000a9dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123f2  00000000  00000000  0000a135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003131  00000000  00000000  0001c527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca7  00000000  00000000  00020700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6f5  00000000  00000000  000213a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014869  00000000  00000000  0003ba9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091fb3  00000000  00000000  00050305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e22b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004474  00000000  00000000  000e22fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e6770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000010c 	.word	0x2000010c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008d04 	.word	0x08008d04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000110 	.word	0x20000110
 8000148:	08008d04 	.word	0x08008d04

0800014c <ADC_Convert_Rank1>:
uint16_t ADC_Convert_Rank2 (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_Convert_Rank1 (void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	463b      	mov	r3, r7
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 800015c:	2308      	movs	r3, #8
 800015e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000160:	2301      	movs	r3, #1
 8000162:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000164:	2300      	movs	r3, #0
 8000166:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000168:	463b      	mov	r3, r7
 800016a:	4619      	mov	r1, r3
 800016c:	480d      	ldr	r0, [pc, #52]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800016e:	f001 f951 	bl	8001414 <HAL_ADC_ConfigChannel>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <ADC_Convert_Rank1+0x30>
	{
		Error_Handler();
 8000178:	f000 fa6c 	bl	8000654 <Error_Handler>
	}

	HAL_ADC_Start (&hadc1);
 800017c:	4809      	ldr	r0, [pc, #36]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800017e:	f000 ff5d 	bl	800103c <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc1, 100);
 8000182:	2164      	movs	r1, #100	@ 0x64
 8000184:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 8000186:	f001 f833 	bl	80011f0 <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue (&hadc1);
 800018a:	4806      	ldr	r0, [pc, #24]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 800018c:	f001 f936 	bl	80013fc <HAL_ADC_GetValue>
 8000190:	4603      	mov	r3, r0
 8000192:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop (&hadc1);
 8000194:	4803      	ldr	r0, [pc, #12]	@ (80001a4 <ADC_Convert_Rank1+0x58>)
 8000196:	f000 ffff 	bl	8001198 <HAL_ADC_Stop>

	return val;
 800019a:	89fb      	ldrh	r3, [r7, #14]
}
 800019c:	4618      	mov	r0, r3
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20000128 	.word	0x20000128

080001a8 <ADC_Convert_Rank2>:

uint16_t ADC_Convert_Rank2 (void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80001ae:	463b      	mov	r3, r7
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 80001b8:	2309      	movs	r3, #9
 80001ba:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80001bc:	2301      	movs	r3, #1
 80001be:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80001c4:	463b      	mov	r3, r7
 80001c6:	4619      	mov	r1, r3
 80001c8:	480d      	ldr	r0, [pc, #52]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001ca:	f001 f923 	bl	8001414 <HAL_ADC_ConfigChannel>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <ADC_Convert_Rank2+0x30>
	{
		Error_Handler();
 80001d4:	f000 fa3e 	bl	8000654 <Error_Handler>
	}

	HAL_ADC_Start (&hadc2);
 80001d8:	4809      	ldr	r0, [pc, #36]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001da:	f000 ff2f 	bl	800103c <HAL_ADC_Start>
	HAL_ADC_PollForConversion (&hadc2, 100);
 80001de:	2164      	movs	r1, #100	@ 0x64
 80001e0:	4807      	ldr	r0, [pc, #28]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001e2:	f001 f805 	bl	80011f0 <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue (&hadc2);
 80001e6:	4806      	ldr	r0, [pc, #24]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001e8:	f001 f908 	bl	80013fc <HAL_ADC_GetValue>
 80001ec:	4603      	mov	r3, r0
 80001ee:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop (&hadc2);
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <ADC_Convert_Rank2+0x58>)
 80001f2:	f000 ffd1 	bl	8001198 <HAL_ADC_Stop>

	return val;
 80001f6:	89fb      	ldrh	r3, [r7, #14]
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3710      	adds	r7, #16
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	20000158 	.word	0x20000158

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fddd 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f8c7 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f9cd 	bl	80005b0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000216:	f008 f989 	bl	800852c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800021a:	f000 f91f 	bl	800045c <MX_ADC1_Init>
  MX_TIM2_Init();
 800021e:	f000 f979 	bl	8000514 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000222:	f000 f949 	bl	80004b8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  	  for (uint8_t i = 0; i < 16; i++) {
 8000226:	2300      	movs	r3, #0
 8000228:	71fb      	strb	r3, [r7, #7]
 800022a:	e00c      	b.n	8000246 <main+0x42>
  		  D_sum += ADC_Convert_Rank1 ();
 800022c:	f7ff ff8e 	bl	800014c <ADC_Convert_Rank1>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	4b4f      	ldr	r3, [pc, #316]	@ (8000374 <main+0x170>)
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	4413      	add	r3, r2
 800023a:	b29a      	uxth	r2, r3
 800023c:	4b4d      	ldr	r3, [pc, #308]	@ (8000374 <main+0x170>)
 800023e:	801a      	strh	r2, [r3, #0]
  	  for (uint8_t i = 0; i < 16; i++) {
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	3301      	adds	r3, #1
 8000244:	71fb      	strb	r3, [r7, #7]
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d9ef      	bls.n	800022c <main+0x28>
  	  }

  	  D_current = ((D_sum >> 4) * 127) / 4095;
 800024c:	4b49      	ldr	r3, [pc, #292]	@ (8000374 <main+0x170>)
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	091b      	lsrs	r3, r3, #4
 8000252:	b29b      	uxth	r3, r3
 8000254:	461a      	mov	r2, r3
 8000256:	4613      	mov	r3, r2
 8000258:	01db      	lsls	r3, r3, #7
 800025a:	1a9b      	subs	r3, r3, r2
 800025c:	4a46      	ldr	r2, [pc, #280]	@ (8000378 <main+0x174>)
 800025e:	fb82 1203 	smull	r1, r2, r2, r3
 8000262:	441a      	add	r2, r3
 8000264:	12d2      	asrs	r2, r2, #11
 8000266:	17db      	asrs	r3, r3, #31
 8000268:	1ad3      	subs	r3, r2, r3
 800026a:	b29a      	uxth	r2, r3
 800026c:	4b43      	ldr	r3, [pc, #268]	@ (800037c <main+0x178>)
 800026e:	801a      	strh	r2, [r3, #0]
  	  D_sum = 0;
 8000270:	4b40      	ldr	r3, [pc, #256]	@ (8000374 <main+0x170>)
 8000272:	2200      	movs	r2, #0
 8000274:	801a      	strh	r2, [r3, #0]

  	  if (D_current < D_previous - 3 || D_current > D_previous + 3) {
 8000276:	4b41      	ldr	r3, [pc, #260]	@ (800037c <main+0x178>)
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	461a      	mov	r2, r3
 800027c:	4b40      	ldr	r3, [pc, #256]	@ (8000380 <main+0x17c>)
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	3b03      	subs	r3, #3
 8000282:	429a      	cmp	r2, r3
 8000284:	db07      	blt.n	8000296 <main+0x92>
 8000286:	4b3d      	ldr	r3, [pc, #244]	@ (800037c <main+0x178>)
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	461a      	mov	r2, r3
 800028c:	4b3c      	ldr	r3, [pc, #240]	@ (8000380 <main+0x17c>)
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	3303      	adds	r3, #3
 8000292:	429a      	cmp	r2, r3
 8000294:	dd14      	ble.n	80002c0 <main+0xbc>
  		  D_previous = D_current;
 8000296:	4b39      	ldr	r3, [pc, #228]	@ (800037c <main+0x178>)
 8000298:	881a      	ldrh	r2, [r3, #0]
 800029a:	4b39      	ldr	r3, [pc, #228]	@ (8000380 <main+0x17c>)
 800029c:	801a      	strh	r2, [r3, #0]
  		  D_vol_message[3] = D_current;
 800029e:	4b37      	ldr	r3, [pc, #220]	@ (800037c <main+0x178>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b37      	ldr	r3, [pc, #220]	@ (8000384 <main+0x180>)
 80002a6:	70da      	strb	r2, [r3, #3]

  	      while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 80002a8:	bf00      	nop
 80002aa:	4837      	ldr	r0, [pc, #220]	@ (8000388 <main+0x184>)
 80002ac:	f007 f82a 	bl	8007304 <USBD_MIDI_GetState>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d1f9      	bne.n	80002aa <main+0xa6>
  	      USBD_MIDI_SendPackets (&hUsbDeviceFS, D_vol_message, 4);
 80002b6:	2204      	movs	r2, #4
 80002b8:	4932      	ldr	r1, [pc, #200]	@ (8000384 <main+0x180>)
 80002ba:	4833      	ldr	r0, [pc, #204]	@ (8000388 <main+0x184>)
 80002bc:	f007 f82f 	bl	800731e <USBD_MIDI_SendPackets>
  	  }

  	  for (uint8_t i = 0; i < 16; i++) {
 80002c0:	2300      	movs	r3, #0
 80002c2:	71bb      	strb	r3, [r7, #6]
 80002c4:	e00c      	b.n	80002e0 <main+0xdc>
  		  P_sum += ADC_Convert_Rank2 ();
 80002c6:	f7ff ff6f 	bl	80001a8 <ADC_Convert_Rank2>
 80002ca:	4603      	mov	r3, r0
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b2f      	ldr	r3, [pc, #188]	@ (800038c <main+0x188>)
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	4413      	add	r3, r2
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	4b2d      	ldr	r3, [pc, #180]	@ (800038c <main+0x188>)
 80002d8:	801a      	strh	r2, [r3, #0]
  	  for (uint8_t i = 0; i < 16; i++) {
 80002da:	79bb      	ldrb	r3, [r7, #6]
 80002dc:	3301      	adds	r3, #1
 80002de:	71bb      	strb	r3, [r7, #6]
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	2b0f      	cmp	r3, #15
 80002e4:	d9ef      	bls.n	80002c6 <main+0xc2>
  	  }

  	  P_current = ((P_sum >> 4) * 127) / 4095;
 80002e6:	4b29      	ldr	r3, [pc, #164]	@ (800038c <main+0x188>)
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	091b      	lsrs	r3, r3, #4
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	461a      	mov	r2, r3
 80002f0:	4613      	mov	r3, r2
 80002f2:	01db      	lsls	r3, r3, #7
 80002f4:	1a9b      	subs	r3, r3, r2
 80002f6:	4a20      	ldr	r2, [pc, #128]	@ (8000378 <main+0x174>)
 80002f8:	fb82 1203 	smull	r1, r2, r2, r3
 80002fc:	441a      	add	r2, r3
 80002fe:	12d2      	asrs	r2, r2, #11
 8000300:	17db      	asrs	r3, r3, #31
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b22      	ldr	r3, [pc, #136]	@ (8000390 <main+0x18c>)
 8000308:	801a      	strh	r2, [r3, #0]
  	  P_sum = 0;
 800030a:	4b20      	ldr	r3, [pc, #128]	@ (800038c <main+0x188>)
 800030c:	2200      	movs	r2, #0
 800030e:	801a      	strh	r2, [r3, #0]

  	  if (P_current < P_previous - 3 || P_current > P_previous + 3) {
 8000310:	4b1f      	ldr	r3, [pc, #124]	@ (8000390 <main+0x18c>)
 8000312:	881b      	ldrh	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b1f      	ldr	r3, [pc, #124]	@ (8000394 <main+0x190>)
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	3b03      	subs	r3, #3
 800031c:	429a      	cmp	r2, r3
 800031e:	db07      	blt.n	8000330 <main+0x12c>
 8000320:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <main+0x18c>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b1b      	ldr	r3, [pc, #108]	@ (8000394 <main+0x190>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	3303      	adds	r3, #3
 800032c:	429a      	cmp	r2, r3
 800032e:	dd14      	ble.n	800035a <main+0x156>
  		  P_previous = P_current;
 8000330:	4b17      	ldr	r3, [pc, #92]	@ (8000390 <main+0x18c>)
 8000332:	881a      	ldrh	r2, [r3, #0]
 8000334:	4b17      	ldr	r3, [pc, #92]	@ (8000394 <main+0x190>)
 8000336:	801a      	strh	r2, [r3, #0]
  		  P_vol_message[3] = P_current;
 8000338:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <main+0x18c>)
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4b16      	ldr	r3, [pc, #88]	@ (8000398 <main+0x194>)
 8000340:	70da      	strb	r2, [r3, #3]

  	      while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000342:	bf00      	nop
 8000344:	4810      	ldr	r0, [pc, #64]	@ (8000388 <main+0x184>)
 8000346:	f006 ffdd 	bl	8007304 <USBD_MIDI_GetState>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1f9      	bne.n	8000344 <main+0x140>
  	      USBD_MIDI_SendPackets (&hUsbDeviceFS, P_vol_message, 4);
 8000350:	2204      	movs	r2, #4
 8000352:	4911      	ldr	r1, [pc, #68]	@ (8000398 <main+0x194>)
 8000354:	480c      	ldr	r0, [pc, #48]	@ (8000388 <main+0x184>)
 8000356:	f006 ffe2 	bl	800731e <USBD_MIDI_SendPackets>
//		USBD_MIDI_SendPackets (&hUsbDeviceFS, P_vol_message, 4);
//	}



  HAL_NVIC_SetPriority (TIM2_IRQn, 0, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	2100      	movs	r1, #0
 800035e:	201c      	movs	r0, #28
 8000360:	f001 fac3 	bl	80018ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM2_IRQn);
 8000364:	201c      	movs	r0, #28
 8000366:	f001 fadc 	bl	8001922 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim2);
 800036a:	480c      	ldr	r0, [pc, #48]	@ (800039c <main+0x198>)
 800036c:	f003 ffa8 	bl	80042c0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <main+0x16c>
 8000374:	200001d8 	.word	0x200001d8
 8000378:	80080081 	.word	0x80080081
 800037c:	200001d6 	.word	0x200001d6
 8000380:	200001d4 	.word	0x200001d4
 8000384:	2000000c 	.word	0x2000000c
 8000388:	2000022c 	.word	0x2000022c
 800038c:	200001de 	.word	0x200001de
 8000390:	200001dc 	.word	0x200001dc
 8000394:	200001da 	.word	0x200001da
 8000398:	20000010 	.word	0x20000010
 800039c:	20000188 	.word	0x20000188

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b094      	sub	sp, #80	@ 0x50
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003aa:	2228      	movs	r2, #40	@ 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f008 fc7c 	bl	8008cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	f107 0314 	add.w	r3, r7, #20
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d0:	2301      	movs	r3, #1
 80003d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003de:	2301      	movs	r3, #1
 80003e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	2302      	movs	r3, #2
 80003e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80003f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 f9aa 	bl	8003750 <HAL_RCC_OscConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000402:	f000 f927 	bl	8000654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000406:	230f      	movs	r3, #15
 8000408:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040a:	2302      	movs	r3, #2
 800040c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000416:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041c:	f107 0314 	add.w	r3, r7, #20
 8000420:	2101      	movs	r1, #1
 8000422:	4618      	mov	r0, r3
 8000424:	f003 fc16 	bl	8003c54 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800042e:	f000 f911 	bl	8000654 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000432:	2312      	movs	r3, #18
 8000434:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000436:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800043a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800043c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000440:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4618      	mov	r0, r3
 8000446:	f003 fd7f 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000450:	f000 f900 	bl	8000654 <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3750      	adds	r7, #80	@ 0x50
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800046c:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <MX_ADC1_Init+0x54>)
 800046e:	4a11      	ldr	r2, [pc, #68]	@ (80004b4 <MX_ADC1_Init+0x58>)
 8000470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_ADC1_Init+0x54>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000478:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <MX_ADC1_Init+0x54>)
 800047a:	2200      	movs	r2, #0
 800047c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_ADC1_Init+0x54>)
 8000480:	2200      	movs	r2, #0
 8000482:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000484:	4b0a      	ldr	r3, [pc, #40]	@ (80004b0 <MX_ADC1_Init+0x54>)
 8000486:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800048a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800048c:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_ADC1_Init+0x54>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000492:	4b07      	ldr	r3, [pc, #28]	@ (80004b0 <MX_ADC1_Init+0x54>)
 8000494:	2201      	movs	r2, #1
 8000496:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000498:	4805      	ldr	r0, [pc, #20]	@ (80004b0 <MX_ADC1_Init+0x54>)
 800049a:	f000 fcf7 	bl	8000e8c <HAL_ADC_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004a4:	f000 f8d6 	bl	8000654 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000128 	.word	0x20000128
 80004b4:	40012400 	.word	0x40012400

080004b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80004c8:	4b10      	ldr	r3, [pc, #64]	@ (800050c <MX_ADC2_Init+0x54>)
 80004ca:	4a11      	ldr	r2, [pc, #68]	@ (8000510 <MX_ADC2_Init+0x58>)
 80004cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_ADC2_Init+0x54>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <MX_ADC2_Init+0x54>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004da:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <MX_ADC2_Init+0x54>)
 80004dc:	2200      	movs	r2, #0
 80004de:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <MX_ADC2_Init+0x54>)
 80004e2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <MX_ADC2_Init+0x54>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80004ee:	4b07      	ldr	r3, [pc, #28]	@ (800050c <MX_ADC2_Init+0x54>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004f4:	4805      	ldr	r0, [pc, #20]	@ (800050c <MX_ADC2_Init+0x54>)
 80004f6:	f000 fcc9 	bl	8000e8c <HAL_ADC_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000500:	f000 f8a8 	bl	8000654 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000158 	.word	0x20000158
 8000510:	40012800 	.word	0x40012800

08000514 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000530:	4b1e      	ldr	r3, [pc, #120]	@ (80005ac <MX_TIM2_Init+0x98>)
 8000532:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000536:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 359;
 8000538:	4b1c      	ldr	r3, [pc, #112]	@ (80005ac <MX_TIM2_Init+0x98>)
 800053a:	f240 1267 	movw	r2, #359	@ 0x167
 800053e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000540:	4b1a      	ldr	r3, [pc, #104]	@ (80005ac <MX_TIM2_Init+0x98>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 8000546:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <MX_TIM2_Init+0x98>)
 8000548:	f240 321f 	movw	r2, #799	@ 0x31f
 800054c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054e:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <MX_TIM2_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000554:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <MX_TIM2_Init+0x98>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800055a:	4814      	ldr	r0, [pc, #80]	@ (80005ac <MX_TIM2_Init+0x98>)
 800055c:	f003 fe60 	bl	8004220 <HAL_TIM_Base_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000566:	f000 f875 	bl	8000654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800056a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800056e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	4619      	mov	r1, r3
 8000576:	480d      	ldr	r0, [pc, #52]	@ (80005ac <MX_TIM2_Init+0x98>)
 8000578:	f003 ffe4 	bl	8004544 <HAL_TIM_ConfigClockSource>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000582:	f000 f867 	bl	8000654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	@ (80005ac <MX_TIM2_Init+0x98>)
 8000594:	f004 f9ce 	bl	8004934 <HAL_TIMEx_MasterConfigSynchronization>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800059e:	f000 f859 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000188 	.word	0x20000188

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <MX_GPIO_Init+0x98>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a1f      	ldr	r2, [pc, #124]	@ (8000648 <MX_GPIO_Init+0x98>)
 80005ca:	f043 0320 	orr.w	r3, r3, #32
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <MX_GPIO_Init+0x98>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0320 	and.w	r3, r3, #32
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <MX_GPIO_Init+0x98>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a19      	ldr	r2, [pc, #100]	@ (8000648 <MX_GPIO_Init+0x98>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <MX_GPIO_Init+0x98>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <MX_GPIO_Init+0x98>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a13      	ldr	r2, [pc, #76]	@ (8000648 <MX_GPIO_Init+0x98>)
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_GPIO_Init+0x98>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0308 	and.w	r3, r3, #8
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : C_B_Pin CS_B_Pin D_B_Pin DS_B_Pin
                           E_B_Pin F_B_Pin FS_B_Pin */
  GPIO_InitStruct.Pin = C_B_Pin|CS_B_Pin|D_B_Pin|DS_B_Pin
 800060c:	f248 03fc 	movw	r3, #33020	@ 0x80fc
 8000610:	613b      	str	r3, [r7, #16]
                          |E_B_Pin|F_B_Pin|FS_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	480a      	ldr	r0, [pc, #40]	@ (800064c <MX_GPIO_Init+0x9c>)
 8000622:	f001 f999 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_B_Pin GS_B_Pin A_B_Pin AS_B_Pin
                           B_B_Pin SP_B_Pin */
  GPIO_InitStruct.Pin = G_B_Pin|GS_B_Pin|A_B_Pin|AS_B_Pin
 8000626:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 800062a:	613b      	str	r3, [r7, #16]
                          |B_B_Pin|SP_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000630:	2301      	movs	r3, #1
 8000632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <MX_GPIO_Init+0xa0>)
 800063c:	f001 f98c 	bl	8001958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <Error_Handler+0x8>

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <HAL_MspInit+0x5c>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a14      	ldr	r2, [pc, #80]	@ (80006bc <HAL_MspInit+0x5c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <HAL_MspInit+0x5c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <HAL_MspInit+0x5c>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <HAL_MspInit+0x5c>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <HAL_MspInit+0x5c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <HAL_MspInit+0x60>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <HAL_MspInit+0x60>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000

080006c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	@ 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0318 	add.w	r3, r7, #24
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a28      	ldr	r2, [pc, #160]	@ (8000780 <HAL_ADC_MspInit+0xbc>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d122      	bne.n	800072a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a26      	ldr	r2, [pc, #152]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 80006ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a20      	ldr	r2, [pc, #128]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0308 	and.w	r3, r3, #8
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = D_V_Pin;
 8000714:	2301      	movs	r3, #1
 8000716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D_V_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	4619      	mov	r1, r3
 8000722:	4819      	ldr	r0, [pc, #100]	@ (8000788 <HAL_ADC_MspInit+0xc4>)
 8000724:	f001 f918 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000728:	e026      	b.n	8000778 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a17      	ldr	r2, [pc, #92]	@ (800078c <HAL_ADC_MspInit+0xc8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d121      	bne.n	8000778 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 800073a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a0c      	ldr	r2, [pc, #48]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <HAL_ADC_MspInit+0xc0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0308 	and.w	r3, r3, #8
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = P_V_Pin;
 8000764:	2302      	movs	r3, #2
 8000766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000768:	2303      	movs	r3, #3
 800076a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(P_V_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0318 	add.w	r3, r7, #24
 8000770:	4619      	mov	r1, r3
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <HAL_ADC_MspInit+0xc4>)
 8000774:	f001 f8f0 	bl	8001958 <HAL_GPIO_Init>
}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	@ 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40012400 	.word	0x40012400
 8000784:	40021000 	.word	0x40021000
 8000788:	40010c00 	.word	0x40010c00
 800078c:	40012800 	.word	0x40012800

08000790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007a0:	d113      	bne.n	80007ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <HAL_TIM_Base_MspInit+0x44>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a0b      	ldr	r2, [pc, #44]	@ (80007d4 <HAL_TIM_Base_MspInit+0x44>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <HAL_TIM_Base_MspInit+0x44>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	201c      	movs	r0, #28
 80007c0:	f001 f893 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c4:	201c      	movs	r0, #28
 80007c6:	f001 f8ac 	bl	8001922 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <NMI_Handler+0x4>

080007e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <MemManage_Handler+0x4>

080007f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <UsageFault_Handler+0x4>

08000800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 fb14 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000836:	f001 fb46 	bl	8001ec6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200006f0 	.word	0x200006f0

08000844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!HAL_GPIO_ReadPin (C_B_GPIO_Port, C_B_Pin)) {
 800084a:	2104      	movs	r1, #4
 800084c:	489a      	ldr	r0, [pc, #616]	@ (8000ab8 <TIM2_IRQHandler+0x274>)
 800084e:	f001 fa07 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d10e      	bne.n	8000876 <TIM2_IRQHandler+0x32>
		if (!pressed) {
 8000858:	4b98      	ldr	r3, [pc, #608]	@ (8000abc <TIM2_IRQHandler+0x278>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	f083 0301 	eor.w	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	f000 811f 	beq.w	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 8000868:	4b94      	ldr	r3, [pc, #592]	@ (8000abc <TIM2_IRQHandler+0x278>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]

			Note_Change (C);
 800086e:	2030      	movs	r0, #48	@ 0x30
 8000870:	f000 f9f8 	bl	8000c64 <Note_Change>
 8000874:	e117      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (CS_B_GPIO_Port, CS_B_Pin)) {
 8000876:	2108      	movs	r1, #8
 8000878:	488f      	ldr	r0, [pc, #572]	@ (8000ab8 <TIM2_IRQHandler+0x274>)
 800087a:	f001 f9f1 	bl	8001c60 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10e      	bne.n	80008a2 <TIM2_IRQHandler+0x5e>
		if (!pressed) {
 8000884:	4b8d      	ldr	r3, [pc, #564]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	f083 0301 	eor.w	r3, r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 8109 	beq.w	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 8000894:	4b89      	ldr	r3, [pc, #548]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]

			Note_Change (CS);
 800089a:	2031      	movs	r0, #49	@ 0x31
 800089c:	f000 f9e2 	bl	8000c64 <Note_Change>
 80008a0:	e101      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (D_B_GPIO_Port, D_B_Pin)) {
 80008a2:	2110      	movs	r1, #16
 80008a4:	4884      	ldr	r0, [pc, #528]	@ (8000ab8 <TIM2_IRQHandler+0x274>)
 80008a6:	f001 f9db 	bl	8001c60 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10e      	bne.n	80008ce <TIM2_IRQHandler+0x8a>
		if (!pressed) {
 80008b0:	4b82      	ldr	r3, [pc, #520]	@ (8000abc <TIM2_IRQHandler+0x278>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	f083 0301 	eor.w	r3, r3, #1
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 80f3 	beq.w	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 80008c0:	4b7e      	ldr	r3, [pc, #504]	@ (8000abc <TIM2_IRQHandler+0x278>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]

			Note_Change (D);
 80008c6:	2032      	movs	r0, #50	@ 0x32
 80008c8:	f000 f9cc 	bl	8000c64 <Note_Change>
 80008cc:	e0eb      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (DS_B_GPIO_Port, DS_B_Pin)) {
 80008ce:	2120      	movs	r1, #32
 80008d0:	4879      	ldr	r0, [pc, #484]	@ (8000ab8 <TIM2_IRQHandler+0x274>)
 80008d2:	f001 f9c5 	bl	8001c60 <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10e      	bne.n	80008fa <TIM2_IRQHandler+0xb6>
		if (!pressed) {
 80008dc:	4b77      	ldr	r3, [pc, #476]	@ (8000abc <TIM2_IRQHandler+0x278>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	f083 0301 	eor.w	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 80dd 	beq.w	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 80008ec:	4b73      	ldr	r3, [pc, #460]	@ (8000abc <TIM2_IRQHandler+0x278>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]

			Note_Change (DS);
 80008f2:	2033      	movs	r0, #51	@ 0x33
 80008f4:	f000 f9b6 	bl	8000c64 <Note_Change>
 80008f8:	e0d5      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (E_B_GPIO_Port, E_B_Pin)) {
 80008fa:	2140      	movs	r1, #64	@ 0x40
 80008fc:	486e      	ldr	r0, [pc, #440]	@ (8000ab8 <TIM2_IRQHandler+0x274>)
 80008fe:	f001 f9af 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10e      	bne.n	8000926 <TIM2_IRQHandler+0xe2>
		if (!pressed) {
 8000908:	4b6c      	ldr	r3, [pc, #432]	@ (8000abc <TIM2_IRQHandler+0x278>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f083 0301 	eor.w	r3, r3, #1
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	f000 80c7 	beq.w	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 8000918:	4b68      	ldr	r3, [pc, #416]	@ (8000abc <TIM2_IRQHandler+0x278>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]

			Note_Change (E);
 800091e:	2034      	movs	r0, #52	@ 0x34
 8000920:	f000 f9a0 	bl	8000c64 <Note_Change>
 8000924:	e0bf      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (F_B_GPIO_Port, F_B_Pin)) {
 8000926:	2180      	movs	r1, #128	@ 0x80
 8000928:	4863      	ldr	r0, [pc, #396]	@ (8000ab8 <TIM2_IRQHandler+0x274>)
 800092a:	f001 f999 	bl	8001c60 <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10e      	bne.n	8000952 <TIM2_IRQHandler+0x10e>
		if (!pressed) {
 8000934:	4b61      	ldr	r3, [pc, #388]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	f083 0301 	eor.w	r3, r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 80b1 	beq.w	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 8000944:	4b5d      	ldr	r3, [pc, #372]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]

			Note_Change (F);
 800094a:	2035      	movs	r0, #53	@ 0x35
 800094c:	f000 f98a 	bl	8000c64 <Note_Change>
 8000950:	e0a9      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (FS_B_GPIO_Port, FS_B_Pin)) {
 8000952:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000956:	4858      	ldr	r0, [pc, #352]	@ (8000ab8 <TIM2_IRQHandler+0x274>)
 8000958:	f001 f982 	bl	8001c60 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10b      	bne.n	800097a <TIM2_IRQHandler+0x136>
		if (!pressed) {
 8000962:	4b56      	ldr	r3, [pc, #344]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	f083 0301 	eor.w	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 809a 	beq.w	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 8000972:	4b52      	ldr	r3, [pc, #328]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	e095      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (G_B_GPIO_Port, G_B_Pin)) {
 800097a:	2108      	movs	r1, #8
 800097c:	4850      	ldr	r0, [pc, #320]	@ (8000ac0 <TIM2_IRQHandler+0x27c>)
 800097e:	f001 f96f 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10e      	bne.n	80009a6 <TIM2_IRQHandler+0x162>
		if (!pressed) {
 8000988:	4b4c      	ldr	r3, [pc, #304]	@ (8000abc <TIM2_IRQHandler+0x278>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	f083 0301 	eor.w	r3, r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 8087 	beq.w	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 8000998:	4b48      	ldr	r3, [pc, #288]	@ (8000abc <TIM2_IRQHandler+0x278>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]

			Note_Change (G);
 800099e:	2037      	movs	r0, #55	@ 0x37
 80009a0:	f000 f960 	bl	8000c64 <Note_Change>
 80009a4:	e07f      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (GS_B_GPIO_Port, GS_B_Pin)) {
 80009a6:	2110      	movs	r1, #16
 80009a8:	4845      	ldr	r0, [pc, #276]	@ (8000ac0 <TIM2_IRQHandler+0x27c>)
 80009aa:	f001 f959 	bl	8001c60 <HAL_GPIO_ReadPin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10d      	bne.n	80009d0 <TIM2_IRQHandler+0x18c>
		if (!pressed) {
 80009b4:	4b41      	ldr	r3, [pc, #260]	@ (8000abc <TIM2_IRQHandler+0x278>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f083 0301 	eor.w	r3, r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d071      	beq.n	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 80009c2:	4b3e      	ldr	r3, [pc, #248]	@ (8000abc <TIM2_IRQHandler+0x278>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]

			Note_Change (GS);
 80009c8:	2038      	movs	r0, #56	@ 0x38
 80009ca:	f000 f94b 	bl	8000c64 <Note_Change>
 80009ce:	e06a      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (A_B_GPIO_Port, A_B_Pin)) {
 80009d0:	2120      	movs	r1, #32
 80009d2:	483b      	ldr	r0, [pc, #236]	@ (8000ac0 <TIM2_IRQHandler+0x27c>)
 80009d4:	f001 f944 	bl	8001c60 <HAL_GPIO_ReadPin>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d10d      	bne.n	80009fa <TIM2_IRQHandler+0x1b6>
		if (!pressed) {
 80009de:	4b37      	ldr	r3, [pc, #220]	@ (8000abc <TIM2_IRQHandler+0x278>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	f083 0301 	eor.w	r3, r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d05c      	beq.n	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 80009ec:	4b33      	ldr	r3, [pc, #204]	@ (8000abc <TIM2_IRQHandler+0x278>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]

			Note_Change (A);
 80009f2:	2039      	movs	r0, #57	@ 0x39
 80009f4:	f000 f936 	bl	8000c64 <Note_Change>
 80009f8:	e055      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (AS_B_GPIO_Port, AS_B_Pin)) {
 80009fa:	2140      	movs	r1, #64	@ 0x40
 80009fc:	4830      	ldr	r0, [pc, #192]	@ (8000ac0 <TIM2_IRQHandler+0x27c>)
 80009fe:	f001 f92f 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d10d      	bne.n	8000a24 <TIM2_IRQHandler+0x1e0>
		if (!pressed) {
 8000a08:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	f083 0301 	eor.w	r3, r3, #1
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d047      	beq.n	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 8000a16:	4b29      	ldr	r3, [pc, #164]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]

			Note_Change (AS);
 8000a1c:	203a      	movs	r0, #58	@ 0x3a
 8000a1e:	f000 f921 	bl	8000c64 <Note_Change>
 8000a22:	e040      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (B_B_GPIO_Port, B_B_Pin)) {
 8000a24:	2180      	movs	r1, #128	@ 0x80
 8000a26:	4826      	ldr	r0, [pc, #152]	@ (8000ac0 <TIM2_IRQHandler+0x27c>)
 8000a28:	f001 f91a 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10d      	bne.n	8000a4e <TIM2_IRQHandler+0x20a>
		if (!pressed) {
 8000a32:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	f083 0301 	eor.w	r3, r3, #1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d032      	beq.n	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]

			Note_Change (B);
 8000a46:	203b      	movs	r0, #59	@ 0x3b
 8000a48:	f000 f90c 	bl	8000c64 <Note_Change>
 8000a4c:	e02b      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else if (!HAL_GPIO_ReadPin (SP_B_GPIO_Port, SP_B_Pin)) {
 8000a4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a52:	481b      	ldr	r0, [pc, #108]	@ (8000ac0 <TIM2_IRQHandler+0x27c>)
 8000a54:	f001 f904 	bl	8001c60 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10f      	bne.n	8000a7e <TIM2_IRQHandler+0x23a>
		if (!pressed) {
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	f083 0301 	eor.w	r3, r3, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d01c      	beq.n	8000aa6 <TIM2_IRQHandler+0x262>
			pressed = true;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
			control_toggled = true;
 8000a72:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <TIM2_IRQHandler+0x280>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]

			Toggle_Control ();
 8000a78:	f000 f93e 	bl	8000cf8 <Toggle_Control>
 8000a7c:	e013      	b.n	8000aa6 <TIM2_IRQHandler+0x262>
		}
	} else {
		if (pressed && !control_toggled) {
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d009      	beq.n	8000a9a <TIM2_IRQHandler+0x256>
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <TIM2_IRQHandler+0x280>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f083 0301 	eor.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <TIM2_IRQHandler+0x256>
			Note_Change (END);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f8e5 	bl	8000c64 <Note_Change>
		}

		pressed = false;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <TIM2_IRQHandler+0x278>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
		control_toggled = false;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <TIM2_IRQHandler+0x280>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
	}




	if (elapsed_times > 4) {
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <TIM2_IRQHandler+0x284>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	f240 80b3 	bls.w	8000c16 <TIM2_IRQHandler+0x3d2>

		for (uint8_t i = 0; i < 16; i++) {
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	e017      	b.n	8000ae6 <TIM2_IRQHandler+0x2a2>
 8000ab6:	bf00      	nop
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	200001d2 	.word	0x200001d2
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	200001d0 	.word	0x200001d0
 8000ac8:	20000014 	.word	0x20000014
	        D_sum += ADC_Convert_Rank1 ();
 8000acc:	f7ff fb3e 	bl	800014c <ADC_Convert_Rank1>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b56      	ldr	r3, [pc, #344]	@ (8000c30 <TIM2_IRQHandler+0x3ec>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4b54      	ldr	r3, [pc, #336]	@ (8000c30 <TIM2_IRQHandler+0x3ec>)
 8000ade:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 16; i++) {
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d9ef      	bls.n	8000acc <TIM2_IRQHandler+0x288>
		}

		D_current = ((D_sum >> 4) * 127) / 4095;
 8000aec:	4b50      	ldr	r3, [pc, #320]	@ (8000c30 <TIM2_IRQHandler+0x3ec>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	4613      	mov	r3, r2
 8000af8:	01db      	lsls	r3, r3, #7
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	4a4d      	ldr	r2, [pc, #308]	@ (8000c34 <TIM2_IRQHandler+0x3f0>)
 8000afe:	fb82 1203 	smull	r1, r2, r2, r3
 8000b02:	441a      	add	r2, r3
 8000b04:	12d2      	asrs	r2, r2, #11
 8000b06:	17db      	asrs	r3, r3, #31
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c38 <TIM2_IRQHandler+0x3f4>)
 8000b0e:	801a      	strh	r2, [r3, #0]
		D_sum = 0;
 8000b10:	4b47      	ldr	r3, [pc, #284]	@ (8000c30 <TIM2_IRQHandler+0x3ec>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	801a      	strh	r2, [r3, #0]

		if (D_current < D_previous - 3 || D_current > D_previous + 3) {
 8000b16:	4b48      	ldr	r3, [pc, #288]	@ (8000c38 <TIM2_IRQHandler+0x3f4>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b47      	ldr	r3, [pc, #284]	@ (8000c3c <TIM2_IRQHandler+0x3f8>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	429a      	cmp	r2, r3
 8000b24:	db07      	blt.n	8000b36 <TIM2_IRQHandler+0x2f2>
 8000b26:	4b44      	ldr	r3, [pc, #272]	@ (8000c38 <TIM2_IRQHandler+0x3f4>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b43      	ldr	r3, [pc, #268]	@ (8000c3c <TIM2_IRQHandler+0x3f8>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	3303      	adds	r3, #3
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dd1f      	ble.n	8000b76 <TIM2_IRQHandler+0x332>
			D_previous = D_current;
 8000b36:	4b40      	ldr	r3, [pc, #256]	@ (8000c38 <TIM2_IRQHandler+0x3f4>)
 8000b38:	881a      	ldrh	r2, [r3, #0]
 8000b3a:	4b40      	ldr	r3, [pc, #256]	@ (8000c3c <TIM2_IRQHandler+0x3f8>)
 8000b3c:	801a      	strh	r2, [r3, #0]
			D_vol_message[3] = D_current;
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c38 <TIM2_IRQHandler+0x3f4>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b3e      	ldr	r3, [pc, #248]	@ (8000c40 <TIM2_IRQHandler+0x3fc>)
 8000b46:	70da      	strb	r2, [r3, #3]

			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000b48:	bf00      	nop
 8000b4a:	483e      	ldr	r0, [pc, #248]	@ (8000c44 <TIM2_IRQHandler+0x400>)
 8000b4c:	f006 fbda 	bl	8007304 <USBD_MIDI_GetState>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f9      	bne.n	8000b4a <TIM2_IRQHandler+0x306>
			while (locked) {}
 8000b56:	bf00      	nop
 8000b58:	4b3b      	ldr	r3, [pc, #236]	@ (8000c48 <TIM2_IRQHandler+0x404>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1fb      	bne.n	8000b58 <TIM2_IRQHandler+0x314>
			locked = true;
 8000b60:	4b39      	ldr	r3, [pc, #228]	@ (8000c48 <TIM2_IRQHandler+0x404>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
			USBD_MIDI_SendPackets (&hUsbDeviceFS, D_vol_message, 4);
 8000b66:	2204      	movs	r2, #4
 8000b68:	4935      	ldr	r1, [pc, #212]	@ (8000c40 <TIM2_IRQHandler+0x3fc>)
 8000b6a:	4836      	ldr	r0, [pc, #216]	@ (8000c44 <TIM2_IRQHandler+0x400>)
 8000b6c:	f006 fbd7 	bl	800731e <USBD_MIDI_SendPackets>
			locked = false;
 8000b70:	4b35      	ldr	r3, [pc, #212]	@ (8000c48 <TIM2_IRQHandler+0x404>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
		}

		for (uint8_t i = 0; i < 16; i++) {
 8000b76:	2300      	movs	r3, #0
 8000b78:	71bb      	strb	r3, [r7, #6]
 8000b7a:	e00c      	b.n	8000b96 <TIM2_IRQHandler+0x352>
			P_sum += ADC_Convert_Rank2 ();
 8000b7c:	f7ff fb14 	bl	80001a8 <ADC_Convert_Rank2>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b31      	ldr	r3, [pc, #196]	@ (8000c4c <TIM2_IRQHandler+0x408>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <TIM2_IRQHandler+0x408>)
 8000b8e:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 16; i++) {
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	3301      	adds	r3, #1
 8000b94:	71bb      	strb	r3, [r7, #6]
 8000b96:	79bb      	ldrb	r3, [r7, #6]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d9ef      	bls.n	8000b7c <TIM2_IRQHandler+0x338>
		}

	  	P_current = ((P_sum >> 4) * 127) / 4095;
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c4c <TIM2_IRQHandler+0x408>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	091b      	lsrs	r3, r3, #4
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	01db      	lsls	r3, r3, #7
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <TIM2_IRQHandler+0x3f0>)
 8000bae:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb2:	441a      	add	r2, r3
 8000bb4:	12d2      	asrs	r2, r2, #11
 8000bb6:	17db      	asrs	r3, r3, #31
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <TIM2_IRQHandler+0x40c>)
 8000bbe:	801a      	strh	r2, [r3, #0]
	  	P_sum = 0;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	@ (8000c4c <TIM2_IRQHandler+0x408>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	801a      	strh	r2, [r3, #0]

	  	if (P_current < P_previous - 3 || P_current > P_previous + 3) {
 8000bc6:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <TIM2_IRQHandler+0x40c>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b21      	ldr	r3, [pc, #132]	@ (8000c54 <TIM2_IRQHandler+0x410>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	db07      	blt.n	8000be6 <TIM2_IRQHandler+0x3a2>
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <TIM2_IRQHandler+0x40c>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <TIM2_IRQHandler+0x410>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	3303      	adds	r3, #3
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dd14      	ble.n	8000c10 <TIM2_IRQHandler+0x3cc>
			P_previous = P_current;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <TIM2_IRQHandler+0x40c>)
 8000be8:	881a      	ldrh	r2, [r3, #0]
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <TIM2_IRQHandler+0x410>)
 8000bec:	801a      	strh	r2, [r3, #0]
			P_vol_message[3] = P_current;
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <TIM2_IRQHandler+0x40c>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <TIM2_IRQHandler+0x414>)
 8000bf6:	70da      	strb	r2, [r3, #3]

			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000bf8:	bf00      	nop
 8000bfa:	4812      	ldr	r0, [pc, #72]	@ (8000c44 <TIM2_IRQHandler+0x400>)
 8000bfc:	f006 fb82 	bl	8007304 <USBD_MIDI_GetState>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f9      	bne.n	8000bfa <TIM2_IRQHandler+0x3b6>
			USBD_MIDI_SendPackets (&hUsbDeviceFS, P_vol_message, 4);
 8000c06:	2204      	movs	r2, #4
 8000c08:	4913      	ldr	r1, [pc, #76]	@ (8000c58 <TIM2_IRQHandler+0x414>)
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <TIM2_IRQHandler+0x400>)
 8000c0c:	f006 fb87 	bl	800731e <USBD_MIDI_SendPackets>
		}

		elapsed_times = 0;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <TIM2_IRQHandler+0x418>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	}

	elapsed_times++;
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <TIM2_IRQHandler+0x418>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <TIM2_IRQHandler+0x418>)
 8000c20:	701a      	strb	r2, [r3, #0]
//	}

//	elapsed_times++;

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c22:	480f      	ldr	r0, [pc, #60]	@ (8000c60 <TIM2_IRQHandler+0x41c>)
 8000c24:	f003 fb9e 	bl	8004364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200001d8 	.word	0x200001d8
 8000c34:	80080081 	.word	0x80080081
 8000c38:	200001d6 	.word	0x200001d6
 8000c3c:	200001d4 	.word	0x200001d4
 8000c40:	2000000c 	.word	0x2000000c
 8000c44:	2000022c 	.word	0x2000022c
 8000c48:	200001e0 	.word	0x200001e0
 8000c4c:	200001de 	.word	0x200001de
 8000c50:	200001dc 	.word	0x200001dc
 8000c54:	200001da 	.word	0x200001da
 8000c58:	20000010 	.word	0x20000010
 8000c5c:	20000014 	.word	0x20000014
 8000c60:	20000188 	.word	0x20000188

08000c64 <Note_Change>:

/* USER CODE BEGIN 1 */
void Note_Change (uint8_t value) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	if (value == END) {
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d117      	bne.n	8000ca4 <Note_Change+0x40>
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000c74:	bf00      	nop
 8000c76:	481c      	ldr	r0, [pc, #112]	@ (8000ce8 <Note_Change+0x84>)
 8000c78:	f006 fb44 	bl	8007304 <USBD_MIDI_GetState>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f9      	bne.n	8000c76 <Note_Change+0x12>
		while (locked) {}
 8000c82:	bf00      	nop
 8000c84:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <Note_Change+0x88>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1fb      	bne.n	8000c84 <Note_Change+0x20>
		locked = true;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <Note_Change+0x88>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
		USBD_MIDI_SendPackets (&hUsbDeviceFS, off_message, 4);
 8000c92:	2204      	movs	r2, #4
 8000c94:	4916      	ldr	r1, [pc, #88]	@ (8000cf0 <Note_Change+0x8c>)
 8000c96:	4814      	ldr	r0, [pc, #80]	@ (8000ce8 <Note_Change+0x84>)
 8000c98:	f006 fb41 	bl	800731e <USBD_MIDI_SendPackets>
		locked = false;
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <Note_Change+0x88>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
		while (locked) {}
		locked = true;
		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		locked = false;
	}
}
 8000ca2:	e01c      	b.n	8000cde <Note_Change+0x7a>
		on_message [2] = value;
 8000ca4:	4a13      	ldr	r2, [pc, #76]	@ (8000cf4 <Note_Change+0x90>)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	7093      	strb	r3, [r2, #2]
		off_message [2] = value;
 8000caa:	4a11      	ldr	r2, [pc, #68]	@ (8000cf0 <Note_Change+0x8c>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	7093      	strb	r3, [r2, #2]
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000cb0:	bf00      	nop
 8000cb2:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <Note_Change+0x84>)
 8000cb4:	f006 fb26 	bl	8007304 <USBD_MIDI_GetState>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f9      	bne.n	8000cb2 <Note_Change+0x4e>
		while (locked) {}
 8000cbe:	bf00      	nop
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <Note_Change+0x88>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1fb      	bne.n	8000cc0 <Note_Change+0x5c>
		locked = true;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <Note_Change+0x88>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
 8000cce:	2204      	movs	r2, #4
 8000cd0:	4908      	ldr	r1, [pc, #32]	@ (8000cf4 <Note_Change+0x90>)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <Note_Change+0x84>)
 8000cd4:	f006 fb23 	bl	800731e <USBD_MIDI_SendPackets>
		locked = false;
 8000cd8:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <Note_Change+0x88>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000022c 	.word	0x2000022c
 8000cec:	200001e0 	.word	0x200001e0
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <Toggle_Control>:

void Toggle_Control () {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	play_toggled = !play_toggled;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <Toggle_Control+0x68>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bf14      	ite	ne
 8000d04:	2301      	movne	r3, #1
 8000d06:	2300      	moveq	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <Toggle_Control+0x68>)
 8000d18:	701a      	strb	r2, [r3, #0]
	PS_message[3] = play_toggled ? PLAY : STOP;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <Toggle_Control+0x68>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <Toggle_Control+0x2e>
 8000d22:	227f      	movs	r2, #127	@ 0x7f
 8000d24:	e000      	b.n	8000d28 <Toggle_Control+0x30>
 8000d26:	2200      	movs	r2, #0
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <Toggle_Control+0x6c>)
 8000d2a:	70da      	strb	r2, [r3, #3]

	while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}\
 8000d2c:	bf00      	nop
 8000d2e:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <Toggle_Control+0x70>)
 8000d30:	f006 fae8 	bl	8007304 <USBD_MIDI_GetState>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f9      	bne.n	8000d2e <Toggle_Control+0x36>
	while (locked) {}
 8000d3a:	bf00      	nop
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <Toggle_Control+0x74>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1fb      	bne.n	8000d3c <Toggle_Control+0x44>
	locked = true;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <Toggle_Control+0x74>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
	USBD_MIDI_SendPackets (&hUsbDeviceFS, PS_message, 4);
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	4905      	ldr	r1, [pc, #20]	@ (8000d64 <Toggle_Control+0x6c>)
 8000d4e:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <Toggle_Control+0x70>)
 8000d50:	f006 fae5 	bl	800731e <USBD_MIDI_SendPackets>
	locked = false;
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <Toggle_Control+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001d1 	.word	0x200001d1
 8000d64:	20000008 	.word	0x20000008
 8000d68:	2000022c 	.word	0x2000022c
 8000d6c:	200001e0 	.word	0x200001e0

08000d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff fff8 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480b      	ldr	r0, [pc, #44]	@ (8000db0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d82:	490c      	ldr	r1, [pc, #48]	@ (8000db4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d84:	4a0c      	ldr	r2, [pc, #48]	@ (8000db8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a09      	ldr	r2, [pc, #36]	@ (8000dbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d98:	4c09      	ldr	r4, [pc, #36]	@ (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f007 ff89 	bl	8008cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000daa:	f7ff fa2b 	bl	8000204 <main>
  bx lr
 8000dae:	4770      	bx	lr
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000db8:	08008da8 	.word	0x08008da8
  ldr r2, =_sbss
 8000dbc:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000dc0:	200009dc 	.word	0x200009dc

08000dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_2_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_Init+0x28>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <HAL_Init+0x28>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 fd7b 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	200f      	movs	r0, #15
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fc3c 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fd93 	bl	800193e <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 fd5b 	bl	80018ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	@ (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000018 	.word	0x20000018
 8000e4c:	20000020 	.word	0x20000020
 8000e50:	2000001c 	.word	0x2000001c

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <HAL_IncTick+0x1c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_IncTick+0x20>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a03      	ldr	r2, [pc, #12]	@ (8000e74 <HAL_IncTick+0x20>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	20000020 	.word	0x20000020
 8000e74:	200001e4 	.word	0x200001e4

08000e78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	@ (8000e88 <HAL_GetTick+0x10>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	200001e4 	.word	0x200001e4

08000e8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e0be      	b.n	800102c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d109      	bne.n	8000ed0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fbfa 	bl	80006c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 fbf1 	bl	80016b8 <ADC_ConversionStop_Disable>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 8099 	bne.w	800101a <HAL_ADC_Init+0x18e>
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f040 8095 	bne.w	800101a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ef8:	f023 0302 	bic.w	r3, r3, #2
 8000efc:	f043 0202 	orr.w	r2, r3, #2
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7b1b      	ldrb	r3, [r3, #12]
 8000f12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f24:	d003      	beq.n	8000f2e <HAL_ADC_Init+0xa2>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d102      	bne.n	8000f34 <HAL_ADC_Init+0xa8>
 8000f2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f32:	e000      	b.n	8000f36 <HAL_ADC_Init+0xaa>
 8000f34:	2300      	movs	r3, #0
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7d1b      	ldrb	r3, [r3, #20]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d119      	bne.n	8000f78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7b1b      	ldrb	r3, [r3, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d109      	bne.n	8000f60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	035a      	lsls	r2, r3, #13
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	e00b      	b.n	8000f78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f64:	f043 0220 	orr.w	r2, r3, #32
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f70:	f043 0201 	orr.w	r2, r3, #1
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <HAL_ADC_Init+0x1a8>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6812      	ldr	r2, [r2, #0]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fa8:	d003      	beq.n	8000fb2 <HAL_ADC_Init+0x126>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d104      	bne.n	8000fbc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	051b      	lsls	r3, r3, #20
 8000fba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <HAL_ADC_Init+0x1ac>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d10b      	bne.n	8000ff8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fea:	f023 0303 	bic.w	r3, r3, #3
 8000fee:	f043 0201 	orr.w	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff6:	e018      	b.n	800102a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ffc:	f023 0312 	bic.w	r3, r3, #18
 8001000:	f043 0210 	orr.w	r2, r3, #16
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100c:	f043 0201 	orr.w	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001018:	e007      	b.n	800102a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101e:	f043 0210 	orr.w	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800102a:	7dfb      	ldrb	r3, [r7, #23]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	ffe1f7fd 	.word	0xffe1f7fd
 8001038:	ff1f0efe 	.word	0xff1f0efe

0800103c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_ADC_Start+0x1a>
 8001052:	2302      	movs	r3, #2
 8001054:	e098      	b.n	8001188 <HAL_ADC_Start+0x14c>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 fad0 	bl	8001604 <ADC_Enable>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	2b00      	cmp	r3, #0
 800106c:	f040 8087 	bne.w	800117e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a41      	ldr	r2, [pc, #260]	@ (8001190 <HAL_ADC_Start+0x154>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d105      	bne.n	800109a <HAL_ADC_Start+0x5e>
 800108e:	4b41      	ldr	r3, [pc, #260]	@ (8001194 <HAL_ADC_Start+0x158>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d115      	bne.n	80010c6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d026      	beq.n	8001102 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c4:	e01d      	b.n	8001102 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001194 <HAL_ADC_Start+0x158>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d004      	beq.n	80010e6 <HAL_ADC_Start+0xaa>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001190 <HAL_ADC_Start+0x154>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d10d      	bne.n	8001102 <HAL_ADC_Start+0xc6>
 80010e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <HAL_ADC_Start+0x158>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001112:	f023 0206 	bic.w	r2, r3, #6
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	62da      	str	r2, [r3, #44]	@ 0x2c
 800111a:	e002      	b.n	8001122 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f06f 0202 	mvn.w	r2, #2
 8001132:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800113e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001142:	d113      	bne.n	800116c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001148:	4a11      	ldr	r2, [pc, #68]	@ (8001190 <HAL_ADC_Start+0x154>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d105      	bne.n	800115a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_ADC_Start+0x158>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001156:	2b00      	cmp	r3, #0
 8001158:	d108      	bne.n	800116c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	e00c      	b.n	8001186 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	e003      	b.n	8001186 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40012800 	.word	0x40012800
 8001194:	40012400 	.word	0x40012400

08001198 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_ADC_Stop+0x1a>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e01a      	b.n	80011e8 <HAL_ADC_Stop+0x50>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 fa7c 	bl	80016b8 <ADC_ConversionStop_Disable>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d109      	bne.n	80011de <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011d2:	f023 0301 	bic.w	r3, r3, #1
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001206:	f7ff fe37 	bl	8000e78 <HAL_GetTick>
 800120a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00b      	beq.n	8001232 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121e:	f043 0220 	orr.w	r2, r3, #32
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0d3      	b.n	80013da <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800123c:	2b00      	cmp	r3, #0
 800123e:	d131      	bne.n	80012a4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001246:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800124a:	2b00      	cmp	r3, #0
 800124c:	d12a      	bne.n	80012a4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800124e:	e021      	b.n	8001294 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001256:	d01d      	beq.n	8001294 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <HAL_ADC_PollForConversion+0x7e>
 800125e:	f7ff fe0b 	bl	8000e78 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d212      	bcs.n	8001294 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10b      	bne.n	8001294 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	f043 0204 	orr.w	r2, r3, #4
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e0a2      	b.n	80013da <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0d6      	beq.n	8001250 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012a2:	e070      	b.n	8001386 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80012a4:	4b4f      	ldr	r3, [pc, #316]	@ (80013e4 <HAL_ADC_PollForConversion+0x1f4>)
 80012a6:	681c      	ldr	r4, [r3, #0]
 80012a8:	2002      	movs	r0, #2
 80012aa:	f002 ff03 	bl	80040b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80012ae:	4603      	mov	r3, r0
 80012b0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6919      	ldr	r1, [r3, #16]
 80012ba:	4b4b      	ldr	r3, [pc, #300]	@ (80013e8 <HAL_ADC_PollForConversion+0x1f8>)
 80012bc:	400b      	ands	r3, r1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d118      	bne.n	80012f4 <HAL_ADC_PollForConversion+0x104>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68d9      	ldr	r1, [r3, #12]
 80012c8:	4b48      	ldr	r3, [pc, #288]	@ (80013ec <HAL_ADC_PollForConversion+0x1fc>)
 80012ca:	400b      	ands	r3, r1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d111      	bne.n	80012f4 <HAL_ADC_PollForConversion+0x104>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6919      	ldr	r1, [r3, #16]
 80012d6:	4b46      	ldr	r3, [pc, #280]	@ (80013f0 <HAL_ADC_PollForConversion+0x200>)
 80012d8:	400b      	ands	r3, r1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d108      	bne.n	80012f0 <HAL_ADC_PollForConversion+0x100>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68d9      	ldr	r1, [r3, #12]
 80012e4:	4b43      	ldr	r3, [pc, #268]	@ (80013f4 <HAL_ADC_PollForConversion+0x204>)
 80012e6:	400b      	ands	r3, r1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_ADC_PollForConversion+0x100>
 80012ec:	2314      	movs	r3, #20
 80012ee:	e020      	b.n	8001332 <HAL_ADC_PollForConversion+0x142>
 80012f0:	2329      	movs	r3, #41	@ 0x29
 80012f2:	e01e      	b.n	8001332 <HAL_ADC_PollForConversion+0x142>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6919      	ldr	r1, [r3, #16]
 80012fa:	4b3d      	ldr	r3, [pc, #244]	@ (80013f0 <HAL_ADC_PollForConversion+0x200>)
 80012fc:	400b      	ands	r3, r1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d106      	bne.n	8001310 <HAL_ADC_PollForConversion+0x120>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68d9      	ldr	r1, [r3, #12]
 8001308:	4b3a      	ldr	r3, [pc, #232]	@ (80013f4 <HAL_ADC_PollForConversion+0x204>)
 800130a:	400b      	ands	r3, r1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00d      	beq.n	800132c <HAL_ADC_PollForConversion+0x13c>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6919      	ldr	r1, [r3, #16]
 8001316:	4b38      	ldr	r3, [pc, #224]	@ (80013f8 <HAL_ADC_PollForConversion+0x208>)
 8001318:	400b      	ands	r3, r1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d108      	bne.n	8001330 <HAL_ADC_PollForConversion+0x140>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68d9      	ldr	r1, [r3, #12]
 8001324:	4b34      	ldr	r3, [pc, #208]	@ (80013f8 <HAL_ADC_PollForConversion+0x208>)
 8001326:	400b      	ands	r3, r1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_ADC_PollForConversion+0x140>
 800132c:	2354      	movs	r3, #84	@ 0x54
 800132e:	e000      	b.n	8001332 <HAL_ADC_PollForConversion+0x142>
 8001330:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001338:	e021      	b.n	800137e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d01a      	beq.n	8001378 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <HAL_ADC_PollForConversion+0x168>
 8001348:	f7ff fd96 	bl	8000e78 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d20f      	bcs.n	8001378 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d90b      	bls.n	8001378 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001364:	f043 0204 	orr.w	r2, r3, #4
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e030      	b.n	80013da <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3301      	adds	r3, #1
 800137c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	429a      	cmp	r2, r3
 8001384:	d8d9      	bhi.n	800133a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f06f 0212 	mvn.w	r2, #18
 800138e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001394:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013a6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013aa:	d115      	bne.n	80013d8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d111      	bne.n	80013d8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d0:	f043 0201 	orr.w	r2, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000018 	.word	0x20000018
 80013e8:	24924924 	.word	0x24924924
 80013ec:	00924924 	.word	0x00924924
 80013f0:	12492492 	.word	0x12492492
 80013f4:	00492492 	.word	0x00492492
 80013f8:	00249249 	.word	0x00249249

080013fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x20>
 8001430:	2302      	movs	r3, #2
 8001432:	e0dc      	b.n	80015ee <HAL_ADC_ConfigChannel+0x1da>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b06      	cmp	r3, #6
 8001442:	d81c      	bhi.n	800147e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	3b05      	subs	r3, #5
 8001456:	221f      	movs	r2, #31
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	4019      	ands	r1, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	fa00 f203 	lsl.w	r2, r0, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	635a      	str	r2, [r3, #52]	@ 0x34
 800147c:	e03c      	b.n	80014f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b0c      	cmp	r3, #12
 8001484:	d81c      	bhi.n	80014c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	3b23      	subs	r3, #35	@ 0x23
 8001498:	221f      	movs	r2, #31
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	4019      	ands	r1, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b23      	subs	r3, #35	@ 0x23
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80014be:	e01b      	b.n	80014f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	3b41      	subs	r3, #65	@ 0x41
 80014d2:	221f      	movs	r2, #31
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	4019      	ands	r1, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b41      	subs	r3, #65	@ 0x41
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b09      	cmp	r3, #9
 80014fe:	d91c      	bls.n	800153a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68d9      	ldr	r1, [r3, #12]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	3b1e      	subs	r3, #30
 8001512:	2207      	movs	r2, #7
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	4019      	ands	r1, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	6898      	ldr	r0, [r3, #8]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	3b1e      	subs	r3, #30
 800152c:	fa00 f203 	lsl.w	r2, r0, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	e019      	b.n	800156e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6919      	ldr	r1, [r3, #16]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	2207      	movs	r2, #7
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	4019      	ands	r1, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6898      	ldr	r0, [r3, #8]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	fa00 f203 	lsl.w	r2, r0, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800157a:	2b11      	cmp	r3, #17
 800157c:	d132      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1d      	ldr	r2, [pc, #116]	@ (80015f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d125      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d126      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80015a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d11a      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ae:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <HAL_ADC_ConfigChannel+0x1e8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a13      	ldr	r2, [pc, #76]	@ (8001600 <HAL_ADC_ConfigChannel+0x1ec>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	0c9a      	lsrs	r2, r3, #18
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015c4:	e002      	b.n	80015cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f9      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x1b2>
 80015d2:	e007      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	f043 0220 	orr.w	r2, r3, #32
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40012400 	.word	0x40012400
 80015fc:	20000018 	.word	0x20000018
 8001600:	431bde83 	.word	0x431bde83

08001604 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b01      	cmp	r3, #1
 8001620:	d040      	beq.n	80016a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001632:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <ADC_Enable+0xac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a1f      	ldr	r2, [pc, #124]	@ (80016b4 <ADC_Enable+0xb0>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	0c9b      	lsrs	r3, r3, #18
 800163e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001640:	e002      	b.n	8001648 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3b01      	subs	r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f9      	bne.n	8001642 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800164e:	f7ff fc13 	bl	8000e78 <HAL_GetTick>
 8001652:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001654:	e01f      	b.n	8001696 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001656:	f7ff fc0f 	bl	8000e78 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d918      	bls.n	8001696 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d011      	beq.n	8001696 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001676:	f043 0210 	orr.w	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001682:	f043 0201 	orr.w	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e007      	b.n	80016a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d1d8      	bne.n	8001656 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000018 	.word	0x20000018
 80016b4:	431bde83 	.word	0x431bde83

080016b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d12e      	bne.n	8001730 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016e2:	f7ff fbc9 	bl	8000e78 <HAL_GetTick>
 80016e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016e8:	e01b      	b.n	8001722 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016ea:	f7ff fbc5 	bl	8000e78 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d914      	bls.n	8001722 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b01      	cmp	r3, #1
 8001704:	d10d      	bne.n	8001722 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	f043 0210 	orr.w	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e007      	b.n	8001732 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b01      	cmp	r3, #1
 800172e:	d0dc      	beq.n	80016ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4906      	ldr	r1, [pc, #24]	@ (80017d4 <__NVIC_EnableIRQ+0x34>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100

080017d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	@ (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	@ (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	@ 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	4313      	orrs	r3, r2
         );
}
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	@ 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f7ff ff90 	bl	80017d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff2d 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff42 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff90 	bl	800182c <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5f 	bl	80017d8 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff35 	bl	80017a0 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b08b      	sub	sp, #44	@ 0x2c
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196a:	e169      	b.n	8001c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800196c:	2201      	movs	r2, #1
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 8158 	bne.w	8001c3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4a9a      	ldr	r2, [pc, #616]	@ (8001bf8 <HAL_GPIO_Init+0x2a0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d05e      	beq.n	8001a52 <HAL_GPIO_Init+0xfa>
 8001994:	4a98      	ldr	r2, [pc, #608]	@ (8001bf8 <HAL_GPIO_Init+0x2a0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d875      	bhi.n	8001a86 <HAL_GPIO_Init+0x12e>
 800199a:	4a98      	ldr	r2, [pc, #608]	@ (8001bfc <HAL_GPIO_Init+0x2a4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d058      	beq.n	8001a52 <HAL_GPIO_Init+0xfa>
 80019a0:	4a96      	ldr	r2, [pc, #600]	@ (8001bfc <HAL_GPIO_Init+0x2a4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d86f      	bhi.n	8001a86 <HAL_GPIO_Init+0x12e>
 80019a6:	4a96      	ldr	r2, [pc, #600]	@ (8001c00 <HAL_GPIO_Init+0x2a8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d052      	beq.n	8001a52 <HAL_GPIO_Init+0xfa>
 80019ac:	4a94      	ldr	r2, [pc, #592]	@ (8001c00 <HAL_GPIO_Init+0x2a8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d869      	bhi.n	8001a86 <HAL_GPIO_Init+0x12e>
 80019b2:	4a94      	ldr	r2, [pc, #592]	@ (8001c04 <HAL_GPIO_Init+0x2ac>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d04c      	beq.n	8001a52 <HAL_GPIO_Init+0xfa>
 80019b8:	4a92      	ldr	r2, [pc, #584]	@ (8001c04 <HAL_GPIO_Init+0x2ac>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d863      	bhi.n	8001a86 <HAL_GPIO_Init+0x12e>
 80019be:	4a92      	ldr	r2, [pc, #584]	@ (8001c08 <HAL_GPIO_Init+0x2b0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d046      	beq.n	8001a52 <HAL_GPIO_Init+0xfa>
 80019c4:	4a90      	ldr	r2, [pc, #576]	@ (8001c08 <HAL_GPIO_Init+0x2b0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d85d      	bhi.n	8001a86 <HAL_GPIO_Init+0x12e>
 80019ca:	2b12      	cmp	r3, #18
 80019cc:	d82a      	bhi.n	8001a24 <HAL_GPIO_Init+0xcc>
 80019ce:	2b12      	cmp	r3, #18
 80019d0:	d859      	bhi.n	8001a86 <HAL_GPIO_Init+0x12e>
 80019d2:	a201      	add	r2, pc, #4	@ (adr r2, 80019d8 <HAL_GPIO_Init+0x80>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	08001a53 	.word	0x08001a53
 80019dc:	08001a2d 	.word	0x08001a2d
 80019e0:	08001a3f 	.word	0x08001a3f
 80019e4:	08001a81 	.word	0x08001a81
 80019e8:	08001a87 	.word	0x08001a87
 80019ec:	08001a87 	.word	0x08001a87
 80019f0:	08001a87 	.word	0x08001a87
 80019f4:	08001a87 	.word	0x08001a87
 80019f8:	08001a87 	.word	0x08001a87
 80019fc:	08001a87 	.word	0x08001a87
 8001a00:	08001a87 	.word	0x08001a87
 8001a04:	08001a87 	.word	0x08001a87
 8001a08:	08001a87 	.word	0x08001a87
 8001a0c:	08001a87 	.word	0x08001a87
 8001a10:	08001a87 	.word	0x08001a87
 8001a14:	08001a87 	.word	0x08001a87
 8001a18:	08001a87 	.word	0x08001a87
 8001a1c:	08001a35 	.word	0x08001a35
 8001a20:	08001a49 	.word	0x08001a49
 8001a24:	4a79      	ldr	r2, [pc, #484]	@ (8001c0c <HAL_GPIO_Init+0x2b4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a2a:	e02c      	b.n	8001a86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	623b      	str	r3, [r7, #32]
          break;
 8001a32:	e029      	b.n	8001a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	623b      	str	r3, [r7, #32]
          break;
 8001a3c:	e024      	b.n	8001a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	3308      	adds	r3, #8
 8001a44:	623b      	str	r3, [r7, #32]
          break;
 8001a46:	e01f      	b.n	8001a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	330c      	adds	r3, #12
 8001a4e:	623b      	str	r3, [r7, #32]
          break;
 8001a50:	e01a      	b.n	8001a88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	623b      	str	r3, [r7, #32]
          break;
 8001a5e:	e013      	b.n	8001a88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a68:	2308      	movs	r3, #8
 8001a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	611a      	str	r2, [r3, #16]
          break;
 8001a72:	e009      	b.n	8001a88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a74:	2308      	movs	r3, #8
 8001a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	615a      	str	r2, [r3, #20]
          break;
 8001a7e:	e003      	b.n	8001a88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a80:	2300      	movs	r3, #0
 8001a82:	623b      	str	r3, [r7, #32]
          break;
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x130>
          break;
 8001a86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2bff      	cmp	r3, #255	@ 0xff
 8001a8c:	d801      	bhi.n	8001a92 <HAL_GPIO_Init+0x13a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	e001      	b.n	8001a96 <HAL_GPIO_Init+0x13e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3304      	adds	r3, #4
 8001a96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2bff      	cmp	r3, #255	@ 0xff
 8001a9c:	d802      	bhi.n	8001aa4 <HAL_GPIO_Init+0x14c>
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0x152>
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	3b08      	subs	r3, #8
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	210f      	movs	r1, #15
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	401a      	ands	r2, r3
 8001abc:	6a39      	ldr	r1, [r7, #32]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80b1 	beq.w	8001c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c10 <HAL_GPIO_Init+0x2b8>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a4c      	ldr	r2, [pc, #304]	@ (8001c10 <HAL_GPIO_Init+0x2b8>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8001c10 <HAL_GPIO_Init+0x2b8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001af0:	4a48      	ldr	r2, [pc, #288]	@ (8001c14 <HAL_GPIO_Init+0x2bc>)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	220f      	movs	r2, #15
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a40      	ldr	r2, [pc, #256]	@ (8001c18 <HAL_GPIO_Init+0x2c0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d013      	beq.n	8001b44 <HAL_GPIO_Init+0x1ec>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d00d      	beq.n	8001b40 <HAL_GPIO_Init+0x1e8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a3e      	ldr	r2, [pc, #248]	@ (8001c20 <HAL_GPIO_Init+0x2c8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d007      	beq.n	8001b3c <HAL_GPIO_Init+0x1e4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d101      	bne.n	8001b38 <HAL_GPIO_Init+0x1e0>
 8001b34:	2303      	movs	r3, #3
 8001b36:	e006      	b.n	8001b46 <HAL_GPIO_Init+0x1ee>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e004      	b.n	8001b46 <HAL_GPIO_Init+0x1ee>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e002      	b.n	8001b46 <HAL_GPIO_Init+0x1ee>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_GPIO_Init+0x1ee>
 8001b44:	2300      	movs	r3, #0
 8001b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b48:	f002 0203 	and.w	r2, r2, #3
 8001b4c:	0092      	lsls	r2, r2, #2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b56:	492f      	ldr	r1, [pc, #188]	@ (8001c14 <HAL_GPIO_Init+0x2bc>)
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b70:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	492c      	ldr	r1, [pc, #176]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4928      	ldr	r1, [pc, #160]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b98:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	4922      	ldr	r1, [pc, #136]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	491e      	ldr	r1, [pc, #120]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4918      	ldr	r1, [pc, #96]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4914      	ldr	r1, [pc, #80]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d021      	beq.n	8001c2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	490e      	ldr	r1, [pc, #56]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e021      	b.n	8001c3a <HAL_GPIO_Init+0x2e2>
 8001bf6:	bf00      	nop
 8001bf8:	10320000 	.word	0x10320000
 8001bfc:	10310000 	.word	0x10310000
 8001c00:	10220000 	.word	0x10220000
 8001c04:	10210000 	.word	0x10210000
 8001c08:	10120000 	.word	0x10120000
 8001c0c:	10110000 	.word	0x10110000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40010000 	.word	0x40010000
 8001c18:	40010800 	.word	0x40010800
 8001c1c:	40010c00 	.word	0x40010c00
 8001c20:	40011000 	.word	0x40011000
 8001c24:	40011400 	.word	0x40011400
 8001c28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_GPIO_Init+0x304>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	4909      	ldr	r1, [pc, #36]	@ (8001c5c <HAL_GPIO_Init+0x304>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f47f ae8e 	bne.w	800196c <HAL_GPIO_Init+0x14>
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	372c      	adds	r7, #44	@ 0x2c
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e001      	b.n	8001c82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0e8      	b.n	8001e72 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d106      	bne.n	8001cba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f006 fd6d 	bl	8008794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fec4 	bl	8004a5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cdc:	f002 fe9a 	bl	8004a14 <USB_CoreInit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0bf      	b.n	8001e72 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fec8 	bl	8004a8e <USB_SetCurrentMode>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0b0      	b.n	8001e72 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	e03e      	b.n	8001d94 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	3311      	adds	r3, #17
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3310      	adds	r3, #16
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3313      	adds	r3, #19
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	3320      	adds	r3, #32
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	440b      	add	r3, r1
 8001d74:	3324      	adds	r3, #36	@ 0x24
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3301      	adds	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	791b      	ldrb	r3, [r3, #4]
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3bb      	bcc.n	8001d16 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e044      	b.n	8001e2e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	440b      	add	r3, r1
 8001df4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	791b      	ldrb	r3, [r3, #4]
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3b5      	bcc.n	8001da4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e42:	f002 fe30 	bl	8004aa6 <USB_DevInit>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e00c      	b.n	8001e72 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f005 f8af 	bl	8006fce <USB_DevDisconnect>

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_PCD_Start+0x16>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e016      	b.n	8001ebe <HAL_PCD_Start+0x44>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fdc6 	bl	8004a2e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f006 feca 	bl	8008c3e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f005 f883 	bl	8006fba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b088      	sub	sp, #32
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f005 f885 	bl	8006fe2 <USB_ReadInterrupts>
 8001ed8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fb1a 	bl	800251e <PCD_EP_ISR_Handler>

    return;
 8001eea:	e119      	b.n	8002120 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d013      	beq.n	8001f1e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f006 fcbb 	bl	800888a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f14:	2100      	movs	r1, #0
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f905 	bl	8002126 <HAL_PCD_SetAddress>

    return;
 8001f1c:	e100      	b.n	8002120 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00c      	beq.n	8001f42 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001f40:	e0ee      	b.n	8002120 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00c      	beq.n	8001f66 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001f64:	e0dc      	b.n	8002120 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d027      	beq.n	8001fc0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0204 	bic.w	r2, r2, #4
 8001f82:	b292      	uxth	r2, r2
 8001f84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0208 	bic.w	r2, r2, #8
 8001f9a:	b292      	uxth	r2, r2
 8001f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f006 fcab 	bl	80088fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001fbe:	e0af      	b.n	8002120 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8083 	beq.w	80020d2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	77fb      	strb	r3, [r7, #31]
 8001fd0:	e010      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	7ffb      	ldrb	r3, [r7, #31]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	441a      	add	r2, r3
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	8812      	ldrh	r2, [r2, #0]
 8001fe2:	b292      	uxth	r2, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	3320      	adds	r3, #32
 8001fe8:	443b      	add	r3, r7
 8001fea:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001fee:	7ffb      	ldrb	r3, [r7, #31]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	77fb      	strb	r3, [r7, #31]
 8001ff4:	7ffb      	ldrb	r3, [r7, #31]
 8001ff6:	2b07      	cmp	r3, #7
 8001ff8:	d9eb      	bls.n	8001fd2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	b292      	uxth	r2, r2
 800200e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	b292      	uxth	r2, r2
 8002026:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800202a:	bf00      	nop
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002034:	b29b      	uxth	r3, r3
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f6      	beq.n	800202c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002046:	b29a      	uxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002050:	b292      	uxth	r2, r2
 8002052:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	77fb      	strb	r3, [r7, #31]
 800205a:	e00f      	b.n	800207c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800205c:	7ffb      	ldrb	r3, [r7, #31]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4611      	mov	r1, r2
 8002064:	7ffa      	ldrb	r2, [r7, #31]
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	440a      	add	r2, r1
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	3320      	adds	r3, #32
 800206e:	443b      	add	r3, r7
 8002070:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002074:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002076:	7ffb      	ldrb	r3, [r7, #31]
 8002078:	3301      	adds	r3, #1
 800207a:	77fb      	strb	r3, [r7, #31]
 800207c:	7ffb      	ldrb	r3, [r7, #31]
 800207e:	2b07      	cmp	r3, #7
 8002080:	d9ec      	bls.n	800205c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0208 	orr.w	r2, r2, #8
 8002094:	b292      	uxth	r2, r2
 8002096:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ac:	b292      	uxth	r2, r2
 80020ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0204 	orr.w	r2, r2, #4
 80020c4:	b292      	uxth	r2, r2
 80020c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f006 fbfc 	bl	80088c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80020d0:	e026      	b.n	8002120 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00f      	beq.n	80020fc <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020ee:	b292      	uxth	r2, r2
 80020f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f006 fbba 	bl	800886e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80020fa:	e011      	b.n	8002120 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00c      	beq.n	8002120 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800210e:	b29a      	uxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002118:	b292      	uxth	r2, r2
 800211a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800211e:	bf00      	nop
  }
}
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_PCD_SetAddress+0x1a>
 800213c:	2302      	movs	r3, #2
 800213e:	e012      	b.n	8002166 <HAL_PCD_SetAddress+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f004 ff1c 	bl	8006f94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	4608      	mov	r0, r1
 8002178:	4611      	mov	r1, r2
 800217a:	461a      	mov	r2, r3
 800217c:	4603      	mov	r3, r0
 800217e:	70fb      	strb	r3, [r7, #3]
 8002180:	460b      	mov	r3, r1
 8002182:	803b      	strh	r3, [r7, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800218c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002190:	2b00      	cmp	r3, #0
 8002192:	da0e      	bge.n	80021b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 0207 	and.w	r2, r3, #7
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	3310      	adds	r3, #16
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	705a      	strb	r2, [r3, #1]
 80021b0:	e00e      	b.n	80021d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 0207 	and.w	r2, r3, #7
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021dc:	883a      	ldrh	r2, [r7, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	78ba      	ldrb	r2, [r7, #2]
 80021e6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021e8:	78bb      	ldrb	r3, [r7, #2]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d102      	bne.n	80021f4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_PCD_EP_Open+0x94>
 80021fe:	2302      	movs	r3, #2
 8002200:	e00e      	b.n	8002220 <HAL_PCD_EP_Open+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68f9      	ldr	r1, [r7, #12]
 8002210:	4618      	mov	r0, r3
 8002212:	f002 fc65 	bl	8004ae0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800221e:	7afb      	ldrb	r3, [r7, #11]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002238:	2b00      	cmp	r3, #0
 800223a:	da0e      	bge.n	800225a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 0207 	and.w	r2, r3, #7
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	3310      	adds	r3, #16
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	705a      	strb	r2, [r3, #1]
 8002258:	e00e      	b.n	8002278 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 0207 	and.w	r2, r3, #7
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	b2da      	uxtb	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_PCD_EP_Close+0x6a>
 800228e:	2302      	movs	r3, #2
 8002290:	e00e      	b.n	80022b0 <HAL_PCD_EP_Close+0x88>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68f9      	ldr	r1, [r7, #12]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 ffdd 	bl	8005260 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	460b      	mov	r3, r1
 80022c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	f003 0207 	and.w	r2, r3, #7
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4413      	add	r3, r2
 80022de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2200      	movs	r2, #0
 80022f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f8:	7afb      	ldrb	r3, [r7, #11]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6979      	ldr	r1, [r7, #20]
 800230a:	4618      	mov	r0, r3
 800230c:	f003 f994 	bl	8005638 <USB_EPStartXfer>

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 0207 	and.w	r2, r3, #7
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800233c:	681b      	ldr	r3, [r3, #0]
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	460b      	mov	r3, r1
 8002356:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002358:	7afb      	ldrb	r3, [r7, #11]
 800235a:	f003 0207 	and.w	r2, r3, #7
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	3310      	adds	r3, #16
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2201      	movs	r2, #1
 8002392:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002394:	7afb      	ldrb	r3, [r7, #11]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	b2da      	uxtb	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6979      	ldr	r1, [r7, #20]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 f946 	bl	8005638 <USB_EPStartXfer>

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	7912      	ldrb	r2, [r2, #4]
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e04c      	b.n	800246e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	da0e      	bge.n	80023fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	f003 0207 	and.w	r2, r3, #7
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	3310      	adds	r3, #16
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	705a      	strb	r2, [r3, #1]
 80023f8:	e00c      	b.n	8002414 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	b2da      	uxtb	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_PCD_EP_SetStall+0x7e>
 8002430:	2302      	movs	r3, #2
 8002432:	e01c      	b.n	800246e <HAL_PCD_EP_SetStall+0xb8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68f9      	ldr	r1, [r7, #12]
 8002442:	4618      	mov	r0, r3
 8002444:	f004 fca9 	bl	8006d9a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	2b00      	cmp	r3, #0
 8002450:	d108      	bne.n	8002464 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f004 fdce 	bl	8007000 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	7912      	ldrb	r2, [r2, #4]
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e040      	b.n	8002516 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002498:	2b00      	cmp	r3, #0
 800249a:	da0e      	bge.n	80024ba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	f003 0207 	and.w	r2, r3, #7
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	3310      	adds	r3, #16
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	705a      	strb	r2, [r3, #1]
 80024b8:	e00e      	b.n	80024d8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f003 0207 	and.w	r2, r3, #7
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	4413      	add	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_PCD_EP_ClrStall+0x82>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e00e      	b.n	8002516 <HAL_PCD_EP_ClrStall+0xa0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	4618      	mov	r0, r3
 8002508:	f004 fc97 	bl	8006e3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b096      	sub	sp, #88	@ 0x58
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002526:	e3bb      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002530:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002534:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002542:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 8175 	bne.w	8002836 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800254c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d14e      	bne.n	80025f6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002568:	81fb      	strh	r3, [r7, #14]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	89fb      	ldrh	r3, [r7, #14]
 8002570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002578:	b29b      	uxth	r3, r3
 800257a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3310      	adds	r3, #16
 8002580:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	3302      	adds	r3, #2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	441a      	add	r2, r3
 80025b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025bc:	2100      	movs	r1, #0
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f006 f93b 	bl	800883a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7b5b      	ldrb	r3, [r3, #13]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8368 	beq.w	8002ca0 <PCD_EP_ISR_Handler+0x782>
 80025d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 8363 	bne.w	8002ca0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	7b5b      	ldrb	r3, [r3, #13]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	735a      	strb	r2, [r3, #13]
 80025f4:	e354      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025fc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002608:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800260c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002610:	2b00      	cmp	r3, #0
 8002612:	d034      	beq.n	800267e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	3306      	adds	r3, #6
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800263c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800263e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800264a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800264e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002650:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002652:	b29b      	uxth	r3, r3
 8002654:	f004 fd24 	bl	80070a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29a      	uxth	r2, r3
 8002660:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002664:	4013      	ands	r3, r2
 8002666:	823b      	strh	r3, [r7, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	8a3a      	ldrh	r2, [r7, #16]
 800266e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002672:	b292      	uxth	r2, r2
 8002674:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f006 f8b2 	bl	80087e0 <HAL_PCD_SetupStageCallback>
 800267c:	e310      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800267e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002682:	2b00      	cmp	r3, #0
 8002684:	f280 830c 	bge.w	8002ca0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29a      	uxth	r2, r3
 8002690:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002694:	4013      	ands	r3, r2
 8002696:	83fb      	strh	r3, [r7, #30]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	8bfa      	ldrh	r2, [r7, #30]
 800269e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026a2:	b292      	uxth	r2, r2
 80026a4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	3306      	adds	r3, #6
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d019      	beq.n	800270e <PCD_EP_ISR_Handler+0x1f0>
 80026da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d015      	beq.n	800270e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e8:	6959      	ldr	r1, [r3, #20]
 80026ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f004 fcd4 	bl	80070a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	441a      	add	r2, r3
 8002702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002704:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002706:	2100      	movs	r1, #0
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f006 f87b 	bl	8008804 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002718:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800271c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 82bd 	bne.w	8002ca0 <PCD_EP_ISR_Handler+0x782>
 8002726:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800272a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800272e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002732:	f000 82b5 	beq.w	8002ca0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002744:	b29b      	uxth	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002760:	b29a      	uxth	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	801a      	strh	r2, [r3, #0]
 8002766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b3e      	cmp	r3, #62	@ 0x3e
 800276c:	d91d      	bls.n	80027aa <PCD_EP_ISR_Handler+0x28c>
 800276e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	647b      	str	r3, [r7, #68]	@ 0x44
 8002776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <PCD_EP_ISR_Handler+0x26a>
 8002782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002784:	3b01      	subs	r3, #1
 8002786:	647b      	str	r3, [r7, #68]	@ 0x44
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29a      	uxth	r2, r3
 800278e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002790:	b29b      	uxth	r3, r3
 8002792:	029b      	lsls	r3, r3, #10
 8002794:	b29b      	uxth	r3, r3
 8002796:	4313      	orrs	r3, r2
 8002798:	b29b      	uxth	r3, r3
 800279a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	e026      	b.n	80027f8 <PCD_EP_ISR_Handler+0x2da>
 80027aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <PCD_EP_ISR_Handler+0x2aa>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	801a      	strh	r2, [r3, #0]
 80027c6:	e017      	b.n	80027f8 <PCD_EP_ISR_Handler+0x2da>
 80027c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80027d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <PCD_EP_ISR_Handler+0x2c4>
 80027dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027de:	3301      	adds	r3, #1
 80027e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	029b      	lsls	r3, r3, #10
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4313      	orrs	r3, r2
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002808:	827b      	strh	r3, [r7, #18]
 800280a:	8a7b      	ldrh	r3, [r7, #18]
 800280c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002810:	827b      	strh	r3, [r7, #18]
 8002812:	8a7b      	ldrh	r3, [r7, #18]
 8002814:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002818:	827b      	strh	r3, [r7, #18]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	8a7b      	ldrh	r3, [r7, #18]
 8002820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800282c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002830:	b29b      	uxth	r3, r3
 8002832:	8013      	strh	r3, [r2, #0]
 8002834:	e234      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800284a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800284e:	2b00      	cmp	r3, #0
 8002850:	f280 80fc 	bge.w	8002a4c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29a      	uxth	r2, r3
 8002866:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800286a:	4013      	ands	r3, r2
 800286c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002882:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002886:	b292      	uxth	r2, r2
 8002888:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800288a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a2:	7b1b      	ldrb	r3, [r3, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d125      	bne.n	80028f4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	3306      	adds	r3, #6
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80028d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8092 	beq.w	8002a02 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e4:	6959      	ldr	r1, [r3, #20]
 80028e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e8:	88da      	ldrh	r2, [r3, #6]
 80028ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028ee:	f004 fbd7 	bl	80070a0 <USB_ReadPMA>
 80028f2:	e086      	b.n	8002a02 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f6:	78db      	ldrb	r3, [r3, #3]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d10a      	bne.n	8002912 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002900:	461a      	mov	r2, r3
 8002902:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9d9 	bl	8002cbc <HAL_PCD_EP_DB_Receive>
 800290a:	4603      	mov	r3, r0
 800290c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002910:	e077      	b.n	8002a02 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002928:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800292c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	441a      	add	r2, r3
 800293e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800294a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800294e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002952:	b29b      	uxth	r3, r3
 8002954:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d024      	beq.n	80029ba <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	3302      	adds	r3, #2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002998:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800299c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02e      	beq.n	8002a02 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029aa:	6959      	ldr	r1, [r3, #20]
 80029ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ae:	891a      	ldrh	r2, [r3, #8]
 80029b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029b4:	f004 fb74 	bl	80070a0 <USB_ReadPMA>
 80029b8:	e023      	b.n	8002a02 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	3306      	adds	r3, #6
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80029e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f4:	6959      	ldr	r1, [r3, #20]
 80029f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f8:	895a      	ldrh	r2, [r3, #10]
 80029fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029fe:	f004 fb4f 	bl	80070a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a0a:	441a      	add	r2, r3
 8002a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a18:	441a      	add	r2, r3
 8002a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a1c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <PCD_EP_ISR_Handler+0x514>
 8002a26:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d206      	bcs.n	8002a40 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4619      	mov	r1, r3
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f005 fee3 	bl	8008804 <HAL_PCD_DataOutStageCallback>
 8002a3e:	e005      	b.n	8002a4c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 fdf6 	bl	8005638 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8123 	beq.w	8002ca0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a5a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	3310      	adds	r3, #16
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a88:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aac:	78db      	ldrb	r3, [r3, #3]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	f040 80a2 	bne.w	8002bf8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002abc:	7b1b      	ldrb	r3, [r3, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8093 	beq.w	8002bea <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ac4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d046      	beq.n	8002b5e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d126      	bne.n	8002b26 <PCD_EP_ISR_Handler+0x608>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	4413      	add	r3, r2
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	011a      	lsls	r2, r3, #4
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	4413      	add	r3, r2
 8002afa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	801a      	strh	r2, [r3, #0]
 8002b24:	e061      	b.n	8002bea <PCD_EP_ISR_Handler+0x6cc>
 8002b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d15d      	bne.n	8002bea <PCD_EP_ISR_Handler+0x6cc>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b42:	4413      	add	r3, r2
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	011a      	lsls	r2, r3, #4
 8002b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b4e:	4413      	add	r3, r2
 8002b50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	2200      	movs	r2, #0
 8002b5a:	801a      	strh	r2, [r3, #0]
 8002b5c:	e045      	b.n	8002bea <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b66:	785b      	ldrb	r3, [r3, #1]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d126      	bne.n	8002bba <PCD_EP_ISR_Handler+0x69c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b80:	4413      	add	r3, r2
 8002b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	011a      	lsls	r2, r3, #4
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b92:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba2:	801a      	strh	r2, [r3, #0]
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	801a      	strh	r2, [r3, #0]
 8002bb8:	e017      	b.n	8002bea <PCD_EP_ISR_Handler+0x6cc>
 8002bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d113      	bne.n	8002bea <PCD_EP_ISR_Handler+0x6cc>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd0:	4413      	add	r3, r2
 8002bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	011a      	lsls	r2, r3, #4
 8002bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bdc:	4413      	add	r3, r2
 8002bde:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be6:	2200      	movs	r2, #0
 8002be8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f005 fe22 	bl	800883a <HAL_PCD_DataInStageCallback>
 8002bf6:	e053      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002bf8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d146      	bne.n	8002c92 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d907      	bls.n	8002c4c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c44:	1ad2      	subs	r2, r2, r3
 8002c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c48:	619a      	str	r2, [r3, #24]
 8002c4a:	e002      	b.n	8002c52 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f005 fdea 	bl	800883a <HAL_PCD_DataInStageCallback>
 8002c66:	e01b      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c70:	441a      	add	r2, r3
 8002c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c74:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c7e:	441a      	add	r2, r3
 8002c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c82:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fcd4 	bl	8005638 <USB_EPStartXfer>
 8002c90:	e006      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c96:	461a      	mov	r2, r3
 8002c98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f91b 	bl	8002ed6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b21b      	sxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f6ff ac3b 	blt.w	8002528 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3758      	adds	r7, #88	@ 0x58
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d07e      	beq.n	8002dd2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cfc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	8b7b      	ldrh	r3, [r7, #26]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d306      	bcc.n	8002d16 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	8b7b      	ldrh	r3, [r7, #26]
 8002d0e:	1ad2      	subs	r2, r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	619a      	str	r2, [r3, #24]
 8002d14:	e002      	b.n	8002d1c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d123      	bne.n	8002d6c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d3e:	833b      	strh	r3, [r7, #24]
 8002d40:	8b3b      	ldrh	r3, [r7, #24]
 8002d42:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d46:	833b      	strh	r3, [r7, #24]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	441a      	add	r2, r3
 8002d56:	8b3b      	ldrh	r3, [r7, #24]
 8002d58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01f      	beq.n	8002db6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d90:	82fb      	strh	r3, [r7, #22]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	441a      	add	r2, r3
 8002da0:	8afb      	ldrh	r3, [r7, #22]
 8002da2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002da6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002db6:	8b7b      	ldrh	r3, [r7, #26]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8087 	beq.w	8002ecc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	6959      	ldr	r1, [r3, #20]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	891a      	ldrh	r2, [r3, #8]
 8002dca:	8b7b      	ldrh	r3, [r7, #26]
 8002dcc:	f004 f968 	bl	80070a0 <USB_ReadPMA>
 8002dd0:	e07c      	b.n	8002ecc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	3306      	adds	r3, #6
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dfa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	8b7b      	ldrh	r3, [r7, #26]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d306      	bcc.n	8002e14 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	8b7b      	ldrh	r3, [r7, #26]
 8002e0c:	1ad2      	subs	r2, r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	619a      	str	r2, [r3, #24]
 8002e12:	e002      	b.n	8002e1a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d123      	bne.n	8002e6a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3c:	83fb      	strh	r3, [r7, #30]
 8002e3e:	8bfb      	ldrh	r3, [r7, #30]
 8002e40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e44:	83fb      	strh	r3, [r7, #30]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	441a      	add	r2, r3
 8002e54:	8bfb      	ldrh	r3, [r7, #30]
 8002e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11f      	bne.n	8002eb4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8e:	83bb      	strh	r3, [r7, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	8bbb      	ldrh	r3, [r7, #28]
 8002ea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002eb4:	8b7b      	ldrh	r3, [r7, #26]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6959      	ldr	r1, [r3, #20]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	895a      	ldrh	r2, [r3, #10]
 8002ec6:	8b7b      	ldrh	r3, [r7, #26]
 8002ec8:	f004 f8ea 	bl	80070a0 <USB_ReadPMA>
    }
  }

  return count;
 8002ecc:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b0a4      	sub	sp, #144	@ 0x90
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 81dd 	beq.w	80032aa <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	3302      	adds	r3, #2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f18:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d907      	bls.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f30:	1ad2      	subs	r2, r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	619a      	str	r2, [r3, #24]
 8002f36:	e002      	b.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 80b9 	bne.w	80030ba <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d126      	bne.n	8002f9e <HAL_PCD_EP_DB_Transmit+0xc8>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	4413      	add	r3, r2
 8002f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	011a      	lsls	r2, r3, #4
 8002f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f70:	4413      	add	r3, r2
 8002f72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	801a      	strh	r2, [r3, #0]
 8002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	e01a      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	785b      	ldrb	r3, [r3, #1]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d116      	bne.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fba:	4413      	add	r3, r2
 8002fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	011a      	lsls	r2, r3, #4
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002fcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	785b      	ldrb	r3, [r3, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d126      	bne.n	8003030 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	011a      	lsls	r2, r3, #4
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	4413      	add	r3, r2
 8003004:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003014:	b29a      	uxth	r2, r3
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	801a      	strh	r2, [r3, #0]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003028:	b29a      	uxth	r2, r3
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	801a      	strh	r2, [r3, #0]
 800302e:	e017      	b.n	8003060 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d113      	bne.n	8003060 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	4413      	add	r3, r2
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	011a      	lsls	r2, r3, #4
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	4413      	add	r3, r2
 8003054:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003058:	623b      	str	r3, [r7, #32]
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	2200      	movs	r2, #0
 800305e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f005 fbe7 	bl	800883a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 82fc 	beq.w	8003670 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800308e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003092:	82fb      	strh	r3, [r7, #22]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	441a      	add	r2, r3
 80030a2:	8afb      	ldrh	r3, [r7, #22]
 80030a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	8013      	strh	r3, [r2, #0]
 80030b8:	e2da      	b.n	8003670 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d021      	beq.n	8003108 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030de:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	441a      	add	r2, r3
 80030f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80030f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003104:	b29b      	uxth	r3, r3
 8003106:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800310e:	2b01      	cmp	r3, #1
 8003110:	f040 82ae 	bne.w	8003670 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800311c:	441a      	add	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800312a:	441a      	add	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6a1a      	ldr	r2, [r3, #32]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d30b      	bcc.n	8003154 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	6a1a      	ldr	r2, [r3, #32]
 8003148:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800314c:	1ad2      	subs	r2, r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	621a      	str	r2, [r3, #32]
 8003152:	e017      	b.n	8003184 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d108      	bne.n	800316e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800315c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003160:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800316c:	e00a      	b.n	8003184 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2200      	movs	r2, #0
 8003182:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d165      	bne.n	8003258 <HAL_PCD_EP_DB_Transmit+0x382>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a0:	4413      	add	r3, r2
 80031a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	011a      	lsls	r2, r3, #4
 80031aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ac:	4413      	add	r3, r2
 80031ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031be:	b29a      	uxth	r2, r3
 80031c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c2:	801a      	strh	r2, [r3, #0]
 80031c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80031ca:	d91d      	bls.n	8003208 <HAL_PCD_EP_DB_Transmit+0x332>
 80031cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <HAL_PCD_EP_DB_Transmit+0x310>
 80031e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031e2:	3b01      	subs	r3, #1
 80031e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	029b      	lsls	r3, r3, #10
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	4313      	orrs	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003200:	b29a      	uxth	r2, r3
 8003202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003204:	801a      	strh	r2, [r3, #0]
 8003206:	e044      	b.n	8003292 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_PCD_EP_DB_Transmit+0x350>
 8003210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800321e:	b29a      	uxth	r2, r3
 8003220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003222:	801a      	strh	r2, [r3, #0]
 8003224:	e035      	b.n	8003292 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800322e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_PCD_EP_DB_Transmit+0x36a>
 800323a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800323c:	3301      	adds	r3, #1
 800323e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29a      	uxth	r2, r3
 8003246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003248:	b29b      	uxth	r3, r3
 800324a:	029b      	lsls	r3, r3, #10
 800324c:	b29b      	uxth	r3, r3
 800324e:	4313      	orrs	r3, r2
 8003250:	b29a      	uxth	r2, r3
 8003252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003254:	801a      	strh	r2, [r3, #0]
 8003256:	e01c      	b.n	8003292 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	785b      	ldrb	r3, [r3, #1]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d118      	bne.n	8003292 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	647b      	str	r3, [r7, #68]	@ 0x44
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800326e:	b29b      	uxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003274:	4413      	add	r3, r2
 8003276:	647b      	str	r3, [r7, #68]	@ 0x44
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	011a      	lsls	r2, r3, #4
 800327e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003280:	4413      	add	r3, r2
 8003282:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003286:	643b      	str	r3, [r7, #64]	@ 0x40
 8003288:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800328c:	b29a      	uxth	r2, r3
 800328e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003290:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6959      	ldr	r1, [r3, #20]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	891a      	ldrh	r2, [r3, #8]
 800329e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f003 feb7 	bl	8007016 <USB_WritePMA>
 80032a8:	e1e2      	b.n	8003670 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	3306      	adds	r3, #6
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80032de:	429a      	cmp	r2, r3
 80032e0:	d307      	bcc.n	80032f2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80032ea:	1ad2      	subs	r2, r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	619a      	str	r2, [r3, #24]
 80032f0:	e002      	b.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f040 80c0 	bne.w	8003482 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d126      	bne.n	8003358 <HAL_PCD_EP_DB_Transmit+0x482>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003318:	b29b      	uxth	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800331e:	4413      	add	r3, r2
 8003320:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	011a      	lsls	r2, r3, #4
 8003328:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800332a:	4413      	add	r3, r2
 800332c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003330:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003332:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333c:	b29a      	uxth	r2, r3
 800333e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003350:	b29a      	uxth	r2, r3
 8003352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003354:	801a      	strh	r2, [r3, #0]
 8003356:	e01a      	b.n	800338e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	785b      	ldrb	r3, [r3, #1]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d116      	bne.n	800338e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	667b      	str	r3, [r7, #100]	@ 0x64
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800336e:	b29b      	uxth	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003374:	4413      	add	r3, r2
 8003376:	667b      	str	r3, [r7, #100]	@ 0x64
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	011a      	lsls	r2, r3, #4
 800337e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003380:	4413      	add	r3, r2
 8003382:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003386:	663b      	str	r3, [r7, #96]	@ 0x60
 8003388:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800338a:	2200      	movs	r2, #0
 800338c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	677b      	str	r3, [r7, #116]	@ 0x74
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12b      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033b0:	4413      	add	r3, r2
 80033b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	011a      	lsls	r2, r3, #4
 80033ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033bc:	4413      	add	r3, r2
 80033be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033d8:	801a      	strh	r2, [r3, #0]
 80033da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	e017      	b.n	8003424 <HAL_PCD_EP_DB_Transmit+0x54e>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d113      	bne.n	8003424 <HAL_PCD_EP_DB_Transmit+0x54e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003404:	b29b      	uxth	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800340a:	4413      	add	r3, r2
 800340c:	677b      	str	r3, [r7, #116]	@ 0x74
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	011a      	lsls	r2, r3, #4
 8003414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003416:	4413      	add	r3, r2
 8003418:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800341c:	673b      	str	r3, [r7, #112]	@ 0x70
 800341e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003420:	2200      	movs	r2, #0
 8003422:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4619      	mov	r1, r3
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f005 fa05 	bl	800883a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 811a 	bne.w	8003670 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003456:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800346c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003474:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800347c:	b29b      	uxth	r3, r3
 800347e:	8013      	strh	r3, [r2, #0]
 8003480:	e0f6      	b.n	8003670 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d121      	bne.n	80034d0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	441a      	add	r2, r3
 80034b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80034bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	f040 80ca 	bne.w	8003670 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034e4:	441a      	add	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034f2:	441a      	add	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6a1a      	ldr	r2, [r3, #32]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	429a      	cmp	r2, r3
 8003502:	d30b      	bcc.n	800351c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003514:	1ad2      	subs	r2, r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	621a      	str	r2, [r3, #32]
 800351a:	e017      	b.n	800354c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d108      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003524:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003528:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003534:	e00a      	b.n	800354c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	657b      	str	r3, [r7, #84]	@ 0x54
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	785b      	ldrb	r3, [r3, #1]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d165      	bne.n	8003626 <HAL_PCD_EP_DB_Transmit+0x750>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003568:	b29b      	uxth	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800356e:	4413      	add	r3, r2
 8003570:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	011a      	lsls	r2, r3, #4
 8003578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800357a:	4413      	add	r3, r2
 800357c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003580:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003582:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800358c:	b29a      	uxth	r2, r3
 800358e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003590:	801a      	strh	r2, [r3, #0]
 8003592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003596:	2b3e      	cmp	r3, #62	@ 0x3e
 8003598:	d91d      	bls.n	80035d6 <HAL_PCD_EP_DB_Transmit+0x700>
 800359a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80035ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035b0:	3b01      	subs	r3, #1
 80035b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035bc:	b29b      	uxth	r3, r3
 80035be:	029b      	lsls	r3, r3, #10
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035d2:	801a      	strh	r2, [r3, #0]
 80035d4:	e041      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x784>
 80035d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <HAL_PCD_EP_DB_Transmit+0x71e>
 80035de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	e032      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x784>
 80035f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_PCD_EP_DB_Transmit+0x738>
 8003608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800360a:	3301      	adds	r3, #1
 800360c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800360e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	b29a      	uxth	r2, r3
 8003614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003616:	b29b      	uxth	r3, r3
 8003618:	029b      	lsls	r3, r3, #10
 800361a:	b29b      	uxth	r3, r3
 800361c:	4313      	orrs	r3, r2
 800361e:	b29a      	uxth	r2, r3
 8003620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	e019      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x784>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d115      	bne.n	800365a <HAL_PCD_EP_DB_Transmit+0x784>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363c:	4413      	add	r3, r2
 800363e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	011a      	lsls	r2, r3, #4
 8003646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003648:	4413      	add	r3, r2
 800364a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800364e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003654:	b29a      	uxth	r2, r3
 8003656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003658:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6959      	ldr	r1, [r3, #20]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	895a      	ldrh	r2, [r3, #10]
 8003666:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800366a:	b29b      	uxth	r3, r3
 800366c:	f003 fcd3 	bl	8007016 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800368a:	82bb      	strh	r3, [r7, #20]
 800368c:	8abb      	ldrh	r3, [r7, #20]
 800368e:	f083 0310 	eor.w	r3, r3, #16
 8003692:	82bb      	strh	r3, [r7, #20]
 8003694:	8abb      	ldrh	r3, [r7, #20]
 8003696:	f083 0320 	eor.w	r3, r3, #32
 800369a:	82bb      	strh	r3, [r7, #20]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	441a      	add	r2, r3
 80036aa:	8abb      	ldrh	r3, [r7, #20]
 80036ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036bc:	b29b      	uxth	r3, r3
 80036be:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3790      	adds	r7, #144	@ 0x90
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b087      	sub	sp, #28
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	817b      	strh	r3, [r7, #10]
 80036d8:	4613      	mov	r3, r2
 80036da:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036dc:	897b      	ldrh	r3, [r7, #10]
 80036de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e8:	897b      	ldrh	r3, [r7, #10]
 80036ea:	f003 0207 	and.w	r2, r3, #7
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	3310      	adds	r3, #16
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e009      	b.n	8003714 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003700:	897a      	ldrh	r2, [r7, #10]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003714:	893b      	ldrh	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	b29a      	uxth	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	80da      	strh	r2, [r3, #6]
 8003728:	e00b      	b.n	8003742 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2201      	movs	r2, #1
 800372e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	b29a      	uxth	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	b29a      	uxth	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
	...

08003750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e272      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8087 	beq.w	800387e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003770:	4b92      	ldr	r3, [pc, #584]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b04      	cmp	r3, #4
 800377a:	d00c      	beq.n	8003796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800377c:	4b8f      	ldr	r3, [pc, #572]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b08      	cmp	r3, #8
 8003786:	d112      	bne.n	80037ae <HAL_RCC_OscConfig+0x5e>
 8003788:	4b8c      	ldr	r3, [pc, #560]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003794:	d10b      	bne.n	80037ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003796:	4b89      	ldr	r3, [pc, #548]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d06c      	beq.n	800387c <HAL_RCC_OscConfig+0x12c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d168      	bne.n	800387c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e24c      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x76>
 80037b8:	4b80      	ldr	r3, [pc, #512]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a7f      	ldr	r2, [pc, #508]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	e02e      	b.n	8003824 <HAL_RCC_OscConfig+0xd4>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x98>
 80037ce:	4b7b      	ldr	r3, [pc, #492]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7a      	ldr	r2, [pc, #488]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b78      	ldr	r3, [pc, #480]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a77      	ldr	r2, [pc, #476]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e01d      	b.n	8003824 <HAL_RCC_OscConfig+0xd4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f0:	d10c      	bne.n	800380c <HAL_RCC_OscConfig+0xbc>
 80037f2:	4b72      	ldr	r3, [pc, #456]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a71      	ldr	r2, [pc, #452]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4b6f      	ldr	r3, [pc, #444]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6e      	ldr	r2, [pc, #440]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e00b      	b.n	8003824 <HAL_RCC_OscConfig+0xd4>
 800380c:	4b6b      	ldr	r3, [pc, #428]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a6a      	ldr	r2, [pc, #424]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4b68      	ldr	r3, [pc, #416]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a67      	ldr	r2, [pc, #412]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800381e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fd fb24 	bl	8000e78 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7fd fb20 	bl	8000e78 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	@ 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e200      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b5d      	ldr	r3, [pc, #372]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0xe4>
 8003852:	e014      	b.n	800387e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fd fb10 	bl	8000e78 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385c:	f7fd fb0c 	bl	8000e78 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	@ 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1ec      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	4b53      	ldr	r3, [pc, #332]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x10c>
 800387a:	e000      	b.n	800387e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d063      	beq.n	8003952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800388a:	4b4c      	ldr	r3, [pc, #304]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003896:	4b49      	ldr	r3, [pc, #292]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d11c      	bne.n	80038dc <HAL_RCC_OscConfig+0x18c>
 80038a2:	4b46      	ldr	r3, [pc, #280]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d116      	bne.n	80038dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	4b43      	ldr	r3, [pc, #268]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCC_OscConfig+0x176>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e1c0      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	4b3d      	ldr	r3, [pc, #244]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4939      	ldr	r1, [pc, #228]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	e03a      	b.n	8003952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e4:	4b36      	ldr	r3, [pc, #216]	@ (80039c0 <HAL_RCC_OscConfig+0x270>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fd fac5 	bl	8000e78 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fd fac1 	bl	8000e78 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e1a1      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	4b2d      	ldr	r3, [pc, #180]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b2a      	ldr	r3, [pc, #168]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4927      	ldr	r1, [pc, #156]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]
 8003924:	e015      	b.n	8003952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fd faa4 	bl	8000e78 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003934:	f7fd faa0 	bl	8000e78 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e180      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	4b1d      	ldr	r3, [pc, #116]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d03a      	beq.n	80039d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d019      	beq.n	800399a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003966:	4b17      	ldr	r3, [pc, #92]	@ (80039c4 <HAL_RCC_OscConfig+0x274>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396c:	f7fd fa84 	bl	8000e78 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003974:	f7fd fa80 	bl	8000e78 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e160      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003992:	2001      	movs	r0, #1
 8003994:	f000 faba 	bl	8003f0c <RCC_Delay>
 8003998:	e01c      	b.n	80039d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399a:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <HAL_RCC_OscConfig+0x274>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a0:	f7fd fa6a 	bl	8000e78 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a6:	e00f      	b.n	80039c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fd fa66 	bl	8000e78 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d908      	bls.n	80039c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e146      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	42420000 	.word	0x42420000
 80039c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	4b92      	ldr	r3, [pc, #584]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e9      	bne.n	80039a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a6 	beq.w	8003b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	4b88      	ldr	r3, [pc, #544]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4a87      	ldr	r2, [pc, #540]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	61d3      	str	r3, [r2, #28]
 80039fe:	4b85      	ldr	r3, [pc, #532]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b82      	ldr	r3, [pc, #520]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d118      	bne.n	8003a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fd fa27 	bl	8000e78 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fd fa23 	bl	8000e78 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b64      	cmp	r3, #100	@ 0x64
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e103      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	4b75      	ldr	r3, [pc, #468]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x312>
 8003a54:	4b6f      	ldr	r3, [pc, #444]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4a6e      	ldr	r2, [pc, #440]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6213      	str	r3, [r2, #32]
 8003a60:	e02d      	b.n	8003abe <HAL_RCC_OscConfig+0x36e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x334>
 8003a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a69      	ldr	r2, [pc, #420]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6213      	str	r3, [r2, #32]
 8003a76:	4b67      	ldr	r3, [pc, #412]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4a66      	ldr	r2, [pc, #408]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	f023 0304 	bic.w	r3, r3, #4
 8003a80:	6213      	str	r3, [r2, #32]
 8003a82:	e01c      	b.n	8003abe <HAL_RCC_OscConfig+0x36e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x356>
 8003a8c:	4b61      	ldr	r3, [pc, #388]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4a60      	ldr	r2, [pc, #384]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	f043 0304 	orr.w	r3, r3, #4
 8003a96:	6213      	str	r3, [r2, #32]
 8003a98:	4b5e      	ldr	r3, [pc, #376]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6213      	str	r3, [r2, #32]
 8003aa4:	e00b      	b.n	8003abe <HAL_RCC_OscConfig+0x36e>
 8003aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4a5a      	ldr	r2, [pc, #360]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6213      	str	r3, [r2, #32]
 8003ab2:	4b58      	ldr	r3, [pc, #352]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4a57      	ldr	r2, [pc, #348]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d015      	beq.n	8003af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fd f9d7 	bl	8000e78 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fd f9d3 	bl	8000e78 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0b1      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ee      	beq.n	8003ace <HAL_RCC_OscConfig+0x37e>
 8003af0:	e014      	b.n	8003b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fd f9c1 	bl	8000e78 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fd f9bd 	bl	8000e78 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e09b      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b10:	4b40      	ldr	r3, [pc, #256]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ee      	bne.n	8003afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b22:	4b3c      	ldr	r3, [pc, #240]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	4a3b      	ldr	r2, [pc, #236]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8087 	beq.w	8003c46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b38:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d061      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d146      	bne.n	8003bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b33      	ldr	r3, [pc, #204]	@ (8003c1c <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fd f991 	bl	8000e78 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fd f98d 	bl	8000e78 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e06d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6c:	4b29      	ldr	r3, [pc, #164]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b80:	d108      	bne.n	8003b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b82:	4b24      	ldr	r3, [pc, #144]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	4921      	ldr	r1, [pc, #132]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b94:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a19      	ldr	r1, [r3, #32]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	491b      	ldr	r1, [pc, #108]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bac:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <HAL_RCC_OscConfig+0x4cc>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7fd f961 	bl	8000e78 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fd f95d 	bl	8000e78 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e03d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bcc:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x46a>
 8003bd8:	e035      	b.n	8003c46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b10      	ldr	r3, [pc, #64]	@ (8003c1c <HAL_RCC_OscConfig+0x4cc>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fd f94a 	bl	8000e78 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd f946 	bl	8000e78 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e026      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x498>
 8003c06:	e01e      	b.n	8003c46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e019      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_RCC_OscConfig+0x500>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000

08003c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0d0      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d910      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b67      	ldr	r3, [pc, #412]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 0207 	bic.w	r2, r3, #7
 8003c7e:	4965      	ldr	r1, [pc, #404]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b63      	ldr	r3, [pc, #396]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0b8      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb0:	4b59      	ldr	r3, [pc, #356]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4a58      	ldr	r2, [pc, #352]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc8:	4b53      	ldr	r3, [pc, #332]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b50      	ldr	r3, [pc, #320]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	494d      	ldr	r1, [pc, #308]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d040      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b47      	ldr	r3, [pc, #284]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d115      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e073      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	4b3d      	ldr	r3, [pc, #244]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06b      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4936      	ldr	r1, [pc, #216]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d44:	f7fd f898 	bl	8000e78 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7fd f894 	bl	8000e78 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e053      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b2d      	ldr	r3, [pc, #180]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 020c 	and.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b27      	ldr	r3, [pc, #156]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d210      	bcs.n	8003da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b24      	ldr	r3, [pc, #144]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 0207 	bic.w	r2, r3, #7
 8003d8a:	4922      	ldr	r1, [pc, #136]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b20      	ldr	r3, [pc, #128]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e032      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db0:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4916      	ldr	r1, [pc, #88]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dce:	4b12      	ldr	r3, [pc, #72]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	490e      	ldr	r1, [pc, #56]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003de2:	f000 f821 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	490a      	ldr	r1, [pc, #40]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	5ccb      	ldrb	r3, [r1, r3]
 8003df6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfa:	4a09      	ldr	r2, [pc, #36]	@ (8003e20 <HAL_RCC_ClockConfig+0x1cc>)
 8003dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dfe:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <HAL_RCC_ClockConfig+0x1d0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fc fff6 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40022000 	.word	0x40022000
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08008d60 	.word	0x08008d60
 8003e20:	20000018 	.word	0x20000018
 8003e24:	2000001c 	.word	0x2000001c

08003e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e42:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x30>
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x36>
 8003e56:	e027      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e58:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e5a:	613b      	str	r3, [r7, #16]
      break;
 8003e5c:	e027      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	0c9b      	lsrs	r3, r3, #18
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	4a17      	ldr	r2, [pc, #92]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d010      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e76:	4b11      	ldr	r3, [pc, #68]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	0c5b      	lsrs	r3, r3, #17
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	4a11      	ldr	r2, [pc, #68]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e82:	5cd3      	ldrb	r3, [r2, r3]
 8003e84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e8a:	fb03 f202 	mul.w	r2, r3, r2
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e004      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	613b      	str	r3, [r7, #16]
      break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eaa:	613b      	str	r3, [r7, #16]
      break;
 8003eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eae:	693b      	ldr	r3, [r7, #16]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	007a1200 	.word	0x007a1200
 8003ec4:	08008d78 	.word	0x08008d78
 8003ec8:	08008d88 	.word	0x08008d88
 8003ecc:	003d0900 	.word	0x003d0900

08003ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b02      	ldr	r3, [pc, #8]	@ (8003ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	20000018 	.word	0x20000018

08003ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ee8:	f7ff fff2 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	0adb      	lsrs	r3, r3, #11
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4903      	ldr	r1, [pc, #12]	@ (8003f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08008d70 	.word	0x08008d70

08003f0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f14:	4b0a      	ldr	r3, [pc, #40]	@ (8003f40 <RCC_Delay+0x34>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0a      	ldr	r2, [pc, #40]	@ (8003f44 <RCC_Delay+0x38>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0a5b      	lsrs	r3, r3, #9
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f28:	bf00      	nop
  }
  while (Delay --);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	60fa      	str	r2, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f9      	bne.n	8003f28 <RCC_Delay+0x1c>
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	20000018 	.word	0x20000018
 8003f44:	10624dd3 	.word	0x10624dd3

08003f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d07d      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f64:	2300      	movs	r3, #0
 8003f66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f68:	4b4f      	ldr	r3, [pc, #316]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10d      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f74:	4b4c      	ldr	r3, [pc, #304]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4a4b      	ldr	r2, [pc, #300]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	61d3      	str	r3, [r2, #28]
 8003f80:	4b49      	ldr	r3, [pc, #292]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	4b46      	ldr	r3, [pc, #280]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d118      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9c:	4b43      	ldr	r3, [pc, #268]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a42      	ldr	r2, [pc, #264]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa8:	f7fc ff66 	bl	8000e78 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fae:	e008      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb0:	f7fc ff62 	bl	8000e78 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	@ 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e06d      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fce:	4b36      	ldr	r3, [pc, #216]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02e      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d027      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fec:	4b2e      	ldr	r3, [pc, #184]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ff6:	4b2e      	ldr	r3, [pc, #184]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004002:	4a29      	ldr	r2, [pc, #164]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d014      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fc ff31 	bl	8000e78 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004018:	e00a      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7fc ff2d 	bl	8000e78 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d901      	bls.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e036      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0ee      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800403c:	4b1a      	ldr	r3, [pc, #104]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4917      	ldr	r1, [pc, #92]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	4313      	orrs	r3, r2
 800404c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d105      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004054:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	4a13      	ldr	r2, [pc, #76]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800405e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800406c:	4b0e      	ldr	r3, [pc, #56]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	490b      	ldr	r1, [pc, #44]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800408a:	4b07      	ldr	r3, [pc, #28]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	4904      	ldr	r1, [pc, #16]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40007000 	.word	0x40007000
 80040b0:	42420440 	.word	0x42420440

080040b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b10      	cmp	r3, #16
 80040da:	f200 808a 	bhi.w	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d045      	beq.n	8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d075      	beq.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80040ea:	e082      	b.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80040ec:	4b46      	ldr	r3, [pc, #280]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80040f2:	4b45      	ldr	r3, [pc, #276]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d07b      	beq.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	0c9b      	lsrs	r3, r3, #18
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	4a41      	ldr	r2, [pc, #260]	@ (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004108:	5cd3      	ldrb	r3, [r2, r3]
 800410a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d015      	beq.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004116:	4b3c      	ldr	r3, [pc, #240]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	0c5b      	lsrs	r3, r3, #17
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	4a3b      	ldr	r2, [pc, #236]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00d      	beq.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004130:	4a38      	ldr	r2, [pc, #224]	@ (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	fbb2 f2f3 	udiv	r2, r2, r3
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	e004      	b.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4a34      	ldr	r2, [pc, #208]	@ (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800414c:	4b2e      	ldr	r3, [pc, #184]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004154:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004158:	d102      	bne.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	61bb      	str	r3, [r7, #24]
      break;
 800415e:	e04a      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4a2d      	ldr	r2, [pc, #180]	@ (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	61bb      	str	r3, [r7, #24]
      break;
 800416e:	e042      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004170:	4b25      	ldr	r3, [pc, #148]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800417c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004180:	d108      	bne.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800418c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	e01f      	b.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800419e:	d109      	bne.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80041a0:	4b19      	ldr	r3, [pc, #100]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80041ac:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e00f      	b.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041be:	d11c      	bne.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80041c0:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d016      	beq.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80041cc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80041d0:	61bb      	str	r3, [r7, #24]
      break;
 80041d2:	e012      	b.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80041d4:	e011      	b.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80041d6:	f7ff fe85 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 80041da:	4602      	mov	r2, r0
 80041dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	0b9b      	lsrs	r3, r3, #14
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	3301      	adds	r3, #1
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	61bb      	str	r3, [r7, #24]
      break;
 80041f0:	e004      	b.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041f2:	bf00      	nop
 80041f4:	e002      	b.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041fa:	bf00      	nop
    }
  }
  return (frequency);
 80041fc:	69bb      	ldr	r3, [r7, #24]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	08008d8c 	.word	0x08008d8c
 8004210:	08008d9c 	.word	0x08008d9c
 8004214:	007a1200 	.word	0x007a1200
 8004218:	003d0900 	.word	0x003d0900
 800421c:	aaaaaaab 	.word	0xaaaaaaab

08004220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e041      	b.n	80042b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fc faa2 	bl	8000790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f000 fa64 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d001      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e03a      	b.n	800434e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a18      	ldr	r2, [pc, #96]	@ (8004358 <HAL_TIM_Base_Start_IT+0x98>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x58>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004302:	d009      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x58>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a14      	ldr	r2, [pc, #80]	@ (800435c <HAL_TIM_Base_Start_IT+0x9c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x58>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a13      	ldr	r2, [pc, #76]	@ (8004360 <HAL_TIM_Base_Start_IT+0xa0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d111      	bne.n	800433c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b06      	cmp	r3, #6
 8004328:	d010      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433a:	e007      	b.n	800434c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800

08004364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0202 	mvn.w	r2, #2
 8004398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f9a1 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f994 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f9a3 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0204 	mvn.w	r2, #4
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f97b 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f96e 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f97d 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0208 	mvn.w	r2, #8
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f955 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f948 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f957 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b00      	cmp	r3, #0
 8004468:	d020      	beq.n	80044ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0210 	mvn.w	r2, #16
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2208      	movs	r2, #8
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f92f 	bl	80046f6 <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f922 	bl	80046e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f931 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0201 	mvn.w	r2, #1
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f901 	bl	80046d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00c      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa87 	bl	8004a02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f901 	bl	800471a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0220 	mvn.w	r2, #32
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa5a 	bl	80049f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_TIM_ConfigClockSource+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e0b4      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x186>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800457e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004598:	d03e      	beq.n	8004618 <HAL_TIM_ConfigClockSource+0xd4>
 800459a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800459e:	f200 8087 	bhi.w	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a6:	f000 8086 	beq.w	80046b6 <HAL_TIM_ConfigClockSource+0x172>
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ae:	d87f      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b70      	cmp	r3, #112	@ 0x70
 80045b2:	d01a      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xa6>
 80045b4:	2b70      	cmp	r3, #112	@ 0x70
 80045b6:	d87b      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b60      	cmp	r3, #96	@ 0x60
 80045ba:	d050      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x11a>
 80045bc:	2b60      	cmp	r3, #96	@ 0x60
 80045be:	d877      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b50      	cmp	r3, #80	@ 0x50
 80045c2:	d03c      	beq.n	800463e <HAL_TIM_ConfigClockSource+0xfa>
 80045c4:	2b50      	cmp	r3, #80	@ 0x50
 80045c6:	d873      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b40      	cmp	r3, #64	@ 0x40
 80045ca:	d058      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x13a>
 80045cc:	2b40      	cmp	r3, #64	@ 0x40
 80045ce:	d86f      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b30      	cmp	r3, #48	@ 0x30
 80045d2:	d064      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045d4:	2b30      	cmp	r3, #48	@ 0x30
 80045d6:	d86b      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d060      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d867      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d05c      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d05a      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045e8:	e062      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045fa:	f000 f97c 	bl	80048f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800460c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	609a      	str	r2, [r3, #8]
      break;
 8004616:	e04f      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004628:	f000 f965 	bl	80048f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800463a:	609a      	str	r2, [r3, #8]
      break;
 800463c:	e03c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	461a      	mov	r2, r3
 800464c:	f000 f8dc 	bl	8004808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2150      	movs	r1, #80	@ 0x50
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f933 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 800465c:	e02c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800466a:	461a      	mov	r2, r3
 800466c:	f000 f8fa 	bl	8004864 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2160      	movs	r1, #96	@ 0x60
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f923 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 800467c:	e01c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800468a:	461a      	mov	r2, r3
 800468c:	f000 f8bc 	bl	8004808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2140      	movs	r1, #64	@ 0x40
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f913 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 800469c:	e00c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f000 f90a 	bl	80048c2 <TIM_ITRx_SetConfig>
      break;
 80046ae:	e003      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      break;
 80046b4:	e000      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a2f      	ldr	r2, [pc, #188]	@ (80047fc <TIM_Base_SetConfig+0xd0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0x30>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0x30>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a2c      	ldr	r2, [pc, #176]	@ (8004800 <TIM_Base_SetConfig+0xd4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0x30>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a2b      	ldr	r2, [pc, #172]	@ (8004804 <TIM_Base_SetConfig+0xd8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a22      	ldr	r2, [pc, #136]	@ (80047fc <TIM_Base_SetConfig+0xd0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00b      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477c:	d007      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1f      	ldr	r2, [pc, #124]	@ (8004800 <TIM_Base_SetConfig+0xd4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_Base_SetConfig+0x62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1e      	ldr	r2, [pc, #120]	@ (8004804 <TIM_Base_SetConfig+0xd8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a0d      	ldr	r2, [pc, #52]	@ (80047fc <TIM_Base_SetConfig+0xd0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d103      	bne.n	80047d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f023 0201 	bic.w	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	611a      	str	r2, [r3, #16]
  }
}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800

08004808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f023 0201 	bic.w	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 030a 	bic.w	r3, r3, #10
 8004844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr

08004864 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f023 0210 	bic.w	r2, r3, #16
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800488e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	031b      	lsls	r3, r3, #12
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	621a      	str	r2, [r3, #32]
}
 80048b8:	bf00      	nop
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	f043 0307 	orr.w	r3, r3, #7
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	609a      	str	r2, [r3, #8]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004910:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	021a      	lsls	r2, r3, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	431a      	orrs	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4313      	orrs	r3, r2
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	609a      	str	r2, [r3, #8]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004948:	2302      	movs	r3, #2
 800494a:	e046      	b.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a16      	ldr	r2, [pc, #88]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00e      	beq.n	80049ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004998:	d009      	beq.n	80049ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a12      	ldr	r2, [pc, #72]	@ (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a10      	ldr	r2, [pc, #64]	@ (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d10c      	bne.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800

080049f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a3e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004a42:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr

08004a5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a62:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004a66:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	4013      	ands	r3, r2
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	460b      	mov	r3, r1
 8004a98:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	4638      	mov	r0, r7
 8004ab0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b09d      	sub	sp, #116	@ 0x74
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b06:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	78db      	ldrb	r3, [r3, #3]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d81f      	bhi.n	8004b52 <USB_ActivateEndpoint+0x72>
 8004b12:	a201      	add	r2, pc, #4	@ (adr r2, 8004b18 <USB_ActivateEndpoint+0x38>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b5b 	.word	0x08004b5b
 8004b24:	08004b37 	.word	0x08004b37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004b34:	e012      	b.n	8004b5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b3a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004b3e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004b42:	e00b      	b.n	8004b5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004b50:	e004      	b.n	8004b5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004b58:	e000      	b.n	8004b5c <USB_ActivateEndpoint+0x7c>
      break;
 8004b5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	7812      	ldrb	r2, [r2, #0]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	7b1b      	ldrb	r3, [r3, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 8178 	bne.w	8004ebc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	785b      	ldrb	r3, [r3, #1]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8084 	beq.w	8004cde <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	4413      	add	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	011a      	lsls	r2, r3, #4
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	88db      	ldrh	r3, [r3, #6]
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	827b      	strh	r3, [r7, #18]
 8004c18:	8a7b      	ldrh	r3, [r7, #18]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01b      	beq.n	8004c5a <USB_ActivateEndpoint+0x17a>
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c38:	823b      	strh	r3, [r7, #16]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	441a      	add	r2, r3
 8004c44:	8a3b      	ldrh	r3, [r7, #16]
 8004c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	78db      	ldrb	r3, [r3, #3]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d020      	beq.n	8004ca4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c78:	81bb      	strh	r3, [r7, #12]
 8004c7a:	89bb      	ldrh	r3, [r7, #12]
 8004c7c:	f083 0320 	eor.w	r3, r3, #32
 8004c80:	81bb      	strh	r3, [r7, #12]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	441a      	add	r2, r3
 8004c8c:	89bb      	ldrh	r3, [r7, #12]
 8004c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	8013      	strh	r3, [r2, #0]
 8004ca2:	e2d5      	b.n	8005250 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cba:	81fb      	strh	r3, [r7, #14]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	89fb      	ldrh	r3, [r7, #14]
 8004cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8013      	strh	r3, [r2, #0]
 8004cdc:	e2b8      	b.n	8005250 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	4413      	add	r3, r2
 8004cf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	011a      	lsls	r2, r3, #4
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	88db      	ldrh	r3, [r3, #6]
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d10:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d22:	4413      	add	r3, r2
 8004d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	011a      	lsls	r2, r3, #4
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	4413      	add	r3, r2
 8004d30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	801a      	strh	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d4c:	d91d      	bls.n	8004d8a <USB_ActivateEndpoint+0x2aa>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <USB_ActivateEndpoint+0x288>
 8004d62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d64:	3b01      	subs	r3, #1
 8004d66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	029b      	lsls	r3, r3, #10
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	4313      	orrs	r3, r2
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	801a      	strh	r2, [r3, #0]
 8004d88:	e026      	b.n	8004dd8 <USB_ActivateEndpoint+0x2f8>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <USB_ActivateEndpoint+0x2c8>
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	e017      	b.n	8004dd8 <USB_ActivateEndpoint+0x2f8>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <USB_ActivateEndpoint+0x2e2>
 8004dbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	029b      	lsls	r3, r3, #10
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004de6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <USB_ActivateEndpoint+0x348>
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e06:	843b      	strh	r3, [r7, #32]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	441a      	add	r2, r3
 8004e12:	8c3b      	ldrh	r3, [r7, #32]
 8004e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d124      	bne.n	8004e7a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e46:	83bb      	strh	r3, [r7, #28]
 8004e48:	8bbb      	ldrh	r3, [r7, #28]
 8004e4a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004e4e:	83bb      	strh	r3, [r7, #28]
 8004e50:	8bbb      	ldrh	r3, [r7, #28]
 8004e52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e56:	83bb      	strh	r3, [r7, #28]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	441a      	add	r2, r3
 8004e62:	8bbb      	ldrh	r3, [r7, #28]
 8004e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	8013      	strh	r3, [r2, #0]
 8004e78:	e1ea      	b.n	8005250 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e90:	83fb      	strh	r3, [r7, #30]
 8004e92:	8bfb      	ldrh	r3, [r7, #30]
 8004e94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e98:	83fb      	strh	r3, [r7, #30]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	441a      	add	r2, r3
 8004ea4:	8bfb      	ldrh	r3, [r7, #30]
 8004ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	8013      	strh	r3, [r2, #0]
 8004eba:	e1c9      	b.n	8005250 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	78db      	ldrb	r3, [r3, #3]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d11e      	bne.n	8004f02 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eda:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	441a      	add	r2, r3
 8004ee8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004eec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	8013      	strh	r3, [r2, #0]
 8004f00:	e01d      	b.n	8004f3e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f18:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f4e:	4413      	add	r3, r2
 8004f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	011a      	lsls	r2, r3, #4
 8004f58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	891b      	ldrh	r3, [r3, #8]
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f82:	4413      	add	r3, r2
 8004f84:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	011a      	lsls	r2, r3, #4
 8004f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004f94:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	895b      	ldrh	r3, [r3, #10]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fa4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f040 8093 	bne.w	80050d6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004fc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01b      	beq.n	8005004 <USB_ActivateEndpoint+0x524>
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004ff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ff8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005000:	b29b      	uxth	r3, r3
 8005002:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005012:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01b      	beq.n	8005054 <USB_ActivateEndpoint+0x574>
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800502e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005032:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	441a      	add	r2, r3
 800503e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800504c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005050:	b29b      	uxth	r3, r3
 8005052:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800506c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800506e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005072:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005074:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005076:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800507a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800508c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005098:	b29b      	uxth	r3, r3
 800509a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]
 80050d4:	e0bc      	b.n	8005250 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80050e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80050ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01d      	beq.n	800512e <USB_ActivateEndpoint+0x64e>
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005108:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800511a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800511e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005122:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800512a:	b29b      	uxth	r3, r3
 800512c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800513e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01d      	beq.n	8005186 <USB_ActivateEndpoint+0x6a6>
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005160:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800517a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800517e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005182:	b29b      	uxth	r3, r3
 8005184:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	78db      	ldrb	r3, [r3, #3]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d024      	beq.n	80051d8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80051a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80051ac:	f083 0320 	eor.w	r3, r3, #32
 80051b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	441a      	add	r2, r3
 80051be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]
 80051d6:	e01d      	b.n	8005214 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	441a      	add	r2, r3
 80051fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800520c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005210:	b29b      	uxth	r3, r3
 8005212:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	441a      	add	r2, r3
 8005238:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800523c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800524c:	b29b      	uxth	r3, r3
 800524e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005250:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005254:	4618      	mov	r0, r3
 8005256:	3774      	adds	r7, #116	@ 0x74
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop

08005260 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005260:	b480      	push	{r7}
 8005262:	b08d      	sub	sp, #52	@ 0x34
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	7b1b      	ldrb	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 808e 	bne.w	8005390 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d044      	beq.n	8005306 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	81bb      	strh	r3, [r7, #12]
 800528a:	89bb      	ldrh	r3, [r7, #12]
 800528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01b      	beq.n	80052cc <USB_DeactivateEndpoint+0x6c>
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052aa:	817b      	strh	r3, [r7, #10]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	441a      	add	r2, r3
 80052b6:	897b      	ldrh	r3, [r7, #10]
 80052b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e2:	813b      	strh	r3, [r7, #8]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	893b      	ldrh	r3, [r7, #8]
 80052f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005300:	b29b      	uxth	r3, r3
 8005302:	8013      	strh	r3, [r2, #0]
 8005304:	e192      	b.n	800562c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	827b      	strh	r3, [r7, #18]
 8005314:	8a7b      	ldrh	r3, [r7, #18]
 8005316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01b      	beq.n	8005356 <USB_DeactivateEndpoint+0xf6>
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005334:	823b      	strh	r3, [r7, #16]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	441a      	add	r2, r3
 8005340:	8a3b      	ldrh	r3, [r7, #16]
 8005342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800534a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800534e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005352:	b29b      	uxth	r3, r3
 8005354:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536c:	81fb      	strh	r3, [r7, #14]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	441a      	add	r2, r3
 8005378:	89fb      	ldrh	r3, [r7, #14]
 800537a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800537e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800538a:	b29b      	uxth	r3, r3
 800538c:	8013      	strh	r3, [r2, #0]
 800538e:	e14d      	b.n	800562c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f040 80a5 	bne.w	80054e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	843b      	strh	r3, [r7, #32]
 80053a8:	8c3b      	ldrh	r3, [r7, #32]
 80053aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01b      	beq.n	80053ea <USB_DeactivateEndpoint+0x18a>
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c8:	83fb      	strh	r3, [r7, #30]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	441a      	add	r2, r3
 80053d4:	8bfb      	ldrh	r3, [r7, #30]
 80053d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	83bb      	strh	r3, [r7, #28]
 80053f8:	8bbb      	ldrh	r3, [r7, #28]
 80053fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01b      	beq.n	800543a <USB_DeactivateEndpoint+0x1da>
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005418:	837b      	strh	r3, [r7, #26]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	441a      	add	r2, r3
 8005424:	8b7b      	ldrh	r3, [r7, #26]
 8005426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800542a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800542e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005432:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005436:	b29b      	uxth	r3, r3
 8005438:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800544c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005450:	833b      	strh	r3, [r7, #24]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	8b3b      	ldrh	r3, [r7, #24]
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800546a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005488:	82fb      	strh	r3, [r7, #22]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	441a      	add	r2, r3
 8005494:	8afb      	ldrh	r3, [r7, #22]
 8005496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800549a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800549e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054c0:	82bb      	strh	r3, [r7, #20]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	441a      	add	r2, r3
 80054cc:	8abb      	ldrh	r3, [r7, #20]
 80054ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054de:	b29b      	uxth	r3, r3
 80054e0:	8013      	strh	r3, [r2, #0]
 80054e2:	e0a3      	b.n	800562c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80054f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80054f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01b      	beq.n	8005534 <USB_DeactivateEndpoint+0x2d4>
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b29b      	uxth	r3, r3
 800550a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800550e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005512:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005528:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800552c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005530:	b29b      	uxth	r3, r3
 8005532:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005542:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01b      	beq.n	8005584 <USB_DeactivateEndpoint+0x324>
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800555e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005562:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	441a      	add	r2, r3
 800556e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800557c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005580:	b29b      	uxth	r3, r3
 8005582:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	441a      	add	r2, r3
 80055a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	441a      	add	r2, r3
 80055de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800561c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005628:	b29b      	uxth	r3, r3
 800562a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3734      	adds	r7, #52	@ 0x34
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b0c2      	sub	sp, #264	@ 0x108
 800563c:	af00      	add	r7, sp, #0
 800563e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005646:	6018      	str	r0, [r3, #0]
 8005648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800564c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005650:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	2b01      	cmp	r3, #1
 8005660:	f040 86b7 	bne.w	80063d2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699a      	ldr	r2, [r3, #24]
 8005670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	429a      	cmp	r2, r3
 800567e:	d908      	bls.n	8005692 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005690:	e007      	b.n	80056a2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	7b1b      	ldrb	r3, [r3, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d13a      	bne.n	8005728 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6959      	ldr	r1, [r3, #20]
 80056be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	88da      	ldrh	r2, [r3, #6]
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056d8:	6800      	ldr	r0, [r0, #0]
 80056da:	f001 fc9c 	bl	8007016 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	011a      	lsls	r2, r3, #4
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	f000 be1f 	b.w	8006366 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	78db      	ldrb	r3, [r3, #3]
 8005734:	2b02      	cmp	r3, #2
 8005736:	f040 8462 	bne.w	8005ffe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800573a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6a1a      	ldr	r2, [r3, #32]
 8005746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	429a      	cmp	r2, r3
 8005754:	f240 83df 	bls.w	8005f16 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800577a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	441a      	add	r2, r3
 800579c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80057a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057a8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80057ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6a1a      	ldr	r2, [r3, #32]
 80057c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c4:	1ad2      	subs	r2, r2, r3
 80057c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 81c7 	beq.w	8005b88 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	633b      	str	r3, [r7, #48]	@ 0x30
 8005806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d177      	bne.n	8005906 <USB_EPStartXfer+0x2ce>
 8005816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005830:	b29b      	uxth	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	4413      	add	r3, r2
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800583a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	011a      	lsls	r2, r3, #4
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	4413      	add	r3, r2
 800584c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800585c:	b29a      	uxth	r2, r3
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005866:	2b3e      	cmp	r3, #62	@ 0x3e
 8005868:	d921      	bls.n	80058ae <USB_EPStartXfer+0x276>
 800586a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2b00      	cmp	r3, #0
 800587e:	d104      	bne.n	800588a <USB_EPStartXfer+0x252>
 8005880:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005884:	3b01      	subs	r3, #1
 8005886:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29a      	uxth	r2, r3
 8005890:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29b      	uxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b29b      	uxth	r3, r3
 800589e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	e050      	b.n	8005950 <USB_EPStartXfer+0x318>
 80058ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <USB_EPStartXfer+0x294>
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	e041      	b.n	8005950 <USB_EPStartXfer+0x318>
 80058cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <USB_EPStartXfer+0x2b4>
 80058e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80058e6:	3301      	adds	r3, #1
 80058e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	029b      	lsls	r3, r3, #10
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	4313      	orrs	r3, r2
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e024      	b.n	8005950 <USB_EPStartXfer+0x318>
 8005906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d11c      	bne.n	8005950 <USB_EPStartXfer+0x318>
 8005916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592a:	4413      	add	r3, r2
 800592c:	633b      	str	r3, [r7, #48]	@ 0x30
 800592e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	011a      	lsls	r2, r3, #4
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	4413      	add	r3, r2
 8005940:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594a:	b29a      	uxth	r2, r3
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	895b      	ldrh	r3, [r3, #10]
 800595c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6959      	ldr	r1, [r3, #20]
 800596c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005970:	b29b      	uxth	r3, r3
 8005972:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005976:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800597a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800597e:	6800      	ldr	r0, [r0, #0]
 8005980:	f001 fb49 	bl	8007016 <USB_WritePMA>
            ep->xfer_buff += len;
 8005984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	441a      	add	r2, r3
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d90f      	bls.n	80059de <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80059be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6a1a      	ldr	r2, [r3, #32]
 80059ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	621a      	str	r2, [r3, #32]
 80059dc:	e00e      	b.n	80059fc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80059de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80059ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2200      	movs	r2, #0
 80059fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d177      	bne.n	8005afc <USB_EPStartXfer+0x4c4>
 8005a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	011a      	lsls	r2, r3, #4
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	4413      	add	r3, r2
 8005a42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	801a      	strh	r2, [r3, #0]
 8005a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a5e:	d921      	bls.n	8005aa4 <USB_EPStartXfer+0x46c>
 8005a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <USB_EPStartXfer+0x448>
 8005a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	4313      	orrs	r3, r2
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e056      	b.n	8005b52 <USB_EPStartXfer+0x51a>
 8005aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <USB_EPStartXfer+0x48a>
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	e047      	b.n	8005b52 <USB_EPStartXfer+0x51a>
 8005ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <USB_EPStartXfer+0x4aa>
 8005ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005adc:	3301      	adds	r3, #1
 8005ade:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	801a      	strh	r2, [r3, #0]
 8005afa:	e02a      	b.n	8005b52 <USB_EPStartXfer+0x51a>
 8005afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d122      	bne.n	8005b52 <USB_EPStartXfer+0x51a>
 8005b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	623b      	str	r3, [r7, #32]
 8005b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	623b      	str	r3, [r7, #32]
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	011a      	lsls	r2, r3, #4
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	4413      	add	r3, r2
 8005b42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	891b      	ldrh	r3, [r3, #8]
 8005b5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6959      	ldr	r1, [r3, #20]
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b78:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b7c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b80:	6800      	ldr	r0, [r0, #0]
 8005b82:	f001 fa48 	bl	8007016 <USB_WritePMA>
 8005b86:	e3ee      	b.n	8006366 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d177      	bne.n	8005c88 <USB_EPStartXfer+0x650>
 8005b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bb8:	4413      	add	r3, r2
 8005bba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	011a      	lsls	r2, r3, #4
 8005bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bcc:	4413      	add	r3, r2
 8005bce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bea:	d921      	bls.n	8005c30 <USB_EPStartXfer+0x5f8>
 8005bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d104      	bne.n	8005c0c <USB_EPStartXfer+0x5d4>
 8005c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c06:	3b01      	subs	r3, #1
 8005c08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	029b      	lsls	r3, r3, #10
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	e056      	b.n	8005cde <USB_EPStartXfer+0x6a6>
 8005c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <USB_EPStartXfer+0x616>
 8005c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	e047      	b.n	8005cde <USB_EPStartXfer+0x6a6>
 8005c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <USB_EPStartXfer+0x636>
 8005c64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c68:	3301      	adds	r3, #1
 8005c6a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	029b      	lsls	r3, r3, #10
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	e02a      	b.n	8005cde <USB_EPStartXfer+0x6a6>
 8005c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d122      	bne.n	8005cde <USB_EPStartXfer+0x6a6>
 8005c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cb8:	4413      	add	r3, r2
 8005cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	011a      	lsls	r2, r3, #4
 8005cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ccc:	4413      	add	r3, r2
 8005cce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	891b      	ldrh	r3, [r3, #8]
 8005cea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6959      	ldr	r1, [r3, #20]
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d0c:	6800      	ldr	r0, [r0, #0]
 8005d0e:	f001 f982 	bl	8007016 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d22:	441a      	add	r2, r3
 8005d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6a1a      	ldr	r2, [r3, #32]
 8005d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d90f      	bls.n	8005d6c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a1a      	ldr	r2, [r3, #32]
 8005d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5c:	1ad2      	subs	r2, r2, r3
 8005d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	621a      	str	r2, [r3, #32]
 8005d6a:	e00e      	b.n	8005d8a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d177      	bne.n	8005e96 <USB_EPStartXfer+0x85e>
 8005da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	4413      	add	r3, r2
 8005dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	011a      	lsls	r2, r3, #4
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dda:	4413      	add	r3, r2
 8005ddc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005df8:	d921      	bls.n	8005e3e <USB_EPStartXfer+0x806>
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <USB_EPStartXfer+0x7e2>
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e14:	3b01      	subs	r3, #1
 8005e16:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	029b      	lsls	r3, r3, #10
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	e050      	b.n	8005ee0 <USB_EPStartXfer+0x8a8>
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <USB_EPStartXfer+0x824>
 8005e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e041      	b.n	8005ee0 <USB_EPStartXfer+0x8a8>
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <USB_EPStartXfer+0x844>
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e76:	3301      	adds	r3, #1
 8005e78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e024      	b.n	8005ee0 <USB_EPStartXfer+0x8a8>
 8005e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d11c      	bne.n	8005ee0 <USB_EPStartXfer+0x8a8>
 8005ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eba:	4413      	add	r3, r2
 8005ebc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	011a      	lsls	r2, r3, #4
 8005ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ece:	4413      	add	r3, r2
 8005ed0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ede:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	895b      	ldrh	r3, [r3, #10]
 8005eec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6959      	ldr	r1, [r3, #20]
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f0e:	6800      	ldr	r0, [r0, #0]
 8005f10:	f001 f881 	bl	8007016 <USB_WritePMA>
 8005f14:	e227      	b.n	8006366 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f4c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fa2:	4413      	add	r3, r2
 8005fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	011a      	lsls	r2, r3, #4
 8005fb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	891b      	ldrh	r3, [r3, #8]
 8005fd4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6959      	ldr	r1, [r3, #20]
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005fee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ff2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ff6:	6800      	ldr	r0, [r0, #0]
 8005ff8:	f001 f80d 	bl	8007016 <USB_WritePMA>
 8005ffc:	e1b3      	b.n	8006366 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6a1a      	ldr	r2, [r3, #32]
 800600a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800601c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80c6 	beq.w	80061d0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d177      	bne.n	8006150 <USB_EPStartXfer+0xb18>
 8006060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800606c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800607a:	b29b      	uxth	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006080:	4413      	add	r3, r2
 8006082:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	011a      	lsls	r2, r3, #4
 8006092:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006094:	4413      	add	r3, r2
 8006096:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800609a:	667b      	str	r3, [r7, #100]	@ 0x64
 800609c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80060b2:	d921      	bls.n	80060f8 <USB_EPStartXfer+0xac0>
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <USB_EPStartXfer+0xa9c>
 80060ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80060ce:	3b01      	subs	r3, #1
 80060d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80060d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29a      	uxth	r2, r3
 80060da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80060de:	b29b      	uxth	r3, r3
 80060e0:	029b      	lsls	r3, r3, #10
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	4313      	orrs	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e050      	b.n	800619a <USB_EPStartXfer+0xb62>
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <USB_EPStartXfer+0xade>
 8006100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610e:	b29a      	uxth	r2, r3
 8006110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	e041      	b.n	800619a <USB_EPStartXfer+0xb62>
 8006116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d004      	beq.n	8006136 <USB_EPStartXfer+0xafe>
 800612c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006130:	3301      	adds	r3, #1
 8006132:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29a      	uxth	r2, r3
 800613c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006140:	b29b      	uxth	r3, r3
 8006142:	029b      	lsls	r3, r3, #10
 8006144:	b29b      	uxth	r3, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	b29a      	uxth	r2, r3
 800614a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	e024      	b.n	800619a <USB_EPStartXfer+0xb62>
 8006150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	785b      	ldrb	r3, [r3, #1]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d11c      	bne.n	800619a <USB_EPStartXfer+0xb62>
 8006160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800616e:	b29b      	uxth	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006174:	4413      	add	r3, r2
 8006176:	673b      	str	r3, [r7, #112]	@ 0x70
 8006178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	011a      	lsls	r2, r3, #4
 8006186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006188:	4413      	add	r3, r2
 800618a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800618e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006194:	b29a      	uxth	r2, r3
 8006196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006198:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800619a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	895b      	ldrh	r3, [r3, #10]
 80061a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6959      	ldr	r1, [r3, #20]
 80061b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80061c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061c8:	6800      	ldr	r0, [r0, #0]
 80061ca:	f000 ff24 	bl	8007016 <USB_WritePMA>
 80061ce:	e0ca      	b.n	8006366 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d177      	bne.n	80062d0 <USB_EPStartXfer+0xc98>
 80061e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006200:	4413      	add	r3, r2
 8006202:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	011a      	lsls	r2, r3, #4
 8006212:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006214:	4413      	add	r3, r2
 8006216:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800621a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800621c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006226:	b29a      	uxth	r2, r3
 8006228:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006230:	2b3e      	cmp	r3, #62	@ 0x3e
 8006232:	d921      	bls.n	8006278 <USB_EPStartXfer+0xc40>
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800623e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <USB_EPStartXfer+0xc1c>
 800624a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800624e:	3b01      	subs	r3, #1
 8006250:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29a      	uxth	r2, r3
 800625a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800625e:	b29b      	uxth	r3, r3
 8006260:	029b      	lsls	r3, r3, #10
 8006262:	b29b      	uxth	r3, r3
 8006264:	4313      	orrs	r3, r2
 8006266:	b29b      	uxth	r3, r3
 8006268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800626c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006270:	b29a      	uxth	r2, r3
 8006272:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	e05c      	b.n	8006332 <USB_EPStartXfer+0xcfa>
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <USB_EPStartXfer+0xc5e>
 8006280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800628e:	b29a      	uxth	r2, r3
 8006290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006292:	801a      	strh	r2, [r3, #0]
 8006294:	e04d      	b.n	8006332 <USB_EPStartXfer+0xcfa>
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d004      	beq.n	80062b6 <USB_EPStartXfer+0xc7e>
 80062ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80062b0:	3301      	adds	r3, #1
 80062b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80062b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	029b      	lsls	r3, r3, #10
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	4313      	orrs	r3, r2
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	e030      	b.n	8006332 <USB_EPStartXfer+0xcfa>
 80062d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d128      	bne.n	8006332 <USB_EPStartXfer+0xcfa>
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006304:	4413      	add	r3, r2
 8006306:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800630a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	011a      	lsls	r2, r3, #4
 8006318:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800631c:	4413      	add	r3, r2
 800631e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006322:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632a:	b29a      	uxth	r2, r3
 800632c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006330:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	891b      	ldrh	r3, [r3, #8]
 800633e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6959      	ldr	r1, [r3, #20]
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006352:	b29b      	uxth	r3, r3
 8006354:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006358:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800635c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006360:	6800      	ldr	r0, [r0, #0]
 8006362:	f000 fe58 	bl	8007016 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800638c:	817b      	strh	r3, [r7, #10]
 800638e:	897b      	ldrh	r3, [r7, #10]
 8006390:	f083 0310 	eor.w	r3, r3, #16
 8006394:	817b      	strh	r3, [r7, #10]
 8006396:	897b      	ldrh	r3, [r7, #10]
 8006398:	f083 0320 	eor.w	r3, r3, #32
 800639c:	817b      	strh	r3, [r7, #10]
 800639e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	441a      	add	r2, r3
 80063b8:	897b      	ldrh	r3, [r7, #10]
 80063ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	8013      	strh	r3, [r2, #0]
 80063ce:	f000 bcde 	b.w	8006d8e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80063d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	7b1b      	ldrb	r3, [r3, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f040 80bb 	bne.w	800655a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80063e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d917      	bls.n	8006430 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006420:	1ad2      	subs	r2, r2, r3
 8006422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	619a      	str	r2, [r3, #24]
 800642e:	e00e      	b.n	800644e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800644e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800645c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006472:	4413      	add	r3, r2
 8006474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	011a      	lsls	r2, r3, #4
 8006486:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800648a:	4413      	add	r3, r2
 800648c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006490:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80064ae:	d924      	bls.n	80064fa <USB_EPStartXfer+0xec2>
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <USB_EPStartXfer+0xe98>
 80064c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80064ca:	3b01      	subs	r3, #1
 80064cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80064dc:	b29b      	uxth	r3, r3
 80064de:	029b      	lsls	r3, r3, #10
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	4313      	orrs	r3, r2
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064f4:	801a      	strh	r2, [r3, #0]
 80064f6:	f000 bc10 	b.w	8006d1a <USB_EPStartXfer+0x16e2>
 80064fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10c      	bne.n	800651c <USB_EPStartXfer+0xee4>
 8006502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006512:	b29a      	uxth	r2, r3
 8006514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006518:	801a      	strh	r2, [r3, #0]
 800651a:	e3fe      	b.n	8006d1a <USB_EPStartXfer+0x16e2>
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <USB_EPStartXfer+0xf04>
 8006532:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006536:	3301      	adds	r3, #1
 8006538:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800653c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29a      	uxth	r2, r3
 8006544:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006548:	b29b      	uxth	r3, r3
 800654a:	029b      	lsls	r3, r3, #10
 800654c:	b29b      	uxth	r3, r3
 800654e:	4313      	orrs	r3, r2
 8006550:	b29a      	uxth	r2, r3
 8006552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e3df      	b.n	8006d1a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800655a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	78db      	ldrb	r3, [r3, #3]
 8006566:	2b02      	cmp	r3, #2
 8006568:	f040 8218 	bne.w	800699c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800656c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 809d 	bne.w	80066b8 <USB_EPStartXfer+0x1080>
 800657e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800658c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800659a:	b29b      	uxth	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065a2:	4413      	add	r3, r2
 80065a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	011a      	lsls	r2, r3, #4
 80065b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065ba:	4413      	add	r3, r2
 80065bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80065e6:	d92b      	bls.n	8006640 <USB_EPStartXfer+0x1008>
 80065e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <USB_EPStartXfer+0xfe0>
 800660e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006612:	3b01      	subs	r3, #1
 8006614:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006618:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29a      	uxth	r2, r3
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006624:	b29b      	uxth	r3, r3
 8006626:	029b      	lsls	r3, r3, #10
 8006628:	b29b      	uxth	r3, r3
 800662a:	4313      	orrs	r3, r2
 800662c:	b29b      	uxth	r3, r3
 800662e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006636:	b29a      	uxth	r2, r3
 8006638:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	e070      	b.n	8006722 <USB_EPStartXfer+0x10ea>
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10c      	bne.n	800666a <USB_EPStartXfer+0x1032>
 8006650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29b      	uxth	r3, r3
 8006658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006660:	b29a      	uxth	r2, r3
 8006662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006666:	801a      	strh	r2, [r3, #0]
 8006668:	e05b      	b.n	8006722 <USB_EPStartXfer+0x10ea>
 800666a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d004      	beq.n	800669a <USB_EPStartXfer+0x1062>
 8006690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006694:	3301      	adds	r3, #1
 8006696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800669a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	029b      	lsls	r3, r3, #10
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4313      	orrs	r3, r2
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	e034      	b.n	8006722 <USB_EPStartXfer+0x10ea>
 80066b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d12c      	bne.n	8006722 <USB_EPStartXfer+0x10ea>
 80066c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80066ec:	4413      	add	r3, r2
 80066ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	011a      	lsls	r2, r3, #4
 8006700:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006704:	4413      	add	r3, r2
 8006706:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800670a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800670e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	b29a      	uxth	r2, r3
 800671c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006720:	801a      	strh	r2, [r3, #0]
 8006722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f040 809d 	bne.w	800687c <USB_EPStartXfer+0x1244>
 8006742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800675e:	b29b      	uxth	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006766:	4413      	add	r3, r2
 8006768:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800676c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	011a      	lsls	r2, r3, #4
 800677a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800677e:	4413      	add	r3, r2
 8006780:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006788:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006794:	b29a      	uxth	r2, r3
 8006796:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80067aa:	d92b      	bls.n	8006804 <USB_EPStartXfer+0x11cc>
 80067ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <USB_EPStartXfer+0x11a4>
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d6:	3b01      	subs	r3, #1
 80067d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	029b      	lsls	r3, r3, #10
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	4313      	orrs	r3, r2
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006800:	801a      	strh	r2, [r3, #0]
 8006802:	e069      	b.n	80068d8 <USB_EPStartXfer+0x12a0>
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10c      	bne.n	800682e <USB_EPStartXfer+0x11f6>
 8006814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006824:	b29a      	uxth	r2, r3
 8006826:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800682a:	801a      	strh	r2, [r3, #0]
 800682c:	e054      	b.n	80068d8 <USB_EPStartXfer+0x12a0>
 800682e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <USB_EPStartXfer+0x1226>
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006858:	3301      	adds	r3, #1
 800685a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800685e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29a      	uxth	r2, r3
 8006866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800686a:	b29b      	uxth	r3, r3
 800686c:	029b      	lsls	r3, r3, #10
 800686e:	b29b      	uxth	r3, r3
 8006870:	4313      	orrs	r3, r2
 8006872:	b29a      	uxth	r2, r3
 8006874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006878:	801a      	strh	r2, [r3, #0]
 800687a:	e02d      	b.n	80068d8 <USB_EPStartXfer+0x12a0>
 800687c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d125      	bne.n	80068d8 <USB_EPStartXfer+0x12a0>
 800688c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006890:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800689a:	b29b      	uxth	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068a2:	4413      	add	r3, r2
 80068a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	011a      	lsls	r2, r3, #4
 80068b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068ba:	4413      	add	r3, r2
 80068bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068d6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 8218 	beq.w	8006d1a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80068ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800690a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800690e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <USB_EPStartXfer+0x12ea>
 8006916:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800691a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10d      	bne.n	800693e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006922:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800692a:	2b00      	cmp	r3, #0
 800692c:	f040 81f5 	bne.w	8006d1a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006930:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	f040 81ee 	bne.w	8006d1a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800693e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006964:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800698a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006992:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006996:	b29b      	uxth	r3, r3
 8006998:	8013      	strh	r3, [r2, #0]
 800699a:	e1be      	b.n	8006d1a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800699c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	78db      	ldrb	r3, [r3, #3]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	f040 81b4 	bne.w	8006d16 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80069ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d917      	bls.n	80069fa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80069ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80069da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699a      	ldr	r2, [r3, #24]
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ea:	1ad2      	subs	r2, r2, r3
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	619a      	str	r2, [r3, #24]
 80069f8:	e00e      	b.n	8006a18 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80069fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2200      	movs	r2, #0
 8006a16:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f040 8085 	bne.w	8006b34 <USB_EPStartXfer+0x14fc>
 8006a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a4e:	4413      	add	r3, r2
 8006a50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	011a      	lsls	r2, r3, #4
 8006a62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a66:	4413      	add	r3, r2
 8006a68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a82:	801a      	strh	r2, [r3, #0]
 8006a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a88:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a8a:	d923      	bls.n	8006ad4 <USB_EPStartXfer+0x149c>
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d104      	bne.n	8006aac <USB_EPStartXfer+0x1474>
 8006aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	029b      	lsls	r3, r3, #10
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ad0:	801a      	strh	r2, [r3, #0]
 8006ad2:	e060      	b.n	8006b96 <USB_EPStartXfer+0x155e>
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10c      	bne.n	8006af6 <USB_EPStartXfer+0x14be>
 8006adc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	e04f      	b.n	8006b96 <USB_EPStartXfer+0x155e>
 8006af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afa:	085b      	lsrs	r3, r3, #1
 8006afc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d004      	beq.n	8006b16 <USB_EPStartXfer+0x14de>
 8006b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b10:	3301      	adds	r3, #1
 8006b12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	029b      	lsls	r3, r3, #10
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b30:	801a      	strh	r2, [r3, #0]
 8006b32:	e030      	b.n	8006b96 <USB_EPStartXfer+0x155e>
 8006b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d128      	bne.n	8006b96 <USB_EPStartXfer+0x155e>
 8006b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b68:	4413      	add	r3, r2
 8006b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	011a      	lsls	r2, r3, #4
 8006b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b80:	4413      	add	r3, r2
 8006b82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006b94:	801a      	strh	r2, [r3, #0]
 8006b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f040 8085 	bne.w	8006cc0 <USB_EPStartXfer+0x1688>
 8006bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006bda:	4413      	add	r3, r2
 8006bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	011a      	lsls	r2, r3, #4
 8006bee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c16:	d923      	bls.n	8006c60 <USB_EPStartXfer+0x1628>
 8006c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1c:	095b      	lsrs	r3, r3, #5
 8006c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <USB_EPStartXfer+0x1600>
 8006c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c32:	3b01      	subs	r3, #1
 8006c34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	029b      	lsls	r3, r3, #10
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	e05c      	b.n	8006d1a <USB_EPStartXfer+0x16e2>
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10c      	bne.n	8006c82 <USB_EPStartXfer+0x164a>
 8006c68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c7e:	801a      	strh	r2, [r3, #0]
 8006c80:	e04b      	b.n	8006d1a <USB_EPStartXfer+0x16e2>
 8006c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <USB_EPStartXfer+0x166a>
 8006c98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	029b      	lsls	r3, r3, #10
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cbc:	801a      	strh	r2, [r3, #0]
 8006cbe:	e02c      	b.n	8006d1a <USB_EPStartXfer+0x16e2>
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d124      	bne.n	8006d1a <USB_EPStartXfer+0x16e2>
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	011a      	lsls	r2, r3, #4
 8006cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cfe:	4413      	add	r3, r2
 8006d00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d12:	801a      	strh	r2, [r3, #0]
 8006d14:	e001      	b.n	8006d1a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e03a      	b.n	8006d90 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006d44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006d48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006d50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006d54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	441a      	add	r2, r3
 8006d76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	785b      	ldrb	r3, [r3, #1]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d020      	beq.n	8006dee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc2:	81bb      	strh	r3, [r7, #12]
 8006dc4:	89bb      	ldrh	r3, [r7, #12]
 8006dc6:	f083 0310 	eor.w	r3, r3, #16
 8006dca:	81bb      	strh	r3, [r7, #12]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	441a      	add	r2, r3
 8006dd6:	89bb      	ldrh	r3, [r7, #12]
 8006dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	8013      	strh	r3, [r2, #0]
 8006dec:	e01f      	b.n	8006e2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e04:	81fb      	strh	r3, [r7, #14]
 8006e06:	89fb      	ldrh	r3, [r7, #14]
 8006e08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e0c:	81fb      	strh	r3, [r7, #14]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	89fb      	ldrh	r3, [r7, #14]
 8006e1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr

08006e3a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b087      	sub	sp, #28
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	7b1b      	ldrb	r3, [r3, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f040 809d 	bne.w	8006f88 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d04c      	beq.n	8006ef0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	823b      	strh	r3, [r7, #16]
 8006e64:	8a3b      	ldrh	r3, [r7, #16]
 8006e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d01b      	beq.n	8006ea6 <USB_EPClearStall+0x6c>
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e84:	81fb      	strh	r3, [r7, #14]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	441a      	add	r2, r3
 8006e90:	89fb      	ldrh	r3, [r7, #14]
 8006e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	78db      	ldrb	r3, [r3, #3]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d06c      	beq.n	8006f88 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ec4:	81bb      	strh	r3, [r7, #12]
 8006ec6:	89bb      	ldrh	r3, [r7, #12]
 8006ec8:	f083 0320 	eor.w	r3, r3, #32
 8006ecc:	81bb      	strh	r3, [r7, #12]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	441a      	add	r2, r3
 8006ed8:	89bb      	ldrh	r3, [r7, #12]
 8006eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	8013      	strh	r3, [r2, #0]
 8006eee:	e04b      	b.n	8006f88 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	82fb      	strh	r3, [r7, #22]
 8006efe:	8afb      	ldrh	r3, [r7, #22]
 8006f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01b      	beq.n	8006f40 <USB_EPClearStall+0x106>
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1e:	82bb      	strh	r3, [r7, #20]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	441a      	add	r2, r3
 8006f2a:	8abb      	ldrh	r3, [r7, #20]
 8006f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f56:	827b      	strh	r3, [r7, #18]
 8006f58:	8a7b      	ldrh	r3, [r7, #18]
 8006f5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f5e:	827b      	strh	r3, [r7, #18]
 8006f60:	8a7b      	ldrh	r3, [r7, #18]
 8006f62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f66:	827b      	strh	r3, [r7, #18]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	8a7b      	ldrh	r3, [r7, #18]
 8006f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d103      	bne.n	8006fae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2280      	movs	r2, #128	@ 0x80
 8006faa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr

08006fba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr

08006fce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr

08006fe2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr

08007016 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007016:	b480      	push	{r7}
 8007018:	b08b      	sub	sp, #44	@ 0x2c
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	4611      	mov	r1, r2
 8007022:	461a      	mov	r2, r3
 8007024:	460b      	mov	r3, r1
 8007026:	80fb      	strh	r3, [r7, #6]
 8007028:	4613      	mov	r3, r2
 800702a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800702c:	88bb      	ldrh	r3, [r7, #4]
 800702e:	3301      	adds	r3, #1
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	005a      	lsls	r2, r3, #1
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007048:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	627b      	str	r3, [r7, #36]	@ 0x24
 800704e:	e01e      	b.n	800708e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	3301      	adds	r3, #1
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	b21a      	sxth	r2, r3
 8007060:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007064:	4313      	orrs	r3, r2
 8007066:	b21b      	sxth	r3, r3
 8007068:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	8a7a      	ldrh	r2, [r7, #18]
 800706e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	3302      	adds	r3, #2
 8007074:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	3302      	adds	r3, #2
 800707a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	3301      	adds	r3, #1
 8007080:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	3301      	adds	r3, #1
 8007086:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708a:	3b01      	subs	r3, #1
 800708c:	627b      	str	r3, [r7, #36]	@ 0x24
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1dd      	bne.n	8007050 <USB_WritePMA+0x3a>
  }
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	372c      	adds	r7, #44	@ 0x2c
 800709a:	46bd      	mov	sp, r7
 800709c:	bc80      	pop	{r7}
 800709e:	4770      	bx	lr

080070a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b08b      	sub	sp, #44	@ 0x2c
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4611      	mov	r1, r2
 80070ac:	461a      	mov	r2, r3
 80070ae:	460b      	mov	r3, r1
 80070b0:	80fb      	strh	r3, [r7, #6]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80070b6:	88bb      	ldrh	r3, [r7, #4]
 80070b8:	085b      	lsrs	r3, r3, #1
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	005a      	lsls	r2, r3, #1
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d8:	e01b      	b.n	8007112 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	3302      	adds	r3, #2
 80070e6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	3301      	adds	r3, #1
 80070f4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	3301      	adds	r3, #1
 8007104:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	3302      	adds	r3, #2
 800710a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	3b01      	subs	r3, #1
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e0      	bne.n	80070da <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007118:	88bb      	ldrh	r3, [r7, #4]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d007      	beq.n	8007134 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29b      	uxth	r3, r3
 800712a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	701a      	strb	r2, [r3, #0]
  }
}
 8007134:	bf00      	nop
 8007136:	372c      	adds	r7, #44	@ 0x2c
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr
	...

08007140 <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]

  USBD_LL_OpenEP(pdev,
 8007150:	2340      	movs	r3, #64	@ 0x40
 8007152:	2202      	movs	r2, #2
 8007154:	2181      	movs	r1, #129	@ 0x81
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 fc49 	bl	80089ee <USBD_LL_OpenEP>
                 MIDI_EPIN_ADDR,
                 USBD_EP_TYPE_BULK,
                 MIDI_EPIN_SIZE);

  USBD_LL_OpenEP(pdev,
 800715c:	2340      	movs	r3, #64	@ 0x40
 800715e:	2202      	movs	r2, #2
 8007160:	2101      	movs	r1, #1
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fc43 	bl	80089ee <USBD_LL_OpenEP>
               MIDI_EPOUT_ADDR,
               USBD_EP_TYPE_BULK,
               MIDI_EPOUT_SIZE);

  USBD_LL_PrepareReceive(pdev,
 8007168:	2340      	movs	r3, #64	@ 0x40
 800716a:	4a0f      	ldr	r2, [pc, #60]	@ (80071a8 <USBD_MIDI_Init+0x68>)
 800716c:	2101      	movs	r1, #1
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fd2d 	bl	8008bce <USBD_LL_PrepareReceive>
               MIDI_EPOUT_ADDR,
               usb_rx_buffer,
               MIDI_EPOUT_SIZE);

  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 8007174:	2010      	movs	r0, #16
 8007176:	f001 fd4d 	bl	8008c14 <USBD_static_malloc>
 800717a:	4602      	mov	r2, r0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if(pdev->pClassData == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007188:	2b00      	cmp	r3, #0
 800718a:	d102      	bne.n	8007192 <USBD_MIDI_Init+0x52>
  {
    ret = 1;
 800718c:	2301      	movs	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]
 8007190:	e004      	b.n	800719c <USBD_MIDI_Init+0x5c>
  }
  else
  {
    ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007198:	2200      	movs	r2, #0
 800719a:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	200001e8 	.word	0x200001e8

080071ac <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  /* Close MIDI EPs */
  USBD_LL_CloseEP(pdev, MIDI_EPIN_SIZE);
 80071b8:	2140      	movs	r1, #64	@ 0x40
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 fc3d 	bl	8008a3a <USBD_LL_CloseEP>

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <USBD_MIDI_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 fd2b 	bl	8008c2c <USBD_static_free>
    pdev->pClassData = NULL;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
  USBD_MIDI_HandleTypeDef     *hmidi = pdev->pClassData;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007200:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800720a:	2b00      	cmp	r3, #0
 800720c:	d044      	beq.n	8007298 <USBD_MIDI_Setup+0xb0>
 800720e:	2b20      	cmp	r3, #32
 8007210:	d171      	bne.n	80072f6 <USBD_MIDI_Setup+0x10e>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	785b      	ldrb	r3, [r3, #1]
 8007216:	3b02      	subs	r3, #2
 8007218:	2b09      	cmp	r3, #9
 800721a:	d836      	bhi.n	800728a <USBD_MIDI_Setup+0xa2>
 800721c:	a201      	add	r2, pc, #4	@ (adr r2, 8007224 <USBD_MIDI_Setup+0x3c>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	0800727b 	.word	0x0800727b
 8007228:	0800725b 	.word	0x0800725b
 800722c:	0800728b 	.word	0x0800728b
 8007230:	0800728b 	.word	0x0800728b
 8007234:	0800728b 	.word	0x0800728b
 8007238:	0800728b 	.word	0x0800728b
 800723c:	0800728b 	.word	0x0800728b
 8007240:	0800728b 	.word	0x0800728b
 8007244:	08007269 	.word	0x08007269
 8007248:	0800724d 	.word	0x0800724d
    {
      case MIDI_REQ_SET_PROTOCOL:
        hmidi->Protocol = (uint8_t)(req->wValue);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	885b      	ldrh	r3, [r3, #2]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	601a      	str	r2, [r3, #0]
        break;
 8007258:	e01d      	b.n	8007296 <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_PROTOCOL:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->Protocol,
 800725a:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 800725c:	2201      	movs	r2, #1
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 f8fd 	bl	8008460 <USBD_CtlSendData>
                          1);
        break;
 8007266:	e016      	b.n	8007296 <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_SET_IDLE:
        hmidi->IdleState = (uint8_t)(req->wValue >> 8);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	885b      	ldrh	r3, [r3, #2]
 800726c:	0a1b      	lsrs	r3, r3, #8
 800726e:	b29b      	uxth	r3, r3
 8007270:	b2db      	uxtb	r3, r3
 8007272:	461a      	mov	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	605a      	str	r2, [r3, #4]
        break;
 8007278:	e00d      	b.n	8007296 <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_IDLE:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->IdleState,
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3304      	adds	r3, #4
        USBD_CtlSendData (pdev,
 800727e:	2201      	movs	r2, #1
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 f8ec 	bl	8008460 <USBD_CtlSendData>
                          1);
        break;
 8007288:	e005      	b.n	8007296 <USBD_MIDI_Setup+0xae>

      default:
        USBD_CtlError (pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 f87d 	bl	800838c <USBD_CtlError>
        return USBD_FAIL;
 8007292:	2302      	movs	r3, #2
 8007294:	e030      	b.n	80072f8 <USBD_MIDI_Setup+0x110>
    }
    break;
 8007296:	e02e      	b.n	80072f6 <USBD_MIDI_Setup+0x10e>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	785b      	ldrb	r3, [r3, #1]
 800729c:	2b0b      	cmp	r3, #11
 800729e:	d023      	beq.n	80072e8 <USBD_MIDI_Setup+0x100>
 80072a0:	2b0b      	cmp	r3, #11
 80072a2:	dc28      	bgt.n	80072f6 <USBD_MIDI_Setup+0x10e>
 80072a4:	2b06      	cmp	r3, #6
 80072a6:	d002      	beq.n	80072ae <USBD_MIDI_Setup+0xc6>
 80072a8:	2b0a      	cmp	r3, #10
 80072aa:	d015      	beq.n	80072d8 <USBD_MIDI_Setup+0xf0>
 80072ac:	e023      	b.n	80072f6 <USBD_MIDI_Setup+0x10e>
    {
      case USB_REQ_GET_DESCRIPTOR:
        if( req->wValue >> 8 == MIDI_DESCRIPTOR_TYPE)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	885b      	ldrh	r3, [r3, #2]
 80072b2:	0a1b      	lsrs	r3, r3, #8
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b21      	cmp	r3, #33	@ 0x21
 80072b8:	d107      	bne.n	80072ca <USBD_MIDI_Setup+0xe2>
        {
          pbuf = USBD_MIDI_CfgDesc + USB_MIDI_CLASS_DESC_SHIFT;
 80072ba:	4b11      	ldr	r3, [pc, #68]	@ (8007300 <USBD_MIDI_Setup+0x118>)
 80072bc:	613b      	str	r3, [r7, #16]
          len = MIN(USB_MIDI_DESC_SIZE , req->wLength);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	88db      	ldrh	r3, [r3, #6]
 80072c2:	2b07      	cmp	r3, #7
 80072c4:	bf28      	it	cs
 80072c6:	2307      	movcs	r3, #7
 80072c8:	82fb      	strh	r3, [r7, #22]
        }

        USBD_CtlSendData (pdev, pbuf, len);
 80072ca:	8afb      	ldrh	r3, [r7, #22]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6939      	ldr	r1, [r7, #16]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 f8c5 	bl	8008460 <USBD_CtlSendData>
        break;
 80072d6:	e00e      	b.n	80072f6 <USBD_MIDI_Setup+0x10e>

      case USB_REQ_GET_INTERFACE :
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->AltSetting,
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3308      	adds	r3, #8
        USBD_CtlSendData (pdev,
 80072dc:	2201      	movs	r2, #1
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 f8bd 	bl	8008460 <USBD_CtlSendData>
                          1);
        break;
 80072e6:	e006      	b.n	80072f6 <USBD_MIDI_Setup+0x10e>

      case USB_REQ_SET_INTERFACE :
        hmidi->AltSetting = (uint8_t)(req->wValue);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	885b      	ldrh	r3, [r3, #2]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	461a      	mov	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	609a      	str	r2, [r3, #8]
        break;
 80072f4:	bf00      	nop
    }
  }
  return USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	2000006e 	.word	0x2000006e

08007304 <USBD_MIDI_GetState>:
  *         Get MIDI State
  * @param  pdev: device instance
  * @retval usb state  (MIDI_IDLE, MIDI_BUSY)
  */
uint8_t USBD_MIDI_GetState(USBD_HandleTypeDef  *pdev)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  return ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007312:	7b1b      	ldrb	r3, [r3, #12]
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr

0800731e <USBD_MIDI_SendPackets>:
  * @retval status
  */
uint8_t USBD_MIDI_SendPackets(USBD_HandleTypeDef  *pdev,
                                 uint8_t *data,
                                 uint16_t len)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b086      	sub	sp, #24
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	4613      	mov	r3, r2
 800732a:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef *hmidi = pdev->pClassData;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007332:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800733a:	2b03      	cmp	r3, #3
 800733c:	d10c      	bne.n	8007358 <USBD_MIDI_SendPackets+0x3a>
  {
    if(hmidi->state == MIDI_IDLE)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	7b1b      	ldrb	r3, [r3, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d108      	bne.n	8007358 <USBD_MIDI_SendPackets+0x3a>
    {
      hmidi->state = MIDI_BUSY;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2201      	movs	r2, #1
 800734a:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev, MIDI_EPIN_ADDR, data, len);
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	2181      	movs	r1, #129	@ 0x81
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f001 fc18 	bl	8008b88 <USBD_LL_Transmit>
    }
  }
  return USBD_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2253      	movs	r2, #83	@ 0x53
 8007370:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8007372:	4b03      	ldr	r3, [pc, #12]	@ (8007380 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	bc80      	pop	{r7}
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	2000005c 	.word	0x2000005c

08007384 <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007396:	2200      	movs	r2, #0
 8007398:	731a      	strb	r2, [r3, #12]

  USBD_MIDI_OnPacketsSent();
 800739a:	f000 f805 	bl	80073a8 <USBD_MIDI_OnPacketsSent>

  return USBD_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_MIDI_OnPacketsSent>:
/**
  * @brief  USBD_MIDI_OnPacketsSent
  *         on usb midi packets sent to the host callback
  */
__weak extern void USBD_MIDI_OnPacketsSent(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
}
 80073ac:	bf00      	nop
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr

080073b4 <USBD_MIDI_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  uint8_t len;

  if (epnum != (MIDI_EPOUT_ADDR & 0x0F)) return USBD_FAIL;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d001      	beq.n	80073ca <USBD_MIDI_DataOut+0x16>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e015      	b.n	80073f6 <USBD_MIDI_DataOut+0x42>

  len = (uint8_t)HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, epnum);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073d0:	78fa      	ldrb	r2, [r7, #3]
 80073d2:	4611      	mov	r1, r2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fa ffa0 	bl	800231a <HAL_PCD_EP_GetRxCount>
 80073da:	4603      	mov	r3, r0
 80073dc:	73fb      	strb	r3, [r7, #15]

  USBD_MIDI_OnPacketsReceived(usb_rx_buffer, len);
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	4619      	mov	r1, r3
 80073e2:	4807      	ldr	r0, [pc, #28]	@ (8007400 <USBD_MIDI_DataOut+0x4c>)
 80073e4:	f000 f80e 	bl	8007404 <USBD_MIDI_OnPacketsReceived>

  USBD_LL_PrepareReceive(pdev, MIDI_EPOUT_ADDR, usb_rx_buffer, MIDI_EPOUT_SIZE);
 80073e8:	2340      	movs	r3, #64	@ 0x40
 80073ea:	4a05      	ldr	r2, [pc, #20]	@ (8007400 <USBD_MIDI_DataOut+0x4c>)
 80073ec:	2101      	movs	r1, #1
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f001 fbed 	bl	8008bce <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	200001e8 	.word	0x200001e8

08007404 <USBD_MIDI_OnPacketsReceived>:
  *         on usb midi packets received from the host callback
  * @param  data: pointer to the data packet
  * @param  len: size of the data
  */
__weak extern void USBD_MIDI_OnPacketsReceived(uint8_t *data, uint8_t len)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  UNUSED(data);
  UNUSED(len);
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr
	...

0800741c <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	220a      	movs	r2, #10
 8007428:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 800742a:	4b03      	ldr	r3, [pc, #12]	@ (8007438 <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	200000b0 	.word	0x200000b0

0800743c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	4613      	mov	r3, r2
 8007448:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007450:	2302      	movs	r3, #2
 8007452:	e01a      	b.n	800748a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	79fa      	ldrb	r2, [r7, #7]
 8007480:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f001 fa48 	bl	8008918 <USBD_LL_Init>

  return USBD_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007492:	b480      	push	{r7}
 8007494:	b085      	sub	sp, #20
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d006      	beq.n	80074b4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
 80074b2:	e001      	b.n	80074b8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80074b4:	2302      	movs	r3, #2
 80074b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 fa73 	bl	80089b8 <USBD_LL_Start>

  return USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bc80      	pop	{r7}
 80074ee:	4770      	bx	lr

080074f0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074fc:	2302      	movs	r3, #2
 80074fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00c      	beq.n	8007524 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	4611      	mov	r1, r2
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007524:	7bfb      	ldrb	r3, [r7, #15]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	4611      	mov	r1, r2
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	4798      	blx	r3

  return USBD_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fed7 	bl	800831a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007588:	f003 031f 	and.w	r3, r3, #31
 800758c:	2b02      	cmp	r3, #2
 800758e:	d016      	beq.n	80075be <USBD_LL_SetupStage+0x6a>
 8007590:	2b02      	cmp	r3, #2
 8007592:	d81c      	bhi.n	80075ce <USBD_LL_SetupStage+0x7a>
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <USBD_LL_SetupStage+0x4a>
 8007598:	2b01      	cmp	r3, #1
 800759a:	d008      	beq.n	80075ae <USBD_LL_SetupStage+0x5a>
 800759c:	e017      	b.n	80075ce <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f9ca 	bl	8007940 <USBD_StdDevReq>
      break;
 80075ac:	e01a      	b.n	80075e4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa2c 	bl	8007a14 <USBD_StdItfReq>
      break;
 80075bc:	e012      	b.n	80075e4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fa6c 	bl	8007aa4 <USBD_StdEPReq>
      break;
 80075cc:	e00a      	b.n	80075e4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80075d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fa4b 	bl	8008a78 <USBD_LL_StallEP>
      break;
 80075e2:	bf00      	nop
  }

  return USBD_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	460b      	mov	r3, r1
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d14b      	bne.n	800769a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007608:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007610:	2b03      	cmp	r3, #3
 8007612:	d134      	bne.n	800767e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	429a      	cmp	r2, r3
 800761e:	d919      	bls.n	8007654 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	68da      	ldr	r2, [r3, #12]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007636:	429a      	cmp	r2, r3
 8007638:	d203      	bcs.n	8007642 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800763e:	b29b      	uxth	r3, r3
 8007640:	e002      	b.n	8007648 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007646:	b29b      	uxth	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 ff35 	bl	80084bc <USBD_CtlContinueRx>
 8007652:	e038      	b.n	80076c6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007666:	2b03      	cmp	r3, #3
 8007668:	d105      	bne.n	8007676 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 ff32 	bl	80084e0 <USBD_CtlSendStatus>
 800767c:	e023      	b.n	80076c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007684:	2b05      	cmp	r3, #5
 8007686:	d11e      	bne.n	80076c6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007690:	2100      	movs	r1, #0
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f001 f9f0 	bl	8008a78 <USBD_LL_StallEP>
 8007698:	e015      	b.n	80076c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00d      	beq.n	80076c2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d108      	bne.n	80076c2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	7afa      	ldrb	r2, [r7, #11]
 80076ba:	4611      	mov	r1, r2
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	4798      	blx	r3
 80076c0:	e001      	b.n	80076c6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076c2:	2302      	movs	r3, #2
 80076c4:	e000      	b.n	80076c8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	460b      	mov	r3, r1
 80076da:	607a      	str	r2, [r7, #4]
 80076dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d17f      	bne.n	80077e4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	3314      	adds	r3, #20
 80076e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d15c      	bne.n	80077ae <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d915      	bls.n	800772c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	1ad2      	subs	r2, r2, r3
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	b29b      	uxth	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 febd 	bl	8008498 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800771e:	2300      	movs	r3, #0
 8007720:	2200      	movs	r2, #0
 8007722:	2100      	movs	r1, #0
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f001 fa52 	bl	8008bce <USBD_LL_PrepareReceive>
 800772a:	e04e      	b.n	80077ca <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	6912      	ldr	r2, [r2, #16]
 8007734:	fbb3 f1f2 	udiv	r1, r3, r2
 8007738:	fb01 f202 	mul.w	r2, r1, r2
 800773c:	1a9b      	subs	r3, r3, r2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d11c      	bne.n	800777c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800774a:	429a      	cmp	r2, r3
 800774c:	d316      	bcc.n	800777c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007758:	429a      	cmp	r2, r3
 800775a:	d20f      	bcs.n	800777c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800775c:	2200      	movs	r2, #0
 800775e:	2100      	movs	r1, #0
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fe99 	bl	8008498 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800776e:	2300      	movs	r3, #0
 8007770:	2200      	movs	r2, #0
 8007772:	2100      	movs	r1, #0
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f001 fa2a 	bl	8008bce <USBD_LL_PrepareReceive>
 800777a:	e026      	b.n	80077ca <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800778e:	2b03      	cmp	r3, #3
 8007790:	d105      	bne.n	800779e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800779e:	2180      	movs	r1, #128	@ 0x80
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f001 f969 	bl	8008a78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fead 	bl	8008506 <USBD_CtlReceiveStatus>
 80077ac:	e00d      	b.n	80077ca <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d004      	beq.n	80077c2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d103      	bne.n	80077ca <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80077c2:	2180      	movs	r1, #128	@ 0x80
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f001 f957 	bl	8008a78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d11d      	bne.n	8007810 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff fe81 	bl	80074dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80077e2:	e015      	b.n	8007810 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d108      	bne.n	800780c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	7afa      	ldrb	r2, [r7, #11]
 8007804:	4611      	mov	r1, r2
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	4798      	blx	r3
 800780a:	e001      	b.n	8007810 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800780c:	2302      	movs	r3, #2
 800780e:	e000      	b.n	8007812 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007822:	2340      	movs	r3, #64	@ 0x40
 8007824:	2200      	movs	r2, #0
 8007826:	2100      	movs	r1, #0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 f8e0 	bl	80089ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2240      	movs	r2, #64	@ 0x40
 800783a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800783e:	2340      	movs	r3, #64	@ 0x40
 8007840:	2200      	movs	r2, #0
 8007842:	2180      	movs	r1, #128	@ 0x80
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 f8d2 	bl	80089ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2240      	movs	r2, #64	@ 0x40
 8007854:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6852      	ldr	r2, [r2, #4]
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	4611      	mov	r1, r2
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
  }

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2204      	movs	r2, #4
 80078d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	bc80      	pop	{r7}
 80078e0:	4770      	bx	lr

080078e2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d105      	bne.n	8007900 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	bc80      	pop	{r7}
 800790a:	4770      	bx	lr

0800790c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791a:	2b03      	cmp	r3, #3
 800791c:	d10b      	bne.n	8007936 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007956:	2b40      	cmp	r3, #64	@ 0x40
 8007958:	d005      	beq.n	8007966 <USBD_StdDevReq+0x26>
 800795a:	2b40      	cmp	r3, #64	@ 0x40
 800795c:	d84f      	bhi.n	80079fe <USBD_StdDevReq+0xbe>
 800795e:	2b00      	cmp	r3, #0
 8007960:	d009      	beq.n	8007976 <USBD_StdDevReq+0x36>
 8007962:	2b20      	cmp	r3, #32
 8007964:	d14b      	bne.n	80079fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	4798      	blx	r3
      break;
 8007974:	e048      	b.n	8007a08 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	785b      	ldrb	r3, [r3, #1]
 800797a:	2b09      	cmp	r3, #9
 800797c:	d839      	bhi.n	80079f2 <USBD_StdDevReq+0xb2>
 800797e:	a201      	add	r2, pc, #4	@ (adr r2, 8007984 <USBD_StdDevReq+0x44>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	080079d5 	.word	0x080079d5
 8007988:	080079e9 	.word	0x080079e9
 800798c:	080079f3 	.word	0x080079f3
 8007990:	080079df 	.word	0x080079df
 8007994:	080079f3 	.word	0x080079f3
 8007998:	080079b7 	.word	0x080079b7
 800799c:	080079ad 	.word	0x080079ad
 80079a0:	080079f3 	.word	0x080079f3
 80079a4:	080079cb 	.word	0x080079cb
 80079a8:	080079c1 	.word	0x080079c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f9dc 	bl	8007d6c <USBD_GetDescriptor>
          break;
 80079b4:	e022      	b.n	80079fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fb3f 	bl	800803c <USBD_SetAddress>
          break;
 80079be:	e01d      	b.n	80079fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fb7e 	bl	80080c4 <USBD_SetConfig>
          break;
 80079c8:	e018      	b.n	80079fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc07 	bl	80081e0 <USBD_GetConfig>
          break;
 80079d2:	e013      	b.n	80079fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fc37 	bl	800824a <USBD_GetStatus>
          break;
 80079dc:	e00e      	b.n	80079fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fc65 	bl	80082b0 <USBD_SetFeature>
          break;
 80079e6:	e009      	b.n	80079fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fc74 	bl	80082d8 <USBD_ClrFeature>
          break;
 80079f0:	e004      	b.n	80079fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fcc9 	bl	800838c <USBD_CtlError>
          break;
 80079fa:	bf00      	nop
      }
      break;
 80079fc:	e004      	b.n	8007a08 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fcc3 	bl	800838c <USBD_CtlError>
      break;
 8007a06:	bf00      	nop
  }

  return ret;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop

08007a14 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a2a:	2b40      	cmp	r3, #64	@ 0x40
 8007a2c:	d005      	beq.n	8007a3a <USBD_StdItfReq+0x26>
 8007a2e:	2b40      	cmp	r3, #64	@ 0x40
 8007a30:	d82e      	bhi.n	8007a90 <USBD_StdItfReq+0x7c>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <USBD_StdItfReq+0x26>
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d12a      	bne.n	8007a90 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a40:	3b01      	subs	r3, #1
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d81d      	bhi.n	8007a82 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	889b      	ldrh	r3, [r3, #4]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d813      	bhi.n	8007a78 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	88db      	ldrh	r3, [r3, #6]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d110      	bne.n	8007a8c <USBD_StdItfReq+0x78>
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10d      	bne.n	8007a8c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fd35 	bl	80084e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a76:	e009      	b.n	8007a8c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fc86 	bl	800838c <USBD_CtlError>
          break;
 8007a80:	e004      	b.n	8007a8c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fc81 	bl	800838c <USBD_CtlError>
          break;
 8007a8a:	e000      	b.n	8007a8e <USBD_StdItfReq+0x7a>
          break;
 8007a8c:	bf00      	nop
      }
      break;
 8007a8e:	e004      	b.n	8007a9a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fc7a 	bl	800838c <USBD_CtlError>
      break;
 8007a98:	bf00      	nop
  }

  return USBD_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	889b      	ldrh	r3, [r3, #4]
 8007ab6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ac0:	2b40      	cmp	r3, #64	@ 0x40
 8007ac2:	d007      	beq.n	8007ad4 <USBD_StdEPReq+0x30>
 8007ac4:	2b40      	cmp	r3, #64	@ 0x40
 8007ac6:	f200 8146 	bhi.w	8007d56 <USBD_StdEPReq+0x2b2>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <USBD_StdEPReq+0x40>
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	f040 8141 	bne.w	8007d56 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
      break;
 8007ae2:	e13d      	b.n	8007d60 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	d10a      	bne.n	8007b06 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	e12d      	b.n	8007d62 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d007      	beq.n	8007b1e <USBD_StdEPReq+0x7a>
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	f300 811b 	bgt.w	8007d4a <USBD_StdEPReq+0x2a6>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d072      	beq.n	8007bfe <USBD_StdEPReq+0x15a>
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d03a      	beq.n	8007b92 <USBD_StdEPReq+0xee>
 8007b1c:	e115      	b.n	8007d4a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d002      	beq.n	8007b2e <USBD_StdEPReq+0x8a>
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d015      	beq.n	8007b58 <USBD_StdEPReq+0xb4>
 8007b2c:	e02b      	b.n	8007b86 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00c      	beq.n	8007b4e <USBD_StdEPReq+0xaa>
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	2b80      	cmp	r3, #128	@ 0x80
 8007b38:	d009      	beq.n	8007b4e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 ff9a 	bl	8008a78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b44:	2180      	movs	r1, #128	@ 0x80
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 ff96 	bl	8008a78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b4c:	e020      	b.n	8007b90 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fc1b 	bl	800838c <USBD_CtlError>
              break;
 8007b56:	e01b      	b.n	8007b90 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	885b      	ldrh	r3, [r3, #2]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10e      	bne.n	8007b7e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00b      	beq.n	8007b7e <USBD_StdEPReq+0xda>
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b80      	cmp	r3, #128	@ 0x80
 8007b6a:	d008      	beq.n	8007b7e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	88db      	ldrh	r3, [r3, #6]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 ff7d 	bl	8008a78 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fcae 	bl	80084e0 <USBD_CtlSendStatus>

              break;
 8007b84:	e004      	b.n	8007b90 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fbff 	bl	800838c <USBD_CtlError>
              break;
 8007b8e:	bf00      	nop
          }
          break;
 8007b90:	e0e0      	b.n	8007d54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d002      	beq.n	8007ba2 <USBD_StdEPReq+0xfe>
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d015      	beq.n	8007bcc <USBD_StdEPReq+0x128>
 8007ba0:	e026      	b.n	8007bf0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00c      	beq.n	8007bc2 <USBD_StdEPReq+0x11e>
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	2b80      	cmp	r3, #128	@ 0x80
 8007bac:	d009      	beq.n	8007bc2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 ff60 	bl	8008a78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007bb8:	2180      	movs	r1, #128	@ 0x80
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 ff5c 	bl	8008a78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bc0:	e01c      	b.n	8007bfc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fbe1 	bl	800838c <USBD_CtlError>
              break;
 8007bca:	e017      	b.n	8007bfc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	885b      	ldrh	r3, [r3, #2]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d112      	bne.n	8007bfa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 ff67 	bl	8008ab6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fc79 	bl	80084e0 <USBD_CtlSendStatus>
              }
              break;
 8007bee:	e004      	b.n	8007bfa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fbca 	bl	800838c <USBD_CtlError>
              break;
 8007bf8:	e000      	b.n	8007bfc <USBD_StdEPReq+0x158>
              break;
 8007bfa:	bf00      	nop
          }
          break;
 8007bfc:	e0aa      	b.n	8007d54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d002      	beq.n	8007c0e <USBD_StdEPReq+0x16a>
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d032      	beq.n	8007c72 <USBD_StdEPReq+0x1ce>
 8007c0c:	e097      	b.n	8007d3e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <USBD_StdEPReq+0x180>
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	2b80      	cmp	r3, #128	@ 0x80
 8007c18:	d004      	beq.n	8007c24 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fbb5 	bl	800838c <USBD_CtlError>
                break;
 8007c22:	e091      	b.n	8007d48 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	da0b      	bge.n	8007c44 <USBD_StdEPReq+0x1a0>
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	3310      	adds	r3, #16
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	3304      	adds	r3, #4
 8007c42:	e00b      	b.n	8007c5c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	4413      	add	r3, r2
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2202      	movs	r2, #2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fbf8 	bl	8008460 <USBD_CtlSendData>
              break;
 8007c70:	e06a      	b.n	8007d48 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	da11      	bge.n	8007c9e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	f003 020f 	and.w	r2, r3, #15
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	3318      	adds	r3, #24
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d117      	bne.n	8007cc4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fb78 	bl	800838c <USBD_CtlError>
                  break;
 8007c9c:	e054      	b.n	8007d48 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	f003 020f 	and.w	r2, r3, #15
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d104      	bne.n	8007cc4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fb65 	bl	800838c <USBD_CtlError>
                  break;
 8007cc2:	e041      	b.n	8007d48 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	da0b      	bge.n	8007ce4 <USBD_StdEPReq+0x240>
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	3310      	adds	r3, #16
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	4413      	add	r3, r2
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	e00b      	b.n	8007cfc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <USBD_StdEPReq+0x266>
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b80      	cmp	r3, #128	@ 0x80
 8007d08:	d103      	bne.n	8007d12 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	e00e      	b.n	8007d30 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 feec 	bl	8008af4 <USBD_LL_IsStallEP>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2201      	movs	r2, #1
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e002      	b.n	8007d30 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2202      	movs	r2, #2
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fb92 	bl	8008460 <USBD_CtlSendData>
              break;
 8007d3c:	e004      	b.n	8007d48 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fb23 	bl	800838c <USBD_CtlError>
              break;
 8007d46:	bf00      	nop
          }
          break;
 8007d48:	e004      	b.n	8007d54 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fb1d 	bl	800838c <USBD_CtlError>
          break;
 8007d52:	bf00      	nop
      }
      break;
 8007d54:	e004      	b.n	8007d60 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fb17 	bl	800838c <USBD_CtlError>
      break;
 8007d5e:	bf00      	nop
  }

  return ret;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	885b      	ldrh	r3, [r3, #2]
 8007d86:	0a1b      	lsrs	r3, r3, #8
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	2b06      	cmp	r3, #6
 8007d8e:	f200 8128 	bhi.w	8007fe2 <USBD_GetDescriptor+0x276>
 8007d92:	a201      	add	r2, pc, #4	@ (adr r2, 8007d98 <USBD_GetDescriptor+0x2c>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007db5 	.word	0x08007db5
 8007d9c:	08007dcd 	.word	0x08007dcd
 8007da0:	08007e0d 	.word	0x08007e0d
 8007da4:	08007fe3 	.word	0x08007fe3
 8007da8:	08007fe3 	.word	0x08007fe3
 8007dac:	08007f83 	.word	0x08007f83
 8007db0:	08007faf 	.word	0x08007faf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	7c12      	ldrb	r2, [r2, #16]
 8007dc0:	f107 0108 	add.w	r1, r7, #8
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	60f8      	str	r0, [r7, #12]
      break;
 8007dca:	e112      	b.n	8007ff2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	7c1b      	ldrb	r3, [r3, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10d      	bne.n	8007df0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ddc:	f107 0208 	add.w	r2, r7, #8
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3301      	adds	r3, #1
 8007dea:	2202      	movs	r2, #2
 8007dec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007dee:	e100      	b.n	8007ff2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df8:	f107 0208 	add.w	r2, r7, #8
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4798      	blx	r3
 8007e00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3301      	adds	r3, #1
 8007e06:	2202      	movs	r2, #2
 8007e08:	701a      	strb	r2, [r3, #0]
      break;
 8007e0a:	e0f2      	b.n	8007ff2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	885b      	ldrh	r3, [r3, #2]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b05      	cmp	r3, #5
 8007e14:	f200 80ac 	bhi.w	8007f70 <USBD_GetDescriptor+0x204>
 8007e18:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <USBD_GetDescriptor+0xb4>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e39 	.word	0x08007e39
 8007e24:	08007e6d 	.word	0x08007e6d
 8007e28:	08007ea1 	.word	0x08007ea1
 8007e2c:	08007ed5 	.word	0x08007ed5
 8007e30:	08007f09 	.word	0x08007f09
 8007e34:	08007f3d 	.word	0x08007f3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	7c12      	ldrb	r2, [r2, #16]
 8007e50:	f107 0108 	add.w	r1, r7, #8
 8007e54:	4610      	mov	r0, r2
 8007e56:	4798      	blx	r3
 8007e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e5a:	e091      	b.n	8007f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa94 	bl	800838c <USBD_CtlError>
            err++;
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	3301      	adds	r3, #1
 8007e68:	72fb      	strb	r3, [r7, #11]
          break;
 8007e6a:	e089      	b.n	8007f80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	7c12      	ldrb	r2, [r2, #16]
 8007e84:	f107 0108 	add.w	r1, r7, #8
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4798      	blx	r3
 8007e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e8e:	e077      	b.n	8007f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa7a 	bl	800838c <USBD_CtlError>
            err++;
 8007e98:	7afb      	ldrb	r3, [r7, #11]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e9e:	e06f      	b.n	8007f80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	7c12      	ldrb	r2, [r2, #16]
 8007eb8:	f107 0108 	add.w	r1, r7, #8
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4798      	blx	r3
 8007ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ec2:	e05d      	b.n	8007f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa60 	bl	800838c <USBD_CtlError>
            err++;
 8007ecc:	7afb      	ldrb	r3, [r7, #11]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ed2:	e055      	b.n	8007f80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	7c12      	ldrb	r2, [r2, #16]
 8007eec:	f107 0108 	add.w	r1, r7, #8
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4798      	blx	r3
 8007ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ef6:	e043      	b.n	8007f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa46 	bl	800838c <USBD_CtlError>
            err++;
 8007f00:	7afb      	ldrb	r3, [r7, #11]
 8007f02:	3301      	adds	r3, #1
 8007f04:	72fb      	strb	r3, [r7, #11]
          break;
 8007f06:	e03b      	b.n	8007f80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00b      	beq.n	8007f2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7c12      	ldrb	r2, [r2, #16]
 8007f20:	f107 0108 	add.w	r1, r7, #8
 8007f24:	4610      	mov	r0, r2
 8007f26:	4798      	blx	r3
 8007f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f2a:	e029      	b.n	8007f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa2c 	bl	800838c <USBD_CtlError>
            err++;
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	3301      	adds	r3, #1
 8007f38:	72fb      	strb	r3, [r7, #11]
          break;
 8007f3a:	e021      	b.n	8007f80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	7c12      	ldrb	r2, [r2, #16]
 8007f54:	f107 0108 	add.w	r1, r7, #8
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4798      	blx	r3
 8007f5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f5e:	e00f      	b.n	8007f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa12 	bl	800838c <USBD_CtlError>
            err++;
 8007f68:	7afb      	ldrb	r3, [r7, #11]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f6e:	e007      	b.n	8007f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fa0a 	bl	800838c <USBD_CtlError>
          err++;
 8007f78:	7afb      	ldrb	r3, [r7, #11]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007f7e:	e038      	b.n	8007ff2 <USBD_GetDescriptor+0x286>
 8007f80:	e037      	b.n	8007ff2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	7c1b      	ldrb	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d109      	bne.n	8007f9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f92:	f107 0208 	add.w	r2, r7, #8
 8007f96:	4610      	mov	r0, r2
 8007f98:	4798      	blx	r3
 8007f9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f9c:	e029      	b.n	8007ff2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f9f3 	bl	800838c <USBD_CtlError>
        err++;
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	72fb      	strb	r3, [r7, #11]
      break;
 8007fac:	e021      	b.n	8007ff2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	7c1b      	ldrb	r3, [r3, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10d      	bne.n	8007fd2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fbe:	f107 0208 	add.w	r2, r7, #8
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	4798      	blx	r3
 8007fc6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	2207      	movs	r2, #7
 8007fce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fd0:	e00f      	b.n	8007ff2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f9d9 	bl	800838c <USBD_CtlError>
        err++;
 8007fda:	7afb      	ldrb	r3, [r7, #11]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	72fb      	strb	r3, [r7, #11]
      break;
 8007fe0:	e007      	b.n	8007ff2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f9d1 	bl	800838c <USBD_CtlError>
      err++;
 8007fea:	7afb      	ldrb	r3, [r7, #11]
 8007fec:	3301      	adds	r3, #1
 8007fee:	72fb      	strb	r3, [r7, #11]
      break;
 8007ff0:	bf00      	nop
  }

  if (err != 0U)
 8007ff2:	7afb      	ldrb	r3, [r7, #11]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d11c      	bne.n	8008032 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ff8:	893b      	ldrh	r3, [r7, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d011      	beq.n	8008022 <USBD_GetDescriptor+0x2b6>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	88db      	ldrh	r3, [r3, #6]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00d      	beq.n	8008022 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	88da      	ldrh	r2, [r3, #6]
 800800a:	893b      	ldrh	r3, [r7, #8]
 800800c:	4293      	cmp	r3, r2
 800800e:	bf28      	it	cs
 8008010:	4613      	movcs	r3, r2
 8008012:	b29b      	uxth	r3, r3
 8008014:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008016:	893b      	ldrh	r3, [r7, #8]
 8008018:	461a      	mov	r2, r3
 800801a:	68f9      	ldr	r1, [r7, #12]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fa1f 	bl	8008460 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	88db      	ldrh	r3, [r3, #6]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d104      	bne.n	8008034 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fa58 	bl	80084e0 <USBD_CtlSendStatus>
 8008030:	e000      	b.n	8008034 <USBD_GetDescriptor+0x2c8>
    return;
 8008032:	bf00      	nop
    }
  }
}
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop

0800803c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	889b      	ldrh	r3, [r3, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d130      	bne.n	80080b0 <USBD_SetAddress+0x74>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	88db      	ldrh	r3, [r3, #6]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d12c      	bne.n	80080b0 <USBD_SetAddress+0x74>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	885b      	ldrh	r3, [r3, #2]
 800805a:	2b7f      	cmp	r3, #127	@ 0x7f
 800805c:	d828      	bhi.n	80080b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	885b      	ldrh	r3, [r3, #2]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008068:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008070:	2b03      	cmp	r3, #3
 8008072:	d104      	bne.n	800807e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f988 	bl	800838c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807c:	e01d      	b.n	80080ba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	7bfa      	ldrb	r2, [r7, #15]
 8008082:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fd5d 	bl	8008b4a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fa25 	bl	80084e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d004      	beq.n	80080a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a4:	e009      	b.n	80080ba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ae:	e004      	b.n	80080ba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f96a 	bl	800838c <USBD_CtlError>
  }
}
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	885b      	ldrh	r3, [r3, #2]
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	4b41      	ldr	r3, [pc, #260]	@ (80081dc <USBD_SetConfig+0x118>)
 80080d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080d8:	4b40      	ldr	r3, [pc, #256]	@ (80081dc <USBD_SetConfig+0x118>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d904      	bls.n	80080ea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f952 	bl	800838c <USBD_CtlError>
 80080e8:	e075      	b.n	80081d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d002      	beq.n	80080fa <USBD_SetConfig+0x36>
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d023      	beq.n	8008140 <USBD_SetConfig+0x7c>
 80080f8:	e062      	b.n	80081c0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80080fa:	4b38      	ldr	r3, [pc, #224]	@ (80081dc <USBD_SetConfig+0x118>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d01a      	beq.n	8008138 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008102:	4b36      	ldr	r3, [pc, #216]	@ (80081dc <USBD_SetConfig+0x118>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2203      	movs	r2, #3
 8008110:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008114:	4b31      	ldr	r3, [pc, #196]	@ (80081dc <USBD_SetConfig+0x118>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff f9e8 	bl	80074f0 <USBD_SetClassConfig>
 8008120:	4603      	mov	r3, r0
 8008122:	2b02      	cmp	r3, #2
 8008124:	d104      	bne.n	8008130 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f92f 	bl	800838c <USBD_CtlError>
            return;
 800812e:	e052      	b.n	80081d6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f9d5 	bl	80084e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008136:	e04e      	b.n	80081d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f9d1 	bl	80084e0 <USBD_CtlSendStatus>
        break;
 800813e:	e04a      	b.n	80081d6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008140:	4b26      	ldr	r3, [pc, #152]	@ (80081dc <USBD_SetConfig+0x118>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d112      	bne.n	800816e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008150:	4b22      	ldr	r3, [pc, #136]	@ (80081dc <USBD_SetConfig+0x118>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800815a:	4b20      	ldr	r3, [pc, #128]	@ (80081dc <USBD_SetConfig+0x118>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff f9e4 	bl	800752e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9ba 	bl	80084e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800816c:	e033      	b.n	80081d6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800816e:	4b1b      	ldr	r3, [pc, #108]	@ (80081dc <USBD_SetConfig+0x118>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	d01d      	beq.n	80081b8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff f9d2 	bl	800752e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800818a:	4b14      	ldr	r3, [pc, #80]	@ (80081dc <USBD_SetConfig+0x118>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008194:	4b11      	ldr	r3, [pc, #68]	@ (80081dc <USBD_SetConfig+0x118>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff f9a8 	bl	80074f0 <USBD_SetClassConfig>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d104      	bne.n	80081b0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f8ef 	bl	800838c <USBD_CtlError>
            return;
 80081ae:	e012      	b.n	80081d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f995 	bl	80084e0 <USBD_CtlSendStatus>
        break;
 80081b6:	e00e      	b.n	80081d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f991 	bl	80084e0 <USBD_CtlSendStatus>
        break;
 80081be:	e00a      	b.n	80081d6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f8e2 	bl	800838c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80081c8:	4b04      	ldr	r3, [pc, #16]	@ (80081dc <USBD_SetConfig+0x118>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff f9ad 	bl	800752e <USBD_ClrClassConfig>
        break;
 80081d4:	bf00      	nop
    }
  }
}
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20000228 	.word	0x20000228

080081e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	88db      	ldrh	r3, [r3, #6]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d004      	beq.n	80081fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f8c9 	bl	800838c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081fa:	e022      	b.n	8008242 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008202:	2b02      	cmp	r3, #2
 8008204:	dc02      	bgt.n	800820c <USBD_GetConfig+0x2c>
 8008206:	2b00      	cmp	r3, #0
 8008208:	dc03      	bgt.n	8008212 <USBD_GetConfig+0x32>
 800820a:	e015      	b.n	8008238 <USBD_GetConfig+0x58>
 800820c:	2b03      	cmp	r3, #3
 800820e:	d00b      	beq.n	8008228 <USBD_GetConfig+0x48>
 8008210:	e012      	b.n	8008238 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3308      	adds	r3, #8
 800821c:	2201      	movs	r2, #1
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f91d 	bl	8008460 <USBD_CtlSendData>
        break;
 8008226:	e00c      	b.n	8008242 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3304      	adds	r3, #4
 800822c:	2201      	movs	r2, #1
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f915 	bl	8008460 <USBD_CtlSendData>
        break;
 8008236:	e004      	b.n	8008242 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8a6 	bl	800838c <USBD_CtlError>
        break;
 8008240:	bf00      	nop
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800825a:	3b01      	subs	r3, #1
 800825c:	2b02      	cmp	r3, #2
 800825e:	d81e      	bhi.n	800829e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	88db      	ldrh	r3, [r3, #6]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d004      	beq.n	8008272 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f88e 	bl	800838c <USBD_CtlError>
        break;
 8008270:	e01a      	b.n	80082a8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800827e:	2b00      	cmp	r3, #0
 8008280:	d005      	beq.n	800828e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f043 0202 	orr.w	r2, r3, #2
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	330c      	adds	r3, #12
 8008292:	2202      	movs	r2, #2
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f8e2 	bl	8008460 <USBD_CtlSendData>
      break;
 800829c:	e004      	b.n	80082a8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f873 	bl	800838c <USBD_CtlError>
      break;
 80082a6:	bf00      	nop
  }
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	885b      	ldrh	r3, [r3, #2]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d106      	bne.n	80082d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f908 	bl	80084e0 <USBD_CtlSendStatus>
  }
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e8:	3b01      	subs	r3, #1
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d80b      	bhi.n	8008306 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	885b      	ldrh	r3, [r3, #2]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d10c      	bne.n	8008310 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f8ee 	bl	80084e0 <USBD_CtlSendStatus>
      }
      break;
 8008304:	e004      	b.n	8008310 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f83f 	bl	800838c <USBD_CtlError>
      break;
 800830e:	e000      	b.n	8008312 <USBD_ClrFeature+0x3a>
      break;
 8008310:	bf00      	nop
  }
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	785a      	ldrb	r2, [r3, #1]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	3302      	adds	r3, #2
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	3303      	adds	r3, #3
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	b29b      	uxth	r3, r3
 8008346:	4413      	add	r3, r2
 8008348:	b29a      	uxth	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	3304      	adds	r3, #4
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	461a      	mov	r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	3305      	adds	r3, #5
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	021b      	lsls	r3, r3, #8
 800835e:	b29b      	uxth	r3, r3
 8008360:	4413      	add	r3, r2
 8008362:	b29a      	uxth	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	3306      	adds	r3, #6
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	3307      	adds	r3, #7
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	b29b      	uxth	r3, r3
 800837a:	4413      	add	r3, r2
 800837c:	b29a      	uxth	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	80da      	strh	r2, [r3, #6]

}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	bc80      	pop	{r7}
 800838a:	4770      	bx	lr

0800838c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008396:	2180      	movs	r1, #128	@ 0x80
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fb6d 	bl	8008a78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800839e:	2100      	movs	r1, #0
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fb69 	bl	8008a78 <USBD_LL_StallEP>
}
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b086      	sub	sp, #24
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d032      	beq.n	800842a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f834 	bl	8008432 <USBD_GetLen>
 80083ca:	4603      	mov	r3, r0
 80083cc:	3301      	adds	r3, #1
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	75fa      	strb	r2, [r7, #23]
 80083de:	461a      	mov	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	4413      	add	r3, r2
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	7812      	ldrb	r2, [r2, #0]
 80083e8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	75fa      	strb	r2, [r7, #23]
 80083f0:	461a      	mov	r2, r3
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	4413      	add	r3, r2
 80083f6:	2203      	movs	r2, #3
 80083f8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80083fa:	e012      	b.n	8008422 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	60fa      	str	r2, [r7, #12]
 8008402:	7dfa      	ldrb	r2, [r7, #23]
 8008404:	1c51      	adds	r1, r2, #1
 8008406:	75f9      	strb	r1, [r7, #23]
 8008408:	4611      	mov	r1, r2
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	440a      	add	r2, r1
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	75fa      	strb	r2, [r7, #23]
 8008418:	461a      	mov	r2, r3
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	4413      	add	r3, r2
 800841e:	2200      	movs	r2, #0
 8008420:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1e8      	bne.n	80083fc <USBD_GetString+0x4e>
    }
  }
}
 800842a:	bf00      	nop
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800843e:	e005      	b.n	800844c <USBD_GetLen+0x1a>
  {
    len++;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	3301      	adds	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3301      	adds	r3, #1
 800844a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1f5      	bne.n	8008440 <USBD_GetLen+0xe>
  }

  return len;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	bc80      	pop	{r7}
 800845e:	4770      	bx	lr

08008460 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	4613      	mov	r3, r2
 800846c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2202      	movs	r2, #2
 8008472:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008476:	88fa      	ldrh	r2, [r7, #6]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800847c:	88fa      	ldrh	r2, [r7, #6]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	2100      	movs	r1, #0
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 fb7d 	bl	8008b88 <USBD_LL_Transmit>

  return USBD_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084a6:	88fb      	ldrh	r3, [r7, #6]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	2100      	movs	r1, #0
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 fb6b 	bl	8008b88 <USBD_LL_Transmit>

  return USBD_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	4613      	mov	r3, r2
 80084c8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	2100      	movs	r1, #0
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 fb7c 	bl	8008bce <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2204      	movs	r2, #4
 80084ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084f0:	2300      	movs	r3, #0
 80084f2:	2200      	movs	r2, #0
 80084f4:	2100      	movs	r1, #0
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fb46 	bl	8008b88 <USBD_LL_Transmit>

  return USBD_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2205      	movs	r2, #5
 8008512:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008516:	2300      	movs	r3, #0
 8008518:	2200      	movs	r2, #0
 800851a:	2100      	movs	r1, #0
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fb56 	bl	8008bce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008530:	2200      	movs	r2, #0
 8008532:	490e      	ldr	r1, [pc, #56]	@ (800856c <MX_USB_DEVICE_Init+0x40>)
 8008534:	480e      	ldr	r0, [pc, #56]	@ (8008570 <MX_USB_DEVICE_Init+0x44>)
 8008536:	f7fe ff81 	bl	800743c <USBD_Init>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008540:	f7f8 f888 	bl	8000654 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 8008544:	490b      	ldr	r1, [pc, #44]	@ (8008574 <MX_USB_DEVICE_Init+0x48>)
 8008546:	480a      	ldr	r0, [pc, #40]	@ (8008570 <MX_USB_DEVICE_Init+0x44>)
 8008548:	f7fe ffa3 	bl	8007492 <USBD_RegisterClass>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008552:	f7f8 f87f 	bl	8000654 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008556:	4806      	ldr	r0, [pc, #24]	@ (8008570 <MX_USB_DEVICE_Init+0x44>)
 8008558:	f7fe ffb4 	bl	80074c4 <USBD_Start>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008562:	f7f8 f877 	bl	8000654 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008566:	bf00      	nop
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	200000bc 	.word	0x200000bc
 8008570:	2000022c 	.word	0x2000022c
 8008574:	20000024 	.word	0x20000024

08008578 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	4603      	mov	r3, r0
 8008580:	6039      	str	r1, [r7, #0]
 8008582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2212      	movs	r2, #18
 8008588:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800858a:	4b03      	ldr	r3, [pc, #12]	@ (8008598 <USBD_FS_DeviceDescriptor+0x20>)
}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	200000d8 	.word	0x200000d8

0800859c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	6039      	str	r1, [r7, #0]
 80085a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2204      	movs	r2, #4
 80085ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085ae:	4b03      	ldr	r3, [pc, #12]	@ (80085bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	200000ec 	.word	0x200000ec

080085c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	6039      	str	r1, [r7, #0]
 80085ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d105      	bne.n	80085de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4907      	ldr	r1, [pc, #28]	@ (80085f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80085d6:	4808      	ldr	r0, [pc, #32]	@ (80085f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80085d8:	f7ff fee9 	bl	80083ae <USBD_GetString>
 80085dc:	e004      	b.n	80085e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	4904      	ldr	r1, [pc, #16]	@ (80085f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80085e2:	4805      	ldr	r0, [pc, #20]	@ (80085f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80085e4:	f7ff fee3 	bl	80083ae <USBD_GetString>
  }
  return USBD_StrDesc;
 80085e8:	4b02      	ldr	r3, [pc, #8]	@ (80085f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	200004f0 	.word	0x200004f0
 80085f8:	08008d1c 	.word	0x08008d1c

080085fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	4904      	ldr	r1, [pc, #16]	@ (800861c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800860c:	4804      	ldr	r0, [pc, #16]	@ (8008620 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800860e:	f7ff fece 	bl	80083ae <USBD_GetString>
  return USBD_StrDesc;
 8008612:	4b02      	ldr	r3, [pc, #8]	@ (800861c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	200004f0 	.word	0x200004f0
 8008620:	08008d34 	.word	0x08008d34

08008624 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	6039      	str	r1, [r7, #0]
 800862e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	221a      	movs	r2, #26
 8008634:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008636:	f000 f843 	bl	80086c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800863a:	4b02      	ldr	r3, [pc, #8]	@ (8008644 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	200000f0 	.word	0x200000f0

08008648 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	4603      	mov	r3, r0
 8008650:	6039      	str	r1, [r7, #0]
 8008652:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d105      	bne.n	8008666 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	4907      	ldr	r1, [pc, #28]	@ (800867c <USBD_FS_ConfigStrDescriptor+0x34>)
 800865e:	4808      	ldr	r0, [pc, #32]	@ (8008680 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008660:	f7ff fea5 	bl	80083ae <USBD_GetString>
 8008664:	e004      	b.n	8008670 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	4904      	ldr	r1, [pc, #16]	@ (800867c <USBD_FS_ConfigStrDescriptor+0x34>)
 800866a:	4805      	ldr	r0, [pc, #20]	@ (8008680 <USBD_FS_ConfigStrDescriptor+0x38>)
 800866c:	f7ff fe9f 	bl	80083ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008670:	4b02      	ldr	r3, [pc, #8]	@ (800867c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	200004f0 	.word	0x200004f0
 8008680:	08008d44 	.word	0x08008d44

08008684 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	6039      	str	r1, [r7, #0]
 800868e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d105      	bne.n	80086a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	4907      	ldr	r1, [pc, #28]	@ (80086b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800869a:	4808      	ldr	r0, [pc, #32]	@ (80086bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800869c:	f7ff fe87 	bl	80083ae <USBD_GetString>
 80086a0:	e004      	b.n	80086ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	4904      	ldr	r1, [pc, #16]	@ (80086b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086a6:	4805      	ldr	r0, [pc, #20]	@ (80086bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086a8:	f7ff fe81 	bl	80083ae <USBD_GetString>
  }
  return USBD_StrDesc;
 80086ac:	4b02      	ldr	r3, [pc, #8]	@ (80086b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200004f0 	.word	0x200004f0
 80086bc:	08008d50 	.word	0x08008d50

080086c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008704 <Get_SerialNum+0x44>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008708 <Get_SerialNum+0x48>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086d2:	4b0e      	ldr	r3, [pc, #56]	@ (800870c <Get_SerialNum+0x4c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d009      	beq.n	80086fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086e6:	2208      	movs	r2, #8
 80086e8:	4909      	ldr	r1, [pc, #36]	@ (8008710 <Get_SerialNum+0x50>)
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 f814 	bl	8008718 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086f0:	2204      	movs	r2, #4
 80086f2:	4908      	ldr	r1, [pc, #32]	@ (8008714 <Get_SerialNum+0x54>)
 80086f4:	68b8      	ldr	r0, [r7, #8]
 80086f6:	f000 f80f 	bl	8008718 <IntToUnicode>
  }
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	1ffff7e8 	.word	0x1ffff7e8
 8008708:	1ffff7ec 	.word	0x1ffff7ec
 800870c:	1ffff7f0 	.word	0x1ffff7f0
 8008710:	200000f2 	.word	0x200000f2
 8008714:	20000102 	.word	0x20000102

08008718 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800872a:	2300      	movs	r3, #0
 800872c:	75fb      	strb	r3, [r7, #23]
 800872e:	e027      	b.n	8008780 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	0f1b      	lsrs	r3, r3, #28
 8008734:	2b09      	cmp	r3, #9
 8008736:	d80b      	bhi.n	8008750 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	0f1b      	lsrs	r3, r3, #28
 800873c:	b2da      	uxtb	r2, r3
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	005b      	lsls	r3, r3, #1
 8008742:	4619      	mov	r1, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	440b      	add	r3, r1
 8008748:	3230      	adds	r2, #48	@ 0x30
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	e00a      	b.n	8008766 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	0f1b      	lsrs	r3, r3, #28
 8008754:	b2da      	uxtb	r2, r3
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	4619      	mov	r1, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	440b      	add	r3, r1
 8008760:	3237      	adds	r2, #55	@ 0x37
 8008762:	b2d2      	uxtb	r2, r2
 8008764:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	3301      	adds	r3, #1
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	4413      	add	r3, r2
 8008776:	2200      	movs	r2, #0
 8008778:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	3301      	adds	r3, #1
 800877e:	75fb      	strb	r3, [r7, #23]
 8008780:	7dfa      	ldrb	r2, [r7, #23]
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	429a      	cmp	r2, r3
 8008786:	d3d3      	bcc.n	8008730 <IntToUnicode+0x18>
  }
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	bc80      	pop	{r7}
 8008792:	4770      	bx	lr

08008794 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a0d      	ldr	r2, [pc, #52]	@ (80087d8 <HAL_PCD_MspInit+0x44>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d113      	bne.n	80087ce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <HAL_PCD_MspInit+0x48>)
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	4a0c      	ldr	r2, [pc, #48]	@ (80087dc <HAL_PCD_MspInit+0x48>)
 80087ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80087b0:	61d3      	str	r3, [r2, #28]
 80087b2:	4b0a      	ldr	r3, [pc, #40]	@ (80087dc <HAL_PCD_MspInit+0x48>)
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80087be:	2200      	movs	r2, #0
 80087c0:	2100      	movs	r1, #0
 80087c2:	2014      	movs	r0, #20
 80087c4:	f7f9 f891 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80087c8:	2014      	movs	r0, #20
 80087ca:	f7f9 f8aa 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40005c00 	.word	0x40005c00
 80087dc:	40021000 	.word	0x40021000

080087e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80087f4:	4619      	mov	r1, r3
 80087f6:	4610      	mov	r0, r2
 80087f8:	f7fe feac 	bl	8007554 <USBD_LL_SetupStage>
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	440b      	add	r3, r1
 8008824:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	4619      	mov	r1, r3
 800882e:	f7fe fede 	bl	80075ee <USBD_LL_DataOutStage>
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800884c:	78fa      	ldrb	r2, [r7, #3]
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	4613      	mov	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	440b      	add	r3, r1
 800885a:	3324      	adds	r3, #36	@ 0x24
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	4619      	mov	r1, r3
 8008862:	f7fe ff35 	bl	80076d0 <USBD_LL_DataInStage>
}
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff f845 	bl	800790c <USBD_LL_SOF>
}
 8008882:	bf00      	nop
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008892:	2301      	movs	r3, #1
 8008894:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	799b      	ldrb	r3, [r3, #6]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d001      	beq.n	80088a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800889e:	f7f7 fed9 	bl	8000654 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088a8:	7bfa      	ldrb	r2, [r7, #15]
 80088aa:	4611      	mov	r1, r2
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fe fff5 	bl	800789c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe ffae 	bl	800781a <USBD_LL_Reset>
}
 80088be:	bf00      	nop
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe ffef 	bl	80078ba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7a9b      	ldrb	r3, [r3, #10]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088e4:	4b04      	ldr	r3, [pc, #16]	@ (80088f8 <HAL_PCD_SuspendCallback+0x30>)
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	4a03      	ldr	r2, [pc, #12]	@ (80088f8 <HAL_PCD_SuspendCallback+0x30>)
 80088ea:	f043 0306 	orr.w	r3, r3, #6
 80088ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	e000ed00 	.word	0xe000ed00

080088fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe ffe9 	bl	80078e2 <USBD_LL_Resume>
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008920:	4a23      	ldr	r2, [pc, #140]	@ (80089b0 <USBD_LL_Init+0x98>)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a21      	ldr	r2, [pc, #132]	@ (80089b0 <USBD_LL_Init+0x98>)
 800892c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008930:	4b1f      	ldr	r3, [pc, #124]	@ (80089b0 <USBD_LL_Init+0x98>)
 8008932:	4a20      	ldr	r2, [pc, #128]	@ (80089b4 <USBD_LL_Init+0x9c>)
 8008934:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008936:	4b1e      	ldr	r3, [pc, #120]	@ (80089b0 <USBD_LL_Init+0x98>)
 8008938:	2208      	movs	r2, #8
 800893a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800893c:	4b1c      	ldr	r3, [pc, #112]	@ (80089b0 <USBD_LL_Init+0x98>)
 800893e:	2202      	movs	r2, #2
 8008940:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008942:	4b1b      	ldr	r3, [pc, #108]	@ (80089b0 <USBD_LL_Init+0x98>)
 8008944:	2200      	movs	r2, #0
 8008946:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008948:	4b19      	ldr	r3, [pc, #100]	@ (80089b0 <USBD_LL_Init+0x98>)
 800894a:	2200      	movs	r2, #0
 800894c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800894e:	4b18      	ldr	r3, [pc, #96]	@ (80089b0 <USBD_LL_Init+0x98>)
 8008950:	2200      	movs	r2, #0
 8008952:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008954:	4816      	ldr	r0, [pc, #88]	@ (80089b0 <USBD_LL_Init+0x98>)
 8008956:	f7f9 f99a 	bl	8001c8e <HAL_PCD_Init>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008960:	f7f7 fe78 	bl	8000654 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800896a:	2318      	movs	r3, #24
 800896c:	2200      	movs	r2, #0
 800896e:	2100      	movs	r1, #0
 8008970:	f7fa feab 	bl	80036ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800897a:	2358      	movs	r3, #88	@ 0x58
 800897c:	2200      	movs	r2, #0
 800897e:	2180      	movs	r1, #128	@ 0x80
 8008980:	f7fa fea3 	bl	80036ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xC0);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800898a:	23c0      	movs	r3, #192	@ 0xc0
 800898c:	2200      	movs	r2, #0
 800898e:	2101      	movs	r1, #1
 8008990:	f7fa fe9b 	bl	80036ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800899a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800899e:	2200      	movs	r2, #0
 80089a0:	2181      	movs	r1, #129	@ 0x81
 80089a2:	f7fa fe92 	bl	80036ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	200006f0 	.word	0x200006f0
 80089b4:	40005c00 	.word	0x40005c00

080089b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f9 fa53 	bl	8001e7a <HAL_PCD_Start>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f93a 	bl	8008c54 <USBD_Get_USB_Status>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	4608      	mov	r0, r1
 80089f8:	4611      	mov	r1, r2
 80089fa:	461a      	mov	r2, r3
 80089fc:	4603      	mov	r3, r0
 80089fe:	70fb      	strb	r3, [r7, #3]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70bb      	strb	r3, [r7, #2]
 8008a04:	4613      	mov	r3, r2
 8008a06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a16:	78bb      	ldrb	r3, [r7, #2]
 8008a18:	883a      	ldrh	r2, [r7, #0]
 8008a1a:	78f9      	ldrb	r1, [r7, #3]
 8008a1c:	f7f9 fba7 	bl	800216e <HAL_PCD_EP_Open>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 f914 	bl	8008c54 <USBD_Get_USB_Status>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a54:	78fa      	ldrb	r2, [r7, #3]
 8008a56:	4611      	mov	r1, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7f9 fbe5 	bl	8002228 <HAL_PCD_EP_Close>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 f8f5 	bl	8008c54 <USBD_Get_USB_Status>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a92:	78fa      	ldrb	r2, [r7, #3]
 8008a94:	4611      	mov	r1, r2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f9 fc8d 	bl	80023b6 <HAL_PCD_EP_SetStall>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 f8d6 	bl	8008c54 <USBD_Get_USB_Status>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ad0:	78fa      	ldrb	r2, [r7, #3]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7f9 fcce 	bl	8002476 <HAL_PCD_EP_ClrStall>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 f8b7 	bl	8008c54 <USBD_Get_USB_Status>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	da0b      	bge.n	8008b28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b10:	78fb      	ldrb	r3, [r7, #3]
 8008b12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b16:	68f9      	ldr	r1, [r7, #12]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	440b      	add	r3, r1
 8008b22:	3312      	adds	r3, #18
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	e00b      	b.n	8008b40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	440b      	add	r3, r1
 8008b3a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008b3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr

08008b4a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	4611      	mov	r1, r2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7f9 fadc 	bl	8002126 <HAL_PCD_SetAddress>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 f86d 	bl	8008c54 <USBD_Get_USB_Status>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	607a      	str	r2, [r7, #4]
 8008b92:	461a      	mov	r2, r3
 8008b94:	460b      	mov	r3, r1
 8008b96:	72fb      	strb	r3, [r7, #11]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008baa:	893b      	ldrh	r3, [r7, #8]
 8008bac:	7af9      	ldrb	r1, [r7, #11]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	f7f9 fbca 	bl	8002348 <HAL_PCD_EP_Transmit>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 f84a 	bl	8008c54 <USBD_Get_USB_Status>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bc4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b086      	sub	sp, #24
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	460b      	mov	r3, r1
 8008bdc:	72fb      	strb	r3, [r7, #11]
 8008bde:	4613      	mov	r3, r2
 8008be0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bf0:	893b      	ldrh	r3, [r7, #8]
 8008bf2:	7af9      	ldrb	r1, [r7, #11]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	f7f9 fb5f 	bl	80022b8 <HAL_PCD_EP_Receive>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 f827 	bl	8008c54 <USBD_Get_USB_Status>
 8008c06:	4603      	mov	r3, r0
 8008c08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MIDI_HandleTypeDef)/4)+1];;/* On 32-bit boundary */
  return mem;
 8008c1c:	4b02      	ldr	r3, [pc, #8]	@ (8008c28 <USBD_static_malloc+0x14>)
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bc80      	pop	{r7}
 8008c26:	4770      	bx	lr
 8008c28:	200009c8 	.word	0x200009c8

08008c2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]

}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr

08008c3e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr

08008c54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d817      	bhi.n	8008c98 <USBD_Get_USB_Status+0x44>
 8008c68:	a201      	add	r2, pc, #4	@ (adr r2, 8008c70 <USBD_Get_USB_Status+0x1c>)
 8008c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008c81 	.word	0x08008c81
 8008c74:	08008c87 	.word	0x08008c87
 8008c78:	08008c8d 	.word	0x08008c8d
 8008c7c:	08008c93 	.word	0x08008c93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73fb      	strb	r3, [r7, #15]
    break;
 8008c84:	e00b      	b.n	8008c9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c86:	2302      	movs	r3, #2
 8008c88:	73fb      	strb	r3, [r7, #15]
    break;
 8008c8a:	e008      	b.n	8008c9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c90:	e005      	b.n	8008c9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c92:	2302      	movs	r3, #2
 8008c94:	73fb      	strb	r3, [r7, #15]
    break;
 8008c96:	e002      	b.n	8008c9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9c:	bf00      	nop
  }
  return usb_status;
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bc80      	pop	{r7}
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop

08008cac <memset>:
 8008cac:	4603      	mov	r3, r0
 8008cae:	4402      	add	r2, r0
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d100      	bne.n	8008cb6 <memset+0xa>
 8008cb4:	4770      	bx	lr
 8008cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8008cba:	e7f9      	b.n	8008cb0 <memset+0x4>

08008cbc <__libc_init_array>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	2600      	movs	r6, #0
 8008cc0:	4d0c      	ldr	r5, [pc, #48]	@ (8008cf4 <__libc_init_array+0x38>)
 8008cc2:	4c0d      	ldr	r4, [pc, #52]	@ (8008cf8 <__libc_init_array+0x3c>)
 8008cc4:	1b64      	subs	r4, r4, r5
 8008cc6:	10a4      	asrs	r4, r4, #2
 8008cc8:	42a6      	cmp	r6, r4
 8008cca:	d109      	bne.n	8008ce0 <__libc_init_array+0x24>
 8008ccc:	f000 f81a 	bl	8008d04 <_init>
 8008cd0:	2600      	movs	r6, #0
 8008cd2:	4d0a      	ldr	r5, [pc, #40]	@ (8008cfc <__libc_init_array+0x40>)
 8008cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8008d00 <__libc_init_array+0x44>)
 8008cd6:	1b64      	subs	r4, r4, r5
 8008cd8:	10a4      	asrs	r4, r4, #2
 8008cda:	42a6      	cmp	r6, r4
 8008cdc:	d105      	bne.n	8008cea <__libc_init_array+0x2e>
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
 8008ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce4:	4798      	blx	r3
 8008ce6:	3601      	adds	r6, #1
 8008ce8:	e7ee      	b.n	8008cc8 <__libc_init_array+0xc>
 8008cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cee:	4798      	blx	r3
 8008cf0:	3601      	adds	r6, #1
 8008cf2:	e7f2      	b.n	8008cda <__libc_init_array+0x1e>
 8008cf4:	08008da0 	.word	0x08008da0
 8008cf8:	08008da0 	.word	0x08008da0
 8008cfc:	08008da0 	.word	0x08008da0
 8008d00:	08008da4 	.word	0x08008da4

08008d04 <_init>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	bf00      	nop
 8008d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0a:	bc08      	pop	{r3}
 8008d0c:	469e      	mov	lr, r3
 8008d0e:	4770      	bx	lr

08008d10 <_fini>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr
