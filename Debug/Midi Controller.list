
Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003cbc  08003cbc  00004cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf4  08003cf4  00005018  2**0
                  CONTENTS
  4 .ARM          00000000  08003cf4  08003cf4  00005018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cf4  08003cf4  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf4  08003cf4  00004cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cf8  08003cf8  00004cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003cfc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000018  08003d14  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003d14  00005164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d4e  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f90  00000000  00000000  00015d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00017d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bac  00000000  00000000  00018be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002663  00000000  00000000  0001978c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001327c  00000000  00000000  0001bdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6ed8  00000000  00000000  0002f06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5f43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee8  00000000  00000000  000d5f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d9e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ca4 	.word	0x08003ca4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003ca4 	.word	0x08003ca4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fcae 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f818 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f930 	bl	8000438 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f870 	bl	80002bc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 f8fc 	bl	80003d8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001e0:	f000 f8ac 	bl	800033c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority (TIM2_IRQn, 0, 0);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2100      	movs	r1, #0
 80001e8:	201c      	movs	r0, #28
 80001ea:	f000 fde0 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM2_IRQn);
 80001ee:	201c      	movs	r0, #28
 80001f0:	f000 fdf9 	bl	8000de6 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim2);
 80001f4:	4802      	ldr	r0, [pc, #8]	@ (8000200 <main+0x38>)
 80001f6:	f002 fd15 	bl	8002c24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fa:	bf00      	nop
 80001fc:	e7fd      	b.n	80001fa <main+0x32>
 80001fe:	bf00      	nop
 8000200:	20000088 	.word	0x20000088

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b09c      	sub	sp, #112	@ 0x70
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800020e:	2228      	movs	r2, #40	@ 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f003 fd19 	bl	8003c4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	463b      	mov	r3, r7
 800022a:	2234      	movs	r2, #52	@ 0x34
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 fd0b 	bl	8003c4a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000234:	2303      	movs	r3, #3
 8000236:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800023c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000246:	2310      	movs	r3, #16
 8000248:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000252:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000258:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800025e:	4618      	mov	r0, r3
 8000260:	f001 f898 	bl	8001394 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800026a:	f000 f939 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f002 f8c0 	bl	8002410 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000296:	f000 f923 	bl	80004e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800029a:	2320      	movs	r3, #32
 800029c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fad3 	bl	8002850 <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002b0:	f000 f916 	bl	80004e0 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3770      	adds	r7, #112	@ 0x70
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <MX_I2C1_Init+0x74>)
 80002c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000334 <MX_I2C1_Init+0x78>)
 80002c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80002c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000330 <MX_I2C1_Init+0x74>)
 80002c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000338 <MX_I2C1_Init+0x7c>)
 80002ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002cc:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <MX_I2C1_Init+0x74>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d2:	4b17      	ldr	r3, [pc, #92]	@ (8000330 <MX_I2C1_Init+0x74>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d8:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <MX_I2C1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002de:	4b14      	ldr	r3, [pc, #80]	@ (8000330 <MX_I2C1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ea:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <MX_I2C1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f6:	480e      	ldr	r0, [pc, #56]	@ (8000330 <MX_I2C1_Init+0x74>)
 80002f8:	f000 ff1a 	bl	8001130 <HAL_I2C_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000302:	f000 f8ed 	bl	80004e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000306:	2100      	movs	r1, #0
 8000308:	4809      	ldr	r0, [pc, #36]	@ (8000330 <MX_I2C1_Init+0x74>)
 800030a:	f000 ffac 	bl	8001266 <HAL_I2CEx_ConfigAnalogFilter>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000314:	f000 f8e4 	bl	80004e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000318:	2100      	movs	r1, #0
 800031a:	4805      	ldr	r0, [pc, #20]	@ (8000330 <MX_I2C1_Init+0x74>)
 800031c:	f000 ffee 	bl	80012fc <HAL_I2CEx_ConfigDigitalFilter>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000326:	f000 f8db 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000034 	.word	0x20000034
 8000334:	40005400 	.word	0x40005400
 8000338:	00201d2b 	.word	0x00201d2b

0800033c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800035a:	4b1e      	ldr	r3, [pc, #120]	@ (80003d4 <MX_TIM2_Init+0x98>)
 800035c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000360:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 359;
 8000362:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <MX_TIM2_Init+0x98>)
 8000364:	f240 1267 	movw	r2, #359	@ 0x167
 8000368:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036a:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <MX_TIM2_Init+0x98>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 8000370:	4b18      	ldr	r3, [pc, #96]	@ (80003d4 <MX_TIM2_Init+0x98>)
 8000372:	f240 321f 	movw	r2, #799	@ 0x31f
 8000376:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000378:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <MX_TIM2_Init+0x98>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800037e:	4b15      	ldr	r3, [pc, #84]	@ (80003d4 <MX_TIM2_Init+0x98>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000384:	4813      	ldr	r0, [pc, #76]	@ (80003d4 <MX_TIM2_Init+0x98>)
 8000386:	f002 fbf5 	bl	8002b74 <HAL_TIM_Base_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000390:	f000 f8a6 	bl	80004e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000398:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	480c      	ldr	r0, [pc, #48]	@ (80003d4 <MX_TIM2_Init+0x98>)
 80003a2:	f002 fd95 	bl	8002ed0 <HAL_TIM_ConfigClockSource>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003ac:	f000 f898 	bl	80004e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b0:	2300      	movs	r3, #0
 80003b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4619      	mov	r1, r3
 80003bc:	4805      	ldr	r0, [pc, #20]	@ (80003d4 <MX_TIM2_Init+0x98>)
 80003be:	f002 ff97 	bl	80032f0 <HAL_TIMEx_MasterConfigSynchronization>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80003c8:	f000 f88a 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	3720      	adds	r7, #32
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000088 	.word	0x20000088

080003d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003dc:	4b14      	ldr	r3, [pc, #80]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 80003de:	4a15      	ldr	r2, [pc, #84]	@ (8000434 <MX_USART2_UART_Init+0x5c>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 80003e2:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 80003e4:	f647 2212 	movw	r2, #31250	@ 0x7a12
 80003e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040e:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041a:	4805      	ldr	r0, [pc, #20]	@ (8000430 <MX_USART2_UART_Init+0x58>)
 800041c:	f002 ffec 	bl	80033f8 <HAL_UART_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000426:	f000 f85b 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200000d4 	.word	0x200000d4
 8000434:	40004400 	.word	0x40004400

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	f107 030c 	add.w	r3, r7, #12
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044e:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <MX_GPIO_Init+0xa0>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a21      	ldr	r2, [pc, #132]	@ (80004d8 <MX_GPIO_Init+0xa0>)
 8000454:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <MX_GPIO_Init+0xa0>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b1c      	ldr	r3, [pc, #112]	@ (80004d8 <MX_GPIO_Init+0xa0>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a1b      	ldr	r2, [pc, #108]	@ (80004d8 <MX_GPIO_Init+0xa0>)
 800046c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b19      	ldr	r3, [pc, #100]	@ (80004d8 <MX_GPIO_Init+0xa0>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <MX_GPIO_Init+0xa0>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a15      	ldr	r2, [pc, #84]	@ (80004d8 <MX_GPIO_Init+0xa0>)
 8000484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <MX_GPIO_Init+0xa0>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : GB_Pin */
  GPIO_InitStruct.Pin = GB_Pin;
 8000496:	2380      	movs	r3, #128	@ 0x80
 8000498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800049a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800049e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GB_GPIO_Port, &GPIO_InitStruct);
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	4619      	mov	r1, r3
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ae:	f000 fcb5 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CB_Pin CSB_Pin DB_Pin ASB_Pin
                           BB_Pin SPB_Pin DSB_Pin EB_Pin
                           FB_Pin FSB_Pin GSB_Pin AB_Pin */
  GPIO_InitStruct.Pin = CB_Pin|CSB_Pin|DB_Pin|ASB_Pin
 80004b2:	f641 737f 	movw	r3, #8063	@ 0x1f7f
 80004b6:	60fb      	str	r3, [r7, #12]
                          |BB_Pin|SPB_Pin|DSB_Pin|EB_Pin
                          |FB_Pin|FSB_Pin|GSB_Pin|AB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80004bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004be:	2301      	movs	r3, #1
 80004c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	4619      	mov	r1, r3
 80004c8:	4804      	ldr	r0, [pc, #16]	@ (80004dc <MX_GPIO_Init+0xa4>)
 80004ca:	f000 fca7 	bl	8000e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ce:	bf00      	nop
 80004d0:	3720      	adds	r7, #32
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	48000400 	.word	0x48000400

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <Error_Handler+0x8>

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <HAL_MspInit+0x44>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_MspInit+0x44>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <HAL_MspInit+0x44>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a08      	ldr	r2, [pc, #32]	@ (8000530 <HAL_MspInit+0x44>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <HAL_MspInit+0x44>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000

08000534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	@ 0x28
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a26      	ldr	r2, [pc, #152]	@ (80005ec <HAL_I2C_MspInit+0xb8>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d145      	bne.n	80005e2 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <HAL_I2C_MspInit+0xbc>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a25      	ldr	r2, [pc, #148]	@ (80005f0 <HAL_I2C_MspInit+0xbc>)
 800055c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <HAL_I2C_MspInit+0xbc>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <HAL_I2C_MspInit+0xbc>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a1f      	ldr	r2, [pc, #124]	@ (80005f0 <HAL_I2C_MspInit+0xbc>)
 8000574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <HAL_I2C_MspInit+0xbc>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800058a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800058c:	2312      	movs	r3, #18
 800058e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000594:	2303      	movs	r3, #3
 8000596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000598:	2304      	movs	r3, #4
 800059a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a6:	f000 fc39 	bl	8000e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005aa:	2380      	movs	r3, #128	@ 0x80
 80005ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ae:	2312      	movs	r3, #18
 80005b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ba:	2304      	movs	r3, #4
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <HAL_I2C_MspInit+0xc0>)
 80005c6:	f000 fc29 	bl	8000e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <HAL_I2C_MspInit+0xbc>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a08      	ldr	r2, [pc, #32]	@ (80005f0 <HAL_I2C_MspInit+0xbc>)
 80005d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_I2C_MspInit+0xbc>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	@ 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40005400 	.word	0x40005400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	48000400 	.word	0x48000400

080005f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000608:	d113      	bne.n	8000632 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <HAL_TIM_Base_MspInit+0x44>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <HAL_TIM_Base_MspInit+0x44>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <HAL_TIM_Base_MspInit+0x44>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	201c      	movs	r0, #28
 8000628:	f000 fbc1 	bl	8000dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800062c:	201c      	movs	r0, #28
 800062e:	f000 fbda 	bl	8000de6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a17      	ldr	r2, [pc, #92]	@ (80006bc <HAL_UART_MspInit+0x7c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d128      	bne.n	80006b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000662:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <HAL_UART_MspInit+0x80>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a16      	ldr	r2, [pc, #88]	@ (80006c0 <HAL_UART_MspInit+0x80>)
 8000668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <HAL_UART_MspInit+0x80>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <HAL_UART_MspInit+0x80>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a10      	ldr	r2, [pc, #64]	@ (80006c0 <HAL_UART_MspInit+0x80>)
 8000680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000684:	6153      	str	r3, [r2, #20]
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <HAL_UART_MspInit+0x80>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000692:	230c      	movs	r3, #12
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006a2:	2307      	movs	r3, #7
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f000 fbb4 	bl	8000e1c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	@ 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40004400 	.word	0x40004400
 80006c0:	40021000 	.word	0x40021000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <NMI_Handler+0x4>

080006cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <MemManage_Handler+0x4>

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071a:	f000 fa4d 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!HAL_GPIO_ReadPin (CB_GPIO_Port, CB_Pin)) {
 8000728:	2101      	movs	r1, #1
 800072a:	48ab      	ldr	r0, [pc, #684]	@ (80009d8 <TIM2_IRQHandler+0x2b4>)
 800072c:	f000 fce8 	bl	8001100 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d117      	bne.n	8000766 <TIM2_IRQHandler+0x42>
		if (!pressed) {
 8000736:	4ba9      	ldr	r3, [pc, #676]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f083 0301 	eor.w	r3, r3, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	f000 81a4 	beq.w	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 8000746:	4ba5      	ldr	r3, [pc, #660]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
			message[2] = C;
 800074c:	4ba4      	ldr	r3, [pc, #656]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 800074e:	2224      	movs	r2, #36	@ 0x24
 8000750:	709a      	strb	r2, [r3, #2]
			message[4] = C;
 8000752:	4ba3      	ldr	r3, [pc, #652]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000754:	2224      	movs	r2, #36	@ 0x24
 8000756:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 8000758:	2364      	movs	r3, #100	@ 0x64
 800075a:	2206      	movs	r2, #6
 800075c:	49a0      	ldr	r1, [pc, #640]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 800075e:	48a1      	ldr	r0, [pc, #644]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 8000760:	f002 fe98 	bl	8003494 <HAL_UART_Transmit>
 8000764:	e193      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (CSB_GPIO_Port, CSB_Pin)) {
 8000766:	2102      	movs	r1, #2
 8000768:	489b      	ldr	r0, [pc, #620]	@ (80009d8 <TIM2_IRQHandler+0x2b4>)
 800076a:	f000 fcc9 	bl	8001100 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d117      	bne.n	80007a4 <TIM2_IRQHandler+0x80>
		if (!pressed) {
 8000774:	4b99      	ldr	r3, [pc, #612]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f083 0301 	eor.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	f000 8185 	beq.w	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 8000784:	4b95      	ldr	r3, [pc, #596]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
			message[2] = CS;
 800078a:	4b95      	ldr	r3, [pc, #596]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 800078c:	2225      	movs	r2, #37	@ 0x25
 800078e:	709a      	strb	r2, [r3, #2]
			message[4] = CS;
 8000790:	4b93      	ldr	r3, [pc, #588]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000792:	2225      	movs	r2, #37	@ 0x25
 8000794:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 8000796:	2364      	movs	r3, #100	@ 0x64
 8000798:	2206      	movs	r2, #6
 800079a:	4991      	ldr	r1, [pc, #580]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 800079c:	4891      	ldr	r0, [pc, #580]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 800079e:	f002 fe79 	bl	8003494 <HAL_UART_Transmit>
 80007a2:	e174      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (DB_GPIO_Port, DB_Pin)) {
 80007a4:	2104      	movs	r1, #4
 80007a6:	488c      	ldr	r0, [pc, #560]	@ (80009d8 <TIM2_IRQHandler+0x2b4>)
 80007a8:	f000 fcaa 	bl	8001100 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d117      	bne.n	80007e2 <TIM2_IRQHandler+0xbe>
		if (!pressed) {
 80007b2:	4b8a      	ldr	r3, [pc, #552]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f083 0301 	eor.w	r3, r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	f000 8166 	beq.w	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 80007c2:	4b86      	ldr	r3, [pc, #536]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
			message[2] = D;
 80007c8:	4b85      	ldr	r3, [pc, #532]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 80007ca:	2226      	movs	r2, #38	@ 0x26
 80007cc:	709a      	strb	r2, [r3, #2]
			message[4] = D;
 80007ce:	4b84      	ldr	r3, [pc, #528]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 80007d0:	2226      	movs	r2, #38	@ 0x26
 80007d2:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 80007d4:	2364      	movs	r3, #100	@ 0x64
 80007d6:	2206      	movs	r2, #6
 80007d8:	4981      	ldr	r1, [pc, #516]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 80007da:	4882      	ldr	r0, [pc, #520]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 80007dc:	f002 fe5a 	bl	8003494 <HAL_UART_Transmit>
 80007e0:	e155      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (DSB_GPIO_Port, DSB_Pin)) {
 80007e2:	2108      	movs	r1, #8
 80007e4:	487c      	ldr	r0, [pc, #496]	@ (80009d8 <TIM2_IRQHandler+0x2b4>)
 80007e6:	f000 fc8b 	bl	8001100 <HAL_GPIO_ReadPin>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d117      	bne.n	8000820 <TIM2_IRQHandler+0xfc>
		if (!pressed) {
 80007f0:	4b7a      	ldr	r3, [pc, #488]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	f083 0301 	eor.w	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f000 8147 	beq.w	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 8000800:	4b76      	ldr	r3, [pc, #472]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
			message[2] = DS;
 8000806:	4b76      	ldr	r3, [pc, #472]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000808:	2227      	movs	r2, #39	@ 0x27
 800080a:	709a      	strb	r2, [r3, #2]
			message[4] = DS;
 800080c:	4b74      	ldr	r3, [pc, #464]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 800080e:	2227      	movs	r2, #39	@ 0x27
 8000810:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 8000812:	2364      	movs	r3, #100	@ 0x64
 8000814:	2206      	movs	r2, #6
 8000816:	4972      	ldr	r1, [pc, #456]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000818:	4872      	ldr	r0, [pc, #456]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 800081a:	f002 fe3b 	bl	8003494 <HAL_UART_Transmit>
 800081e:	e136      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (EB_GPIO_Port, EB_Pin)) {
 8000820:	2110      	movs	r1, #16
 8000822:	486d      	ldr	r0, [pc, #436]	@ (80009d8 <TIM2_IRQHandler+0x2b4>)
 8000824:	f000 fc6c 	bl	8001100 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d117      	bne.n	800085e <TIM2_IRQHandler+0x13a>
		if (!pressed) {
 800082e:	4b6b      	ldr	r3, [pc, #428]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	f083 0301 	eor.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	f000 8128 	beq.w	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 800083e:	4b67      	ldr	r3, [pc, #412]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
			message[2] = E;
 8000844:	4b66      	ldr	r3, [pc, #408]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000846:	2228      	movs	r2, #40	@ 0x28
 8000848:	709a      	strb	r2, [r3, #2]
			message[4] = E;
 800084a:	4b65      	ldr	r3, [pc, #404]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 800084c:	2228      	movs	r2, #40	@ 0x28
 800084e:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 8000850:	2364      	movs	r3, #100	@ 0x64
 8000852:	2206      	movs	r2, #6
 8000854:	4962      	ldr	r1, [pc, #392]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000856:	4863      	ldr	r0, [pc, #396]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 8000858:	f002 fe1c 	bl	8003494 <HAL_UART_Transmit>
 800085c:	e117      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (FB_GPIO_Port, FB_Pin)) {
 800085e:	2120      	movs	r1, #32
 8000860:	485d      	ldr	r0, [pc, #372]	@ (80009d8 <TIM2_IRQHandler+0x2b4>)
 8000862:	f000 fc4d 	bl	8001100 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d117      	bne.n	800089c <TIM2_IRQHandler+0x178>
		if (!pressed) {
 800086c:	4b5b      	ldr	r3, [pc, #364]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	f083 0301 	eor.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 8109 	beq.w	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 800087c:	4b57      	ldr	r3, [pc, #348]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
			message[2] = F;
 8000882:	4b57      	ldr	r3, [pc, #348]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000884:	2229      	movs	r2, #41	@ 0x29
 8000886:	709a      	strb	r2, [r3, #2]
			message[4] = F;
 8000888:	4b55      	ldr	r3, [pc, #340]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 800088a:	2229      	movs	r2, #41	@ 0x29
 800088c:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 800088e:	2364      	movs	r3, #100	@ 0x64
 8000890:	2206      	movs	r2, #6
 8000892:	4953      	ldr	r1, [pc, #332]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000894:	4853      	ldr	r0, [pc, #332]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 8000896:	f002 fdfd 	bl	8003494 <HAL_UART_Transmit>
 800089a:	e0f8      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (FSB_GPIO_Port, FSB_Pin)) {
 800089c:	2140      	movs	r1, #64	@ 0x40
 800089e:	484e      	ldr	r0, [pc, #312]	@ (80009d8 <TIM2_IRQHandler+0x2b4>)
 80008a0:	f000 fc2e 	bl	8001100 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d117      	bne.n	80008da <TIM2_IRQHandler+0x1b6>
		if (!pressed) {
 80008aa:	4b4c      	ldr	r3, [pc, #304]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	f083 0301 	eor.w	r3, r3, #1
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	f000 80ea 	beq.w	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 80008ba:	4b48      	ldr	r3, [pc, #288]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
			message[2] = FS;
 80008c0:	4b47      	ldr	r3, [pc, #284]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 80008c2:	222a      	movs	r2, #42	@ 0x2a
 80008c4:	709a      	strb	r2, [r3, #2]
			message[4] = FS;
 80008c6:	4b46      	ldr	r3, [pc, #280]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 80008c8:	222a      	movs	r2, #42	@ 0x2a
 80008ca:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 80008cc:	2364      	movs	r3, #100	@ 0x64
 80008ce:	2206      	movs	r2, #6
 80008d0:	4943      	ldr	r1, [pc, #268]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 80008d2:	4844      	ldr	r0, [pc, #272]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 80008d4:	f002 fdde 	bl	8003494 <HAL_UART_Transmit>
 80008d8:	e0d9      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (GB_GPIO_Port, GB_Pin)) {
 80008da:	2180      	movs	r1, #128	@ 0x80
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f000 fc0e 	bl	8001100 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d117      	bne.n	800091a <TIM2_IRQHandler+0x1f6>
		if (!pressed) {
 80008ea:	4b3c      	ldr	r3, [pc, #240]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	f083 0301 	eor.w	r3, r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 80ca 	beq.w	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 80008fa:	4b38      	ldr	r3, [pc, #224]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
			message[2] = G;
 8000900:	4b37      	ldr	r3, [pc, #220]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000902:	222b      	movs	r2, #43	@ 0x2b
 8000904:	709a      	strb	r2, [r3, #2]
			message[4] = G;
 8000906:	4b36      	ldr	r3, [pc, #216]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000908:	222b      	movs	r2, #43	@ 0x2b
 800090a:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 800090c:	2364      	movs	r3, #100	@ 0x64
 800090e:	2206      	movs	r2, #6
 8000910:	4933      	ldr	r1, [pc, #204]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000912:	4834      	ldr	r0, [pc, #208]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 8000914:	f002 fdbe 	bl	8003494 <HAL_UART_Transmit>
 8000918:	e0b9      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (GSB_GPIO_Port, GSB_Pin)) {
 800091a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800091e:	482e      	ldr	r0, [pc, #184]	@ (80009d8 <TIM2_IRQHandler+0x2b4>)
 8000920:	f000 fbee 	bl	8001100 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d117      	bne.n	800095a <TIM2_IRQHandler+0x236>
		if (!pressed) {
 800092a:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	f083 0301 	eor.w	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 80aa 	beq.w	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
			message[2] = GS;
 8000940:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000942:	222c      	movs	r2, #44	@ 0x2c
 8000944:	709a      	strb	r2, [r3, #2]
			message[4] = GS;
 8000946:	4b26      	ldr	r3, [pc, #152]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000948:	222c      	movs	r2, #44	@ 0x2c
 800094a:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 800094c:	2364      	movs	r3, #100	@ 0x64
 800094e:	2206      	movs	r2, #6
 8000950:	4923      	ldr	r1, [pc, #140]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000952:	4824      	ldr	r0, [pc, #144]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 8000954:	f002 fd9e 	bl	8003494 <HAL_UART_Transmit>
 8000958:	e099      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (AB_GPIO_Port, AB_Pin)) {
 800095a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800095e:	481e      	ldr	r0, [pc, #120]	@ (80009d8 <TIM2_IRQHandler+0x2b4>)
 8000960:	f000 fbce 	bl	8001100 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d117      	bne.n	800099a <TIM2_IRQHandler+0x276>
		if (!pressed) {
 800096a:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	f083 0301 	eor.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	f000 808a 	beq.w	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
			message[2] = A;
 8000980:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000982:	222d      	movs	r2, #45	@ 0x2d
 8000984:	709a      	strb	r2, [r3, #2]
			message[4] = A;
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000988:	222d      	movs	r2, #45	@ 0x2d
 800098a:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 800098c:	2364      	movs	r3, #100	@ 0x64
 800098e:	2206      	movs	r2, #6
 8000990:	4913      	ldr	r1, [pc, #76]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 8000992:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 8000994:	f002 fd7e 	bl	8003494 <HAL_UART_Transmit>
 8000998:	e079      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (ASB_GPIO_Port, ASB_Pin)) {
 800099a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800099e:	480e      	ldr	r0, [pc, #56]	@ (80009d8 <TIM2_IRQHandler+0x2b4>)
 80009a0:	f000 fbae 	bl	8001100 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11e      	bne.n	80009e8 <TIM2_IRQHandler+0x2c4>
		if (!pressed) {
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	f083 0301 	eor.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d06a      	beq.n	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 80009b8:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <TIM2_IRQHandler+0x2b8>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
			message[2] = AS;
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 80009c0:	222e      	movs	r2, #46	@ 0x2e
 80009c2:	709a      	strb	r2, [r3, #2]
			message[4] = AS;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 80009c6:	222e      	movs	r2, #46	@ 0x2e
 80009c8:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 80009ca:	2364      	movs	r3, #100	@ 0x64
 80009cc:	2206      	movs	r2, #6
 80009ce:	4904      	ldr	r1, [pc, #16]	@ (80009e0 <TIM2_IRQHandler+0x2bc>)
 80009d0:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <TIM2_IRQHandler+0x2c0>)
 80009d2:	f002 fd5f 	bl	8003494 <HAL_UART_Transmit>
 80009d6:	e05a      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
 80009d8:	48000400 	.word	0x48000400
 80009dc:	2000015d 	.word	0x2000015d
 80009e0:	20000000 	.word	0x20000000
 80009e4:	200000d4 	.word	0x200000d4
		}
	} else if (!HAL_GPIO_ReadPin (BB_GPIO_Port, BB_Pin)) {
 80009e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ec:	482a      	ldr	r0, [pc, #168]	@ (8000a98 <TIM2_IRQHandler+0x374>)
 80009ee:	f000 fb87 	bl	8001100 <HAL_GPIO_ReadPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d116      	bne.n	8000a26 <TIM2_IRQHandler+0x302>
		if (!pressed) {
 80009f8:	4b28      	ldr	r3, [pc, #160]	@ (8000a9c <TIM2_IRQHandler+0x378>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	f083 0301 	eor.w	r3, r3, #1
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d043      	beq.n	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 8000a06:	4b25      	ldr	r3, [pc, #148]	@ (8000a9c <TIM2_IRQHandler+0x378>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
			message[2] = B;
 8000a0c:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <TIM2_IRQHandler+0x37c>)
 8000a0e:	222f      	movs	r2, #47	@ 0x2f
 8000a10:	709a      	strb	r2, [r3, #2]
			message[4] = B;
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <TIM2_IRQHandler+0x37c>)
 8000a14:	222f      	movs	r2, #47	@ 0x2f
 8000a16:	711a      	strb	r2, [r3, #4]
			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
 8000a18:	2364      	movs	r3, #100	@ 0x64
 8000a1a:	2206      	movs	r2, #6
 8000a1c:	4920      	ldr	r1, [pc, #128]	@ (8000aa0 <TIM2_IRQHandler+0x37c>)
 8000a1e:	4821      	ldr	r0, [pc, #132]	@ (8000aa4 <TIM2_IRQHandler+0x380>)
 8000a20:	f002 fd38 	bl	8003494 <HAL_UART_Transmit>
 8000a24:	e033      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
		}
	} else if (!HAL_GPIO_ReadPin (SPB_GPIO_Port, SPB_Pin)) {
 8000a26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a2a:	481b      	ldr	r0, [pc, #108]	@ (8000a98 <TIM2_IRQHandler+0x374>)
 8000a2c:	f000 fb68 	bl	8001100 <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d128      	bne.n	8000a88 <TIM2_IRQHandler+0x364>
		if (!pressed) {
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <TIM2_IRQHandler+0x378>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	f083 0301 	eor.w	r3, r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d024      	beq.n	8000a8e <TIM2_IRQHandler+0x36a>
			pressed = true;
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <TIM2_IRQHandler+0x378>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
			play_toggled = !play_toggled;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <TIM2_IRQHandler+0x384>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bf14      	ite	ne
 8000a52:	2301      	movne	r3, #1
 8000a54:	2300      	moveq	r3, #0
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f083 0301 	eor.w	r3, r3, #1
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <TIM2_IRQHandler+0x384>)
 8000a66:	701a      	strb	r2, [r3, #0]
			PS_message[3] = play_toggled ? PLAY : STOP;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <TIM2_IRQHandler+0x384>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <TIM2_IRQHandler+0x350>
 8000a70:	227f      	movs	r2, #127	@ 0x7f
 8000a72:	e000      	b.n	8000a76 <TIM2_IRQHandler+0x352>
 8000a74:	2200      	movs	r2, #0
 8000a76:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <TIM2_IRQHandler+0x388>)
 8000a78:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit (&huart2, (uint8_t *) PS_message, 4, 100);
 8000a7a:	2364      	movs	r3, #100	@ 0x64
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	490b      	ldr	r1, [pc, #44]	@ (8000aac <TIM2_IRQHandler+0x388>)
 8000a80:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <TIM2_IRQHandler+0x380>)
 8000a82:	f002 fd07 	bl	8003494 <HAL_UART_Transmit>
 8000a86:	e002      	b.n	8000a8e <TIM2_IRQHandler+0x36a>
//			sprintf (msg, "%s\r\n", play_toggled ? "PLAY" : "STOP");
//			HAL_UART_Transmit (&huart2, (uint8_t *) msg, 6, 100);
		}
	}
	else {
		pressed = false;
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <TIM2_IRQHandler+0x378>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a8e:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <TIM2_IRQHandler+0x38c>)
 8000a90:	f002 f91c 	bl	8002ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	2000015d 	.word	0x2000015d
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	200000d4 	.word	0x200000d4
 8000aa8:	2000015c 	.word	0x2000015c
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000088 	.word	0x20000088

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b10 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000adc:	f7ff ffea 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f003 f8a9 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0a:	f7ff fb5d 	bl	80001c8 <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b10:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b1c:	08003cfc 	.word	0x08003cfc
  ldr r2, =_sbss
 8000b20:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b24:	20000164 	.word	0x20000164

08000b28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <HAL_Init+0x28>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <HAL_Init+0x28>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f92b 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fcd0 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f943 	bl	8000e02 <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f90b 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	@ (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	20000014 	.word	0x20000014
 8000bb4:	20000010 	.word	0x20000010

08000bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	@ (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000014 	.word	0x20000014
 8000bdc:	20000160 	.word	0x20000160

08000be0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000be4:	4b03      	ldr	r3, [pc, #12]	@ (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000160 	.word	0x20000160

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db0b      	blt.n	8000c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 021f 	and.w	r2, r3, #31
 8000c74:	4907      	ldr	r1, [pc, #28]	@ (8000c94 <__NVIC_EnableIRQ+0x38>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	@ (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	@ (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	@ 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	@ 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff8e 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff29 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff3e 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff8e 	bl	8000cec <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5d 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff31 	bl	8000c5c <__NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffa2 	bl	8000d54 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e14e      	b.n	80010ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8140 	beq.w	80010c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d005      	beq.n	8000e5c <HAL_GPIO_Init+0x40>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d017      	beq.n	8000efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d123      	bne.n	8000f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	6939      	ldr	r1, [r7, #16]
 8000f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0203 	and.w	r2, r3, #3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 809a 	beq.w	80010c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f90:	4b55      	ldr	r3, [pc, #340]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a54      	ldr	r2, [pc, #336]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b52      	ldr	r3, [pc, #328]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa8:	4a50      	ldr	r2, [pc, #320]	@ (80010ec <HAL_GPIO_Init+0x2d0>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fd2:	d013      	beq.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a46      	ldr	r2, [pc, #280]	@ (80010f0 <HAL_GPIO_Init+0x2d4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d00d      	beq.n	8000ff8 <HAL_GPIO_Init+0x1dc>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a45      	ldr	r2, [pc, #276]	@ (80010f4 <HAL_GPIO_Init+0x2d8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x1d8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a44      	ldr	r2, [pc, #272]	@ (80010f8 <HAL_GPIO_Init+0x2dc>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_GPIO_Init+0x1d4>
 8000fec:	2303      	movs	r3, #3
 8000fee:	e006      	b.n	8000ffe <HAL_GPIO_Init+0x1e2>
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	e004      	b.n	8000ffe <HAL_GPIO_Init+0x1e2>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0x1e2>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <HAL_GPIO_Init+0x1e2>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	f002 0203 	and.w	r2, r2, #3
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	4093      	lsls	r3, r2
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800100e:	4937      	ldr	r1, [pc, #220]	@ (80010ec <HAL_GPIO_Init+0x2d0>)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101c:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <HAL_GPIO_Init+0x2e0>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001040:	4a2e      	ldr	r2, [pc, #184]	@ (80010fc <HAL_GPIO_Init+0x2e0>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001046:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <HAL_GPIO_Init+0x2e0>)
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800106a:	4a24      	ldr	r2, [pc, #144]	@ (80010fc <HAL_GPIO_Init+0x2e0>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001070:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <HAL_GPIO_Init+0x2e0>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001094:	4a19      	ldr	r2, [pc, #100]	@ (80010fc <HAL_GPIO_Init+0x2e0>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <HAL_GPIO_Init+0x2e0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010be:	4a0f      	ldr	r2, [pc, #60]	@ (80010fc <HAL_GPIO_Init+0x2e0>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	fa22 f303 	lsr.w	r3, r2, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f47f aea9 	bne.w	8000e2c <HAL_GPIO_Init+0x10>
  }
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000
 80010f0:	48000400 	.word	0x48000400
 80010f4:	48000800 	.word	0x48000800
 80010f8:	48000c00 	.word	0x48000c00
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	4013      	ands	r3, r2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e001      	b.n	8001122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e08d      	b.n	800125e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d106      	bne.n	800115c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff f9ec 	bl	8000534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	@ 0x24
 8001160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001180:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001190:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d107      	bne.n	80011aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e006      	b.n	80011b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80011b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d108      	bne.n	80011d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	e007      	b.n	80011e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001204:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	430a      	orrs	r2, r1
 800121e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69d9      	ldr	r1, [r3, #28]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1a      	ldr	r2, [r3, #32]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0201 	orr.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2220      	movs	r2, #32
 800124a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b20      	cmp	r3, #32
 800127a:	d138      	bne.n	80012ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001286:	2302      	movs	r3, #2
 8001288:	e032      	b.n	80012f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2224      	movs	r2, #36	@ 0x24
 8001296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0201 	bic.w	r2, r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80012b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6819      	ldr	r1, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0201 	orr.w	r2, r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2220      	movs	r2, #32
 80012de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012ee:	2302      	movs	r3, #2
  }
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b20      	cmp	r3, #32
 8001310:	d139      	bne.n	8001386 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800131c:	2302      	movs	r3, #2
 800131e:	e033      	b.n	8001388 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2224      	movs	r2, #36	@ 0x24
 800132c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800134e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2220      	movs	r2, #32
 8001376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001386:	2302      	movs	r3, #2
  }
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800139a:	af00      	add	r7, sp, #0
 800139c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	f001 b823 	b.w	8002400 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 817d 	beq.w	80016ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013d0:	4bbc      	ldr	r3, [pc, #752]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d00c      	beq.n	80013f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013dc:	4bb9      	ldr	r3, [pc, #740]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d15c      	bne.n	80014a2 <HAL_RCC_OscConfig+0x10e>
 80013e8:	4bb6      	ldr	r3, [pc, #728]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f4:	d155      	bne.n	80014a2 <HAL_RCC_OscConfig+0x10e>
 80013f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013fa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800140a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	095b      	lsrs	r3, r3, #5
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d102      	bne.n	8001428 <HAL_RCC_OscConfig+0x94>
 8001422:	4ba8      	ldr	r3, [pc, #672]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	e015      	b.n	8001454 <HAL_RCC_OscConfig+0xc0>
 8001428:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800142c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001434:	fa93 f3a3 	rbit	r3, r3
 8001438:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800143c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001440:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001444:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001448:	fa93 f3a3 	rbit	r3, r3
 800144c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001450:	4b9c      	ldr	r3, [pc, #624]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001458:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800145c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001460:	fa92 f2a2 	rbit	r2, r2
 8001464:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001468:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800146c:	fab2 f282 	clz	r2, r2
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f042 0220 	orr.w	r2, r2, #32
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	f002 021f 	and.w	r2, r2, #31
 800147c:	2101      	movs	r1, #1
 800147e:	fa01 f202 	lsl.w	r2, r1, r2
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 811f 	beq.w	80016c8 <HAL_RCC_OscConfig+0x334>
 800148a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 8116 	bne.w	80016c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	f000 bfaf 	b.w	8002400 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12e>
 80014b4:	4b83      	ldr	r3, [pc, #524]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a82      	ldr	r2, [pc, #520]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e036      	b.n	8001530 <HAL_RCC_OscConfig+0x19c>
 80014c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x158>
 80014d2:	4b7c      	ldr	r3, [pc, #496]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a7b      	ldr	r2, [pc, #492]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80014d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b79      	ldr	r3, [pc, #484]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a78      	ldr	r2, [pc, #480]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80014e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e021      	b.n	8001530 <HAL_RCC_OscConfig+0x19c>
 80014ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x184>
 80014fe:	4b71      	ldr	r3, [pc, #452]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a70      	ldr	r2, [pc, #448]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b6e      	ldr	r3, [pc, #440]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a6d      	ldr	r2, [pc, #436]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0x19c>
 8001518:	4b6a      	ldr	r3, [pc, #424]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a69      	ldr	r2, [pc, #420]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 800151e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b67      	ldr	r3, [pc, #412]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a66      	ldr	r2, [pc, #408]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 800152a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800152e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001530:	4b64      	ldr	r3, [pc, #400]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 8001532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001534:	f023 020f 	bic.w	r2, r3, #15
 8001538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	495f      	ldr	r1, [pc, #380]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 8001546:	4313      	orrs	r3, r2
 8001548:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d059      	beq.n	800160e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff fb41 	bl	8000be0 <HAL_GetTick>
 800155e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fb3c 	bl	8000be0 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	@ 0x64
 8001572:	d902      	bls.n	800157a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	f000 bf43 	b.w	8002400 <HAL_RCC_OscConfig+0x106c>
 800157a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800157e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800158e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d102      	bne.n	80015ac <HAL_RCC_OscConfig+0x218>
 80015a6:	4b47      	ldr	r3, [pc, #284]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	e015      	b.n	80015d8 <HAL_RCC_OscConfig+0x244>
 80015ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015b0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80015b8:	fa93 f3a3 	rbit	r3, r3
 80015bc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80015c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015c4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80015c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80015d4:	4b3b      	ldr	r3, [pc, #236]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015dc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80015e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80015e4:	fa92 f2a2 	rbit	r2, r2
 80015e8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80015ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80015f0:	fab2 f282 	clz	r2, r2
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	f042 0220 	orr.w	r2, r2, #32
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	f002 021f 	and.w	r2, r2, #31
 8001600:	2101      	movs	r1, #1
 8001602:	fa01 f202 	lsl.w	r2, r1, r2
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ab      	beq.n	8001564 <HAL_RCC_OscConfig+0x1d0>
 800160c:	e05d      	b.n	80016ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fae7 	bl	8000be0 <HAL_GetTick>
 8001612:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fae2 	bl	8000be0 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b64      	cmp	r3, #100	@ 0x64
 8001626:	d902      	bls.n	800162e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	f000 bee9 	b.w	8002400 <HAL_RCC_OscConfig+0x106c>
 800162e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001632:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800163a:	fa93 f3a3 	rbit	r3, r3
 800163e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001642:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	095b      	lsrs	r3, r3, #5
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b01      	cmp	r3, #1
 8001658:	d102      	bne.n	8001660 <HAL_RCC_OscConfig+0x2cc>
 800165a:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	e015      	b.n	800168c <HAL_RCC_OscConfig+0x2f8>
 8001660:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001664:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001674:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001678:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800167c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001680:	fa93 f3a3 	rbit	r3, r3
 8001684:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001688:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <HAL_RCC_OscConfig+0x330>)
 800168a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001690:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001694:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001698:	fa92 f2a2 	rbit	r2, r2
 800169c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80016a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80016a4:	fab2 f282 	clz	r2, r2
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	f042 0220 	orr.w	r2, r2, #32
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f002 021f 	and.w	r2, r2, #31
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ab      	bne.n	8001618 <HAL_RCC_OscConfig+0x284>
 80016c0:	e003      	b.n	80016ca <HAL_RCC_OscConfig+0x336>
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 817d 	beq.w	80019da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016e0:	4ba6      	ldr	r3, [pc, #664]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00b      	beq.n	8001704 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016ec:	4ba3      	ldr	r3, [pc, #652]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d172      	bne.n	80017de <HAL_RCC_OscConfig+0x44a>
 80016f8:	4ba0      	ldr	r3, [pc, #640]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d16c      	bne.n	80017de <HAL_RCC_OscConfig+0x44a>
 8001704:	2302      	movs	r3, #2
 8001706:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001716:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	095b      	lsrs	r3, r3, #5
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d102      	bne.n	8001734 <HAL_RCC_OscConfig+0x3a0>
 800172e:	4b93      	ldr	r3, [pc, #588]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	e013      	b.n	800175c <HAL_RCC_OscConfig+0x3c8>
 8001734:	2302      	movs	r3, #2
 8001736:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800174c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001758:	4b88      	ldr	r3, [pc, #544]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175c:	2202      	movs	r2, #2
 800175e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001762:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001766:	fa92 f2a2 	rbit	r2, r2
 800176a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800176e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f042 0220 	orr.w	r2, r2, #32
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	f002 021f 	and.w	r2, r2, #31
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <HAL_RCC_OscConfig+0x410>
 800178e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001792:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d002      	beq.n	80017a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	f000 be2e 	b.w	8002400 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b75      	ldr	r3, [pc, #468]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	21f8      	movs	r1, #248	@ 0xf8
 80017ba:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80017c2:	fa91 f1a1 	rbit	r1, r1
 80017c6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80017ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80017ce:	fab1 f181 	clz	r1, r1
 80017d2:	b2c9      	uxtb	r1, r1
 80017d4:	408b      	lsls	r3, r1
 80017d6:	4969      	ldr	r1, [pc, #420]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017dc:	e0fd      	b.n	80019da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8088 	beq.w	8001900 <HAL_RCC_OscConfig+0x56c>
 80017f0:	2301      	movs	r3, #1
 80017f2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80017fa:	fa93 f3a3 	rbit	r3, r3
 80017fe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001802:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001806:	fab3 f383 	clz	r3, r3
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001810:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	461a      	mov	r2, r3
 8001818:	2301      	movs	r3, #1
 800181a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff f9e0 	bl	8000be0 <HAL_GetTick>
 8001820:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff f9db 	bl	8000be0 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d902      	bls.n	800183c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	f000 bde2 	b.w	8002400 <HAL_RCC_OscConfig+0x106c>
 800183c:	2302      	movs	r3, #2
 800183e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800184e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	095b      	lsrs	r3, r3, #5
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d102      	bne.n	800186c <HAL_RCC_OscConfig+0x4d8>
 8001866:	4b45      	ldr	r3, [pc, #276]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	e013      	b.n	8001894 <HAL_RCC_OscConfig+0x500>
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800187e:	2302      	movs	r3, #2
 8001880:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001884:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001890:	4b3a      	ldr	r3, [pc, #232]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	2202      	movs	r2, #2
 8001896:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800189a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800189e:	fa92 f2a2 	rbit	r2, r2
 80018a2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80018a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80018aa:	fab2 f282 	clz	r2, r2
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	f042 0220 	orr.w	r2, r2, #32
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	f002 021f 	and.w	r2, r2, #31
 80018ba:	2101      	movs	r1, #1
 80018bc:	fa01 f202 	lsl.w	r2, r1, r2
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0af      	beq.n	8001826 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	4b2d      	ldr	r3, [pc, #180]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	21f8      	movs	r1, #248	@ 0xf8
 80018dc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80018e4:	fa91 f1a1 	rbit	r1, r1
 80018e8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80018ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80018f0:	fab1 f181 	clz	r1, r1
 80018f4:	b2c9      	uxtb	r1, r1
 80018f6:	408b      	lsls	r3, r1
 80018f8:	4920      	ldr	r1, [pc, #128]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
 80018fe:	e06c      	b.n	80019da <HAL_RCC_OscConfig+0x646>
 8001900:	2301      	movs	r3, #1
 8001902:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001912:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001920:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	461a      	mov	r2, r3
 8001928:	2300      	movs	r3, #0
 800192a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff f958 	bl	8000be0 <HAL_GetTick>
 8001930:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff f953 	bl	8000be0 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d902      	bls.n	800194c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	f000 bd5a 	b.w	8002400 <HAL_RCC_OscConfig+0x106c>
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800195e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d104      	bne.n	8001980 <HAL_RCC_OscConfig+0x5ec>
 8001976:	4b01      	ldr	r3, [pc, #4]	@ (800197c <HAL_RCC_OscConfig+0x5e8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	e015      	b.n	80019a8 <HAL_RCC_OscConfig+0x614>
 800197c:	40021000 	.word	0x40021000
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001992:	2302      	movs	r3, #2
 8001994:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001998:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80019a4:	4bc8      	ldr	r3, [pc, #800]	@ (8001cc8 <HAL_RCC_OscConfig+0x934>)
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	2202      	movs	r2, #2
 80019aa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80019ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80019b2:	fa92 f2a2 	rbit	r2, r2
 80019b6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80019ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80019be:	fab2 f282 	clz	r2, r2
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	f042 0220 	orr.w	r2, r2, #32
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f002 021f 	and.w	r2, r2, #31
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f202 	lsl.w	r2, r1, r2
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ad      	bne.n	8001936 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8110 	beq.w	8001c10 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d079      	beq.n	8001af4 <HAL_RCC_OscConfig+0x760>
 8001a00:	2301      	movs	r3, #1
 8001a02:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4bab      	ldr	r3, [pc, #684]	@ (8001ccc <HAL_RCC_OscConfig+0x938>)
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	461a      	mov	r2, r3
 8001a26:	2301      	movs	r3, #1
 8001a28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f8d9 	bl	8000be0 <HAL_GetTick>
 8001a2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff f8d4 	bl	8000be0 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d902      	bls.n	8001a4a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	f000 bcdb 	b.w	8002400 <HAL_RCC_OscConfig+0x106c>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a88:	2202      	movs	r2, #2
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aa2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa4:	4b88      	ldr	r3, [pc, #544]	@ (8001cc8 <HAL_RCC_OscConfig+0x934>)
 8001aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	6019      	str	r1, [r3, #0]
 8001ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f1a3 	rbit	r1, r3
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001aca:	6019      	str	r1, [r3, #0]
  return result;
 8001acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0a0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x6a0>
 8001af2:	e08d      	b.n	8001c10 <HAL_RCC_OscConfig+0x87c>
 8001af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fa93 f2a3 	rbit	r2, r3
 8001b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b12:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b16:	601a      	str	r2, [r3, #0]
  return result;
 8001b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b20:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b68      	ldr	r3, [pc, #416]	@ (8001ccc <HAL_RCC_OscConfig+0x938>)
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	461a      	mov	r2, r3
 8001b32:	2300      	movs	r3, #0
 8001b34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff f853 	bl	8000be0 <HAL_GetTick>
 8001b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b40:	f7ff f84e 	bl	8000be0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d902      	bls.n	8001b56 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	f000 bc55 	b.w	8002400 <HAL_RCC_OscConfig+0x106c>
 8001b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b5e:	2202      	movs	r2, #2
 8001b60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	fa93 f2a3 	rbit	r2, r3
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b82:	2202      	movs	r2, #2
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fa93 f2a3 	rbit	r2, r3
 8001b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001bc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc2:	4b41      	ldr	r3, [pc, #260]	@ (8001cc8 <HAL_RCC_OscConfig+0x934>)
 8001bc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001bce:	2102      	movs	r1, #2
 8001bd0:	6019      	str	r1, [r3, #0]
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f1a3 	rbit	r1, r3
 8001be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001be8:	6019      	str	r1, [r3, #0]
  return result;
 8001bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d197      	bne.n	8001b40 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 81a1 	beq.w	8001f68 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2c:	4b26      	ldr	r3, [pc, #152]	@ (8001cc8 <HAL_RCC_OscConfig+0x934>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d116      	bne.n	8001c66 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c38:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <HAL_RCC_OscConfig+0x934>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	4a22      	ldr	r2, [pc, #136]	@ (8001cc8 <HAL_RCC_OscConfig+0x934>)
 8001c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c42:	61d3      	str	r3, [r2, #28]
 8001c44:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <HAL_RCC_OscConfig+0x934>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c50:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001c5e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <HAL_RCC_OscConfig+0x93c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d11a      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <HAL_RCC_OscConfig+0x93c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a16      	ldr	r2, [pc, #88]	@ (8001cd0 <HAL_RCC_OscConfig+0x93c>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7e:	f7fe ffaf 	bl	8000be0 <HAL_GetTick>
 8001c82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	e009      	b.n	8001c9c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c88:	f7fe ffaa 	bl	8000be0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	@ 0x64
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e3b1      	b.n	8002400 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <HAL_RCC_OscConfig+0x93c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ef      	beq.n	8001c88 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x940>
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <HAL_RCC_OscConfig+0x934>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a02      	ldr	r2, [pc, #8]	@ (8001cc8 <HAL_RCC_OscConfig+0x934>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	e03c      	b.n	8001d40 <HAL_RCC_OscConfig+0x9ac>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	10908120 	.word	0x10908120
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0x96a>
 8001ce4:	4bc1      	ldr	r3, [pc, #772]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4ac0      	ldr	r2, [pc, #768]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	4bbe      	ldr	r3, [pc, #760]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4abd      	ldr	r2, [pc, #756]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001cf6:	f023 0304 	bic.w	r3, r3, #4
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	e020      	b.n	8001d40 <HAL_RCC_OscConfig+0x9ac>
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x994>
 8001d0e:	4bb7      	ldr	r3, [pc, #732]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4ab6      	ldr	r2, [pc, #728]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	4bb4      	ldr	r3, [pc, #720]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4ab3      	ldr	r2, [pc, #716]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0x9ac>
 8001d28:	4bb0      	ldr	r3, [pc, #704]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4aaf      	ldr	r2, [pc, #700]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	4bad      	ldr	r3, [pc, #692]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4aac      	ldr	r2, [pc, #688]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8081 	beq.w	8001e54 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7fe ff45 	bl	8000be0 <HAL_GetTick>
 8001d56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7fe ff40 	bl	8000be0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e345      	b.n	8002400 <HAL_RCC_OscConfig+0x106c>
 8001d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d84:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f2a3 	rbit	r2, r3
 8001d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d92:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001da0:	2202      	movs	r2, #2
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f2a3 	rbit	r2, r3
 8001db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001dba:	601a      	str	r2, [r3, #0]
  return result;
 8001dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001dc4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_OscConfig+0xa4c>
 8001dda:	4b84      	ldr	r3, [pc, #528]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	e013      	b.n	8001e08 <HAL_RCC_OscConfig+0xa74>
 8001de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001de8:	2202      	movs	r2, #2
 8001dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dfe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	4b79      	ldr	r3, [pc, #484]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e0c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001e10:	2102      	movs	r1, #2
 8001e12:	6011      	str	r1, [r2, #0]
 8001e14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e18:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	fa92 f1a2 	rbit	r1, r2
 8001e22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e26:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e2a:	6011      	str	r1, [r2, #0]
  return result;
 8001e2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e30:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	fab2 f282 	clz	r2, r2
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f002 021f 	and.w	r2, r2, #31
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d084      	beq.n	8001d5c <HAL_RCC_OscConfig+0x9c8>
 8001e52:	e07f      	b.n	8001f54 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7fe fec4 	bl	8000be0 <HAL_GetTick>
 8001e58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7fe febf 	bl	8000be0 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e2c4      	b.n	8002400 <HAL_RCC_OscConfig+0x106c>
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001e7e:	2202      	movs	r2, #2
 8001e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e86:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	fa93 f2a3 	rbit	r2, r3
 8001e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e94:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eaa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	fa93 f2a3 	rbit	r2, r3
 8001eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ebc:	601a      	str	r2, [r3, #0]
  return result;
 8001ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ec6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d102      	bne.n	8001ee2 <HAL_RCC_OscConfig+0xb4e>
 8001edc:	4b43      	ldr	r3, [pc, #268]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	e013      	b.n	8001f0a <HAL_RCC_OscConfig+0xb76>
 8001ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001eea:	2202      	movs	r2, #2
 8001eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fa93 f2a3 	rbit	r2, r3
 8001efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f00:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	4b39      	ldr	r3, [pc, #228]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f0e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001f12:	2102      	movs	r1, #2
 8001f14:	6011      	str	r1, [r2, #0]
 8001f16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f1a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	fa92 f1a2 	rbit	r1, r2
 8001f24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f28:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f2c:	6011      	str	r1, [r2, #0]
  return result;
 8001f2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f32:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d184      	bne.n	8001e5e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f54:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5c:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	4a22      	ldr	r2, [pc, #136]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8242 	beq.w	80023fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <HAL_RCC_OscConfig+0xc58>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	f000 8213 	beq.w	80023ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	f040 8162 	bne.w	800225e <HAL_RCC_OscConfig+0xeca>
 8001f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001fa2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fac:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	fa93 f2a3 	rbit	r2, r3
 8001fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fba:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001fbe:	601a      	str	r2, [r3, #0]
  return result;
 8001fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001fc8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fd4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2300      	movs	r3, #0
 8001fde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fdfe 	bl	8000be0 <HAL_GetTick>
 8001fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	e00c      	b.n	8002004 <HAL_RCC_OscConfig+0xc70>
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7fe fdf6 	bl	8000be0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1fd      	b.n	8002400 <HAL_RCC_OscConfig+0x106c>
 8002004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002008:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800200c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002028:	601a      	str	r2, [r3, #0]
  return result;
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002032:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d102      	bne.n	800204e <HAL_RCC_OscConfig+0xcba>
 8002048:	4bb0      	ldr	r3, [pc, #704]	@ (800230c <HAL_RCC_OscConfig+0xf78>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	e027      	b.n	800209e <HAL_RCC_OscConfig+0xd0a>
 800204e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002052:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002056:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800205a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002060:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002078:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800207c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002086:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fa93 f2a3 	rbit	r2, r3
 8002090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002094:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	4b9c      	ldr	r3, [pc, #624]	@ (800230c <HAL_RCC_OscConfig+0xf78>)
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020a2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80020a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020aa:	6011      	str	r1, [r2, #0]
 80020ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020b0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	fa92 f1a2 	rbit	r1, r2
 80020ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020be:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80020c2:	6011      	str	r1, [r2, #0]
  return result;
 80020c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020c8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	fab2 f282 	clz	r2, r2
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	f042 0220 	orr.w	r2, r2, #32
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f002 021f 	and.w	r2, r2, #31
 80020de:	2101      	movs	r1, #1
 80020e0:	fa01 f202 	lsl.w	r2, r1, r2
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d182      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ea:	4b88      	ldr	r3, [pc, #544]	@ (800230c <HAL_RCC_OscConfig+0xf78>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80020fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002102:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	430b      	orrs	r3, r1
 800210c:	497f      	ldr	r1, [pc, #508]	@ (800230c <HAL_RCC_OscConfig+0xf78>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800211a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800211e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	fa93 f2a3 	rbit	r2, r3
 800212e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002132:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002136:	601a      	str	r2, [r3, #0]
  return result;
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002140:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800214c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	461a      	mov	r2, r3
 8002154:	2301      	movs	r3, #1
 8002156:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7fe fd42 	bl	8000be0 <HAL_GetTick>
 800215c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002160:	e009      	b.n	8002176 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002162:	f7fe fd3d 	bl	8000be0 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e144      	b.n	8002400 <HAL_RCC_OscConfig+0x106c>
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800217e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002188:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	fa93 f2a3 	rbit	r2, r3
 8002192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002196:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800219a:	601a      	str	r2, [r3, #0]
  return result;
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80021a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d102      	bne.n	80021c0 <HAL_RCC_OscConfig+0xe2c>
 80021ba:	4b54      	ldr	r3, [pc, #336]	@ (800230c <HAL_RCC_OscConfig+0xf78>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	e027      	b.n	8002210 <HAL_RCC_OscConfig+0xe7c>
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80021c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ea:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80021ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002206:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	4b3f      	ldr	r3, [pc, #252]	@ (800230c <HAL_RCC_OscConfig+0xf78>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002214:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002218:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800221c:	6011      	str	r1, [r2, #0]
 800221e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002222:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	fa92 f1a2 	rbit	r1, r2
 800222c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002230:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002234:	6011      	str	r1, [r2, #0]
  return result;
 8002236:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800223a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	fab2 f282 	clz	r2, r2
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	f042 0220 	orr.w	r2, r2, #32
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	f002 021f 	and.w	r2, r2, #31
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f202 	lsl.w	r2, r1, r2
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d082      	beq.n	8002162 <HAL_RCC_OscConfig+0xdce>
 800225c:	e0cf      	b.n	80023fe <HAL_RCC_OscConfig+0x106a>
 800225e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002262:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002266:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002270:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002282:	601a      	str	r2, [r3, #0]
  return result;
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800228c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002298:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fc9c 	bl	8000be0 <HAL_GetTick>
 80022a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ac:	e009      	b.n	80022c2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ae:	f7fe fc97 	bl	8000be0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e09e      	b.n	8002400 <HAL_RCC_OscConfig+0x106c>
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80022ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	fa93 f2a3 	rbit	r2, r3
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80022e6:	601a      	str	r2, [r3, #0]
  return result;
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80022f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d104      	bne.n	8002310 <HAL_RCC_OscConfig+0xf7c>
 8002306:	4b01      	ldr	r3, [pc, #4]	@ (800230c <HAL_RCC_OscConfig+0xf78>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	e029      	b.n	8002360 <HAL_RCC_OscConfig+0xfcc>
 800230c:	40021000 	.word	0x40021000
 8002310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002314:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002318:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800231c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	fa93 f2a3 	rbit	r2, r3
 800232c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002330:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800233e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002356:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <HAL_RCC_OscConfig+0x1078>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002364:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002368:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800236c:	6011      	str	r1, [r2, #0]
 800236e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002372:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	fa92 f1a2 	rbit	r1, r2
 800237c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002380:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002384:	6011      	str	r1, [r2, #0]
  return result;
 8002386:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800238a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	fab2 f282 	clz	r2, r2
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f042 0220 	orr.w	r2, r2, #32
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f002 021f 	and.w	r2, r2, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d180      	bne.n	80022ae <HAL_RCC_OscConfig+0xf1a>
 80023ac:	e027      	b.n	80023fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e01e      	b.n	8002400 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023c2:	4b12      	ldr	r3, [pc, #72]	@ (800240c <HAL_RCC_OscConfig+0x1078>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80023ce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10b      	bne.n	80023fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80023e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80023e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000

08002410 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b09e      	sub	sp, #120	@ 0x78
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e162      	b.n	80026ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b90      	ldr	r3, [pc, #576]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d910      	bls.n	8002458 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b8d      	ldr	r3, [pc, #564]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 0207 	bic.w	r2, r3, #7
 800243e:	498b      	ldr	r1, [pc, #556]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b89      	ldr	r3, [pc, #548]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e14a      	b.n	80026ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b82      	ldr	r3, [pc, #520]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	497f      	ldr	r1, [pc, #508]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80dc 	beq.w	800263c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d13c      	bne.n	8002506 <HAL_RCC_ClockConfig+0xf6>
 800248c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002490:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800249a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d102      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xa6>
 80024b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	e00f      	b.n	80024d6 <HAL_RCC_ClockConfig+0xc6>
 80024b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80024c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80024ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024d2:	4b67      	ldr	r3, [pc, #412]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024de:	fa92 f2a2 	rbit	r2, r2
 80024e2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80024e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80024e6:	fab2 f282 	clz	r2, r2
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	f042 0220 	orr.w	r2, r2, #32
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	f002 021f 	and.w	r2, r2, #31
 80024f6:	2101      	movs	r1, #1
 80024f8:	fa01 f202 	lsl.w	r2, r1, r2
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d17b      	bne.n	80025fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0f3      	b.n	80026ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d13c      	bne.n	8002588 <HAL_RCC_ClockConfig+0x178>
 800250e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002512:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800251c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d102      	bne.n	8002538 <HAL_RCC_ClockConfig+0x128>
 8002532:	4b4f      	ldr	r3, [pc, #316]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	e00f      	b.n	8002558 <HAL_RCC_ClockConfig+0x148>
 8002538:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800253c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	647b      	str	r3, [r7, #68]	@ 0x44
 8002546:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800254a:	643b      	str	r3, [r7, #64]	@ 0x40
 800254c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002554:	4b46      	ldr	r3, [pc, #280]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800255c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800255e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002560:	fa92 f2a2 	rbit	r2, r2
 8002564:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002566:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002568:	fab2 f282 	clz	r2, r2
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f002 021f 	and.w	r2, r2, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d13a      	bne.n	80025fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b2      	b.n	80026ee <HAL_RCC_ClockConfig+0x2de>
 8002588:	2302      	movs	r3, #2
 800258a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x1a0>
 80025aa:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	e00d      	b.n	80025cc <HAL_RCC_ClockConfig+0x1bc>
 80025b0:	2302      	movs	r3, #2
 80025b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80025bc:	2302      	movs	r3, #2
 80025be:	623b      	str	r3, [r7, #32]
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	2202      	movs	r2, #2
 80025ce:	61ba      	str	r2, [r7, #24]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	fa92 f2a2 	rbit	r2, r2
 80025d6:	617a      	str	r2, [r7, #20]
  return result;
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e079      	b.n	80026ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	491a      	ldr	r1, [pc, #104]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800260c:	f7fe fae8 	bl	8000be0 <HAL_GetTick>
 8002610:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe fae4 	bl	8000be0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e061      	b.n	80026ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d214      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b08      	ldr	r3, [pc, #32]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	4906      	ldr	r1, [pc, #24]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e040      	b.n	80026ee <HAL_RCC_ClockConfig+0x2de>
 800266c:	40022000 	.word	0x40022000
 8002670:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	491a      	ldr	r1, [pc, #104]	@ (80026f8 <HAL_RCC_ClockConfig+0x2e8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269e:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <HAL_RCC_ClockConfig+0x2e8>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4912      	ldr	r1, [pc, #72]	@ (80026f8 <HAL_RCC_ClockConfig+0x2e8>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026b2:	f000 f829 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026b6:	4601      	mov	r1, r0
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <HAL_RCC_ClockConfig+0x2e8>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026c0:	22f0      	movs	r2, #240	@ 0xf0
 80026c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	fa92 f2a2 	rbit	r2, r2
 80026ca:	60fa      	str	r2, [r7, #12]
  return result;
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	fab2 f282 	clz	r2, r2
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	40d3      	lsrs	r3, r2
 80026d6:	4a09      	ldr	r2, [pc, #36]	@ (80026fc <HAL_RCC_ClockConfig+0x2ec>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	fa21 f303 	lsr.w	r3, r1, r3
 80026de:	4a08      	ldr	r2, [pc, #32]	@ (8002700 <HAL_RCC_ClockConfig+0x2f0>)
 80026e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <HAL_RCC_ClockConfig+0x2f4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fa36 	bl	8000b58 <HAL_InitTick>
  
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3778      	adds	r7, #120	@ 0x78
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08003cbc 	.word	0x08003cbc
 8002700:	2000000c 	.word	0x2000000c
 8002704:	20000010 	.word	0x20000010

08002708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002722:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <HAL_RCC_GetSysClockFreq+0x94>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b04      	cmp	r3, #4
 8002730:	d002      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x30>
 8002732:	2b08      	cmp	r3, #8
 8002734:	d003      	beq.n	800273e <HAL_RCC_GetSysClockFreq+0x36>
 8002736:	e026      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002738:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800273a:	613b      	str	r3, [r7, #16]
      break;
 800273c:	e026      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	0c9b      	lsrs	r3, r3, #18
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	4a17      	ldr	r2, [pc, #92]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002748:	5cd3      	ldrb	r3, [r2, r3]
 800274a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800274c:	4b13      	ldr	r3, [pc, #76]	@ (800279c <HAL_RCC_GetSysClockFreq+0x94>)
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	4a14      	ldr	r2, [pc, #80]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002764:	4a0e      	ldr	r2, [pc, #56]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	fbb2 f2f3 	udiv	r2, r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e004      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a0c      	ldr	r2, [pc, #48]	@ (80027ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
      break;
 8002784:	e002      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002788:	613b      	str	r3, [r7, #16]
      break;
 800278a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278c:	693b      	ldr	r3, [r7, #16]
}
 800278e:	4618      	mov	r0, r3
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	007a1200 	.word	0x007a1200
 80027a4:	08003cd4 	.word	0x08003cd4
 80027a8:	08003ce4 	.word	0x08003ce4
 80027ac:	003d0900 	.word	0x003d0900

080027b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b4:	4b03      	ldr	r3, [pc, #12]	@ (80027c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2000000c 	.word	0x2000000c

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027ce:	f7ff ffef 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027d2:	4601      	mov	r1, r0
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027dc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80027e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	fa92 f2a2 	rbit	r2, r2
 80027e8:	603a      	str	r2, [r7, #0]
  return result;
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	fab2 f282 	clz	r2, r2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	40d3      	lsrs	r3, r2
 80027f4:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <HAL_RCC_GetPCLK1Freq+0x40>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08003ccc 	.word	0x08003ccc

0800280c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002812:	f7ff ffcd 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 8002816:	4601      	mov	r1, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002820:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002824:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	fa92 f2a2 	rbit	r2, r2
 800282c:	603a      	str	r2, [r7, #0]
  return result;
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	40d3      	lsrs	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	@ (800284c <HAL_RCC_GetPCLK2Freq+0x40>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000
 800284c:	08003ccc 	.word	0x08003ccc

08002850 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b092      	sub	sp, #72	@ 0x48
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80d4 	beq.w	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002874:	4b4e      	ldr	r3, [pc, #312]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10e      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	4b4b      	ldr	r3, [pc, #300]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	4a4a      	ldr	r2, [pc, #296]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288a:	61d3      	str	r3, [r2, #28]
 800288c:	4b48      	ldr	r3, [pc, #288]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b45      	ldr	r3, [pc, #276]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b42      	ldr	r3, [pc, #264]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a41      	ldr	r2, [pc, #260]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe f993 	bl	8000be0 <HAL_GetTick>
 80028ba:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fe f98f 	bl	8000be0 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	@ 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e14b      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b38      	ldr	r3, [pc, #224]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028dc:	4b34      	ldr	r3, [pc, #208]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8084 	beq.w	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d07c      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028fc:	4b2c      	ldr	r3, [pc, #176]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002906:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	4b26      	ldr	r3, [pc, #152]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	461a      	mov	r2, r3
 8002926:	2301      	movs	r3, #1
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800292e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	4b1d      	ldr	r3, [pc, #116]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	461a      	mov	r2, r3
 800294a:	2300      	movs	r3, #0
 800294c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800294e:	4a18      	ldr	r2, [pc, #96]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002952:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d04b      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7fe f93f 	bl	8000be0 <HAL_GetTick>
 8002962:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe f93b 	bl	8000be0 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0f5      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800297c:	2302      	movs	r3, #2
 800297e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
 8002988:	2302      	movs	r3, #2
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	61fb      	str	r3, [r7, #28]
  return result;
 8002994:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d108      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029aa:	4b01      	ldr	r3, [pc, #4]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	e00d      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	10908100 	.word	0x10908100
 80029bc:	2302      	movs	r3, #2
 80029be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	4b69      	ldr	r3, [pc, #420]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	2202      	movs	r2, #2
 80029ce:	613a      	str	r2, [r7, #16]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	fa92 f2a2 	rbit	r2, r2
 80029d6:	60fa      	str	r2, [r7, #12]
  return result;
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	fab2 f282 	clz	r2, r2
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f002 021f 	and.w	r2, r2, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0b7      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029f6:	4b5e      	ldr	r3, [pc, #376]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	495b      	ldr	r1, [pc, #364]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a10:	4b57      	ldr	r3, [pc, #348]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4a56      	ldr	r2, [pc, #344]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a28:	4b51      	ldr	r3, [pc, #324]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	f023 0203 	bic.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	494e      	ldr	r1, [pc, #312]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a46:	4b4a      	ldr	r3, [pc, #296]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f023 0210 	bic.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	4947      	ldr	r1, [pc, #284]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a64:	4b42      	ldr	r3, [pc, #264]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	493f      	ldr	r1, [pc, #252]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a82:	4b3b      	ldr	r3, [pc, #236]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f023 0220 	bic.w	r2, r3, #32
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	4938      	ldr	r1, [pc, #224]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aa0:	4b33      	ldr	r3, [pc, #204]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	4930      	ldr	r1, [pc, #192]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002abe:	4b2c      	ldr	r3, [pc, #176]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4929      	ldr	r1, [pc, #164]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002adc:	4b24      	ldr	r3, [pc, #144]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	4921      	ldr	r1, [pc, #132]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002afa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	491a      	ldr	r1, [pc, #104]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b18:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	4912      	ldr	r1, [pc, #72]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b36:	4b0e      	ldr	r3, [pc, #56]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	490b      	ldr	r1, [pc, #44]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	4903      	ldr	r1, [pc, #12]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3748      	adds	r7, #72	@ 0x48
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e049      	b.n	8002c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd fd2c 	bl	80005f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f000 fa88 	bl	80030c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d001      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e03b      	b.n	8002cb4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a19      	ldr	r2, [pc, #100]	@ (8002cc0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_TIM_Base_Start_IT+0x4e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c66:	d004      	beq.n	8002c72 <HAL_TIM_Base_Start_IT+0x4e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a15      	ldr	r2, [pc, #84]	@ (8002cc4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d115      	bne.n	8002c9e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <HAL_TIM_Base_Start_IT+0xa4>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b06      	cmp	r3, #6
 8002c82:	d015      	beq.n	8002cb0 <HAL_TIM_Base_Start_IT+0x8c>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c8a:	d011      	beq.n	8002cb0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9c:	e008      	b.n	8002cb0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e000      	b.n	8002cb2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	00010007 	.word	0x00010007

08002ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d020      	beq.n	8002d30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0202 	mvn.w	r2, #2
 8002d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f9b7 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9a9 	bl	8003076 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f9ba 	bl	800309e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d020      	beq.n	8002d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0204 	mvn.w	r2, #4
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f991 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f983 	bl	8003076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f994 	bl	800309e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d020      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0208 	mvn.w	r2, #8
 8002d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f96b 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f95d 	bl	8003076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f96e 	bl	800309e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d020      	beq.n	8002e14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01b      	beq.n	8002e14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0210 	mvn.w	r2, #16
 8002de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2208      	movs	r2, #8
 8002dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f945 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002e00:	e005      	b.n	8002e0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f937 	bl	8003076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f948 	bl	800309e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00c      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0201 	mvn.w	r2, #1
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f915 	bl	8003062 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00c      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 faba 	bl	80033d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fab2 	bl	80033e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f907 	bl	80030b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00c      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0220 	mvn.w	r2, #32
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fa7a 	bl	80033bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_TIM_ConfigClockSource+0x1c>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e0b6      	b.n	800305a <HAL_TIM_ConfigClockSource+0x18a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f28:	d03e      	beq.n	8002fa8 <HAL_TIM_ConfigClockSource+0xd8>
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f2e:	f200 8087 	bhi.w	8003040 <HAL_TIM_ConfigClockSource+0x170>
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f36:	f000 8086 	beq.w	8003046 <HAL_TIM_ConfigClockSource+0x176>
 8002f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f3e:	d87f      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x170>
 8002f40:	2b70      	cmp	r3, #112	@ 0x70
 8002f42:	d01a      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0xaa>
 8002f44:	2b70      	cmp	r3, #112	@ 0x70
 8002f46:	d87b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x170>
 8002f48:	2b60      	cmp	r3, #96	@ 0x60
 8002f4a:	d050      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x11e>
 8002f4c:	2b60      	cmp	r3, #96	@ 0x60
 8002f4e:	d877      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x170>
 8002f50:	2b50      	cmp	r3, #80	@ 0x50
 8002f52:	d03c      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xfe>
 8002f54:	2b50      	cmp	r3, #80	@ 0x50
 8002f56:	d873      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x170>
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	d058      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x13e>
 8002f5c:	2b40      	cmp	r3, #64	@ 0x40
 8002f5e:	d86f      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x170>
 8002f60:	2b30      	cmp	r3, #48	@ 0x30
 8002f62:	d064      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15e>
 8002f64:	2b30      	cmp	r3, #48	@ 0x30
 8002f66:	d86b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x170>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d060      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15e>
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d867      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x170>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05c      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15e>
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d05a      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15e>
 8002f78:	e062      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f8a:	f000 f991 	bl	80032b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	609a      	str	r2, [r3, #8]
      break;
 8002fa6:	e04f      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fb8:	f000 f97a 	bl	80032b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fca:	609a      	str	r2, [r3, #8]
      break;
 8002fcc:	e03c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 f8ee 	bl	80031bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2150      	movs	r1, #80	@ 0x50
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f947 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8002fec:	e02c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f000 f90d 	bl	800321a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2160      	movs	r1, #96	@ 0x60
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f937 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 800300c:	e01c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800301a:	461a      	mov	r2, r3
 800301c:	f000 f8ce 	bl	80031bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2140      	movs	r1, #64	@ 0x40
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f927 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 800302c:	e00c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f000 f91e 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 800303e:	e003      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      break;
 8003044:	e000      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003058:	7bfb      	ldrb	r3, [r7, #15]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a34      	ldr	r2, [pc, #208]	@ (80031ac <TIM_Base_SetConfig+0xe4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_Base_SetConfig+0x20>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e6:	d108      	bne.n	80030fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2b      	ldr	r2, [pc, #172]	@ (80031ac <TIM_Base_SetConfig+0xe4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00f      	beq.n	8003122 <TIM_Base_SetConfig+0x5a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003108:	d00b      	beq.n	8003122 <TIM_Base_SetConfig+0x5a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a28      	ldr	r2, [pc, #160]	@ (80031b0 <TIM_Base_SetConfig+0xe8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <TIM_Base_SetConfig+0x5a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a27      	ldr	r2, [pc, #156]	@ (80031b4 <TIM_Base_SetConfig+0xec>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_Base_SetConfig+0x5a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a26      	ldr	r2, [pc, #152]	@ (80031b8 <TIM_Base_SetConfig+0xf0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d108      	bne.n	8003134 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a14      	ldr	r2, [pc, #80]	@ (80031ac <TIM_Base_SetConfig+0xe4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00b      	beq.n	8003178 <TIM_Base_SetConfig+0xb0>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a13      	ldr	r2, [pc, #76]	@ (80031b0 <TIM_Base_SetConfig+0xe8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <TIM_Base_SetConfig+0xb0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a12      	ldr	r2, [pc, #72]	@ (80031b4 <TIM_Base_SetConfig+0xec>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_Base_SetConfig+0xb0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a11      	ldr	r2, [pc, #68]	@ (80031b8 <TIM_Base_SetConfig+0xf0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f023 0201 	bic.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	611a      	str	r2, [r3, #16]
  }
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800

080031bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0201 	bic.w	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f023 030a 	bic.w	r3, r3, #10
 80031f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321a:	b480      	push	{r7}
 800321c:	b087      	sub	sp, #28
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f023 0210 	bic.w	r2, r3, #16
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	031b      	lsls	r3, r3, #12
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003256:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	f043 0307 	orr.w	r3, r3, #7
 800329c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	021a      	lsls	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003304:	2302      	movs	r3, #2
 8003306:	e04f      	b.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a21      	ldr	r2, [pc, #132]	@ (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d108      	bne.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003338:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a14      	ldr	r2, [pc, #80]	@ (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d004      	beq.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a10      	ldr	r2, [pc, #64]	@ (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d10c      	bne.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003382:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40014000 	.word	0x40014000

080033bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e040      	b.n	800348c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd f910 	bl	8000640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	@ 0x24
 8003424:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9e8 	bl	8003814 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f8af 	bl	80035a8 <UART_SetConfig>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e01b      	b.n	800348c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fa67 	bl	8003958 <UART_CheckIdleState>
 800348a:	4603      	mov	r3, r0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	@ 0x28
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d177      	bne.n	800359c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_UART_Transmit+0x24>
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e070      	b.n	800359e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2221      	movs	r2, #33	@ 0x21
 80034c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ca:	f7fd fb89 	bl	8000be0 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e8:	d108      	bne.n	80034fc <HAL_UART_Transmit+0x68>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d104      	bne.n	80034fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	e003      	b.n	8003504 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003504:	e02f      	b.n	8003566 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2200      	movs	r2, #0
 800350e:	2180      	movs	r1, #128	@ 0x80
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fac9 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e03b      	b.n	800359e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003538:	b292      	uxth	r2, r2
 800353a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	3302      	adds	r3, #2
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	e007      	b.n	8003554 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3301      	adds	r3, #1
 8003552:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1c9      	bne.n	8003506 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	2140      	movs	r1, #64	@ 0x40
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fa93 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e005      	b.n	800359e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	e000      	b.n	800359e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
  }
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b8a      	ldr	r3, [pc, #552]	@ (80037fc <UART_SetConfig+0x254>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	6979      	ldr	r1, [r7, #20]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a78      	ldr	r2, [pc, #480]	@ (8003800 <UART_SetConfig+0x258>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d120      	bne.n	8003666 <UART_SetConfig+0xbe>
 8003624:	4b77      	ldr	r3, [pc, #476]	@ (8003804 <UART_SetConfig+0x25c>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b03      	cmp	r3, #3
 800362e:	d817      	bhi.n	8003660 <UART_SetConfig+0xb8>
 8003630:	a201      	add	r2, pc, #4	@ (adr r2, 8003638 <UART_SetConfig+0x90>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	08003649 	.word	0x08003649
 800363c:	08003655 	.word	0x08003655
 8003640:	0800365b 	.word	0x0800365b
 8003644:	0800364f 	.word	0x0800364f
 8003648:	2300      	movs	r3, #0
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e01d      	b.n	800368a <UART_SetConfig+0xe2>
 800364e:	2302      	movs	r3, #2
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e01a      	b.n	800368a <UART_SetConfig+0xe2>
 8003654:	2304      	movs	r3, #4
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e017      	b.n	800368a <UART_SetConfig+0xe2>
 800365a:	2308      	movs	r3, #8
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e014      	b.n	800368a <UART_SetConfig+0xe2>
 8003660:	2310      	movs	r3, #16
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e011      	b.n	800368a <UART_SetConfig+0xe2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a67      	ldr	r2, [pc, #412]	@ (8003808 <UART_SetConfig+0x260>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d102      	bne.n	8003676 <UART_SetConfig+0xce>
 8003670:	2300      	movs	r3, #0
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e009      	b.n	800368a <UART_SetConfig+0xe2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a64      	ldr	r2, [pc, #400]	@ (800380c <UART_SetConfig+0x264>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d102      	bne.n	8003686 <UART_SetConfig+0xde>
 8003680:	2300      	movs	r3, #0
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e001      	b.n	800368a <UART_SetConfig+0xe2>
 8003686:	2310      	movs	r3, #16
 8003688:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003692:	d15a      	bne.n	800374a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003694:	7ffb      	ldrb	r3, [r7, #31]
 8003696:	2b08      	cmp	r3, #8
 8003698:	d827      	bhi.n	80036ea <UART_SetConfig+0x142>
 800369a:	a201      	add	r2, pc, #4	@ (adr r2, 80036a0 <UART_SetConfig+0xf8>)
 800369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036cd 	.word	0x080036cd
 80036a8:	080036d5 	.word	0x080036d5
 80036ac:	080036eb 	.word	0x080036eb
 80036b0:	080036db 	.word	0x080036db
 80036b4:	080036eb 	.word	0x080036eb
 80036b8:	080036eb 	.word	0x080036eb
 80036bc:	080036eb 	.word	0x080036eb
 80036c0:	080036e3 	.word	0x080036e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c4:	f7ff f880 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 80036c8:	61b8      	str	r0, [r7, #24]
        break;
 80036ca:	e013      	b.n	80036f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036cc:	f7ff f89e 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 80036d0:	61b8      	str	r0, [r7, #24]
        break;
 80036d2:	e00f      	b.n	80036f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003810 <UART_SetConfig+0x268>)
 80036d6:	61bb      	str	r3, [r7, #24]
        break;
 80036d8:	e00c      	b.n	80036f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036da:	f7ff f815 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80036de:	61b8      	str	r0, [r7, #24]
        break;
 80036e0:	e008      	b.n	80036f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036e6:	61bb      	str	r3, [r7, #24]
        break;
 80036e8:	e004      	b.n	80036f4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	77bb      	strb	r3, [r7, #30]
        break;
 80036f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d074      	beq.n	80037e4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	005a      	lsls	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	085b      	lsrs	r3, r3, #1
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b0f      	cmp	r3, #15
 8003714:	d916      	bls.n	8003744 <UART_SetConfig+0x19c>
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800371c:	d212      	bcs.n	8003744 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	b29b      	uxth	r3, r3
 8003722:	f023 030f 	bic.w	r3, r3, #15
 8003726:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	b29b      	uxth	r3, r3
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	b29a      	uxth	r2, r3
 8003734:	89fb      	ldrh	r3, [r7, #14]
 8003736:	4313      	orrs	r3, r2
 8003738:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	89fa      	ldrh	r2, [r7, #14]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	e04f      	b.n	80037e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	77bb      	strb	r3, [r7, #30]
 8003748:	e04c      	b.n	80037e4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d828      	bhi.n	80037a2 <UART_SetConfig+0x1fa>
 8003750:	a201      	add	r2, pc, #4	@ (adr r2, 8003758 <UART_SetConfig+0x1b0>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	0800377d 	.word	0x0800377d
 800375c:	08003785 	.word	0x08003785
 8003760:	0800378d 	.word	0x0800378d
 8003764:	080037a3 	.word	0x080037a3
 8003768:	08003793 	.word	0x08003793
 800376c:	080037a3 	.word	0x080037a3
 8003770:	080037a3 	.word	0x080037a3
 8003774:	080037a3 	.word	0x080037a3
 8003778:	0800379b 	.word	0x0800379b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800377c:	f7ff f824 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8003780:	61b8      	str	r0, [r7, #24]
        break;
 8003782:	e013      	b.n	80037ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003784:	f7ff f842 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8003788:	61b8      	str	r0, [r7, #24]
        break;
 800378a:	e00f      	b.n	80037ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800378c:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <UART_SetConfig+0x268>)
 800378e:	61bb      	str	r3, [r7, #24]
        break;
 8003790:	e00c      	b.n	80037ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003792:	f7fe ffb9 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 8003796:	61b8      	str	r0, [r7, #24]
        break;
 8003798:	e008      	b.n	80037ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800379e:	61bb      	str	r3, [r7, #24]
        break;
 80037a0:	e004      	b.n	80037ac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	77bb      	strb	r3, [r7, #30]
        break;
 80037aa:	bf00      	nop
    }

    if (pclk != 0U)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d018      	beq.n	80037e4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	085a      	lsrs	r2, r3, #1
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	441a      	add	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b0f      	cmp	r3, #15
 80037ca:	d909      	bls.n	80037e0 <UART_SetConfig+0x238>
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d2:	d205      	bcs.n	80037e0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	e001      	b.n	80037e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	efff69f3 	.word	0xefff69f3
 8003800:	40013800 	.word	0x40013800
 8003804:	40021000 	.word	0x40021000
 8003808:	40004400 	.word	0x40004400
 800380c:	40004800 	.word	0x40004800
 8003810:	007a1200 	.word	0x007a1200

08003814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01a      	beq.n	800392a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003912:	d10a      	bne.n	800392a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b098      	sub	sp, #96	@ 0x60
 800395c:	af02      	add	r7, sp, #8
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003968:	f7fd f93a 	bl	8000be0 <HAL_GetTick>
 800396c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b08      	cmp	r3, #8
 800397a:	d12e      	bne.n	80039da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800397c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003984:	2200      	movs	r2, #0
 8003986:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f88c 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d021      	beq.n	80039da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e6      	bne.n	8003996 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e062      	b.n	8003aa0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d149      	bne.n	8003a7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f0:	2200      	movs	r2, #0
 80039f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f856 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d03c      	beq.n	8003a7c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e6      	bne.n	8003a02 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3308      	adds	r3, #8
 8003a52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a54:	61fa      	str	r2, [r7, #28]
 8003a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	69b9      	ldr	r1, [r7, #24]
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	617b      	str	r3, [r7, #20]
   return(result);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e5      	bne.n	8003a34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e011      	b.n	8003aa0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3758      	adds	r7, #88	@ 0x58
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab8:	e04f      	b.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d04b      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac2:	f7fd f88d 	bl	8000be0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e04e      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d037      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b80      	cmp	r3, #128	@ 0x80
 8003aee:	d034      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b40      	cmp	r3, #64	@ 0x40
 8003af4:	d031      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d110      	bne.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2208      	movs	r2, #8
 8003b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f838 	bl	8003b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2208      	movs	r2, #8
 8003b16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e029      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b34:	d111      	bne.n	8003b5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f81e 	bl	8003b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e00f      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4013      	ands	r3, r2
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	bf0c      	ite	eq
 8003b6a:	2301      	moveq	r3, #1
 8003b6c:	2300      	movne	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d0a0      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b095      	sub	sp, #84	@ 0x54
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003baa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e6      	bne.n	8003b8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e5      	bne.n	8003bbc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d118      	bne.n	8003c2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f023 0310 	bic.w	r3, r3, #16
 8003c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6979      	ldr	r1, [r7, #20]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	613b      	str	r3, [r7, #16]
   return(result);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e6      	bne.n	8003bf8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c3e:	bf00      	nop
 8003c40:	3754      	adds	r7, #84	@ 0x54
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <memset>:
 8003c4a:	4402      	add	r2, r0
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d100      	bne.n	8003c54 <memset+0xa>
 8003c52:	4770      	bx	lr
 8003c54:	f803 1b01 	strb.w	r1, [r3], #1
 8003c58:	e7f9      	b.n	8003c4e <memset+0x4>
	...

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8003c94 <__libc_init_array+0x38>)
 8003c60:	4c0d      	ldr	r4, [pc, #52]	@ (8003c98 <__libc_init_array+0x3c>)
 8003c62:	1b64      	subs	r4, r4, r5
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	2600      	movs	r6, #0
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8003c9c <__libc_init_array+0x40>)
 8003c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8003ca0 <__libc_init_array+0x44>)
 8003c70:	f000 f818 	bl	8003ca4 <_init>
 8003c74:	1b64      	subs	r4, r4, r5
 8003c76:	10a4      	asrs	r4, r4, #2
 8003c78:	2600      	movs	r6, #0
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08003cf4 	.word	0x08003cf4
 8003c98:	08003cf4 	.word	0x08003cf4
 8003c9c:	08003cf4 	.word	0x08003cf4
 8003ca0:	08003cf8 	.word	0x08003cf8

08003ca4 <_init>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr

08003cb0 <_fini>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr
