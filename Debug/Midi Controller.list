
Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009840  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080099c8  080099c8  0000a9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a3c  08009a3c  0000b10c  2**0
                  CONTENTS
  4 .ARM          00000000  08009a3c  08009a3c  0000b10c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a3c  08009a3c  0000b10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a3c  08009a3c  0000aa3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a40  08009a40  0000aa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08009a44  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  2000010c  08009b50  0000b10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200009c4  08009b50  0000b9c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140dc  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003268  00000000  00000000  0001f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00022480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd8  00000000  00000000  00023558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8ec  00000000  00000000  00024230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016865  00000000  00000000  00042b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad3f7  00000000  00000000  00059381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106778  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  001067bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010ad34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080099b0 	.word	0x080099b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	080099b0 	.word	0x080099b0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fcb8 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f818 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f920 	bl	8000418 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f8d0 	bl	800037c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80001dc:	f008 fff4 	bl	80091c8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80001e0:	f000 f870 	bl	80002c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority (TIM2_IRQn, 0, 0);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2100      	movs	r1, #0
 80001e8:	201c      	movs	r0, #28
 80001ea:	f001 fc26 	bl	8001a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM2_IRQn);
 80001ee:	201c      	movs	r0, #28
 80001f0:	f001 fc3f 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim2);
 80001f4:	4802      	ldr	r0, [pc, #8]	@ (8000200 <main+0x38>)
 80001f6:	f004 fe8d 	bl	8004f14 <HAL_TIM_Base_Start_IT>
//
//	while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//	USBD_MIDI_SendPackets (&hUsbDeviceFS, vol_message, 4);
	/* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fa:	bf00      	nop
 80001fc:	e7fd      	b.n	80001fa <main+0x32>
 80001fe:	bf00      	nop
 8000200:	20000178 	.word	0x20000178

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b09c      	sub	sp, #112	@ 0x70
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800020e:	2228      	movs	r2, #40	@ 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f009 fba0 	bl	8009958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	463b      	mov	r3, r7
 800022a:	2234      	movs	r2, #52	@ 0x34
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f009 fb92 	bl	8009958 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000234:	2301      	movs	r3, #1
 8000236:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800023c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000250:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000254:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fa62 	bl	8003724 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000266:	f000 f92b 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000280:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000284:	2101      	movs	r1, #1
 8000286:	4618      	mov	r0, r3
 8000288:	f004 fa8a 	bl	80047a0 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000292:	f000 f915 	bl	80004c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC1;
 8000296:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <SystemClock_Config+0xbc>)
 8000298:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800029a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800029e:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80002a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a6:	463b      	mov	r3, r7
 80002a8:	4618      	mov	r0, r3
 80002aa:	f004 fc49 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002b4:	f000 f904 	bl	80004c0 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3770      	adds	r7, #112	@ 0x70
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	00020080 	.word	0x00020080

080002c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002da:	4b27      	ldr	r3, [pc, #156]	@ (8000378 <MX_ADC1_Init+0xb4>)
 80002dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e2:	4b25      	ldr	r3, [pc, #148]	@ (8000378 <MX_ADC1_Init+0xb4>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002e8:	4b23      	ldr	r3, [pc, #140]	@ (8000378 <MX_ADC1_Init+0xb4>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ee:	4b22      	ldr	r3, [pc, #136]	@ (8000378 <MX_ADC1_Init+0xb4>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002f4:	4b20      	ldr	r3, [pc, #128]	@ (8000378 <MX_ADC1_Init+0xb4>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000378 <MX_ADC1_Init+0xb4>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000302:	4b1d      	ldr	r3, [pc, #116]	@ (8000378 <MX_ADC1_Init+0xb4>)
 8000304:	2200      	movs	r2, #0
 8000306:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000308:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <MX_ADC1_Init+0xb4>)
 800030a:	2201      	movs	r2, #1
 800030c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030e:	4b1a      	ldr	r3, [pc, #104]	@ (8000378 <MX_ADC1_Init+0xb4>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <MX_ADC1_Init+0xb4>)
 8000316:	2201      	movs	r2, #1
 8000318:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800031a:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <MX_ADC1_Init+0xb4>)
 800031c:	2200      	movs	r2, #0
 800031e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000322:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <MX_ADC1_Init+0xb4>)
 8000324:	2204      	movs	r2, #4
 8000326:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000328:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <MX_ADC1_Init+0xb4>)
 800032a:	2200      	movs	r2, #0
 800032c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800032e:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <MX_ADC1_Init+0xb4>)
 8000330:	2200      	movs	r2, #0
 8000332:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000334:	4810      	ldr	r0, [pc, #64]	@ (8000378 <MX_ADC1_Init+0xb4>)
 8000336:	f000 fc69 	bl	8000c0c <HAL_ADC_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000340:	f000 f8be 	bl	80004c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000344:	2301      	movs	r3, #1
 8000346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000348:	2301      	movs	r3, #1
 800034a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000350:	2300      	movs	r3, #0
 8000352:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035c:	463b      	mov	r3, r7
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_ADC1_Init+0xb4>)
 8000362:	f000 ff13 	bl	800118c <HAL_ADC_ConfigChannel>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800036c:	f000 f8a8 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000128 	.word	0x20000128

0800037c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800039a:	4b1e      	ldr	r3, [pc, #120]	@ (8000414 <MX_TIM2_Init+0x98>)
 800039c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 359;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000414 <MX_TIM2_Init+0x98>)
 80003a4:	f240 1267 	movw	r2, #359	@ 0x167
 80003a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <MX_TIM2_Init+0x98>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 80003b0:	4b18      	ldr	r3, [pc, #96]	@ (8000414 <MX_TIM2_Init+0x98>)
 80003b2:	f240 321f 	movw	r2, #799	@ 0x31f
 80003b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b8:	4b16      	ldr	r3, [pc, #88]	@ (8000414 <MX_TIM2_Init+0x98>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <MX_TIM2_Init+0x98>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003c4:	4813      	ldr	r0, [pc, #76]	@ (8000414 <MX_TIM2_Init+0x98>)
 80003c6:	f004 fd4d 	bl	8004e64 <HAL_TIM_Base_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80003d0:	f000 f876 	bl	80004c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	4619      	mov	r1, r3
 80003e0:	480c      	ldr	r0, [pc, #48]	@ (8000414 <MX_TIM2_Init+0x98>)
 80003e2:	f004 feed 	bl	80051c0 <HAL_TIM_ConfigClockSource>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003ec:	f000 f868 	bl	80004c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f0:	2300      	movs	r3, #0
 80003f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	@ (8000414 <MX_TIM2_Init+0x98>)
 80003fe:	f005 f8ef 	bl	80055e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000408:	f000 f85a 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000178 	.word	0x20000178

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042e:	4b22      	ldr	r3, [pc, #136]	@ (80004b8 <MX_GPIO_Init+0xa0>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a21      	ldr	r2, [pc, #132]	@ (80004b8 <MX_GPIO_Init+0xa0>)
 8000434:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b1f      	ldr	r3, [pc, #124]	@ (80004b8 <MX_GPIO_Init+0xa0>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b1c      	ldr	r3, [pc, #112]	@ (80004b8 <MX_GPIO_Init+0xa0>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a1b      	ldr	r2, [pc, #108]	@ (80004b8 <MX_GPIO_Init+0xa0>)
 800044c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b19      	ldr	r3, [pc, #100]	@ (80004b8 <MX_GPIO_Init+0xa0>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b16      	ldr	r3, [pc, #88]	@ (80004b8 <MX_GPIO_Init+0xa0>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a15      	ldr	r2, [pc, #84]	@ (80004b8 <MX_GPIO_Init+0xa0>)
 8000464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <MX_GPIO_Init+0xa0>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : GB_Pin */
  GPIO_InitStruct.Pin = GB_Pin;
 8000476:	2380      	movs	r3, #128	@ 0x80
 8000478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800047a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000480:	2301      	movs	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GB_GPIO_Port, &GPIO_InitStruct);
 8000484:	f107 030c 	add.w	r3, r7, #12
 8000488:	4619      	mov	r1, r3
 800048a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048e:	f001 fb0b 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CB_Pin CSB_Pin DB_Pin ASB_Pin
                           BB_Pin SPB_Pin DSB_Pin EB_Pin
                           FB_Pin FSB_Pin GSB_Pin AB_Pin */
  GPIO_InitStruct.Pin = CB_Pin|CSB_Pin|DB_Pin|ASB_Pin
 8000492:	f641 737f 	movw	r3, #8063	@ 0x1f7f
 8000496:	60fb      	str	r3, [r7, #12]
                          |BB_Pin|SPB_Pin|DSB_Pin|EB_Pin
                          |FB_Pin|FSB_Pin|GSB_Pin|AB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000498:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	f107 030c 	add.w	r3, r7, #12
 80004a6:	4619      	mov	r1, r3
 80004a8:	4804      	ldr	r0, [pc, #16]	@ (80004bc <MX_GPIO_Init+0xa4>)
 80004aa:	f001 fafd 	bl	8001aa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ae:	bf00      	nop
 80004b0:	3720      	adds	r7, #32
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	48000400 	.word	0x48000400

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <Error_Handler+0x8>

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <HAL_MspInit+0x44>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <HAL_MspInit+0x44>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <HAL_MspInit+0x44>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <HAL_MspInit+0x44>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a08      	ldr	r2, [pc, #32]	@ (8000510 <HAL_MspInit+0x44>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <HAL_MspInit+0x44>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000534:	d124      	bne.n	8000580 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <HAL_ADC_MspInit+0x74>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a13      	ldr	r2, [pc, #76]	@ (8000588 <HAL_ADC_MspInit+0x74>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b11      	ldr	r3, [pc, #68]	@ (8000588 <HAL_ADC_MspInit+0x74>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <HAL_ADC_MspInit+0x74>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <HAL_ADC_MspInit+0x74>)
 8000554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <HAL_ADC_MspInit+0x74>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Volume_1_Pin;
 8000566:	2301      	movs	r3, #1
 8000568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800056a:	2303      	movs	r3, #3
 800056c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Volume_1_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057c:	f001 fa94 	bl	8001aa8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000580:	bf00      	nop
 8000582:	3728      	adds	r7, #40	@ 0x28
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800059c:	d113      	bne.n	80005c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800059e:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <HAL_TIM_Base_MspInit+0x44>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a0b      	ldr	r2, [pc, #44]	@ (80005d0 <HAL_TIM_Base_MspInit+0x44>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <HAL_TIM_Base_MspInit+0x44>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	201c      	movs	r0, #28
 80005bc:	f001 fa3d 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005c0:	201c      	movs	r0, #28
 80005c2:	f001 fa56 	bl	8001a72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <NMI_Handler+0x4>

080005dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <HardFault_Handler+0x4>

080005e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <MemManage_Handler+0x4>

080005ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <BusFault_Handler+0x4>

080005f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <UsageFault_Handler+0x4>

080005fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062a:	f000 facf 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800063a:	f001 fcac 	bl	8001f96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200006dc 	.word	0x200006dc

08000648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!HAL_GPIO_ReadPin (CB_GPIO_Port, CB_Pin)) {
 800064c:	2101      	movs	r1, #1
 800064e:	488e      	ldr	r0, [pc, #568]	@ (8000888 <TIM2_IRQHandler+0x240>)
 8000650:	f001 fb9c 	bl	8001d8c <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d10e      	bne.n	8000678 <TIM2_IRQHandler+0x30>
		if (!pressed) {
 800065a:	4b8c      	ldr	r3, [pc, #560]	@ (800088c <TIM2_IRQHandler+0x244>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	f083 0301 	eor.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	f000 8129 	beq.w	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 800066a:	4b88      	ldr	r3, [pc, #544]	@ (800088c <TIM2_IRQHandler+0x244>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]

			Note_Change (C);
 8000670:	2030      	movs	r0, #48	@ 0x30
 8000672:	f000 f9b1 	bl	80009d8 <Note_Change>
 8000676:	e121      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (CSB_GPIO_Port, CSB_Pin)) {
 8000678:	2102      	movs	r1, #2
 800067a:	4883      	ldr	r0, [pc, #524]	@ (8000888 <TIM2_IRQHandler+0x240>)
 800067c:	f001 fb86 	bl	8001d8c <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10e      	bne.n	80006a4 <TIM2_IRQHandler+0x5c>
		if (!pressed) {
 8000686:	4b81      	ldr	r3, [pc, #516]	@ (800088c <TIM2_IRQHandler+0x244>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	f083 0301 	eor.w	r3, r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 8113 	beq.w	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 8000696:	4b7d      	ldr	r3, [pc, #500]	@ (800088c <TIM2_IRQHandler+0x244>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]

			Note_Change (CS);
 800069c:	2031      	movs	r0, #49	@ 0x31
 800069e:	f000 f99b 	bl	80009d8 <Note_Change>
 80006a2:	e10b      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (DB_GPIO_Port, DB_Pin)) {
 80006a4:	2104      	movs	r1, #4
 80006a6:	4878      	ldr	r0, [pc, #480]	@ (8000888 <TIM2_IRQHandler+0x240>)
 80006a8:	f001 fb70 	bl	8001d8c <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d10e      	bne.n	80006d0 <TIM2_IRQHandler+0x88>
		if (!pressed) {
 80006b2:	4b76      	ldr	r3, [pc, #472]	@ (800088c <TIM2_IRQHandler+0x244>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	f083 0301 	eor.w	r3, r3, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	f000 80fd 	beq.w	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 80006c2:	4b72      	ldr	r3, [pc, #456]	@ (800088c <TIM2_IRQHandler+0x244>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]

			Note_Change (D);
 80006c8:	2032      	movs	r0, #50	@ 0x32
 80006ca:	f000 f985 	bl	80009d8 <Note_Change>
 80006ce:	e0f5      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (DSB_GPIO_Port, DSB_Pin)) {
 80006d0:	2108      	movs	r1, #8
 80006d2:	486d      	ldr	r0, [pc, #436]	@ (8000888 <TIM2_IRQHandler+0x240>)
 80006d4:	f001 fb5a 	bl	8001d8c <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d10e      	bne.n	80006fc <TIM2_IRQHandler+0xb4>
		if (!pressed) {
 80006de:	4b6b      	ldr	r3, [pc, #428]	@ (800088c <TIM2_IRQHandler+0x244>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	f083 0301 	eor.w	r3, r3, #1
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f000 80e7 	beq.w	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 80006ee:	4b67      	ldr	r3, [pc, #412]	@ (800088c <TIM2_IRQHandler+0x244>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]

			Note_Change (DS);
 80006f4:	2033      	movs	r0, #51	@ 0x33
 80006f6:	f000 f96f 	bl	80009d8 <Note_Change>
 80006fa:	e0df      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (EB_GPIO_Port, EB_Pin)) {
 80006fc:	2110      	movs	r1, #16
 80006fe:	4862      	ldr	r0, [pc, #392]	@ (8000888 <TIM2_IRQHandler+0x240>)
 8000700:	f001 fb44 	bl	8001d8c <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10e      	bne.n	8000728 <TIM2_IRQHandler+0xe0>
		if (!pressed) {
 800070a:	4b60      	ldr	r3, [pc, #384]	@ (800088c <TIM2_IRQHandler+0x244>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	f083 0301 	eor.w	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	f000 80d1 	beq.w	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 800071a:	4b5c      	ldr	r3, [pc, #368]	@ (800088c <TIM2_IRQHandler+0x244>)
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]

			Note_Change (E);
 8000720:	2034      	movs	r0, #52	@ 0x34
 8000722:	f000 f959 	bl	80009d8 <Note_Change>
 8000726:	e0c9      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (FB_GPIO_Port, FB_Pin)) {
 8000728:	2120      	movs	r1, #32
 800072a:	4857      	ldr	r0, [pc, #348]	@ (8000888 <TIM2_IRQHandler+0x240>)
 800072c:	f001 fb2e 	bl	8001d8c <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d10e      	bne.n	8000754 <TIM2_IRQHandler+0x10c>
		if (!pressed) {
 8000736:	4b55      	ldr	r3, [pc, #340]	@ (800088c <TIM2_IRQHandler+0x244>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f083 0301 	eor.w	r3, r3, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	f000 80bb 	beq.w	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 8000746:	4b51      	ldr	r3, [pc, #324]	@ (800088c <TIM2_IRQHandler+0x244>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]

			Note_Change (F);
 800074c:	2035      	movs	r0, #53	@ 0x35
 800074e:	f000 f943 	bl	80009d8 <Note_Change>
 8000752:	e0b3      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (FSB_GPIO_Port, FSB_Pin)) {
 8000754:	2140      	movs	r1, #64	@ 0x40
 8000756:	484c      	ldr	r0, [pc, #304]	@ (8000888 <TIM2_IRQHandler+0x240>)
 8000758:	f001 fb18 	bl	8001d8c <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d10b      	bne.n	800077a <TIM2_IRQHandler+0x132>
		if (!pressed) {
 8000762:	4b4a      	ldr	r3, [pc, #296]	@ (800088c <TIM2_IRQHandler+0x244>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f083 0301 	eor.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	f000 80a5 	beq.w	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 8000772:	4b46      	ldr	r3, [pc, #280]	@ (800088c <TIM2_IRQHandler+0x244>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e0a0      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (GB_GPIO_Port, GB_Pin)) {
 800077a:	2180      	movs	r1, #128	@ 0x80
 800077c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000780:	f001 fb04 	bl	8001d8c <HAL_GPIO_ReadPin>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10e      	bne.n	80007a8 <TIM2_IRQHandler+0x160>
		if (!pressed) {
 800078a:	4b40      	ldr	r3, [pc, #256]	@ (800088c <TIM2_IRQHandler+0x244>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	f083 0301 	eor.w	r3, r3, #1
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	f000 8091 	beq.w	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 800079a:	4b3c      	ldr	r3, [pc, #240]	@ (800088c <TIM2_IRQHandler+0x244>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]

			Note_Change (G);
 80007a0:	2037      	movs	r0, #55	@ 0x37
 80007a2:	f000 f919 	bl	80009d8 <Note_Change>
 80007a6:	e089      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (GSB_GPIO_Port, GSB_Pin)) {
 80007a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ac:	4836      	ldr	r0, [pc, #216]	@ (8000888 <TIM2_IRQHandler+0x240>)
 80007ae:	f001 faed 	bl	8001d8c <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10d      	bne.n	80007d4 <TIM2_IRQHandler+0x18c>
		if (!pressed) {
 80007b8:	4b34      	ldr	r3, [pc, #208]	@ (800088c <TIM2_IRQHandler+0x244>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	f083 0301 	eor.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d07a      	beq.n	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 80007c6:	4b31      	ldr	r3, [pc, #196]	@ (800088c <TIM2_IRQHandler+0x244>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]

			Note_Change (GS);
 80007cc:	2038      	movs	r0, #56	@ 0x38
 80007ce:	f000 f903 	bl	80009d8 <Note_Change>
 80007d2:	e073      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (AB_GPIO_Port, AB_Pin)) {
 80007d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d8:	482b      	ldr	r0, [pc, #172]	@ (8000888 <TIM2_IRQHandler+0x240>)
 80007da:	f001 fad7 	bl	8001d8c <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10d      	bne.n	8000800 <TIM2_IRQHandler+0x1b8>
		if (!pressed) {
 80007e4:	4b29      	ldr	r3, [pc, #164]	@ (800088c <TIM2_IRQHandler+0x244>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d064      	beq.n	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <TIM2_IRQHandler+0x244>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]

			Note_Change (A);
 80007f8:	2039      	movs	r0, #57	@ 0x39
 80007fa:	f000 f8ed 	bl	80009d8 <Note_Change>
 80007fe:	e05d      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (ASB_GPIO_Port, ASB_Pin)) {
 8000800:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000804:	4820      	ldr	r0, [pc, #128]	@ (8000888 <TIM2_IRQHandler+0x240>)
 8000806:	f001 fac1 	bl	8001d8c <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d10d      	bne.n	800082c <TIM2_IRQHandler+0x1e4>
		if (!pressed) {
 8000810:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <TIM2_IRQHandler+0x244>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	f083 0301 	eor.w	r3, r3, #1
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d04e      	beq.n	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 800081e:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <TIM2_IRQHandler+0x244>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]

			Note_Change (AS);
 8000824:	203a      	movs	r0, #58	@ 0x3a
 8000826:	f000 f8d7 	bl	80009d8 <Note_Change>
 800082a:	e047      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (BB_GPIO_Port, BB_Pin)) {
 800082c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000830:	4815      	ldr	r0, [pc, #84]	@ (8000888 <TIM2_IRQHandler+0x240>)
 8000832:	f001 faab 	bl	8001d8c <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10d      	bne.n	8000858 <TIM2_IRQHandler+0x210>
		if (!pressed) {
 800083c:	4b13      	ldr	r3, [pc, #76]	@ (800088c <TIM2_IRQHandler+0x244>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	f083 0301 	eor.w	r3, r3, #1
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d038      	beq.n	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <TIM2_IRQHandler+0x244>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]

			Note_Change (B);
 8000850:	203b      	movs	r0, #59	@ 0x3b
 8000852:	f000 f8c1 	bl	80009d8 <Note_Change>
 8000856:	e031      	b.n	80008bc <TIM2_IRQHandler+0x274>
		}
	} else if (!HAL_GPIO_ReadPin (SPB_GPIO_Port, SPB_Pin)) {
 8000858:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800085c:	480a      	ldr	r0, [pc, #40]	@ (8000888 <TIM2_IRQHandler+0x240>)
 800085e:	f001 fa95 	bl	8001d8c <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d115      	bne.n	8000894 <TIM2_IRQHandler+0x24c>
		if (!pressed) {
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <TIM2_IRQHandler+0x244>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d022      	beq.n	80008bc <TIM2_IRQHandler+0x274>
			pressed = true;
 8000876:	4b05      	ldr	r3, [pc, #20]	@ (800088c <TIM2_IRQHandler+0x244>)
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
			control_toggled = true;
 800087c:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <TIM2_IRQHandler+0x248>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]

			Toggle_Control ();
 8000882:	f000 f8db 	bl	8000a3c <Toggle_Control>
 8000886:	e019      	b.n	80008bc <TIM2_IRQHandler+0x274>
 8000888:	48000400 	.word	0x48000400
 800088c:	200001c6 	.word	0x200001c6
 8000890:	200001c4 	.word	0x200001c4
		}
	} else {
		if (pressed && !control_toggled) {
 8000894:	4b45      	ldr	r3, [pc, #276]	@ (80009ac <TIM2_IRQHandler+0x364>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d009      	beq.n	80008b0 <TIM2_IRQHandler+0x268>
 800089c:	4b44      	ldr	r3, [pc, #272]	@ (80009b0 <TIM2_IRQHandler+0x368>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	f083 0301 	eor.w	r3, r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <TIM2_IRQHandler+0x268>
			Note_Change (END);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 f894 	bl	80009d8 <Note_Change>
		}

		pressed = false;
 80008b0:	4b3e      	ldr	r3, [pc, #248]	@ (80009ac <TIM2_IRQHandler+0x364>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
		control_toggled = false;
 80008b6:	4b3e      	ldr	r3, [pc, #248]	@ (80009b0 <TIM2_IRQHandler+0x368>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
	}



	if (elapsed_times > 4) {
 80008bc:	4b3d      	ldr	r3, [pc, #244]	@ (80009b4 <TIM2_IRQHandler+0x36c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	d968      	bls.n	8000996 <TIM2_IRQHandler+0x34e>
		HAL_ADC_Start (&hadc1);
 80008c4:	483c      	ldr	r0, [pc, #240]	@ (80009b8 <TIM2_IRQHandler+0x370>)
 80008c6:	f000 fb27 	bl	8000f18 <HAL_ADC_Start>
		HAL_ADC_PollForConversion (&hadc1, 100);
 80008ca:	2164      	movs	r1, #100	@ 0x64
 80008cc:	483a      	ldr	r0, [pc, #232]	@ (80009b8 <TIM2_IRQHandler+0x370>)
 80008ce:	f000 fb91 	bl	8000ff4 <HAL_ADC_PollForConversion>
		ADC_val[0] = HAL_ADC_GetValue (&hadc1);
 80008d2:	4839      	ldr	r0, [pc, #228]	@ (80009b8 <TIM2_IRQHandler+0x370>)
 80008d4:	f000 fc4c 	bl	8001170 <HAL_ADC_GetValue>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b37      	ldr	r3, [pc, #220]	@ (80009bc <TIM2_IRQHandler+0x374>)
 80008de:	801a      	strh	r2, [r3, #0]
		ADC_val[1] = HAL_ADC_GetValue (&hadc1);
 80008e0:	4835      	ldr	r0, [pc, #212]	@ (80009b8 <TIM2_IRQHandler+0x370>)
 80008e2:	f000 fc45 	bl	8001170 <HAL_ADC_GetValue>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <TIM2_IRQHandler+0x374>)
 80008ec:	805a      	strh	r2, [r3, #2]
		current = (alpha * ADC_val[1]) + ((1 - alpha) * ADC_val[0]);
 80008ee:	4b33      	ldr	r3, [pc, #204]	@ (80009bc <TIM2_IRQHandler+0x374>)
 80008f0:	885b      	ldrh	r3, [r3, #2]
 80008f2:	ee07 3a90 	vmov	s15, r3
 80008f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008fa:	4b31      	ldr	r3, [pc, #196]	@ (80009c0 <TIM2_IRQHandler+0x378>)
 80008fc:	edd3 7a00 	vldr	s15, [r3]
 8000900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000904:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <TIM2_IRQHandler+0x378>)
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800090e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000912:	4b2a      	ldr	r3, [pc, #168]	@ (80009bc <TIM2_IRQHandler+0x374>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	ee07 3a90 	vmov	s15, r3
 800091a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800091e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800092a:	ee17 3a90 	vmov	r3, s15
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b24      	ldr	r3, [pc, #144]	@ (80009c4 <TIM2_IRQHandler+0x37c>)
 8000932:	801a      	strh	r2, [r3, #0]
//		HAL_ADC_Stop (&hadc1);
		current = ratio (current);
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <TIM2_IRQHandler+0x37c>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f8ad 	bl	8000a98 <ratio>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <TIM2_IRQHandler+0x37c>)
 8000944:	801a      	strh	r2, [r3, #0]

		if (current < previous - 3 || current > previous + 3) {
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <TIM2_IRQHandler+0x37c>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <TIM2_IRQHandler+0x380>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	3b03      	subs	r3, #3
 8000952:	429a      	cmp	r2, r3
 8000954:	db07      	blt.n	8000966 <TIM2_IRQHandler+0x31e>
 8000956:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <TIM2_IRQHandler+0x37c>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <TIM2_IRQHandler+0x380>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	3303      	adds	r3, #3
 8000962:	429a      	cmp	r2, r3
 8000964:	dd14      	ble.n	8000990 <TIM2_IRQHandler+0x348>
			previous = current;
 8000966:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <TIM2_IRQHandler+0x37c>)
 8000968:	881a      	ldrh	r2, [r3, #0]
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <TIM2_IRQHandler+0x380>)
 800096c:	801a      	strh	r2, [r3, #0]
			vol_message[3] = current;
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <TIM2_IRQHandler+0x37c>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <TIM2_IRQHandler+0x384>)
 8000976:	70da      	strb	r2, [r3, #3]

			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000978:	bf00      	nop
 800097a:	4815      	ldr	r0, [pc, #84]	@ (80009d0 <TIM2_IRQHandler+0x388>)
 800097c:	f007 fb06 	bl	8007f8c <USBD_MIDI_GetState>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f9      	bne.n	800097a <TIM2_IRQHandler+0x332>
			USBD_MIDI_SendPackets (&hUsbDeviceFS, vol_message, 4);
 8000986:	2204      	movs	r2, #4
 8000988:	4910      	ldr	r1, [pc, #64]	@ (80009cc <TIM2_IRQHandler+0x384>)
 800098a:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <TIM2_IRQHandler+0x388>)
 800098c:	f007 fb0c 	bl	8007fa8 <USBD_MIDI_SendPackets>
		}

		elapsed_times = 0;
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <TIM2_IRQHandler+0x36c>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]

	}

	elapsed_times++;
 8000996:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <TIM2_IRQHandler+0x36c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <TIM2_IRQHandler+0x36c>)
 80009a0:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a2:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <TIM2_IRQHandler+0x38c>)
 80009a4:	f004 fb0a 	bl	8004fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200001c6 	.word	0x200001c6
 80009b0:	200001c4 	.word	0x200001c4
 80009b4:	20000010 	.word	0x20000010
 80009b8:	20000128 	.word	0x20000128
 80009bc:	200001cc 	.word	0x200001cc
 80009c0:	20000014 	.word	0x20000014
 80009c4:	200001ca 	.word	0x200001ca
 80009c8:	200001c8 	.word	0x200001c8
 80009cc:	2000000c 	.word	0x2000000c
 80009d0:	20000218 	.word	0x20000218
 80009d4:	20000178 	.word	0x20000178

080009d8 <Note_Change>:

/* USER CODE BEGIN 1 */
void Note_Change (uint8_t value) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	if (value == END) {
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10c      	bne.n	8000a02 <Note_Change+0x2a>
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 80009e8:	bf00      	nop
 80009ea:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <Note_Change+0x58>)
 80009ec:	f007 face 	bl	8007f8c <USBD_MIDI_GetState>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1f9      	bne.n	80009ea <Note_Change+0x12>
		USBD_MIDI_SendPackets (&hUsbDeviceFS, off_message, 4);
 80009f6:	2204      	movs	r2, #4
 80009f8:	490e      	ldr	r1, [pc, #56]	@ (8000a34 <Note_Change+0x5c>)
 80009fa:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <Note_Change+0x58>)
 80009fc:	f007 fad4 	bl	8007fa8 <USBD_MIDI_SendPackets>
		off_message [2] = value;

		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
	}
}
 8000a00:	e011      	b.n	8000a26 <Note_Change+0x4e>
		on_message [2] = value;
 8000a02:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <Note_Change+0x60>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	7093      	strb	r3, [r2, #2]
		off_message [2] = value;
 8000a08:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <Note_Change+0x5c>)
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	7093      	strb	r3, [r2, #2]
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000a0e:	bf00      	nop
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <Note_Change+0x58>)
 8000a12:	f007 fabb 	bl	8007f8c <USBD_MIDI_GetState>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1f9      	bne.n	8000a10 <Note_Change+0x38>
		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4906      	ldr	r1, [pc, #24]	@ (8000a38 <Note_Change+0x60>)
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <Note_Change+0x58>)
 8000a22:	f007 fac1 	bl	8007fa8 <USBD_MIDI_SendPackets>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000218 	.word	0x20000218
 8000a34:	20000004 	.word	0x20000004
 8000a38:	20000000 	.word	0x20000000

08000a3c <Toggle_Control>:

void Toggle_Control () {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	play_toggled = !play_toggled;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <Toggle_Control+0x50>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2301      	movne	r3, #1
 8000a4a:	2300      	moveq	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f083 0301 	eor.w	r3, r3, #1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <Toggle_Control+0x50>)
 8000a5c:	701a      	strb	r2, [r3, #0]
	PS_message[3] = play_toggled ? PLAY : STOP;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <Toggle_Control+0x50>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <Toggle_Control+0x2e>
 8000a66:	227f      	movs	r2, #127	@ 0x7f
 8000a68:	e000      	b.n	8000a6c <Toggle_Control+0x30>
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <Toggle_Control+0x54>)
 8000a6e:	70da      	strb	r2, [r3, #3]

	while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000a70:	bf00      	nop
 8000a72:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <Toggle_Control+0x58>)
 8000a74:	f007 fa8a 	bl	8007f8c <USBD_MIDI_GetState>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d1f9      	bne.n	8000a72 <Toggle_Control+0x36>
	USBD_MIDI_SendPackets (&hUsbDeviceFS, PS_message, 4);
 8000a7e:	2204      	movs	r2, #4
 8000a80:	4903      	ldr	r1, [pc, #12]	@ (8000a90 <Toggle_Control+0x54>)
 8000a82:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <Toggle_Control+0x58>)
 8000a84:	f007 fa90 	bl	8007fa8 <USBD_MIDI_SendPackets>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200001c5 	.word	0x200001c5
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000218 	.word	0x20000218

08000a98 <ratio>:

uint8_t ratio (long value) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	return (value * 127) / (4095);
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	01db      	lsls	r3, r3, #7
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	4a06      	ldr	r2, [pc, #24]	@ (8000ac4 <ratio+0x2c>)
 8000aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8000aae:	441a      	add	r2, r3
 8000ab0:	12d2      	asrs	r2, r2, #11
 8000ab2:	17db      	asrs	r3, r3, #31
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	b2db      	uxtb	r3, r3
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	80080081 	.word	0x80080081

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b24 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af0:	f7ff ffea 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480c      	ldr	r0, [pc, #48]	@ (8000b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af6:	490d      	ldr	r1, [pc, #52]	@ (8000b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b30 <LoopForever+0xe>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b38 <LoopForever+0x16>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f008 ff25 	bl	8009968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1e:	f7ff fb53 	bl	80001c8 <main>

08000b22 <LoopForever>:

LoopForever:
    b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b24:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000b30:	08009a44 	.word	0x08009a44
  ldr r2, =_sbss
 8000b34:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000b38:	200009c4 	.word	0x200009c4

08000b3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_Init+0x28>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <HAL_Init+0x28>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 ff67 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f000 f808 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fcb6 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_InitTick+0x54>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <HAL_InitTick+0x58>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 ff7f 	bl	8001a8e <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00e      	b.n	8000bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d80a      	bhi.n	8000bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 ff47 	bl	8001a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4a06      	ldr	r2, [pc, #24]	@ (8000bc8 <HAL_InitTick+0x5c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000018 	.word	0x20000018
 8000bc4:	20000020 	.word	0x20000020
 8000bc8:	2000001c 	.word	0x2000001c

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_IncTick+0x20>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <HAL_IncTick+0x24>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000020 	.word	0x20000020
 8000bf0:	200001d0 	.word	0x200001d0

08000bf4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bf8:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	200001d0 	.word	0x200001d0

08000c0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b09a      	sub	sp, #104	@ 0x68
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d101      	bne.n	8000c2c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e169      	b.n	8000f00 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d176      	bne.n	8000d2c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d152      	bne.n	8000cec <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fc57 	bl	8000514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d13b      	bne.n	8000cec <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 fd9f 	bl	80017b8 <ADC_Disable>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d12f      	bne.n	8000cec <HAL_ADC_Init+0xe0>
 8000c8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d12b      	bne.n	8000cec <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c9c:	f023 0302 	bic.w	r3, r3, #2
 8000ca0:	f043 0202 	orr.w	r2, r3, #2
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000cb6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000cc6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cc8:	4b8f      	ldr	r3, [pc, #572]	@ (8000f08 <HAL_ADC_Init+0x2fc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a8f      	ldr	r2, [pc, #572]	@ (8000f0c <HAL_ADC_Init+0x300>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	0c9a      	lsrs	r2, r3, #18
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cde:	e002      	b.n	8000ce6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1f9      	bne.n	8000ce0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d007      	beq.n	8000d0a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d08:	d110      	bne.n	8000d2c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f023 0312 	bic.w	r3, r3, #18
 8000d12:	f043 0210 	orr.w	r2, r3, #16
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	f043 0201 	orr.w	r2, r3, #1
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f040 80d6 	bne.w	8000ee6 <HAL_ADC_Init+0x2da>
 8000d3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 80d1 	bne.w	8000ee6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 80c9 	bne.w	8000ee6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000d5c:	f043 0202 	orr.w	r2, r3, #2
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d64:	4b6a      	ldr	r3, [pc, #424]	@ (8000f10 <HAL_ADC_Init+0x304>)
 8000d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d108      	bne.n	8000d8c <HAL_ADC_Init+0x180>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d101      	bne.n	8000d8c <HAL_ADC_Init+0x180>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e000      	b.n	8000d8e <HAL_ADC_Init+0x182>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d11c      	bne.n	8000dcc <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d92:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d010      	beq.n	8000dba <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d107      	bne.n	8000db4 <HAL_ADC_Init+0x1a8>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d101      	bne.n	8000db4 <HAL_ADC_Init+0x1a8>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <HAL_ADC_Init+0x1aa>
 8000db4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d108      	bne.n	8000dcc <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000dba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dca:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	7e5b      	ldrb	r3, [r3, #25]
 8000dd0:	035b      	lsls	r3, r3, #13
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000dd6:	2a01      	cmp	r2, #1
 8000dd8:	d002      	beq.n	8000de0 <HAL_ADC_Init+0x1d4>
 8000dda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dde:	e000      	b.n	8000de2 <HAL_ADC_Init+0x1d6>
 8000de0:	2200      	movs	r2, #0
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000df2:	4313      	orrs	r3, r2
 8000df4:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d11b      	bne.n	8000e38 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7e5b      	ldrb	r3, [r3, #25]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d109      	bne.n	8000e1c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	045a      	lsls	r2, r3, #17
 8000e10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e12:	4313      	orrs	r3, r2
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e18:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e1a:	e00d      	b.n	8000e38 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000e24:	f043 0220 	orr.w	r2, r3, #32
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e30:	f043 0201 	orr.w	r2, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d007      	beq.n	8000e50 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d114      	bne.n	8000e88 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	6812      	ldr	r2, [r2, #0]
 8000e68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e6c:	f023 0302 	bic.w	r3, r3, #2
 8000e70:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7e1b      	ldrb	r3, [r3, #24]
 8000e76:	039a      	lsls	r2, r3, #14
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4313      	orrs	r3, r2
 8000e82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e84:	4313      	orrs	r3, r2
 8000e86:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <HAL_ADC_Init+0x308>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d10c      	bne.n	8000ebe <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f023 010f 	bic.w	r1, r3, #15
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	1e5a      	subs	r2, r3, #1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ebc:	e007      	b.n	8000ece <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 020f 	bic.w	r2, r2, #15
 8000ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	f023 0303 	bic.w	r3, r3, #3
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ee4:	e00a      	b.n	8000efc <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f023 0312 	bic.w	r3, r3, #18
 8000eee:	f043 0210 	orr.w	r2, r3, #16
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000efc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3768      	adds	r7, #104	@ 0x68
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000018 	.word	0x20000018
 8000f0c:	431bde83 	.word	0x431bde83
 8000f10:	50000300 	.word	0x50000300
 8000f14:	fff0c007 	.word	0xfff0c007

08000f18 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d158      	bne.n	8000fe4 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d101      	bne.n	8000f40 <HAL_ADC_Start+0x28>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e054      	b.n	8000fea <HAL_ADC_Start+0xd2>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 fbd1 	bl	80016f0 <ADC_Enable>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d140      	bne.n	8000fda <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	641a      	str	r2, [r3, #64]	@ 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d007      	beq.n	8000f96 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	641a      	str	r2, [r3, #64]	@ 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fa2:	d106      	bne.n	8000fb2 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa8:	f023 0206 	bic.w	r2, r3, #6
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fb0:	e002      	b.n	8000fb8 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	221c      	movs	r2, #28
 8000fc6:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0204 	orr.w	r2, r2, #4
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	e006      	b.n	8000fe8 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000fe2:	e001      	b.n	8000fe8 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	2b08      	cmp	r3, #8
 8001008:	d102      	bne.n	8001010 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800100a:	2308      	movs	r3, #8
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e02e      	b.n	800106e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001010:	4b56      	ldr	r3, [pc, #344]	@ (800116c <HAL_ADC_PollForConversion+0x178>)
 8001012:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	2b00      	cmp	r3, #0
 800101e:	d112      	bne.n	8001046 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b01      	cmp	r3, #1
 800102c:	d11d      	bne.n	800106a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f043 0220 	orr.w	r2, r3, #32
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e08d      	b.n	8001162 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00b      	beq.n	800106a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f043 0220 	orr.w	r2, r3, #32
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e07b      	b.n	8001162 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800106a:	230c      	movs	r3, #12
 800106c:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001076:	f7ff fdbd 	bl	8000bf4 <HAL_GetTick>
 800107a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800107c:	e021      	b.n	80010c2 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d01d      	beq.n	80010c2 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d007      	beq.n	800109c <HAL_ADC_PollForConversion+0xa8>
 800108c:	f7ff fdb2 	bl	8000bf4 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d212      	bcs.n	80010c2 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10b      	bne.n	80010c2 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f043 0204 	orr.w	r2, r3, #4
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e04f      	b.n	8001162 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0d6      	beq.n	800107e <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d131      	bne.n	800114e <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d12c      	bne.n	800114e <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d125      	bne.n	800114e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	d112      	bne.n	8001136 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d112      	bne.n	800114e <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	f043 0201 	orr.w	r2, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	641a      	str	r2, [r3, #64]	@ 0x40
 8001134:	e00b      	b.n	800114e <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f043 0220 	orr.w	r2, r3, #32
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f043 0201 	orr.w	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	50000300 	.word	0x50000300

08001170 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800118c:	b480      	push	{r7}
 800118e:	b09b      	sub	sp, #108	@ 0x6c
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d101      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x22>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e295      	b.n	80016da <HAL_ADC_ConfigChannel+0x54e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f040 8279 	bne.w	80016b8 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d81c      	bhi.n	8001208 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	461a      	mov	r2, r3
 80011e2:	231f      	movs	r3, #31
 80011e4:	4093      	lsls	r3, r2
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4019      	ands	r1, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa00 f203 	lsl.w	r2, r0, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	631a      	str	r2, [r3, #48]	@ 0x30
 8001206:	e063      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b09      	cmp	r3, #9
 800120e:	d81e      	bhi.n	800124e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	3b1e      	subs	r3, #30
 8001224:	221f      	movs	r2, #31
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	4019      	ands	r1, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	3b1e      	subs	r3, #30
 8001240:	fa00 f203 	lsl.w	r2, r0, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	635a      	str	r2, [r3, #52]	@ 0x34
 800124c:	e040      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b0e      	cmp	r3, #14
 8001254:	d81e      	bhi.n	8001294 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	3b3c      	subs	r3, #60	@ 0x3c
 800126a:	221f      	movs	r2, #31
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	4019      	ands	r1, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	3b3c      	subs	r3, #60	@ 0x3c
 8001286:	fa00 f203 	lsl.w	r2, r0, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	639a      	str	r2, [r3, #56]	@ 0x38
 8001292:	e01d      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	3b5a      	subs	r3, #90	@ 0x5a
 80012a8:	221f      	movs	r2, #31
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	4019      	ands	r1, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	3b5a      	subs	r3, #90	@ 0x5a
 80012c4:	fa00 f203 	lsl.w	r2, r0, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 80e5 	bne.w	80014aa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b09      	cmp	r3, #9
 80012e6:	d91c      	bls.n	8001322 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6999      	ldr	r1, [r3, #24]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	3b1e      	subs	r3, #30
 80012fa:	2207      	movs	r2, #7
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	4019      	ands	r1, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	6898      	ldr	r0, [r3, #8]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	3b1e      	subs	r3, #30
 8001314:	fa00 f203 	lsl.w	r2, r0, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	619a      	str	r2, [r3, #24]
 8001320:	e019      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6959      	ldr	r1, [r3, #20]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	2207      	movs	r2, #7
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4019      	ands	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6898      	ldr	r0, [r3, #8]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	3b01      	subs	r3, #1
 8001374:	2b03      	cmp	r3, #3
 8001376:	d84f      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0x28c>
 8001378:	a201      	add	r2, pc, #4	@ (adr r2, 8001380 <HAL_ADC_ConfigChannel+0x1f4>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	08001391 	.word	0x08001391
 8001384:	080013b3 	.word	0x080013b3
 8001388:	080013d5 	.word	0x080013d5
 800138c:	080013f7 	.word	0x080013f7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001396:	4b97      	ldr	r3, [pc, #604]	@ (80015f4 <HAL_ADC_ConfigChannel+0x468>)
 8001398:	4013      	ands	r3, r2
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	0691      	lsls	r1, r2, #26
 80013a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013a2:	430a      	orrs	r2, r1
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013ae:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013b0:	e07b      	b.n	80014aa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80013b8:	4b8e      	ldr	r3, [pc, #568]	@ (80015f4 <HAL_ADC_ConfigChannel+0x468>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	0691      	lsls	r1, r2, #26
 80013c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013c4:	430a      	orrs	r2, r1
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013d0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013d2:	e06a      	b.n	80014aa <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80013da:	4b86      	ldr	r3, [pc, #536]	@ (80015f4 <HAL_ADC_ConfigChannel+0x468>)
 80013dc:	4013      	ands	r3, r2
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	0691      	lsls	r1, r2, #26
 80013e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013e6:	430a      	orrs	r2, r1
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013f2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013f4:	e059      	b.n	80014aa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80013fc:	4b7d      	ldr	r3, [pc, #500]	@ (80015f4 <HAL_ADC_ConfigChannel+0x468>)
 80013fe:	4013      	ands	r3, r2
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	0691      	lsls	r1, r2, #26
 8001406:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001408:	430a      	orrs	r2, r1
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001414:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001416:	e048      	b.n	80014aa <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	069b      	lsls	r3, r3, #26
 8001428:	429a      	cmp	r2, r3
 800142a:	d107      	bne.n	800143c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800143a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001442:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	069b      	lsls	r3, r3, #26
 800144c:	429a      	cmp	r2, r3
 800144e:	d107      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800145e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001466:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	069b      	lsls	r3, r3, #26
 8001470:	429a      	cmp	r2, r3
 8001472:	d107      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001482:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800148a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	069b      	lsls	r3, r3, #26
 8001494:	429a      	cmp	r2, r3
 8001496:	d107      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014a6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80014a8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x33e>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x33e>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_ADC_ConfigChannel+0x340>
 80014ca:	2300      	movs	r3, #0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f040 80fe 	bne.w	80016ce <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d00f      	beq.n	80014fa <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43da      	mvns	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	400a      	ands	r2, r1
 80014f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80014f8:	e049      	b.n	800158e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2201      	movs	r2, #1
 8001508:	409a      	lsls	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b09      	cmp	r3, #9
 800151a:	d91c      	bls.n	8001556 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6999      	ldr	r1, [r3, #24]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	3b1b      	subs	r3, #27
 800152e:	2207      	movs	r2, #7
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	4019      	ands	r1, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6898      	ldr	r0, [r3, #8]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	3b1b      	subs	r3, #27
 8001548:	fa00 f203 	lsl.w	r2, r0, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	619a      	str	r2, [r3, #24]
 8001554:	e01b      	b.n	800158e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6959      	ldr	r1, [r3, #20]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	2207      	movs	r2, #7
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	4019      	ands	r1, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	6898      	ldr	r0, [r3, #8]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	fa00 f203 	lsl.w	r2, r0, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800158e:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <HAL_ADC_ConfigChannel+0x46c>)
 8001590:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b10      	cmp	r3, #16
 8001598:	d105      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800159a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d014      	beq.n	80015d0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d105      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015be:	2b12      	cmp	r3, #18
 80015c0:	f040 8085 	bne.w	80016ce <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80015c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d17e      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d10c      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x470>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x470>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e004      	b.n	80015fe <HAL_ADC_ConfigChannel+0x472>
 80015f4:	83fff000 	.word	0x83fff000
 80015f8:	50000300 	.word	0x50000300
 80015fc:	2300      	movs	r3, #0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d150      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001602:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001604:	2b00      	cmp	r3, #0
 8001606:	d010      	beq.n	800162a <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b01      	cmp	r3, #1
 8001612:	d107      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x498>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x498>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_ADC_ConfigChannel+0x49a>
 8001624:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001626:	2b00      	cmp	r3, #0
 8001628:	d13c      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b10      	cmp	r3, #16
 8001630:	d11d      	bne.n	800166e <HAL_ADC_ConfigChannel+0x4e2>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800163a:	d118      	bne.n	800166e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800163c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001646:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001648:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <HAL_ADC_ConfigChannel+0x55c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a27      	ldr	r2, [pc, #156]	@ (80016ec <HAL_ADC_ConfigChannel+0x560>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0c9a      	lsrs	r2, r3, #18
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800165e:	e002      	b.n	8001666 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3b01      	subs	r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f9      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800166c:	e02e      	b.n	80016cc <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b11      	cmp	r3, #17
 8001674:	d10b      	bne.n	800168e <HAL_ADC_ConfigChannel+0x502>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800167e:	d106      	bne.n	800168e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001680:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800168a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800168c:	e01e      	b.n	80016cc <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b12      	cmp	r3, #18
 8001694:	d11a      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800169e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016a0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016a2:	e013      	b.n	80016cc <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f043 0220 	orr.w	r2, r3, #32
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80016b6:	e00a      	b.n	80016ce <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	f043 0220 	orr.w	r2, r3, #32
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80016ca:	e000      	b.n	80016ce <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016cc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80016da:	4618      	mov	r0, r3
 80016dc:	376c      	adds	r7, #108	@ 0x6c
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000018 	.word	0x20000018
 80016ec:	431bde83 	.word	0x431bde83

080016f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <ADC_Enable+0x2c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <ADC_Enable+0x2c>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <ADC_Enable+0x2e>
 800171c:	2300      	movs	r3, #0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d143      	bne.n	80017aa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <ADC_Enable+0xc4>)
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00d      	beq.n	800174c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	f043 0210 	orr.w	r2, r3, #16
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e02f      	b.n	80017ac <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800175c:	f7ff fa4a 	bl	8000bf4 <HAL_GetTick>
 8001760:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001762:	e01b      	b.n	800179c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001764:	f7ff fa46 	bl	8000bf4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d914      	bls.n	800179c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d00d      	beq.n	800179c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	f043 0210 	orr.w	r2, r3, #16
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001790:	f043 0201 	orr.w	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e007      	b.n	80017ac <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d1dc      	bne.n	8001764 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	8000003f 	.word	0x8000003f

080017b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d108      	bne.n	80017e4 <ADC_Disable+0x2c>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <ADC_Disable+0x2c>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <ADC_Disable+0x2e>
 80017e4:	2300      	movs	r3, #0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d047      	beq.n	800187a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030d 	and.w	r3, r3, #13
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d10f      	bne.n	8001818 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0202 	orr.w	r2, r2, #2
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2203      	movs	r2, #3
 800180e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001810:	f7ff f9f0 	bl	8000bf4 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001816:	e029      	b.n	800186c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f043 0210 	orr.w	r2, r3, #16
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e023      	b.n	800187c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001834:	f7ff f9de 	bl	8000bf4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d914      	bls.n	800186c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10d      	bne.n	800186c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	f043 0210 	orr.w	r2, r3, #16
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e007      	b.n	800187c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b01      	cmp	r3, #1
 8001878:	d0dc      	beq.n	8001834 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	@ (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	@ (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	@ (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	@ 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	@ 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f0:	d301      	bcc.n	80019f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00f      	b.n	8001a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <SysTick_Config+0x40>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fe:	210f      	movs	r1, #15
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f7ff ff8e 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <SysTick_Config+0x40>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <SysTick_Config+0x40>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff29 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4c:	f7ff ff3e 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	6978      	ldr	r0, [r7, #20]
 8001a58:	f7ff ff8e 	bl	8001978 <NVIC_EncodePriority>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff5d 	bl	8001924 <__NVIC_SetPriority>
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff31 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffa2 	bl	80019e0 <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab6:	e14e      	b.n	8001d56 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8140 	beq.w	8001d50 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d005      	beq.n	8001ae8 <HAL_GPIO_Init+0x40>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d130      	bne.n	8001b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1e:	2201      	movs	r2, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 0201 	and.w	r2, r3, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d017      	beq.n	8001b86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d123      	bne.n	8001bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	6939      	ldr	r1, [r7, #16]
 8001bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	2203      	movs	r2, #3
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0203 	and.w	r2, r3, #3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 809a 	beq.w	8001d50 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1c:	4b55      	ldr	r3, [pc, #340]	@ (8001d74 <HAL_GPIO_Init+0x2cc>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a54      	ldr	r2, [pc, #336]	@ (8001d74 <HAL_GPIO_Init+0x2cc>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b52      	ldr	r3, [pc, #328]	@ (8001d74 <HAL_GPIO_Init+0x2cc>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c34:	4a50      	ldr	r2, [pc, #320]	@ (8001d78 <HAL_GPIO_Init+0x2d0>)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c5e:	d013      	beq.n	8001c88 <HAL_GPIO_Init+0x1e0>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a46      	ldr	r2, [pc, #280]	@ (8001d7c <HAL_GPIO_Init+0x2d4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d00d      	beq.n	8001c84 <HAL_GPIO_Init+0x1dc>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a45      	ldr	r2, [pc, #276]	@ (8001d80 <HAL_GPIO_Init+0x2d8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d007      	beq.n	8001c80 <HAL_GPIO_Init+0x1d8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a44      	ldr	r2, [pc, #272]	@ (8001d84 <HAL_GPIO_Init+0x2dc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d101      	bne.n	8001c7c <HAL_GPIO_Init+0x1d4>
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e006      	b.n	8001c8a <HAL_GPIO_Init+0x1e2>
 8001c7c:	2305      	movs	r3, #5
 8001c7e:	e004      	b.n	8001c8a <HAL_GPIO_Init+0x1e2>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e002      	b.n	8001c8a <HAL_GPIO_Init+0x1e2>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_GPIO_Init+0x1e2>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	f002 0203 	and.w	r2, r2, #3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4093      	lsls	r3, r2
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c9a:	4937      	ldr	r1, [pc, #220]	@ (8001d78 <HAL_GPIO_Init+0x2d0>)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca8:	4b37      	ldr	r3, [pc, #220]	@ (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cf6:	4a24      	ldr	r2, [pc, #144]	@ (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfc:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d26:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <HAL_GPIO_Init+0x2e0>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f47f aea9 	bne.w	8001ab8 <HAL_GPIO_Init+0x10>
  }
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	48000400 	.word	0x48000400
 8001d80:	48000800 	.word	0x48000800
 8001d84:	48000c00 	.word	0x48000c00
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e001      	b.n	8001dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0b9      	b.n	8001f42 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f007 fb26 	bl	8009434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 fc8e 	bl	8005716 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e03e      	b.n	8001e7e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3311      	adds	r3, #17
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	3310      	adds	r3, #16
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	3313      	adds	r3, #19
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3324      	adds	r3, #36	@ 0x24
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3bb      	bcc.n	8001e00 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e044      	b.n	8001f18 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	3301      	adds	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	791b      	ldrb	r3, [r3, #4]
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3b5      	bcc.n	8001e8e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f2e:	f003 fc0d 	bl	800574c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_Start+0x16>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e016      	b.n	8001f8e <HAL_PCD_Start+0x44>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fbbb 	bl	80056e8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f72:	2101      	movs	r1, #1
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f007 fcb7 	bl	80098e8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f005 fe78 	bl	8007c74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f005 fe71 	bl	8007c8a <USB_ReadInterrupts>
 8001fa8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fab1 	bl	800251c <PCD_EP_ISR_Handler>

    return;
 8001fba:	e0bd      	b.n	8002138 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d013      	beq.n	8001fee <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fd8:	b292      	uxth	r2, r2
 8001fda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f007 faa3 	bl	800952a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8a9 	bl	800213e <HAL_PCD_SetAddress>

    return;
 8001fec:	e0a4      	b.n	8002138 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00c      	beq.n	8002012 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800200a:	b292      	uxth	r2, r2
 800200c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002010:	e092      	b.n	8002138 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00c      	beq.n	8002036 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800202e:	b292      	uxth	r2, r2
 8002030:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002034:	e080      	b.n	8002138 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d027      	beq.n	8002090 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002048:	b29a      	uxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0204 	bic.w	r2, r2, #4
 8002052:	b292      	uxth	r2, r2
 8002054:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0208 	bic.w	r2, r2, #8
 800206a:	b292      	uxth	r2, r2
 800206c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f007 fa93 	bl	800959c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800207e:	b29a      	uxth	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002088:	b292      	uxth	r2, r2
 800208a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800208e:	e053      	b.n	8002138 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002096:	2b00      	cmp	r3, #0
 8002098:	d027      	beq.n	80020ea <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0208 	orr.w	r2, r2, #8
 80020ac:	b292      	uxth	r2, r2
 80020ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c4:	b292      	uxth	r2, r2
 80020c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0204 	orr.w	r2, r2, #4
 80020dc:	b292      	uxth	r2, r2
 80020de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f007 fa40 	bl	8009568 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80020e8:	e026      	b.n	8002138 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00f      	beq.n	8002114 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002106:	b292      	uxth	r2, r2
 8002108:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f007 f9fe 	bl	800950e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002112:	e011      	b.n	8002138 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002126:	b29a      	uxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002130:	b292      	uxth	r2, r2
 8002132:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002136:	bf00      	nop
  }
}
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_PCD_SetAddress+0x1a>
 8002154:	2302      	movs	r3, #2
 8002156:	e012      	b.n	800217e <HAL_PCD_SetAddress+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f005 fd6c 	bl	8007c4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	4608      	mov	r0, r1
 8002190:	4611      	mov	r1, r2
 8002192:	461a      	mov	r2, r3
 8002194:	4603      	mov	r3, r0
 8002196:	70fb      	strb	r3, [r7, #3]
 8002198:	460b      	mov	r3, r1
 800219a:	803b      	strh	r3, [r7, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	da0e      	bge.n	80021ca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	f003 0207 	and.w	r2, r3, #7
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	3310      	adds	r3, #16
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	705a      	strb	r2, [r3, #1]
 80021c8:	e00e      	b.n	80021e8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 0207 	and.w	r2, r3, #7
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021f4:	883a      	ldrh	r2, [r7, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	78ba      	ldrb	r2, [r7, #2]
 80021fe:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002200:	78bb      	ldrb	r3, [r7, #2]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d102      	bne.n	800220c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_PCD_EP_Open+0x94>
 8002216:	2302      	movs	r3, #2
 8002218:	e00e      	b.n	8002238 <HAL_PCD_EP_Open+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 faad 	bl	8005788 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002236:	7afb      	ldrb	r3, [r7, #11]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800224c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da0e      	bge.n	8002272 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 0207 	and.w	r2, r3, #7
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	3310      	adds	r3, #16
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	705a      	strb	r2, [r3, #1]
 8002270:	e00e      	b.n	8002290 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	f003 0207 	and.w	r2, r3, #7
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_PCD_EP_Close+0x6a>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e00e      	b.n	80022c8 <HAL_PCD_EP_Close+0x88>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68f9      	ldr	r1, [r7, #12]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fe29 	bl	8005f10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	460b      	mov	r3, r1
 80022de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	f003 0207 	and.w	r2, r3, #7
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	b2da      	uxtb	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6979      	ldr	r1, [r7, #20]
 8002322:	4618      	mov	r0, r3
 8002324:	f003 ffe1 	bl	80062ea <USB_EPStartXfer>

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	f003 0207 	and.w	r2, r3, #7
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002354:	681b      	ldr	r3, [r3, #0]
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	460b      	mov	r3, r1
 8002370:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002372:	7afb      	ldrb	r3, [r7, #11]
 8002374:	f003 0207 	and.w	r2, r3, #7
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	3310      	adds	r3, #16
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4413      	add	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2201      	movs	r2, #1
 80023ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ae:	7afb      	ldrb	r3, [r7, #11]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6979      	ldr	r1, [r7, #20]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 ff92 	bl	80062ea <USB_EPStartXfer>

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	7912      	ldrb	r2, [r2, #4]
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e03e      	b.n	800246c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da0e      	bge.n	8002414 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 0207 	and.w	r2, r3, #7
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	3310      	adds	r3, #16
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	705a      	strb	r2, [r3, #1]
 8002412:	e00c      	b.n	800242e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	b2da      	uxtb	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_PCD_EP_SetStall+0x7e>
 800244a:	2302      	movs	r3, #2
 800244c:	e00e      	b.n	800246c <HAL_PCD_EP_SetStall+0x9c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68f9      	ldr	r1, [r7, #12]
 800245c:	4618      	mov	r0, r3
 800245e:	f005 faf6 	bl	8007a4e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	7912      	ldrb	r2, [r2, #4]
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e040      	b.n	8002514 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002496:	2b00      	cmp	r3, #0
 8002498:	da0e      	bge.n	80024b8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 0207 	and.w	r2, r3, #7
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	3310      	adds	r3, #16
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	705a      	strb	r2, [r3, #1]
 80024b6:	e00e      	b.n	80024d6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	f003 0207 	and.w	r2, r3, #7
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_PCD_EP_ClrStall+0x82>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e00e      	b.n	8002514 <HAL_PCD_EP_ClrStall+0xa0>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68f9      	ldr	r1, [r7, #12]
 8002504:	4618      	mov	r0, r3
 8002506:	f005 faf3 	bl	8007af0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b096      	sub	sp, #88	@ 0x58
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002524:	e3ad      	b.n	8002c82 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800252e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002532:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8002540:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 816f 	bne.w	8002828 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800254a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d14c      	bne.n	80025f0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002566:	81fb      	strh	r3, [r7, #14]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	89fb      	ldrh	r3, [r7, #14]
 800256e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002576:	b29b      	uxth	r3, r3
 8002578:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3310      	adds	r3, #16
 800257e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	4413      	add	r3, r2
 800259a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	441a      	add	r2, r3
 80025b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025b6:	2100      	movs	r1, #0
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f006 ff8e 	bl	80094da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7b1b      	ldrb	r3, [r3, #12]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 835c 	beq.w	8002c82 <PCD_EP_ISR_Handler+0x766>
 80025ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 8357 	bne.w	8002c82 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7b1b      	ldrb	r3, [r3, #12]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	731a      	strb	r2, [r3, #12]
 80025ee:	e348      	b.n	8002c82 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025f6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002602:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800260a:	2b00      	cmp	r3, #0
 800260c:	d032      	beq.n	8002674 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	4413      	add	r3, r2
 8002628:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002634:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002642:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002646:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002648:	b29b      	uxth	r3, r3
 800264a:	f005 fb70 	bl	8007d2e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29a      	uxth	r2, r3
 8002656:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800265a:	4013      	ands	r3, r2
 800265c:	823b      	strh	r3, [r7, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	8a3a      	ldrh	r2, [r7, #16]
 8002664:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002668:	b292      	uxth	r2, r2
 800266a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f006 ff07 	bl	8009480 <HAL_PCD_SetupStageCallback>
 8002672:	e306      	b.n	8002c82 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002674:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002678:	2b00      	cmp	r3, #0
 800267a:	f280 8302 	bge.w	8002c82 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29a      	uxth	r2, r3
 8002686:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800268a:	4013      	ands	r3, r2
 800268c:	83fb      	strh	r3, [r7, #30]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	8bfa      	ldrh	r2, [r7, #30]
 8002694:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002698:	b292      	uxth	r2, r2
 800269a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	4413      	add	r3, r2
 80026b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d019      	beq.n	8002700 <PCD_EP_ISR_Handler+0x1e4>
 80026cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d015      	beq.n	8002700 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026da:	6959      	ldr	r1, [r3, #20]
 80026dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026de:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f005 fb22 	bl	8007d2e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	441a      	add	r2, r3
 80026f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026f8:	2100      	movs	r1, #0
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f006 fed2 	bl	80094a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800270a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800270e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 82b5 	bne.w	8002c82 <PCD_EP_ISR_Handler+0x766>
 8002718:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800271c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002720:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002724:	f000 82ad 	beq.w	8002c82 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	b29b      	uxth	r3, r3
 800274e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002752:	b29a      	uxth	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	801a      	strh	r2, [r3, #0]
 8002758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <PCD_EP_ISR_Handler+0x25a>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800276a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800276e:	b29a      	uxth	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	801a      	strh	r2, [r3, #0]
 8002774:	e039      	b.n	80027ea <PCD_EP_ISR_Handler+0x2ce>
 8002776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b3e      	cmp	r3, #62	@ 0x3e
 800277c:	d818      	bhi.n	80027b0 <PCD_EP_ISR_Handler+0x294>
 800277e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	647b      	str	r3, [r7, #68]	@ 0x44
 8002786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <PCD_EP_ISR_Handler+0x27c>
 8002792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002794:	3301      	adds	r3, #1
 8002796:	647b      	str	r3, [r7, #68]	@ 0x44
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29a      	uxth	r2, r3
 800279e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	029b      	lsls	r3, r3, #10
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	e01c      	b.n	80027ea <PCD_EP_ISR_Handler+0x2ce>
 80027b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <PCD_EP_ISR_Handler+0x2ae>
 80027c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c6:	3b01      	subs	r3, #1
 80027c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	029b      	lsls	r3, r3, #10
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4313      	orrs	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027fa:	827b      	strh	r3, [r7, #18]
 80027fc:	8a7b      	ldrh	r3, [r7, #18]
 80027fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002802:	827b      	strh	r3, [r7, #18]
 8002804:	8a7b      	ldrh	r3, [r7, #18]
 8002806:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800280a:	827b      	strh	r3, [r7, #18]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	8a7b      	ldrh	r3, [r7, #18]
 8002812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800281a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800281e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002822:	b29b      	uxth	r3, r3
 8002824:	8013      	strh	r3, [r2, #0]
 8002826:	e22c      	b.n	8002c82 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800283c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002840:	2b00      	cmp	r3, #0
 8002842:	f280 80f6 	bge.w	8002a32 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	b29a      	uxth	r2, r3
 8002858:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800285c:	4013      	ands	r3, r2
 800285e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002874:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002878:	b292      	uxth	r2, r2
 800287a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800287c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4413      	add	r3, r2
 8002890:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002894:	7b1b      	ldrb	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d123      	bne.n	80028e2 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80028c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 808e 	beq.w	80029e8 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d2:	6959      	ldr	r1, [r3, #20]
 80028d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d6:	88da      	ldrh	r2, [r3, #6]
 80028d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028dc:	f005 fa27 	bl	8007d2e <USB_ReadPMA>
 80028e0:	e082      	b.n	80029e8 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e4:	78db      	ldrb	r3, [r3, #3]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d10a      	bne.n	8002900 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80028ee:	461a      	mov	r2, r3
 80028f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f9d3 	bl	8002c9e <HAL_PCD_EP_DB_Receive>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80028fe:	e073      	b.n	80029e8 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b29b      	uxth	r3, r3
 8002912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	441a      	add	r2, r3
 800292c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800293c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002940:	b29b      	uxth	r3, r3
 8002942:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d022      	beq.n	80029a4 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	4413      	add	r3, r2
 8002978:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002982:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002986:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800298a:	2b00      	cmp	r3, #0
 800298c:	d02c      	beq.n	80029e8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002994:	6959      	ldr	r1, [r3, #20]
 8002996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002998:	891a      	ldrh	r2, [r3, #8]
 800299a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800299e:	f005 f9c6 	bl	8007d2e <USB_ReadPMA>
 80029a2:	e021      	b.n	80029e8 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80029cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029da:	6959      	ldr	r1, [r3, #20]
 80029dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029de:	895a      	ldrh	r2, [r3, #10]
 80029e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029e4:	f005 f9a3 	bl	8007d2e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ea:	69da      	ldr	r2, [r3, #28]
 80029ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029f0:	441a      	add	r2, r3
 80029f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029fe:	441a      	add	r2, r3
 8002a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a02:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <PCD_EP_ISR_Handler+0x4fc>
 8002a0c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d206      	bcs.n	8002a26 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f006 fd40 	bl	80094a4 <HAL_PCD_DataOutStageCallback>
 8002a24:	e005      	b.n	8002a32 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 fc5c 	bl	80062ea <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a32:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8121 	beq.w	8002c82 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a40:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	3310      	adds	r3, #16
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	441a      	add	r2, r3
 8002a80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a92:	78db      	ldrb	r3, [r3, #3]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 80a2 	bne.w	8002bde <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa2:	7b1b      	ldrb	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8093 	beq.w	8002bd0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aaa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d046      	beq.n	8002b44 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab8:	785b      	ldrb	r3, [r3, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d126      	bne.n	8002b0c <PCD_EP_ISR_Handler+0x5f0>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	4413      	add	r3, r2
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	00da      	lsls	r2, r3, #3
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	4413      	add	r3, r2
 8002ae0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ae4:	623b      	str	r3, [r7, #32]
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	e061      	b.n	8002bd0 <PCD_EP_ISR_Handler+0x6b4>
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0e:	785b      	ldrb	r3, [r3, #1]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d15d      	bne.n	8002bd0 <PCD_EP_ISR_Handler+0x6b4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b28:	4413      	add	r3, r2
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	00da      	lsls	r2, r3, #3
 8002b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b34:	4413      	add	r3, r2
 8002b36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]
 8002b42:	e045      	b.n	8002bd0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4c:	785b      	ldrb	r3, [r3, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d126      	bne.n	8002ba0 <PCD_EP_ISR_Handler+0x684>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b66:	4413      	add	r3, r2
 8002b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	00da      	lsls	r2, r3, #3
 8002b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b72:	4413      	add	r3, r2
 8002b74:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	801a      	strh	r2, [r3, #0]
 8002b9e:	e017      	b.n	8002bd0 <PCD_EP_ISR_Handler+0x6b4>
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d113      	bne.n	8002bd0 <PCD_EP_ISR_Handler+0x6b4>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb6:	4413      	add	r3, r2
 8002bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	00da      	lsls	r2, r3, #3
 8002bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bcc:	2200      	movs	r2, #0
 8002bce:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f006 fc7f 	bl	80094da <HAL_PCD_DataInStageCallback>
 8002bdc:	e051      	b.n	8002c82 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002bde:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d144      	bne.n	8002c74 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d907      	bls.n	8002c2e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c26:	1ad2      	subs	r2, r2, r3
 8002c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2a:	619a      	str	r2, [r3, #24]
 8002c2c:	e002      	b.n	8002c34 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f006 fc49 	bl	80094da <HAL_PCD_DataInStageCallback>
 8002c48:	e01b      	b.n	8002c82 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c52:	441a      	add	r2, r3
 8002c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c56:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c60:	441a      	add	r2, r3
 8002c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c64:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 fb3c 	bl	80062ea <USB_EPStartXfer>
 8002c72:	e006      	b.n	8002c82 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f917 	bl	8002eb0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	b21b      	sxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f6ff ac49 	blt.w	8002526 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3758      	adds	r7, #88	@ 0x58
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b088      	sub	sp, #32
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d07c      	beq.n	8002db0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	8b7b      	ldrh	r3, [r7, #26]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d306      	bcc.n	8002cf4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	8b7b      	ldrh	r3, [r7, #26]
 8002cec:	1ad2      	subs	r2, r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	619a      	str	r2, [r3, #24]
 8002cf2:	e002      	b.n	8002cfa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d123      	bne.n	8002d4a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d1c:	833b      	strh	r3, [r7, #24]
 8002d1e:	8b3b      	ldrh	r3, [r7, #24]
 8002d20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d24:	833b      	strh	r3, [r7, #24]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	441a      	add	r2, r3
 8002d34:	8b3b      	ldrh	r3, [r7, #24]
 8002d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01f      	beq.n	8002d94 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d6e:	82fb      	strh	r3, [r7, #22]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	441a      	add	r2, r3
 8002d7e:	8afb      	ldrh	r3, [r7, #22]
 8002d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d94:	8b7b      	ldrh	r3, [r7, #26]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8085 	beq.w	8002ea6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	6959      	ldr	r1, [r3, #20]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	891a      	ldrh	r2, [r3, #8]
 8002da8:	8b7b      	ldrh	r3, [r7, #26]
 8002daa:	f004 ffc0 	bl	8007d2e <USB_ReadPMA>
 8002dae:	e07a      	b.n	8002ea6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	8b7b      	ldrh	r3, [r7, #26]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d306      	bcc.n	8002dee <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	8b7b      	ldrh	r3, [r7, #26]
 8002de6:	1ad2      	subs	r2, r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	619a      	str	r2, [r3, #24]
 8002dec:	e002      	b.n	8002df4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d123      	bne.n	8002e44 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e16:	83fb      	strh	r3, [r7, #30]
 8002e18:	8bfb      	ldrh	r3, [r7, #30]
 8002e1a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e1e:	83fb      	strh	r3, [r7, #30]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	441a      	add	r2, r3
 8002e2e:	8bfb      	ldrh	r3, [r7, #30]
 8002e30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d11f      	bne.n	8002e8e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e68:	83bb      	strh	r3, [r7, #28]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	441a      	add	r2, r3
 8002e78:	8bbb      	ldrh	r3, [r7, #28]
 8002e7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e8e:	8b7b      	ldrh	r3, [r7, #26]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6959      	ldr	r1, [r3, #20]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	895a      	ldrh	r2, [r3, #10]
 8002ea0:	8b7b      	ldrh	r3, [r7, #26]
 8002ea2:	f004 ff44 	bl	8007d2e <USB_ReadPMA>
    }
  }

  return count;
 8002ea6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b0a4      	sub	sp, #144	@ 0x90
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 81db 	beq.w	8003280 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eee:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d907      	bls.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002f06:	1ad2      	subs	r2, r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	619a      	str	r2, [r3, #24]
 8002f0c:	e002      	b.n	8002f14 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 80b9 	bne.w	8003090 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	785b      	ldrb	r3, [r3, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d126      	bne.n	8002f74 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3a:	4413      	add	r3, r2
 8002f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	00da      	lsls	r2, r3, #3
 8002f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f46:	4413      	add	r3, r2
 8002f48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5c:	801a      	strh	r2, [r3, #0]
 8002f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	e01a      	b.n	8002faa <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d116      	bne.n	8002faa <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f90:	4413      	add	r3, r2
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	00da      	lsls	r2, r3, #3
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002fa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	785b      	ldrb	r3, [r3, #1]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d126      	bne.n	8003006 <HAL_PCD_EP_DB_Transmit+0x156>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	00da      	lsls	r2, r3, #3
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	801a      	strh	r2, [r3, #0]
 8003004:	e017      	b.n	8003036 <HAL_PCD_EP_DB_Transmit+0x186>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d113      	bne.n	8003036 <HAL_PCD_EP_DB_Transmit+0x186>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	4413      	add	r3, r2
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	00da      	lsls	r2, r3, #3
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	4413      	add	r3, r2
 800302a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	2200      	movs	r2, #0
 8003034:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	4619      	mov	r1, r3
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f006 fa4c 	bl	80094da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 82fa 	beq.w	8003642 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003068:	82fb      	strh	r3, [r7, #22]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	441a      	add	r2, r3
 8003078:	8afb      	ldrh	r3, [r7, #22]
 800307a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800307e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003082:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800308a:	b29b      	uxth	r3, r3
 800308c:	8013      	strh	r3, [r2, #0]
 800308e:	e2d8      	b.n	8003642 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d021      	beq.n	80030de <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	441a      	add	r2, r3
 80030c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80030ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030da:	b29b      	uxth	r3, r3
 80030dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	f040 82ac 	bne.w	8003642 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80030f2:	441a      	add	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003100:	441a      	add	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	6a1a      	ldr	r2, [r3, #32]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	429a      	cmp	r2, r3
 8003110:	d30b      	bcc.n	800312a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	6a1a      	ldr	r2, [r3, #32]
 800311e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003122:	1ad2      	subs	r2, r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	621a      	str	r2, [r3, #32]
 8003128:	e017      	b.n	800315a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003132:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003142:	e00a      	b.n	800315a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2200      	movs	r2, #0
 8003158:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d165      	bne.n	800322e <HAL_PCD_EP_DB_Transmit+0x37e>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003176:	4413      	add	r3, r2
 8003178:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	00da      	lsls	r2, r3, #3
 8003180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003182:	4413      	add	r3, r2
 8003184:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003188:	63bb      	str	r3, [r7, #56]	@ 0x38
 800318a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003194:	b29a      	uxth	r2, r3
 8003196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x308>
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b4:	801a      	strh	r2, [r3, #0]
 80031b6:	e057      	b.n	8003268 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80031b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80031be:	d818      	bhi.n	80031f2 <HAL_PCD_EP_DB_Transmit+0x342>
 80031c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_PCD_EP_DB_Transmit+0x32a>
 80031d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031d6:	3301      	adds	r3, #1
 80031d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29a      	uxth	r2, r3
 80031e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	029b      	lsls	r3, r3, #10
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4313      	orrs	r3, r2
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ee:	801a      	strh	r2, [r3, #0]
 80031f0:	e03a      	b.n	8003268 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80031f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <HAL_PCD_EP_DB_Transmit+0x35c>
 8003206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003208:	3b01      	subs	r3, #1
 800320a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800320c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29a      	uxth	r2, r3
 8003212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003214:	b29b      	uxth	r3, r3
 8003216:	029b      	lsls	r3, r3, #10
 8003218:	b29b      	uxth	r3, r3
 800321a:	4313      	orrs	r3, r2
 800321c:	b29b      	uxth	r3, r3
 800321e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003226:	b29a      	uxth	r2, r3
 8003228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322a:	801a      	strh	r2, [r3, #0]
 800322c:	e01c      	b.n	8003268 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d118      	bne.n	8003268 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	647b      	str	r3, [r7, #68]	@ 0x44
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800324a:	4413      	add	r3, r2
 800324c:	647b      	str	r3, [r7, #68]	@ 0x44
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	00da      	lsls	r2, r3, #3
 8003254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003256:	4413      	add	r3, r2
 8003258:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800325c:	643b      	str	r3, [r7, #64]	@ 0x40
 800325e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003262:	b29a      	uxth	r2, r3
 8003264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003266:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6959      	ldr	r1, [r3, #20]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	891a      	ldrh	r2, [r3, #8]
 8003274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003278:	b29b      	uxth	r3, r3
 800327a:	f004 fd16 	bl	8007caa <USB_WritePMA>
 800327e:	e1e0      	b.n	8003642 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003288:	b29b      	uxth	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	4413      	add	r3, r2
 800329a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d307      	bcc.n	80032c4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80032bc:	1ad2      	subs	r2, r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	619a      	str	r2, [r3, #24]
 80032c2:	e002      	b.n	80032ca <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 80c0 	bne.w	8003454 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	785b      	ldrb	r3, [r3, #1]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d126      	bne.n	800332a <HAL_PCD_EP_DB_Transmit+0x47a>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032f0:	4413      	add	r3, r2
 80032f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	00da      	lsls	r2, r3, #3
 80032fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032fc:	4413      	add	r3, r2
 80032fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003302:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800330e:	b29a      	uxth	r2, r3
 8003310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800331e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003322:	b29a      	uxth	r2, r3
 8003324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003326:	801a      	strh	r2, [r3, #0]
 8003328:	e01a      	b.n	8003360 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	785b      	ldrb	r3, [r3, #1]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d116      	bne.n	8003360 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	667b      	str	r3, [r7, #100]	@ 0x64
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003340:	b29b      	uxth	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003346:	4413      	add	r3, r2
 8003348:	667b      	str	r3, [r7, #100]	@ 0x64
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	00da      	lsls	r2, r3, #3
 8003350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003352:	4413      	add	r3, r2
 8003354:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003358:	663b      	str	r3, [r7, #96]	@ 0x60
 800335a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800335c:	2200      	movs	r2, #0
 800335e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	677b      	str	r3, [r7, #116]	@ 0x74
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	785b      	ldrb	r3, [r3, #1]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d12b      	bne.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x516>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800337c:	b29b      	uxth	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003382:	4413      	add	r3, r2
 8003384:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	00da      	lsls	r2, r3, #3
 800338c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800338e:	4413      	add	r3, r2
 8003390:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033aa:	801a      	strh	r2, [r3, #0]
 80033ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033bc:	b29a      	uxth	r2, r3
 80033be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033c2:	801a      	strh	r2, [r3, #0]
 80033c4:	e017      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x546>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d113      	bne.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x546>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033dc:	4413      	add	r3, r2
 80033de:	677b      	str	r3, [r7, #116]	@ 0x74
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	00da      	lsls	r2, r3, #3
 80033e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033e8:	4413      	add	r3, r2
 80033ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80033f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033f2:	2200      	movs	r2, #0
 80033f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f006 f86c 	bl	80094da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 811a 	bne.w	8003642 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003428:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800343e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003446:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800344a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]
 8003452:	e0f6      	b.n	8003642 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d121      	bne.n	80034a2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003478:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800349a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	f040 80ca 	bne.w	8003642 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80034b6:	441a      	add	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80034c4:	441a      	add	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	6a1a      	ldr	r2, [r3, #32]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d30b      	bcc.n	80034ee <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e6:	1ad2      	subs	r2, r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	621a      	str	r2, [r3, #32]
 80034ec:	e017      	b.n	800351e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80034f6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80034fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003506:	e00a      	b.n	800351e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2200      	movs	r2, #0
 8003514:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	657b      	str	r3, [r7, #84]	@ 0x54
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	785b      	ldrb	r3, [r3, #1]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d165      	bne.n	80035f8 <HAL_PCD_EP_DB_Transmit+0x748>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800353a:	b29b      	uxth	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003540:	4413      	add	r3, r2
 8003542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	00da      	lsls	r2, r3, #3
 800354a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800354c:	4413      	add	r3, r2
 800354e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003552:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003554:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800355e:	b29a      	uxth	r2, r3
 8003560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003562:	801a      	strh	r2, [r3, #0]
 8003564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <HAL_PCD_EP_DB_Transmit+0x6d2>
 800356c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357a:	b29a      	uxth	r2, r3
 800357c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800357e:	801a      	strh	r2, [r3, #0]
 8003580:	e054      	b.n	800362c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003586:	2b3e      	cmp	r3, #62	@ 0x3e
 8003588:	d818      	bhi.n	80035bc <HAL_PCD_EP_DB_Transmit+0x70c>
 800358a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x6f4>
 800359e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035a0:	3301      	adds	r3, #1
 80035a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	029b      	lsls	r3, r3, #10
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	e037      	b.n	800362c <HAL_PCD_EP_DB_Transmit+0x77c>
 80035bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d102      	bne.n	80035d6 <HAL_PCD_EP_DB_Transmit+0x726>
 80035d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035d2:	3b01      	subs	r3, #1
 80035d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b29a      	uxth	r2, r3
 80035dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035de:	b29b      	uxth	r3, r3
 80035e0:	029b      	lsls	r3, r3, #10
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	4313      	orrs	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	e019      	b.n	800362c <HAL_PCD_EP_DB_Transmit+0x77c>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d115      	bne.n	800362c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003608:	b29b      	uxth	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360e:	4413      	add	r3, r2
 8003610:	657b      	str	r3, [r7, #84]	@ 0x54
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	00da      	lsls	r2, r3, #3
 8003618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361a:	4413      	add	r3, r2
 800361c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003620:	653b      	str	r3, [r7, #80]	@ 0x50
 8003622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003626:	b29a      	uxth	r2, r3
 8003628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800362a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	6959      	ldr	r1, [r3, #20]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	895a      	ldrh	r2, [r3, #10]
 8003638:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800363c:	b29b      	uxth	r3, r3
 800363e:	f004 fb34 	bl	8007caa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800365c:	82bb      	strh	r3, [r7, #20]
 800365e:	8abb      	ldrh	r3, [r7, #20]
 8003660:	f083 0310 	eor.w	r3, r3, #16
 8003664:	82bb      	strh	r3, [r7, #20]
 8003666:	8abb      	ldrh	r3, [r7, #20]
 8003668:	f083 0320 	eor.w	r3, r3, #32
 800366c:	82bb      	strh	r3, [r7, #20]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	441a      	add	r2, r3
 800367c:	8abb      	ldrh	r3, [r7, #20]
 800367e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800368a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800368e:	b29b      	uxth	r3, r3
 8003690:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3790      	adds	r7, #144	@ 0x90
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	817b      	strh	r3, [r7, #10]
 80036aa:	4613      	mov	r3, r2
 80036ac:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036ae:	897b      	ldrh	r3, [r7, #10]
 80036b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	f003 0207 	and.w	r2, r3, #7
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	3310      	adds	r3, #16
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	e009      	b.n	80036e6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036d2:	897a      	ldrh	r2, [r7, #10]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036e6:	893b      	ldrh	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d107      	bne.n	80036fc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2200      	movs	r2, #0
 80036f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	80da      	strh	r2, [r3, #6]
 80036fa:	e00b      	b.n	8003714 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2201      	movs	r2, #1
 8003700:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	b29a      	uxth	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	b29a      	uxth	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800372a:	af00      	add	r7, sp, #0
 800372c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003734:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	f001 b823 	b.w	8004790 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 817d 	beq.w	8003a5a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003760:	4bbc      	ldr	r3, [pc, #752]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b04      	cmp	r3, #4
 800376a:	d00c      	beq.n	8003786 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800376c:	4bb9      	ldr	r3, [pc, #740]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d15c      	bne.n	8003832 <HAL_RCC_OscConfig+0x10e>
 8003778:	4bb6      	ldr	r3, [pc, #728]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003784:	d155      	bne.n	8003832 <HAL_RCC_OscConfig+0x10e>
 8003786:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800378a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800379a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d102      	bne.n	80037b8 <HAL_RCC_OscConfig+0x94>
 80037b2:	4ba8      	ldr	r3, [pc, #672]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	e015      	b.n	80037e4 <HAL_RCC_OscConfig+0xc0>
 80037b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037bc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80037cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037d0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80037d4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80037e0:	4b9c      	ldr	r3, [pc, #624]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037e8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80037ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80037f0:	fa92 f2a2 	rbit	r2, r2
 80037f4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80037f8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80037fc:	fab2 f282 	clz	r2, r2
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	f042 0220 	orr.w	r2, r2, #32
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f002 021f 	and.w	r2, r2, #31
 800380c:	2101      	movs	r1, #1
 800380e:	fa01 f202 	lsl.w	r2, r1, r2
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 811f 	beq.w	8003a58 <HAL_RCC_OscConfig+0x334>
 800381a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 8116 	bne.w	8003a58 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f000 bfaf 	b.w	8004790 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003842:	d106      	bne.n	8003852 <HAL_RCC_OscConfig+0x12e>
 8003844:	4b83      	ldr	r3, [pc, #524]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a82      	ldr	r2, [pc, #520]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 800384a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e036      	b.n	80038c0 <HAL_RCC_OscConfig+0x19c>
 8003852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003856:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x158>
 8003862:	4b7c      	ldr	r3, [pc, #496]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a7b      	ldr	r2, [pc, #492]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b79      	ldr	r3, [pc, #484]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a78      	ldr	r2, [pc, #480]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003874:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e021      	b.n	80038c0 <HAL_RCC_OscConfig+0x19c>
 800387c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003880:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x184>
 800388e:	4b71      	ldr	r3, [pc, #452]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a70      	ldr	r2, [pc, #448]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b6e      	ldr	r3, [pc, #440]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a6d      	ldr	r2, [pc, #436]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0x19c>
 80038a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a69      	ldr	r2, [pc, #420]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 80038ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b67      	ldr	r3, [pc, #412]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a66      	ldr	r2, [pc, #408]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038be:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038c0:	4b64      	ldr	r3, [pc, #400]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	f023 020f 	bic.w	r2, r3, #15
 80038c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	495f      	ldr	r1, [pc, #380]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d059      	beq.n	800399e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fd f983 	bl	8000bf4 <HAL_GetTick>
 80038ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	e00a      	b.n	800390a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fd f97e 	bl	8000bf4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b64      	cmp	r3, #100	@ 0x64
 8003902:	d902      	bls.n	800390a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	f000 bf43 	b.w	8004790 <HAL_RCC_OscConfig+0x106c>
 800390a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800390e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800391e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d102      	bne.n	800393c <HAL_RCC_OscConfig+0x218>
 8003936:	4b47      	ldr	r3, [pc, #284]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	e015      	b.n	8003968 <HAL_RCC_OscConfig+0x244>
 800393c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003940:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003950:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003954:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003958:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003964:	4b3b      	ldr	r3, [pc, #236]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800396c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003970:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003974:	fa92 f2a2 	rbit	r2, r2
 8003978:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800397c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003980:	fab2 f282 	clz	r2, r2
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	f042 0220 	orr.w	r2, r2, #32
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	f002 021f 	and.w	r2, r2, #31
 8003990:	2101      	movs	r1, #1
 8003992:	fa01 f202 	lsl.w	r2, r1, r2
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ab      	beq.n	80038f4 <HAL_RCC_OscConfig+0x1d0>
 800399c:	e05d      	b.n	8003a5a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fd f929 	bl	8000bf4 <HAL_GetTick>
 80039a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fd f924 	bl	8000bf4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b64      	cmp	r3, #100	@ 0x64
 80039b6:	d902      	bls.n	80039be <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	f000 bee9 	b.w	8004790 <HAL_RCC_OscConfig+0x106c>
 80039be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039c2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80039d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <HAL_RCC_OscConfig+0x2cc>
 80039ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	e015      	b.n	8003a1c <HAL_RCC_OscConfig+0x2f8>
 80039f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039f4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003a04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a08:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003a0c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003a18:	4b0e      	ldr	r3, [pc, #56]	@ (8003a54 <HAL_RCC_OscConfig+0x330>)
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a20:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003a24:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003a28:	fa92 f2a2 	rbit	r2, r2
 8003a2c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003a30:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003a34:	fab2 f282 	clz	r2, r2
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	f042 0220 	orr.w	r2, r2, #32
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f002 021f 	and.w	r2, r2, #31
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ab      	bne.n	80039a8 <HAL_RCC_OscConfig+0x284>
 8003a50:	e003      	b.n	8003a5a <HAL_RCC_OscConfig+0x336>
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 817d 	beq.w	8003d6a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a70:	4ba6      	ldr	r3, [pc, #664]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 030c 	and.w	r3, r3, #12
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a7c:	4ba3      	ldr	r3, [pc, #652]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d172      	bne.n	8003b6e <HAL_RCC_OscConfig+0x44a>
 8003a88:	4ba0      	ldr	r3, [pc, #640]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d16c      	bne.n	8003b6e <HAL_RCC_OscConfig+0x44a>
 8003a94:	2302      	movs	r3, #2
 8003a96:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003aa6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x3a0>
 8003abe:	4b93      	ldr	r3, [pc, #588]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	e013      	b.n	8003aec <HAL_RCC_OscConfig+0x3c8>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003adc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003ae8:	4b88      	ldr	r3, [pc, #544]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	2202      	movs	r2, #2
 8003aee:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003af2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003af6:	fa92 f2a2 	rbit	r2, r2
 8003afa:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003afe:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003b02:	fab2 f282 	clz	r2, r2
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	f042 0220 	orr.w	r2, r2, #32
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	f002 021f 	and.w	r2, r2, #31
 8003b12:	2101      	movs	r1, #1
 8003b14:	fa01 f202 	lsl.w	r2, r1, r2
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCC_OscConfig+0x410>
 8003b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d002      	beq.n	8003b34 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f000 be2e 	b.w	8004790 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b75      	ldr	r3, [pc, #468]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	21f8      	movs	r1, #248	@ 0xf8
 8003b4a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003b52:	fa91 f1a1 	rbit	r1, r1
 8003b56:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003b5a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003b5e:	fab1 f181 	clz	r1, r1
 8003b62:	b2c9      	uxtb	r1, r1
 8003b64:	408b      	lsls	r3, r1
 8003b66:	4969      	ldr	r1, [pc, #420]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6c:	e0fd      	b.n	8003d6a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8088 	beq.w	8003c90 <HAL_RCC_OscConfig+0x56c>
 8003b80:	2301      	movs	r3, #1
 8003b82:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003b92:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ba0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2301      	movs	r3, #1
 8003baa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fd f822 	bl	8000bf4 <HAL_GetTick>
 8003bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb6:	f7fd f81d 	bl	8000bf4 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d902      	bls.n	8003bcc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	f000 bde2 	b.w	8004790 <HAL_RCC_OscConfig+0x106c>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003bde:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4d8>
 8003bf6:	4b45      	ldr	r3, [pc, #276]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	e013      	b.n	8003c24 <HAL_RCC_OscConfig+0x500>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003c0e:	2302      	movs	r3, #2
 8003c10:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003c14:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003c20:	4b3a      	ldr	r3, [pc, #232]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	2202      	movs	r2, #2
 8003c26:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003c2a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003c2e:	fa92 f2a2 	rbit	r2, r2
 8003c32:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003c36:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003c3a:	fab2 f282 	clz	r2, r2
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	f042 0220 	orr.w	r2, r2, #32
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	f002 021f 	and.w	r2, r2, #31
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0af      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c56:	4b2d      	ldr	r3, [pc, #180]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	21f8      	movs	r1, #248	@ 0xf8
 8003c6c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003c74:	fa91 f1a1 	rbit	r1, r1
 8003c78:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003c7c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003c80:	fab1 f181 	clz	r1, r1
 8003c84:	b2c9      	uxtb	r1, r1
 8003c86:	408b      	lsls	r3, r1
 8003c88:	4920      	ldr	r1, [pc, #128]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
 8003c8e:	e06c      	b.n	8003d6a <HAL_RCC_OscConfig+0x646>
 8003c90:	2301      	movs	r3, #1
 8003c92:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003ca2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cb0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2300      	movs	r3, #0
 8003cba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fc ff9a 	bl	8000bf4 <HAL_GetTick>
 8003cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc6:	f7fc ff95 	bl	8000bf4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d902      	bls.n	8003cdc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	f000 bd5a 	b.w	8004790 <HAL_RCC_OscConfig+0x106c>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d104      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5ec>
 8003d06:	4b01      	ldr	r3, [pc, #4]	@ (8003d0c <HAL_RCC_OscConfig+0x5e8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	e015      	b.n	8003d38 <HAL_RCC_OscConfig+0x614>
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	2302      	movs	r3, #2
 8003d12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003d22:	2302      	movs	r3, #2
 8003d24:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003d34:	4bc8      	ldr	r3, [pc, #800]	@ (8004058 <HAL_RCC_OscConfig+0x934>)
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003d3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003d42:	fa92 f2a2 	rbit	r2, r2
 8003d46:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003d4a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003d4e:	fab2 f282 	clz	r2, r2
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	f042 0220 	orr.w	r2, r2, #32
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	f002 021f 	and.w	r2, r2, #31
 8003d5e:	2101      	movs	r1, #1
 8003d60:	fa01 f202 	lsl.w	r2, r1, r2
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1ad      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8110 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d079      	beq.n	8003e84 <HAL_RCC_OscConfig+0x760>
 8003d90:	2301      	movs	r3, #1
 8003d92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	4bab      	ldr	r3, [pc, #684]	@ (800405c <HAL_RCC_OscConfig+0x938>)
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	461a      	mov	r2, r3
 8003db6:	2301      	movs	r3, #1
 8003db8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fc ff1b 	bl	8000bf4 <HAL_GetTick>
 8003dbe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fc ff16 	bl	8000bf4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d902      	bls.n	8003dda <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	f000 bcdb 	b.w	8004790 <HAL_RCC_OscConfig+0x106c>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003df4:	2202      	movs	r2, #2
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	fa93 f2a3 	rbit	r2, r3
 8003e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e18:	2202      	movs	r2, #2
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	fa93 f2a3 	rbit	r2, r3
 8003e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e32:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e34:	4b88      	ldr	r3, [pc, #544]	@ (8004058 <HAL_RCC_OscConfig+0x934>)
 8003e36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e40:	2102      	movs	r1, #2
 8003e42:	6019      	str	r1, [r3, #0]
 8003e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	fa93 f1a3 	rbit	r1, r3
 8003e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e56:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e5a:	6019      	str	r1, [r3, #0]
  return result;
 8003e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e60:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2101      	movs	r1, #1
 8003e78:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0a0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x6a0>
 8003e82:	e08d      	b.n	8003fa0 <HAL_RCC_OscConfig+0x87c>
 8003e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e88:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e94:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	fa93 f2a3 	rbit	r2, r3
 8003e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ea6:	601a      	str	r2, [r3, #0]
  return result;
 8003ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003eb0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b68      	ldr	r3, [pc, #416]	@ (800405c <HAL_RCC_OscConfig+0x938>)
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec6:	f7fc fe95 	bl	8000bf4 <HAL_GetTick>
 8003eca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed0:	f7fc fe90 	bl	8000bf4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d902      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	f000 bc55 	b.w	8004790 <HAL_RCC_OscConfig+0x106c>
 8003ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003eee:	2202      	movs	r2, #2
 8003ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	fa93 f2a3 	rbit	r2, r3
 8003f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f04:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f12:	2202      	movs	r2, #2
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	fa93 f2a3 	rbit	r2, r3
 8003f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f32:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f36:	2202      	movs	r2, #2
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	fa93 f2a3 	rbit	r2, r3
 8003f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003f50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f52:	4b41      	ldr	r3, [pc, #260]	@ (8004058 <HAL_RCC_OscConfig+0x934>)
 8003f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003f5e:	2102      	movs	r1, #2
 8003f60:	6019      	str	r1, [r3, #0]
 8003f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f66:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	fa93 f1a3 	rbit	r1, r3
 8003f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f74:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003f78:	6019      	str	r1, [r3, #0]
  return result;
 8003f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2101      	movs	r1, #1
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d197      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 81a1 	beq.w	80042f8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbc:	4b26      	ldr	r3, [pc, #152]	@ (8004058 <HAL_RCC_OscConfig+0x934>)
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d116      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc8:	4b23      	ldr	r3, [pc, #140]	@ (8004058 <HAL_RCC_OscConfig+0x934>)
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	4a22      	ldr	r2, [pc, #136]	@ (8004058 <HAL_RCC_OscConfig+0x934>)
 8003fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd2:	61d3      	str	r3, [r2, #28]
 8003fd4:	4b20      	ldr	r3, [pc, #128]	@ (8004058 <HAL_RCC_OscConfig+0x934>)
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003fee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8004060 <HAL_RCC_OscConfig+0x93c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11a      	bne.n	8004038 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004002:	4b17      	ldr	r3, [pc, #92]	@ (8004060 <HAL_RCC_OscConfig+0x93c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a16      	ldr	r2, [pc, #88]	@ (8004060 <HAL_RCC_OscConfig+0x93c>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800400c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400e:	f7fc fdf1 	bl	8000bf4 <HAL_GetTick>
 8004012:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	e009      	b.n	800402c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004018:	f7fc fdec 	bl	8000bf4 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b64      	cmp	r3, #100	@ 0x64
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e3b1      	b.n	8004790 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	4b0c      	ldr	r3, [pc, #48]	@ (8004060 <HAL_RCC_OscConfig+0x93c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ef      	beq.n	8004018 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d10d      	bne.n	8004064 <HAL_RCC_OscConfig+0x940>
 8004048:	4b03      	ldr	r3, [pc, #12]	@ (8004058 <HAL_RCC_OscConfig+0x934>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4a02      	ldr	r2, [pc, #8]	@ (8004058 <HAL_RCC_OscConfig+0x934>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6213      	str	r3, [r2, #32]
 8004054:	e03c      	b.n	80040d0 <HAL_RCC_OscConfig+0x9ac>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	10908120 	.word	0x10908120
 8004060:	40007000 	.word	0x40007000
 8004064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004068:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10c      	bne.n	800408e <HAL_RCC_OscConfig+0x96a>
 8004074:	4bc1      	ldr	r3, [pc, #772]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4ac0      	ldr	r2, [pc, #768]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	6213      	str	r3, [r2, #32]
 8004080:	4bbe      	ldr	r3, [pc, #760]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4abd      	ldr	r2, [pc, #756]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 8004086:	f023 0304 	bic.w	r3, r3, #4
 800408a:	6213      	str	r3, [r2, #32]
 800408c:	e020      	b.n	80040d0 <HAL_RCC_OscConfig+0x9ac>
 800408e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004092:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b05      	cmp	r3, #5
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x994>
 800409e:	4bb7      	ldr	r3, [pc, #732]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4ab6      	ldr	r2, [pc, #728]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 80040a4:	f043 0304 	orr.w	r3, r3, #4
 80040a8:	6213      	str	r3, [r2, #32]
 80040aa:	4bb4      	ldr	r3, [pc, #720]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4ab3      	ldr	r2, [pc, #716]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6213      	str	r3, [r2, #32]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0x9ac>
 80040b8:	4bb0      	ldr	r3, [pc, #704]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	4aaf      	ldr	r2, [pc, #700]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	6213      	str	r3, [r2, #32]
 80040c4:	4bad      	ldr	r3, [pc, #692]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4aac      	ldr	r2, [pc, #688]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 80040ca:	f023 0304 	bic.w	r3, r3, #4
 80040ce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8081 	beq.w	80041e4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e2:	f7fc fd87 	bl	8000bf4 <HAL_GetTick>
 80040e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ea:	e00b      	b.n	8004104 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fc fd82 	bl	8000bf4 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e345      	b.n	8004790 <HAL_RCC_OscConfig+0x106c>
 8004104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004108:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800410c:	2202      	movs	r2, #2
 800410e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004114:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	fa93 f2a3 	rbit	r2, r3
 800411e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004122:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004130:	2202      	movs	r2, #2
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004138:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	fa93 f2a3 	rbit	r2, r3
 8004142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004146:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800414a:	601a      	str	r2, [r3, #0]
  return result;
 800414c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004150:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004154:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	fab3 f383 	clz	r3, r3
 800415a:	b2db      	uxtb	r3, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d102      	bne.n	8004170 <HAL_RCC_OscConfig+0xa4c>
 800416a:	4b84      	ldr	r3, [pc, #528]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	e013      	b.n	8004198 <HAL_RCC_OscConfig+0xa74>
 8004170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004174:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004178:	2202      	movs	r2, #2
 800417a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004180:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	fa93 f2a3 	rbit	r2, r3
 800418a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	4b79      	ldr	r3, [pc, #484]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800419c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80041a0:	2102      	movs	r1, #2
 80041a2:	6011      	str	r1, [r2, #0]
 80041a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041a8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	fa92 f1a2 	rbit	r1, r2
 80041b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041b6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80041ba:	6011      	str	r1, [r2, #0]
  return result;
 80041bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041c0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	fab2 f282 	clz	r2, r2
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	f002 021f 	and.w	r2, r2, #31
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f202 	lsl.w	r2, r1, r2
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d084      	beq.n	80040ec <HAL_RCC_OscConfig+0x9c8>
 80041e2:	e07f      	b.n	80042e4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e4:	f7fc fd06 	bl	8000bf4 <HAL_GetTick>
 80041e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ec:	e00b      	b.n	8004206 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fc fd01 	bl	8000bf4 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e2c4      	b.n	8004790 <HAL_RCC_OscConfig+0x106c>
 8004206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800420e:	2202      	movs	r2, #2
 8004210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004216:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	fa93 f2a3 	rbit	r2, r3
 8004220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004224:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004232:	2202      	movs	r2, #2
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	fa93 f2a3 	rbit	r2, r3
 8004244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004248:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800424c:	601a      	str	r2, [r3, #0]
  return result;
 800424e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004252:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004256:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004258:	fab3 f383 	clz	r3, r3
 800425c:	b2db      	uxtb	r3, r3
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f043 0302 	orr.w	r3, r3, #2
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d102      	bne.n	8004272 <HAL_RCC_OscConfig+0xb4e>
 800426c:	4b43      	ldr	r3, [pc, #268]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	e013      	b.n	800429a <HAL_RCC_OscConfig+0xb76>
 8004272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004276:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800427a:	2202      	movs	r2, #2
 800427c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004282:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	fa93 f2a3 	rbit	r2, r3
 800428c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004290:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	4b39      	ldr	r3, [pc, #228]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800429e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80042a2:	2102      	movs	r1, #2
 80042a4:	6011      	str	r1, [r2, #0]
 80042a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042aa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	fa92 f1a2 	rbit	r1, r2
 80042b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042b8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80042bc:	6011      	str	r1, [r2, #0]
  return result;
 80042be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042c2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	fab2 f282 	clz	r2, r2
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	f002 021f 	and.w	r2, r2, #31
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f202 	lsl.w	r2, r1, r2
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d184      	bne.n	80041ee <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ec:	4b23      	ldr	r3, [pc, #140]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	4a22      	ldr	r2, [pc, #136]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 80042f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8242 	beq.w	800478e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800430a:	4b1c      	ldr	r3, [pc, #112]	@ (800437c <HAL_RCC_OscConfig+0xc58>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b08      	cmp	r3, #8
 8004314:	f000 8213 	beq.w	800473e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	2b02      	cmp	r3, #2
 8004326:	f040 8162 	bne.w	80045ee <HAL_RCC_OscConfig+0xeca>
 800432a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004332:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	fa93 f2a3 	rbit	r2, r3
 8004346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800434e:	601a      	str	r2, [r3, #0]
  return result;
 8004350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004354:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004358:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	fab3 f383 	clz	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004364:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	461a      	mov	r2, r3
 800436c:	2300      	movs	r3, #0
 800436e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fc fc40 	bl	8000bf4 <HAL_GetTick>
 8004374:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004378:	e00c      	b.n	8004394 <HAL_RCC_OscConfig+0xc70>
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004380:	f7fc fc38 	bl	8000bf4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e1fd      	b.n	8004790 <HAL_RCC_OscConfig+0x106c>
 8004394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004398:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800439c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	fa93 f2a3 	rbit	r2, r3
 80043b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80043b8:	601a      	str	r2, [r3, #0]
  return result;
 80043ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043be:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80043c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c4:	fab3 f383 	clz	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d102      	bne.n	80043de <HAL_RCC_OscConfig+0xcba>
 80043d8:	4bb0      	ldr	r3, [pc, #704]	@ (800469c <HAL_RCC_OscConfig+0xf78>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	e027      	b.n	800442e <HAL_RCC_OscConfig+0xd0a>
 80043de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80043e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	fa93 f2a3 	rbit	r2, r3
 80043fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004408:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800440c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004416:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	fa93 f2a3 	rbit	r2, r3
 8004420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004424:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	4b9c      	ldr	r3, [pc, #624]	@ (800469c <HAL_RCC_OscConfig+0xf78>)
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004432:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004436:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800443a:	6011      	str	r1, [r2, #0]
 800443c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004440:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	fa92 f1a2 	rbit	r1, r2
 800444a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800444e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004452:	6011      	str	r1, [r2, #0]
  return result;
 8004454:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004458:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	fab2 f282 	clz	r2, r2
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	f042 0220 	orr.w	r2, r2, #32
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	f002 021f 	and.w	r2, r2, #31
 800446e:	2101      	movs	r1, #1
 8004470:	fa01 f202 	lsl.w	r2, r1, r2
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d182      	bne.n	8004380 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800447a:	4b88      	ldr	r3, [pc, #544]	@ (800469c <HAL_RCC_OscConfig+0xf78>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004486:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800448e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004492:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	430b      	orrs	r3, r1
 800449c:	497f      	ldr	r1, [pc, #508]	@ (800469c <HAL_RCC_OscConfig+0xf78>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
 80044a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80044aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	fa93 f2a3 	rbit	r2, r3
 80044be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80044c6:	601a      	str	r2, [r3, #0]
  return result;
 80044c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044cc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80044d0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80044dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	461a      	mov	r2, r3
 80044e4:	2301      	movs	r3, #1
 80044e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fc fb84 	bl	8000bf4 <HAL_GetTick>
 80044ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044f0:	e009      	b.n	8004506 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f2:	f7fc fb7f 	bl	8000bf4 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e144      	b.n	8004790 <HAL_RCC_OscConfig+0x106c>
 8004506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800450e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004518:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	fa93 f2a3 	rbit	r2, r3
 8004522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004526:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800452a:	601a      	str	r2, [r3, #0]
  return result;
 800452c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004530:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004534:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004536:	fab3 f383 	clz	r3, r3
 800453a:	b2db      	uxtb	r3, r3
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	d102      	bne.n	8004550 <HAL_RCC_OscConfig+0xe2c>
 800454a:	4b54      	ldr	r3, [pc, #336]	@ (800469c <HAL_RCC_OscConfig+0xf78>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	e027      	b.n	80045a0 <HAL_RCC_OscConfig+0xe7c>
 8004550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004554:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004558:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800455c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004562:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	fa93 f2a3 	rbit	r2, r3
 800456c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004570:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800457e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004588:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	fa93 f2a3 	rbit	r2, r3
 8004592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004596:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	4b3f      	ldr	r3, [pc, #252]	@ (800469c <HAL_RCC_OscConfig+0xf78>)
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045a4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80045a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80045ac:	6011      	str	r1, [r2, #0]
 80045ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045b2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	fa92 f1a2 	rbit	r1, r2
 80045bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045c0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80045c4:	6011      	str	r1, [r2, #0]
  return result;
 80045c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045ca:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	fab2 f282 	clz	r2, r2
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	f042 0220 	orr.w	r2, r2, #32
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	f002 021f 	and.w	r2, r2, #31
 80045e0:	2101      	movs	r1, #1
 80045e2:	fa01 f202 	lsl.w	r2, r1, r2
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d082      	beq.n	80044f2 <HAL_RCC_OscConfig+0xdce>
 80045ec:	e0cf      	b.n	800478e <HAL_RCC_OscConfig+0x106a>
 80045ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80045f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004600:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	fa93 f2a3 	rbit	r2, r3
 800460a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004612:	601a      	str	r2, [r3, #0]
  return result;
 8004614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004618:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800461c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004628:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	461a      	mov	r2, r3
 8004630:	2300      	movs	r3, #0
 8004632:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fc fade 	bl	8000bf4 <HAL_GetTick>
 8004638:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463c:	e009      	b.n	8004652 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463e:	f7fc fad9 	bl	8000bf4 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e09e      	b.n	8004790 <HAL_RCC_OscConfig+0x106c>
 8004652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004656:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800465a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800465e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004664:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	fa93 f2a3 	rbit	r2, r3
 800466e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004672:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004676:	601a      	str	r2, [r3, #0]
  return result;
 8004678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800467c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004680:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004682:	fab3 f383 	clz	r3, r3
 8004686:	b2db      	uxtb	r3, r3
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	d104      	bne.n	80046a0 <HAL_RCC_OscConfig+0xf7c>
 8004696:	4b01      	ldr	r3, [pc, #4]	@ (800469c <HAL_RCC_OscConfig+0xf78>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	e029      	b.n	80046f0 <HAL_RCC_OscConfig+0xfcc>
 800469c:	40021000 	.word	0x40021000
 80046a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80046a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	fa93 f2a3 	rbit	r2, r3
 80046bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ca:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80046ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	fa93 f2a3 	rbit	r2, r3
 80046e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	4b2b      	ldr	r3, [pc, #172]	@ (800479c <HAL_RCC_OscConfig+0x1078>)
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046f4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80046f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80046fc:	6011      	str	r1, [r2, #0]
 80046fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004702:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	fa92 f1a2 	rbit	r1, r2
 800470c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004710:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004714:	6011      	str	r1, [r2, #0]
  return result;
 8004716:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800471a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	fab2 f282 	clz	r2, r2
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	f042 0220 	orr.w	r2, r2, #32
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	f002 021f 	and.w	r2, r2, #31
 8004730:	2101      	movs	r1, #1
 8004732:	fa01 f202 	lsl.w	r2, r1, r2
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d180      	bne.n	800463e <HAL_RCC_OscConfig+0xf1a>
 800473c:	e027      	b.n	800478e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800473e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004742:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e01e      	b.n	8004790 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004752:	4b12      	ldr	r3, [pc, #72]	@ (800479c <HAL_RCC_OscConfig+0x1078>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800475a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800475e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004766:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	429a      	cmp	r2, r3
 8004770:	d10b      	bne.n	800478a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004772:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004776:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800477a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800477e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000

080047a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b09e      	sub	sp, #120	@ 0x78
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e162      	b.n	8004a7e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b90      	ldr	r3, [pc, #576]	@ (80049fc <HAL_RCC_ClockConfig+0x25c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d910      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b8d      	ldr	r3, [pc, #564]	@ (80049fc <HAL_RCC_ClockConfig+0x25c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 0207 	bic.w	r2, r3, #7
 80047ce:	498b      	ldr	r1, [pc, #556]	@ (80049fc <HAL_RCC_ClockConfig+0x25c>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b89      	ldr	r3, [pc, #548]	@ (80049fc <HAL_RCC_ClockConfig+0x25c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e14a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f4:	4b82      	ldr	r3, [pc, #520]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	497f      	ldr	r1, [pc, #508]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 8004802:	4313      	orrs	r3, r2
 8004804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80dc 	beq.w	80049cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d13c      	bne.n	8004896 <HAL_RCC_ClockConfig+0xf6>
 800481c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004820:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800482a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482c:	fab3 f383 	clz	r3, r3
 8004830:	b2db      	uxtb	r3, r3
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d102      	bne.n	8004846 <HAL_RCC_ClockConfig+0xa6>
 8004840:	4b6f      	ldr	r3, [pc, #444]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	e00f      	b.n	8004866 <HAL_RCC_ClockConfig+0xc6>
 8004846:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800484a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	667b      	str	r3, [r7, #100]	@ 0x64
 8004854:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004858:	663b      	str	r3, [r7, #96]	@ 0x60
 800485a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004862:	4b67      	ldr	r3, [pc, #412]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 8004864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004866:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800486a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800486c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800486e:	fa92 f2a2 	rbit	r2, r2
 8004872:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004874:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004876:	fab2 f282 	clz	r2, r2
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	f042 0220 	orr.w	r2, r2, #32
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	f002 021f 	and.w	r2, r2, #31
 8004886:	2101      	movs	r1, #1
 8004888:	fa01 f202 	lsl.w	r2, r1, r2
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d17b      	bne.n	800498a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e0f3      	b.n	8004a7e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d13c      	bne.n	8004918 <HAL_RCC_ClockConfig+0x178>
 800489e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80048ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d102      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x128>
 80048c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	e00f      	b.n	80048e8 <HAL_RCC_ClockConfig+0x148>
 80048c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048da:	643b      	str	r3, [r7, #64]	@ 0x40
 80048dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048de:	fa93 f3a3 	rbit	r3, r3
 80048e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048e4:	4b46      	ldr	r3, [pc, #280]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048ec:	63ba      	str	r2, [r7, #56]	@ 0x38
 80048ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048f0:	fa92 f2a2 	rbit	r2, r2
 80048f4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80048f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048f8:	fab2 f282 	clz	r2, r2
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	f042 0220 	orr.w	r2, r2, #32
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	f002 021f 	and.w	r2, r2, #31
 8004908:	2101      	movs	r1, #1
 800490a:	fa01 f202 	lsl.w	r2, r1, r2
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d13a      	bne.n	800498a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0b2      	b.n	8004a7e <HAL_RCC_ClockConfig+0x2de>
 8004918:	2302      	movs	r3, #2
 800491a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b01      	cmp	r3, #1
 8004938:	d102      	bne.n	8004940 <HAL_RCC_ClockConfig+0x1a0>
 800493a:	4b31      	ldr	r3, [pc, #196]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	e00d      	b.n	800495c <HAL_RCC_ClockConfig+0x1bc>
 8004940:	2302      	movs	r3, #2
 8004942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
 800494c:	2302      	movs	r3, #2
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	61fb      	str	r3, [r7, #28]
 8004958:	4b29      	ldr	r3, [pc, #164]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	2202      	movs	r2, #2
 800495e:	61ba      	str	r2, [r7, #24]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	fa92 f2a2 	rbit	r2, r2
 8004966:	617a      	str	r2, [r7, #20]
  return result;
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	fab2 f282 	clz	r2, r2
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	f042 0220 	orr.w	r2, r2, #32
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	f002 021f 	and.w	r2, r2, #31
 800497a:	2101      	movs	r1, #1
 800497c:	fa01 f202 	lsl.w	r2, r1, r2
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e079      	b.n	8004a7e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800498a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f023 0203 	bic.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	491a      	ldr	r1, [pc, #104]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800499c:	f7fc f92a 	bl	8000bf4 <HAL_GetTick>
 80049a0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a4:	f7fc f926 	bl	8000bf4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e061      	b.n	8004a7e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ba:	4b11      	ldr	r3, [pc, #68]	@ (8004a00 <HAL_RCC_ClockConfig+0x260>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 020c 	and.w	r2, r3, #12
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d1eb      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049cc:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <HAL_RCC_ClockConfig+0x25c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d214      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b08      	ldr	r3, [pc, #32]	@ (80049fc <HAL_RCC_ClockConfig+0x25c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 0207 	bic.w	r2, r3, #7
 80049e2:	4906      	ldr	r1, [pc, #24]	@ (80049fc <HAL_RCC_ClockConfig+0x25c>)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ea:	4b04      	ldr	r3, [pc, #16]	@ (80049fc <HAL_RCC_ClockConfig+0x25c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e040      	b.n	8004a7e <HAL_RCC_ClockConfig+0x2de>
 80049fc:	40022000 	.word	0x40022000
 8004a00:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a10:	4b1d      	ldr	r3, [pc, #116]	@ (8004a88 <HAL_RCC_ClockConfig+0x2e8>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	491a      	ldr	r1, [pc, #104]	@ (8004a88 <HAL_RCC_ClockConfig+0x2e8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2e:	4b16      	ldr	r3, [pc, #88]	@ (8004a88 <HAL_RCC_ClockConfig+0x2e8>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4912      	ldr	r1, [pc, #72]	@ (8004a88 <HAL_RCC_ClockConfig+0x2e8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a42:	f000 f829 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004a46:	4601      	mov	r1, r0
 8004a48:	4b0f      	ldr	r3, [pc, #60]	@ (8004a88 <HAL_RCC_ClockConfig+0x2e8>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a50:	22f0      	movs	r2, #240	@ 0xf0
 8004a52:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	fa92 f2a2 	rbit	r2, r2
 8004a5a:	60fa      	str	r2, [r7, #12]
  return result;
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	fab2 f282 	clz	r2, r2
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	40d3      	lsrs	r3, r2
 8004a66:	4a09      	ldr	r2, [pc, #36]	@ (8004a8c <HAL_RCC_ClockConfig+0x2ec>)
 8004a68:	5cd3      	ldrb	r3, [r2, r3]
 8004a6a:	fa21 f303 	lsr.w	r3, r1, r3
 8004a6e:	4a08      	ldr	r2, [pc, #32]	@ (8004a90 <HAL_RCC_ClockConfig+0x2f0>)
 8004a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a72:	4b08      	ldr	r3, [pc, #32]	@ (8004a94 <HAL_RCC_ClockConfig+0x2f4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fc f878 	bl	8000b6c <HAL_InitTick>
  
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3778      	adds	r7, #120	@ 0x78
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	08009a0c 	.word	0x08009a0c
 8004a90:	20000018 	.word	0x20000018
 8004a94:	2000001c 	.word	0x2000001c

08004a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d002      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x30>
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d003      	beq.n	8004ace <HAL_RCC_GetSysClockFreq+0x36>
 8004ac6:	e026      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ac8:	4b19      	ldr	r3, [pc, #100]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x98>)
 8004aca:	613b      	str	r3, [r7, #16]
      break;
 8004acc:	e026      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	0c9b      	lsrs	r3, r3, #18
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	4a17      	ldr	r2, [pc, #92]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ad8:	5cd3      	ldrb	r3, [r2, r3]
 8004ada:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004adc:	4b13      	ldr	r3, [pc, #76]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ae6:	5cd3      	ldrb	r3, [r2, r3]
 8004ae8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004af4:	4a0e      	ldr	r2, [pc, #56]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x98>)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e004      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a0c      	ldr	r2, [pc, #48]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	613b      	str	r3, [r7, #16]
      break;
 8004b14:	e002      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b16:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b18:	613b      	str	r3, [r7, #16]
      break;
 8004b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b1c:	693b      	ldr	r3, [r7, #16]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	007a1200 	.word	0x007a1200
 8004b34:	08009a1c 	.word	0x08009a1c
 8004b38:	08009a2c 	.word	0x08009a2c
 8004b3c:	003d0900 	.word	0x003d0900

08004b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b092      	sub	sp, #72	@ 0x48
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80d4 	beq.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b64:	4b4e      	ldr	r3, [pc, #312]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10e      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b70:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	4a4a      	ldr	r2, [pc, #296]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b7a:	61d3      	str	r3, [r2, #28]
 8004b7c:	4b48      	ldr	r3, [pc, #288]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8e:	4b45      	ldr	r3, [pc, #276]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d118      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9a:	4b42      	ldr	r3, [pc, #264]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a41      	ldr	r2, [pc, #260]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba6:	f7fc f825 	bl	8000bf4 <HAL_GetTick>
 8004baa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bac:	e008      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bae:	f7fc f821 	bl	8000bf4 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b64      	cmp	r3, #100	@ 0x64
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e14b      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc0:	4b38      	ldr	r3, [pc, #224]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bcc:	4b34      	ldr	r3, [pc, #208]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8084 	beq.w	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d07c      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bec:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b26      	ldr	r3, [pc, #152]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	461a      	mov	r2, r3
 8004c16:	2301      	movs	r3, #1
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c2a:	fab3 f383 	clz	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c42:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d04b      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7fb ffd1 	bl	8000bf4 <HAL_GetTick>
 8004c52:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fb ffcd 	bl	8000bf4 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e0f5      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c78:	2302      	movs	r3, #2
 8004c7a:	623b      	str	r3, [r7, #32]
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	fa93 f3a3 	rbit	r3, r3
 8004c82:	61fb      	str	r3, [r7, #28]
  return result;
 8004c84:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d108      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c9a:	4b01      	ldr	r3, [pc, #4]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	e00d      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40007000 	.word	0x40007000
 8004ca8:	10908100 	.word	0x10908100
 8004cac:	2302      	movs	r3, #2
 8004cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	fa93 f3a3 	rbit	r3, r3
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	4b69      	ldr	r3, [pc, #420]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	613a      	str	r2, [r7, #16]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	fa92 f2a2 	rbit	r2, r2
 8004cc6:	60fa      	str	r2, [r7, #12]
  return result;
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	fab2 f282 	clz	r2, r2
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	f002 021f 	and.w	r2, r2, #31
 8004cda:	2101      	movs	r1, #1
 8004cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0b7      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ce6:	4b5e      	ldr	r3, [pc, #376]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	495b      	ldr	r1, [pc, #364]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cf8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d105      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d00:	4b57      	ldr	r3, [pc, #348]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4a56      	ldr	r2, [pc, #344]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d18:	4b51      	ldr	r3, [pc, #324]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1c:	f023 0203 	bic.w	r2, r3, #3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	494e      	ldr	r1, [pc, #312]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d36:	4b4a      	ldr	r3, [pc, #296]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	f023 0210 	bic.w	r2, r3, #16
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4947      	ldr	r1, [pc, #284]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004d54:	4b42      	ldr	r3, [pc, #264]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d60:	493f      	ldr	r1, [pc, #252]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d72:	4b3b      	ldr	r3, [pc, #236]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d76:	f023 0220 	bic.w	r2, r3, #32
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	4938      	ldr	r1, [pc, #224]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d90:	4b33      	ldr	r3, [pc, #204]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	4930      	ldr	r1, [pc, #192]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dae:	4b2c      	ldr	r3, [pc, #176]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	4929      	ldr	r1, [pc, #164]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004dcc:	4b24      	ldr	r3, [pc, #144]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	4921      	ldr	r1, [pc, #132]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004dea:	4b1d      	ldr	r3, [pc, #116]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	491a      	ldr	r1, [pc, #104]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e08:	4b15      	ldr	r3, [pc, #84]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	4912      	ldr	r1, [pc, #72]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004e26:	4b0e      	ldr	r3, [pc, #56]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	490b      	ldr	r1, [pc, #44]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004e44:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	4903      	ldr	r1, [pc, #12]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3748      	adds	r7, #72	@ 0x48
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000

08004e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e049      	b.n	8004f0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fb fb7e 	bl	800058c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	f000 fa88 	bl	80053b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d001      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e03b      	b.n	8004fa4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a19      	ldr	r2, [pc, #100]	@ (8004fb0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_TIM_Base_Start_IT+0x4e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f56:	d004      	beq.n	8004f62 <HAL_TIM_Base_Start_IT+0x4e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a15      	ldr	r2, [pc, #84]	@ (8004fb4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d115      	bne.n	8004f8e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	4b13      	ldr	r3, [pc, #76]	@ (8004fb8 <HAL_TIM_Base_Start_IT+0xa4>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b06      	cmp	r3, #6
 8004f72:	d015      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x8c>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f7a:	d011      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8c:	e008      	b.n	8004fa0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e000      	b.n	8004fa2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	00010007 	.word	0x00010007

08004fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d020      	beq.n	8005020 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01b      	beq.n	8005020 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0202 	mvn.w	r2, #2
 8004ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f9b7 	bl	800537a <HAL_TIM_IC_CaptureCallback>
 800500c:	e005      	b.n	800501a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f9a9 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f9ba 	bl	800538e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d020      	beq.n	800506c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01b      	beq.n	800506c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0204 	mvn.w	r2, #4
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f991 	bl	800537a <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f983 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f994 	bl	800538e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d020      	beq.n	80050b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01b      	beq.n	80050b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0208 	mvn.w	r2, #8
 8005088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2204      	movs	r2, #4
 800508e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f96b 	bl	800537a <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f95d 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f96e 	bl	800538e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d020      	beq.n	8005104 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01b      	beq.n	8005104 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0210 	mvn.w	r2, #16
 80050d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2208      	movs	r2, #8
 80050da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f945 	bl	800537a <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f937 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f948 	bl	800538e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00c      	beq.n	8005128 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0201 	mvn.w	r2, #1
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f915 	bl	8005352 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00c      	beq.n	800514c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 faba 	bl	80056c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00c      	beq.n	8005170 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fab2 	bl	80056d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00c      	beq.n	8005194 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800518c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f907 	bl	80053a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00c      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d007      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0220 	mvn.w	r2, #32
 80051b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa7a 	bl	80056ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_TIM_ConfigClockSource+0x1c>
 80051d8:	2302      	movs	r3, #2
 80051da:	e0b6      	b.n	800534a <HAL_TIM_ConfigClockSource+0x18a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005218:	d03e      	beq.n	8005298 <HAL_TIM_ConfigClockSource+0xd8>
 800521a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800521e:	f200 8087 	bhi.w	8005330 <HAL_TIM_ConfigClockSource+0x170>
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005226:	f000 8086 	beq.w	8005336 <HAL_TIM_ConfigClockSource+0x176>
 800522a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800522e:	d87f      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x170>
 8005230:	2b70      	cmp	r3, #112	@ 0x70
 8005232:	d01a      	beq.n	800526a <HAL_TIM_ConfigClockSource+0xaa>
 8005234:	2b70      	cmp	r3, #112	@ 0x70
 8005236:	d87b      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x170>
 8005238:	2b60      	cmp	r3, #96	@ 0x60
 800523a:	d050      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x11e>
 800523c:	2b60      	cmp	r3, #96	@ 0x60
 800523e:	d877      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x170>
 8005240:	2b50      	cmp	r3, #80	@ 0x50
 8005242:	d03c      	beq.n	80052be <HAL_TIM_ConfigClockSource+0xfe>
 8005244:	2b50      	cmp	r3, #80	@ 0x50
 8005246:	d873      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x170>
 8005248:	2b40      	cmp	r3, #64	@ 0x40
 800524a:	d058      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x13e>
 800524c:	2b40      	cmp	r3, #64	@ 0x40
 800524e:	d86f      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x170>
 8005250:	2b30      	cmp	r3, #48	@ 0x30
 8005252:	d064      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x15e>
 8005254:	2b30      	cmp	r3, #48	@ 0x30
 8005256:	d86b      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x170>
 8005258:	2b20      	cmp	r3, #32
 800525a:	d060      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x15e>
 800525c:	2b20      	cmp	r3, #32
 800525e:	d867      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x170>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d05c      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x15e>
 8005264:	2b10      	cmp	r3, #16
 8005266:	d05a      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x15e>
 8005268:	e062      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800527a:	f000 f991 	bl	80055a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800528c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	609a      	str	r2, [r3, #8]
      break;
 8005296:	e04f      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052a8:	f000 f97a 	bl	80055a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052ba:	609a      	str	r2, [r3, #8]
      break;
 80052bc:	e03c      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ca:	461a      	mov	r2, r3
 80052cc:	f000 f8ee 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2150      	movs	r1, #80	@ 0x50
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f947 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 80052dc:	e02c      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ea:	461a      	mov	r2, r3
 80052ec:	f000 f90d 	bl	800550a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2160      	movs	r1, #96	@ 0x60
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f937 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 80052fc:	e01c      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800530a:	461a      	mov	r2, r3
 800530c:	f000 f8ce 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2140      	movs	r1, #64	@ 0x40
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f927 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 800531c:	e00c      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f000 f91e 	bl	800556a <TIM_ITRx_SetConfig>
      break;
 800532e:	e003      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
      break;
 8005334:	e000      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a34      	ldr	r2, [pc, #208]	@ (800549c <TIM_Base_SetConfig+0xe4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_Base_SetConfig+0x20>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d6:	d108      	bne.n	80053ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2b      	ldr	r2, [pc, #172]	@ (800549c <TIM_Base_SetConfig+0xe4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00f      	beq.n	8005412 <TIM_Base_SetConfig+0x5a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f8:	d00b      	beq.n	8005412 <TIM_Base_SetConfig+0x5a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a28      	ldr	r2, [pc, #160]	@ (80054a0 <TIM_Base_SetConfig+0xe8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d007      	beq.n	8005412 <TIM_Base_SetConfig+0x5a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a27      	ldr	r2, [pc, #156]	@ (80054a4 <TIM_Base_SetConfig+0xec>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_Base_SetConfig+0x5a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a26      	ldr	r2, [pc, #152]	@ (80054a8 <TIM_Base_SetConfig+0xf0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d108      	bne.n	8005424 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a14      	ldr	r2, [pc, #80]	@ (800549c <TIM_Base_SetConfig+0xe4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00b      	beq.n	8005468 <TIM_Base_SetConfig+0xb0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a13      	ldr	r2, [pc, #76]	@ (80054a0 <TIM_Base_SetConfig+0xe8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_Base_SetConfig+0xb0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a12      	ldr	r2, [pc, #72]	@ (80054a4 <TIM_Base_SetConfig+0xec>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_Base_SetConfig+0xb0>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a11      	ldr	r2, [pc, #68]	@ (80054a8 <TIM_Base_SetConfig+0xf0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d103      	bne.n	8005470 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b01      	cmp	r3, #1
 8005480:	d105      	bne.n	800548e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	611a      	str	r2, [r3, #16]
  }
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400
 80054a8:	40014800 	.word	0x40014800

080054ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 030a 	bic.w	r3, r3, #10
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800550a:	b480      	push	{r7}
 800550c:	b087      	sub	sp, #28
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f023 0210 	bic.w	r2, r3, #16
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	031b      	lsls	r3, r3, #12
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005546:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005580:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	f043 0307 	orr.w	r3, r3, #7
 800558c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	609a      	str	r2, [r3, #8]
}
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	021a      	lsls	r2, r3, #8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e04f      	b.n	8005698 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a21      	ldr	r2, [pc, #132]	@ (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d108      	bne.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005628:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a14      	ldr	r2, [pc, #80]	@ (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d009      	beq.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005660:	d004      	beq.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a10      	ldr	r2, [pc, #64]	@ (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d10c      	bne.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005672:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	4313      	orrs	r3, r2
 800567c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40014000 	.word	0x40014000

080056ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056f8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80056fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	b29a      	uxth	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800571e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005722:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	b29b      	uxth	r3, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	b29b      	uxth	r3, r3
 8005734:	4013      	ands	r3, r2
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	1d3b      	adds	r3, r7, #4
 8005756:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005788:	b480      	push	{r7}
 800578a:	b09d      	sub	sp, #116	@ 0x74
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80057aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	78db      	ldrb	r3, [r3, #3]
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d81f      	bhi.n	80057fa <USB_ActivateEndpoint+0x72>
 80057ba:	a201      	add	r2, pc, #4	@ (adr r2, 80057c0 <USB_ActivateEndpoint+0x38>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	08005803 	.word	0x08005803
 80057cc:	080057df 	.word	0x080057df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80057d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80057dc:	e012      	b.n	8005804 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80057de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057e2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80057e6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80057ea:	e00b      	b.n	8005804 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80057ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80057f8:	e004      	b.n	8005804 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005800:	e000      	b.n	8005804 <USB_ActivateEndpoint+0x7c>
      break;
 8005802:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	441a      	add	r2, r3
 800580e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800581a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800581e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005822:	b29b      	uxth	r3, r3
 8005824:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	b21b      	sxth	r3, r3
 8005836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800583a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583e:	b21a      	sxth	r2, r3
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b21b      	sxth	r3, r3
 8005846:	4313      	orrs	r3, r2
 8005848:	b21b      	sxth	r3, r3
 800584a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	441a      	add	r2, r3
 8005858:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800585c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800586c:	b29b      	uxth	r3, r3
 800586e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	7b1b      	ldrb	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f040 8178 	bne.w	8005b6a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 8084 	beq.w	800598c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800588e:	b29b      	uxth	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	4413      	add	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	00da      	lsls	r2, r3, #3
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	88db      	ldrh	r3, [r3, #6]
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	827b      	strh	r3, [r7, #18]
 80058c6:	8a7b      	ldrh	r3, [r7, #18]
 80058c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01b      	beq.n	8005908 <USB_ActivateEndpoint+0x180>
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e6:	823b      	strh	r3, [r7, #16]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	441a      	add	r2, r3
 80058f2:	8a3b      	ldrh	r3, [r7, #16]
 80058f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005900:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005904:	b29b      	uxth	r3, r3
 8005906:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	78db      	ldrb	r3, [r3, #3]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d020      	beq.n	8005952 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005926:	81bb      	strh	r3, [r7, #12]
 8005928:	89bb      	ldrh	r3, [r7, #12]
 800592a:	f083 0320 	eor.w	r3, r3, #32
 800592e:	81bb      	strh	r3, [r7, #12]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	441a      	add	r2, r3
 800593a:	89bb      	ldrh	r3, [r7, #12]
 800593c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800594c:	b29b      	uxth	r3, r3
 800594e:	8013      	strh	r3, [r2, #0]
 8005950:	e2d5      	b.n	8005efe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005968:	81fb      	strh	r3, [r7, #14]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	441a      	add	r2, r3
 8005974:	89fb      	ldrh	r3, [r7, #14]
 8005976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800597a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800597e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005986:	b29b      	uxth	r3, r3
 8005988:	8013      	strh	r3, [r2, #0]
 800598a:	e2b8      	b.n	8005efe <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005996:	b29b      	uxth	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	4413      	add	r3, r2
 800599e:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	00da      	lsls	r2, r3, #3
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	4413      	add	r3, r2
 80059aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	88db      	ldrh	r3, [r3, #6]
 80059b4:	085b      	lsrs	r3, r3, #1
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059be:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d0:	4413      	add	r3, r2
 80059d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	00da      	lsls	r2, r3, #3
 80059da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059dc:	4413      	add	r3, r2
 80059de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <USB_ActivateEndpoint+0x28a>
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	801a      	strh	r2, [r3, #0]
 8005a10:	e039      	b.n	8005a86 <USB_ActivateEndpoint+0x2fe>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a18:	d818      	bhi.n	8005a4c <USB_ActivateEndpoint+0x2c4>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <USB_ActivateEndpoint+0x2ac>
 8005a2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a30:	3301      	adds	r3, #1
 8005a32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	029b      	lsls	r3, r3, #10
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	801a      	strh	r2, [r3, #0]
 8005a4a:	e01c      	b.n	8005a86 <USB_ActivateEndpoint+0x2fe>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <USB_ActivateEndpoint+0x2de>
 8005a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a62:	3b01      	subs	r3, #1
 8005a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	029b      	lsls	r3, r3, #10
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	4313      	orrs	r3, r2
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01b      	beq.n	8005ad6 <USB_ActivateEndpoint+0x34e>
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab4:	843b      	strh	r3, [r7, #32]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	441a      	add	r2, r3
 8005ac0:	8c3b      	ldrh	r3, [r7, #32]
 8005ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d124      	bne.n	8005b28 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af4:	83bb      	strh	r3, [r7, #28]
 8005af6:	8bbb      	ldrh	r3, [r7, #28]
 8005af8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005afc:	83bb      	strh	r3, [r7, #28]
 8005afe:	8bbb      	ldrh	r3, [r7, #28]
 8005b00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b04:	83bb      	strh	r3, [r7, #28]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	441a      	add	r2, r3
 8005b10:	8bbb      	ldrh	r3, [r7, #28]
 8005b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	8013      	strh	r3, [r2, #0]
 8005b26:	e1ea      	b.n	8005efe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b3e:	83fb      	strh	r3, [r7, #30]
 8005b40:	8bfb      	ldrh	r3, [r7, #30]
 8005b42:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b46:	83fb      	strh	r3, [r7, #30]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	8bfb      	ldrh	r3, [r7, #30]
 8005b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	8013      	strh	r3, [r2, #0]
 8005b68:	e1c9      	b.n	8005efe <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	78db      	ldrb	r3, [r3, #3]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d11e      	bne.n	8005bb0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b88:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ba2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	8013      	strh	r3, [r2, #0]
 8005bae:	e01d      	b.n	8005bec <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	441a      	add	r2, r3
 8005bd4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bfc:	4413      	add	r3, r2
 8005bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	00da      	lsls	r2, r3, #3
 8005c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	891b      	ldrh	r3, [r3, #8]
 8005c14:	085b      	lsrs	r3, r3, #1
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c1e:	801a      	strh	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c30:	4413      	add	r3, r2
 8005c32:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	00da      	lsls	r2, r3, #3
 8005c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	895b      	ldrh	r3, [r3, #10]
 8005c48:	085b      	lsrs	r3, r3, #1
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c52:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f040 8093 	bne.w	8005d84 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005c6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01b      	beq.n	8005cb2 <USB_ActivateEndpoint+0x52a>
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c90:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005cc0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01b      	beq.n	8005d02 <USB_ActivateEndpoint+0x57a>
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	441a      	add	r2, r3
 8005cec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d18:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d1a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d20:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d22:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d28:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	441a      	add	r2, r3
 8005d34:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d60:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	441a      	add	r2, r3
 8005d6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	8013      	strh	r3, [r2, #0]
 8005d82:	e0bc      	b.n	8005efe <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005d94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01d      	beq.n	8005ddc <USB_ActivateEndpoint+0x654>
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005dec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01d      	beq.n	8005e34 <USB_ActivateEndpoint+0x6ac>
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	78db      	ldrb	r3, [r3, #3]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d024      	beq.n	8005e86 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e52:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005e56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e5a:	f083 0320 	eor.w	r3, r3, #32
 8005e5e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	441a      	add	r2, r3
 8005e6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	8013      	strh	r3, [r2, #0]
 8005e84:	e01d      	b.n	8005ec2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e9c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	441a      	add	r2, r3
 8005ee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005eea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005efe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3774      	adds	r7, #116	@ 0x74
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop

08005f10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b08d      	sub	sp, #52	@ 0x34
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	7b1b      	ldrb	r3, [r3, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 808e 	bne.w	8006040 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d044      	beq.n	8005fb6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	81bb      	strh	r3, [r7, #12]
 8005f3a:	89bb      	ldrh	r3, [r7, #12]
 8005f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01b      	beq.n	8005f7c <USB_DeactivateEndpoint+0x6c>
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5a:	817b      	strh	r3, [r7, #10]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	897b      	ldrh	r3, [r7, #10]
 8005f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f92:	813b      	strh	r3, [r7, #8]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	893b      	ldrh	r3, [r7, #8]
 8005fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	8013      	strh	r3, [r2, #0]
 8005fb4:	e192      	b.n	80062dc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	827b      	strh	r3, [r7, #18]
 8005fc4:	8a7b      	ldrh	r3, [r7, #18]
 8005fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01b      	beq.n	8006006 <USB_DeactivateEndpoint+0xf6>
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe4:	823b      	strh	r3, [r7, #16]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	441a      	add	r2, r3
 8005ff0:	8a3b      	ldrh	r3, [r7, #16]
 8005ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ffa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601c:	81fb      	strh	r3, [r7, #14]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	89fb      	ldrh	r3, [r7, #14]
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]
 800603e:	e14d      	b.n	80062dc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	2b00      	cmp	r3, #0
 8006046:	f040 80a5 	bne.w	8006194 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	843b      	strh	r3, [r7, #32]
 8006058:	8c3b      	ldrh	r3, [r7, #32]
 800605a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01b      	beq.n	800609a <USB_DeactivateEndpoint+0x18a>
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006078:	83fb      	strh	r3, [r7, #30]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	441a      	add	r2, r3
 8006084:	8bfb      	ldrh	r3, [r7, #30]
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	83bb      	strh	r3, [r7, #28]
 80060a8:	8bbb      	ldrh	r3, [r7, #28]
 80060aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01b      	beq.n	80060ea <USB_DeactivateEndpoint+0x1da>
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c8:	837b      	strh	r3, [r7, #26]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	441a      	add	r2, r3
 80060d4:	8b7b      	ldrh	r3, [r7, #26]
 80060d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006100:	833b      	strh	r3, [r7, #24]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	441a      	add	r2, r3
 800610c:	8b3b      	ldrh	r3, [r7, #24]
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800611a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006138:	82fb      	strh	r3, [r7, #22]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	441a      	add	r2, r3
 8006144:	8afb      	ldrh	r3, [r7, #22]
 8006146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800614a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800614e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006156:	b29b      	uxth	r3, r3
 8006158:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800616c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006170:	82bb      	strh	r3, [r7, #20]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	441a      	add	r2, r3
 800617c:	8abb      	ldrh	r3, [r7, #20]
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800618a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]
 8006192:	e0a3      	b.n	80062dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80061a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80061a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01b      	beq.n	80061e4 <USB_DeactivateEndpoint+0x2d4>
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	441a      	add	r2, r3
 80061ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80061d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80061f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01b      	beq.n	8006234 <USB_DeactivateEndpoint+0x324>
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006212:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	441a      	add	r2, r3
 800621e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800622c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006230:	b29b      	uxth	r3, r3
 8006232:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800624a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	441a      	add	r2, r3
 8006256:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800625c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006268:	b29b      	uxth	r3, r3
 800626a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29b      	uxth	r3, r3
 800627a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800627e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006282:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	441a      	add	r2, r3
 800628e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800629c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	441a      	add	r2, r3
 80062c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d8:	b29b      	uxth	r3, r3
 80062da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3734      	adds	r7, #52	@ 0x34
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b0c2      	sub	sp, #264	@ 0x108
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062f8:	6018      	str	r0, [r3, #0]
 80062fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006302:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b01      	cmp	r3, #1
 8006312:	f040 86b7 	bne.w	8007084 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	429a      	cmp	r2, r3
 8006330:	d908      	bls.n	8006344 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006342:	e007      	b.n	8006354 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	7b1b      	ldrb	r3, [r3, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d13a      	bne.n	80063da <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6959      	ldr	r1, [r3, #20]
 8006370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	88da      	ldrh	r2, [r3, #6]
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006380:	b29b      	uxth	r3, r3
 8006382:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006386:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800638a:	6800      	ldr	r0, [r0, #0]
 800638c:	f001 fc8d 	bl	8007caa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4413      	add	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	00da      	lsls	r2, r3, #3
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	801a      	strh	r2, [r3, #0]
 80063d6:	f000 be1f 	b.w	8007018 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	78db      	ldrb	r3, [r3, #3]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	f040 8462 	bne.w	8006cb0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a1a      	ldr	r2, [r3, #32]
 80063f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	429a      	cmp	r2, r3
 8006406:	f240 83df 	bls.w	8006bc8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800640a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800642c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006430:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	441a      	add	r2, r3
 800644e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800645a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800645e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006462:	b29b      	uxth	r3, r3
 8006464:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	1ad2      	subs	r2, r2, r3
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006488:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 81c7 	beq.w	800683a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80064b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d177      	bne.n	80065b8 <USB_EPStartXfer+0x2ce>
 80064c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	4413      	add	r3, r2
 80064ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	00da      	lsls	r2, r3, #3
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	4413      	add	r3, r2
 80064fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800650e:	b29a      	uxth	r2, r3
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	801a      	strh	r2, [r3, #0]
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <USB_EPStartXfer+0x248>
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652a:	b29a      	uxth	r2, r3
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e067      	b.n	8006602 <USB_EPStartXfer+0x318>
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006536:	2b3e      	cmp	r3, #62	@ 0x3e
 8006538:	d81c      	bhi.n	8006574 <USB_EPStartXfer+0x28a>
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653e:	085b      	lsrs	r3, r3, #1
 8006540:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <USB_EPStartXfer+0x270>
 8006550:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006554:	3301      	adds	r3, #1
 8006556:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006564:	b29b      	uxth	r3, r3
 8006566:	029b      	lsls	r3, r3, #10
 8006568:	b29b      	uxth	r3, r3
 800656a:	4313      	orrs	r3, r2
 800656c:	b29a      	uxth	r2, r3
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	e046      	b.n	8006602 <USB_EPStartXfer+0x318>
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <USB_EPStartXfer+0x2aa>
 800658a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800658e:	3b01      	subs	r3, #1
 8006590:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29a      	uxth	r2, r3
 800659a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800659e:	b29b      	uxth	r3, r3
 80065a0:	029b      	lsls	r3, r3, #10
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	4313      	orrs	r3, r2
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	e024      	b.n	8006602 <USB_EPStartXfer+0x318>
 80065b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d11c      	bne.n	8006602 <USB_EPStartXfer+0x318>
 80065c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065dc:	4413      	add	r3, r2
 80065de:	633b      	str	r3, [r7, #48]	@ 0x30
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	00da      	lsls	r2, r3, #3
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	4413      	add	r3, r2
 80065f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006600:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	895b      	ldrh	r3, [r3, #10]
 800660e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6959      	ldr	r1, [r3, #20]
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006622:	b29b      	uxth	r3, r3
 8006624:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006628:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800662c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006630:	6800      	ldr	r0, [r0, #0]
 8006632:	f001 fb3a 	bl	8007caa <USB_WritePMA>
            ep->xfer_buff += len;
 8006636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	695a      	ldr	r2, [r3, #20]
 8006642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006646:	441a      	add	r2, r3
 8006648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6a1a      	ldr	r2, [r3, #32]
 8006660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	429a      	cmp	r2, r3
 800666e:	d90f      	bls.n	8006690 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6a1a      	ldr	r2, [r3, #32]
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006680:	1ad2      	subs	r2, r2, r3
 8006682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	621a      	str	r2, [r3, #32]
 800668e:	e00e      	b.n	80066ae <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80066a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d177      	bne.n	80067ae <USB_EPStartXfer+0x4c4>
 80066be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066d8:	b29b      	uxth	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	4413      	add	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	00da      	lsls	r2, r3, #3
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	4413      	add	r3, r2
 80066f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006704:	b29a      	uxth	r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <USB_EPStartXfer+0x43e>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29a      	uxth	r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	801a      	strh	r2, [r3, #0]
 8006726:	e06d      	b.n	8006804 <USB_EPStartXfer+0x51a>
 8006728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672c:	2b3e      	cmp	r3, #62	@ 0x3e
 800672e:	d81c      	bhi.n	800676a <USB_EPStartXfer+0x480>
 8006730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d004      	beq.n	8006750 <USB_EPStartXfer+0x466>
 8006746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800674a:	3301      	adds	r3, #1
 800674c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29a      	uxth	r2, r3
 8006756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29b      	uxth	r3, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	b29a      	uxth	r2, r3
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	e04c      	b.n	8006804 <USB_EPStartXfer+0x51a>
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006778:	f003 031f 	and.w	r3, r3, #31
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <USB_EPStartXfer+0x4a0>
 8006780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006784:	3b01      	subs	r3, #1
 8006786:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29a      	uxth	r2, r3
 8006790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006794:	b29b      	uxth	r3, r3
 8006796:	029b      	lsls	r3, r3, #10
 8006798:	b29b      	uxth	r3, r3
 800679a:	4313      	orrs	r3, r2
 800679c:	b29b      	uxth	r3, r3
 800679e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	e02a      	b.n	8006804 <USB_EPStartXfer+0x51a>
 80067ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d122      	bne.n	8006804 <USB_EPStartXfer+0x51a>
 80067be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067d8:	b29b      	uxth	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	4413      	add	r3, r2
 80067e0:	623b      	str	r3, [r7, #32]
 80067e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	00da      	lsls	r2, r3, #3
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	4413      	add	r3, r2
 80067f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fe:	b29a      	uxth	r2, r3
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	891b      	ldrh	r3, [r3, #8]
 8006810:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6959      	ldr	r1, [r3, #20]
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006824:	b29b      	uxth	r3, r3
 8006826:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800682a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800682e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006832:	6800      	ldr	r0, [r0, #0]
 8006834:	f001 fa39 	bl	8007caa <USB_WritePMA>
 8006838:	e3ee      	b.n	8007018 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800683a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d177      	bne.n	800693a <USB_EPStartXfer+0x650>
 800684a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006864:	b29b      	uxth	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800686a:	4413      	add	r3, r2
 800686c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800686e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	00da      	lsls	r2, r3, #3
 800687c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800687e:	4413      	add	r3, r2
 8006880:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006884:	647b      	str	r3, [r7, #68]	@ 0x44
 8006886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006890:	b29a      	uxth	r2, r3
 8006892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <USB_EPStartXfer+0x5ca>
 800689e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	e06d      	b.n	8006990 <USB_EPStartXfer+0x6a6>
 80068b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80068ba:	d81c      	bhi.n	80068f6 <USB_EPStartXfer+0x60c>
 80068bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <USB_EPStartXfer+0x5f2>
 80068d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068d6:	3301      	adds	r3, #1
 80068d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	4313      	orrs	r3, r2
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e04c      	b.n	8006990 <USB_EPStartXfer+0x6a6>
 80068f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <USB_EPStartXfer+0x62c>
 800690c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006910:	3b01      	subs	r3, #1
 8006912:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29a      	uxth	r2, r3
 800691c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006920:	b29b      	uxth	r3, r3
 8006922:	029b      	lsls	r3, r3, #10
 8006924:	b29b      	uxth	r3, r3
 8006926:	4313      	orrs	r3, r2
 8006928:	b29b      	uxth	r3, r3
 800692a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006932:	b29a      	uxth	r2, r3
 8006934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	e02a      	b.n	8006990 <USB_EPStartXfer+0x6a6>
 800693a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d122      	bne.n	8006990 <USB_EPStartXfer+0x6a6>
 800694a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	653b      	str	r3, [r7, #80]	@ 0x50
 8006956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006964:	b29b      	uxth	r3, r3
 8006966:	461a      	mov	r2, r3
 8006968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800696a:	4413      	add	r3, r2
 800696c:	653b      	str	r3, [r7, #80]	@ 0x50
 800696e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	00da      	lsls	r2, r3, #3
 800697c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800697e:	4413      	add	r3, r2
 8006980:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	b29a      	uxth	r2, r3
 800698c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800698e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	891b      	ldrh	r3, [r3, #8]
 800699c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6959      	ldr	r1, [r3, #20]
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069be:	6800      	ldr	r0, [r0, #0]
 80069c0:	f001 f973 	bl	8007caa <USB_WritePMA>
            ep->xfer_buff += len;
 80069c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695a      	ldr	r2, [r3, #20]
 80069d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d4:	441a      	add	r2, r3
 80069d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d90f      	bls.n	8006a1e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80069fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6a1a      	ldr	r2, [r3, #32]
 8006a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0e:	1ad2      	subs	r2, r2, r3
 8006a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	621a      	str	r2, [r3, #32]
 8006a1c:	e00e      	b.n	8006a3c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d177      	bne.n	8006b48 <USB_EPStartXfer+0x85e>
 8006a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	4413      	add	r3, r2
 8006a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	00da      	lsls	r2, r3, #3
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <USB_EPStartXfer+0x7d8>
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	e067      	b.n	8006b92 <USB_EPStartXfer+0x8a8>
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ac8:	d81c      	bhi.n	8006b04 <USB_EPStartXfer+0x81a>
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ace:	085b      	lsrs	r3, r3, #1
 8006ad0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <USB_EPStartXfer+0x800>
 8006ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	029b      	lsls	r3, r3, #10
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	4313      	orrs	r3, r2
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e046      	b.n	8006b92 <USB_EPStartXfer+0x8a8>
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <USB_EPStartXfer+0x83a>
 8006b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	029b      	lsls	r3, r3, #10
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	4313      	orrs	r3, r2
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	e024      	b.n	8006b92 <USB_EPStartXfer+0x8a8>
 8006b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d11c      	bne.n	8006b92 <USB_EPStartXfer+0x8a8>
 8006b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b6c:	4413      	add	r3, r2
 8006b6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	00da      	lsls	r2, r3, #3
 8006b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b80:	4413      	add	r3, r2
 8006b82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	895b      	ldrh	r3, [r3, #10]
 8006b9e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6959      	ldr	r1, [r3, #20]
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006bb8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006bbc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006bc0:	6800      	ldr	r0, [r0, #0]
 8006bc2:	f001 f872 	bl	8007caa <USB_WritePMA>
 8006bc6:	e227      	b.n	8007018 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	441a      	add	r2, r3
 8006c1c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006c20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	461a      	mov	r2, r3
 8006c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c54:	4413      	add	r3, r2
 8006c56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	00da      	lsls	r2, r3, #3
 8006c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c68:	4413      	add	r3, r2
 8006c6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	891b      	ldrh	r3, [r3, #8]
 8006c86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6959      	ldr	r1, [r3, #20]
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ca0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ca4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ca8:	6800      	ldr	r0, [r0, #0]
 8006caa:	f000 fffe 	bl	8007caa <USB_WritePMA>
 8006cae:	e1b3      	b.n	8007018 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6a1a      	ldr	r2, [r3, #32]
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc0:	1ad2      	subs	r2, r2, r3
 8006cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80c6 	beq.w	8006e82 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d177      	bne.n	8006e02 <USB_EPStartXfer+0xb18>
 8006d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	461a      	mov	r2, r3
 8006d30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d32:	4413      	add	r3, r2
 8006d34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	00da      	lsls	r2, r3, #3
 8006d44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d46:	4413      	add	r3, r2
 8006d48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <USB_EPStartXfer+0xa92>
 8006d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e067      	b.n	8006e4c <USB_EPStartXfer+0xb62>
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d80:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d82:	d81c      	bhi.n	8006dbe <USB_EPStartXfer+0xad4>
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	085b      	lsrs	r3, r3, #1
 8006d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d004      	beq.n	8006da4 <USB_EPStartXfer+0xaba>
 8006d9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d9e:	3301      	adds	r3, #1
 8006da0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006da4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	029b      	lsls	r3, r3, #10
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	4313      	orrs	r3, r2
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	e046      	b.n	8006e4c <USB_EPStartXfer+0xb62>
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc2:	095b      	lsrs	r3, r3, #5
 8006dc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <USB_EPStartXfer+0xaf4>
 8006dd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006dde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	029b      	lsls	r3, r3, #10
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dfe:	801a      	strh	r2, [r3, #0]
 8006e00:	e024      	b.n	8006e4c <USB_EPStartXfer+0xb62>
 8006e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d11c      	bne.n	8006e4c <USB_EPStartXfer+0xb62>
 8006e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e26:	4413      	add	r3, r2
 8006e28:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	00da      	lsls	r2, r3, #3
 8006e38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	895b      	ldrh	r3, [r3, #10]
 8006e58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6959      	ldr	r1, [r3, #20]
 8006e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e72:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e76:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	f000 ff15 	bl	8007caa <USB_WritePMA>
 8006e80:	e0ca      	b.n	8007018 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d177      	bne.n	8006f82 <USB_EPStartXfer+0xc98>
 8006e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006eb2:	4413      	add	r3, r2
 8006eb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	00da      	lsls	r2, r3, #3
 8006ec4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006edc:	801a      	strh	r2, [r3, #0]
 8006ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <USB_EPStartXfer+0xc12>
 8006ee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ef8:	801a      	strh	r2, [r3, #0]
 8006efa:	e073      	b.n	8006fe4 <USB_EPStartXfer+0xcfa>
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f00:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f02:	d81c      	bhi.n	8006f3e <USB_EPStartXfer+0xc54>
 8006f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f08:	085b      	lsrs	r3, r3, #1
 8006f0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <USB_EPStartXfer+0xc3a>
 8006f1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f1e:	3301      	adds	r3, #1
 8006f20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	029b      	lsls	r3, r3, #10
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	4313      	orrs	r3, r2
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e052      	b.n	8006fe4 <USB_EPStartXfer+0xcfa>
 8006f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <USB_EPStartXfer+0xc74>
 8006f54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	029b      	lsls	r3, r3, #10
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	e030      	b.n	8006fe4 <USB_EPStartXfer+0xcfa>
 8006f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	785b      	ldrb	r3, [r3, #1]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d128      	bne.n	8006fe4 <USB_EPStartXfer+0xcfa>
 8006f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	00da      	lsls	r2, r3, #3
 8006fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fce:	4413      	add	r3, r2
 8006fd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fe2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	891b      	ldrh	r3, [r3, #8]
 8006ff0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6959      	ldr	r1, [r3, #20]
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	b29b      	uxth	r3, r3
 8007006:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800700a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800700e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007012:	6800      	ldr	r0, [r0, #0]
 8007014:	f000 fe49 	bl	8007caa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800703a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800703e:	817b      	strh	r3, [r7, #10]
 8007040:	897b      	ldrh	r3, [r7, #10]
 8007042:	f083 0310 	eor.w	r3, r3, #16
 8007046:	817b      	strh	r3, [r7, #10]
 8007048:	897b      	ldrh	r3, [r7, #10]
 800704a:	f083 0320 	eor.w	r3, r3, #32
 800704e:	817b      	strh	r3, [r7, #10]
 8007050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007054:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	897b      	ldrh	r3, [r7, #10]
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]
 8007080:	f000 bcdf 	b.w	8007a42 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	7b1b      	ldrb	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f040 80bc 	bne.w	800720e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d917      	bls.n	80070e2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80070b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80070c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d2:	1ad2      	subs	r2, r2, r3
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	619a      	str	r2, [r3, #24]
 80070e0:	e00e      	b.n	8007100 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80070e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80070f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2200      	movs	r2, #0
 80070fe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800710e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800711c:	b29b      	uxth	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007124:	4413      	add	r3, r2
 8007126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800712a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	00da      	lsls	r2, r3, #3
 8007138:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800713c:	4413      	add	r3, r2
 800713e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007142:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007152:	b29a      	uxth	r2, r3
 8007154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10d      	bne.n	800717e <USB_EPStartXfer+0xe94>
 8007162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	f000 bc28 	b.w	80079ce <USB_EPStartXfer+0x16e4>
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007182:	2b3e      	cmp	r3, #62	@ 0x3e
 8007184:	d81f      	bhi.n	80071c6 <USB_EPStartXfer+0xedc>
 8007186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718a:	085b      	lsrs	r3, r3, #1
 800718c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d004      	beq.n	80071a6 <USB_EPStartXfer+0xebc>
 800719c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071a0:	3301      	adds	r3, #1
 80071a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	029b      	lsls	r3, r3, #10
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	4313      	orrs	r3, r2
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	f000 bc04 	b.w	80079ce <USB_EPStartXfer+0x16e4>
 80071c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d4:	f003 031f 	and.w	r3, r3, #31
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <USB_EPStartXfer+0xefc>
 80071dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071e0:	3b01      	subs	r3, #1
 80071e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4313      	orrs	r3, r2
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007204:	b29a      	uxth	r2, r3
 8007206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	e3df      	b.n	80079ce <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800720e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	78db      	ldrb	r3, [r3, #3]
 800721a:	2b02      	cmp	r3, #2
 800721c:	f040 8218 	bne.w	8007650 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f040 809d 	bne.w	800736c <USB_EPStartXfer+0x1082>
 8007232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800724e:	b29b      	uxth	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007256:	4413      	add	r3, r2
 8007258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800725c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	00da      	lsls	r2, r3, #3
 800726a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800726e:	4413      	add	r3, r2
 8007270:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007284:	b29a      	uxth	r2, r3
 8007286:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800728a:	801a      	strh	r2, [r3, #0]
 800728c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10c      	bne.n	80072b6 <USB_EPStartXfer+0xfcc>
 800729c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	e08f      	b.n	80073d6 <USB_EPStartXfer+0x10ec>
 80072b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80072c4:	d826      	bhi.n	8007314 <USB_EPStartXfer+0x102a>
 80072c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <USB_EPStartXfer+0x100c>
 80072ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072f0:	3301      	adds	r3, #1
 80072f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007302:	b29b      	uxth	r3, r3
 8007304:	029b      	lsls	r3, r3, #10
 8007306:	b29b      	uxth	r3, r3
 8007308:	4313      	orrs	r3, r2
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e060      	b.n	80073d6 <USB_EPStartXfer+0x10ec>
 8007314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 031f 	and.w	r3, r3, #31
 8007336:	2b00      	cmp	r3, #0
 8007338:	d104      	bne.n	8007344 <USB_EPStartXfer+0x105a>
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733e:	3b01      	subs	r3, #1
 8007340:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29a      	uxth	r2, r3
 800734c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007350:	b29b      	uxth	r3, r3
 8007352:	029b      	lsls	r3, r3, #10
 8007354:	b29b      	uxth	r3, r3
 8007356:	4313      	orrs	r3, r2
 8007358:	b29b      	uxth	r3, r3
 800735a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800735e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007362:	b29a      	uxth	r2, r3
 8007364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	e034      	b.n	80073d6 <USB_EPStartXfer+0x10ec>
 800736c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d12c      	bne.n	80073d6 <USB_EPStartXfer+0x10ec>
 800737c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007380:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800738a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007398:	b29b      	uxth	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073a0:	4413      	add	r3, r2
 80073a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	00da      	lsls	r2, r3, #3
 80073b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073b8:	4413      	add	r3, r2
 80073ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f040 809d 	bne.w	8007530 <USB_EPStartXfer+0x1246>
 80073f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007412:	b29b      	uxth	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800741a:	4413      	add	r3, r2
 800741c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	00da      	lsls	r2, r3, #3
 800742e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007432:	4413      	add	r3, r2
 8007434:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800743c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007448:	b29a      	uxth	r2, r3
 800744a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800744e:	801a      	strh	r2, [r3, #0]
 8007450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10c      	bne.n	800747a <USB_EPStartXfer+0x1190>
 8007460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007470:	b29a      	uxth	r2, r3
 8007472:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007476:	801a      	strh	r2, [r3, #0]
 8007478:	e088      	b.n	800758c <USB_EPStartXfer+0x12a2>
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b3e      	cmp	r3, #62	@ 0x3e
 8007488:	d826      	bhi.n	80074d8 <USB_EPStartXfer+0x11ee>
 800748a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800749c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d004      	beq.n	80074ba <USB_EPStartXfer+0x11d0>
 80074b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b4:	3301      	adds	r3, #1
 80074b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	029b      	lsls	r3, r3, #10
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	4313      	orrs	r3, r2
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074d4:	801a      	strh	r2, [r3, #0]
 80074d6:	e059      	b.n	800758c <USB_EPStartXfer+0x12a2>
 80074d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	095b      	lsrs	r3, r3, #5
 80074e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 031f 	and.w	r3, r3, #31
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <USB_EPStartXfer+0x121e>
 80074fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007502:	3b01      	subs	r3, #1
 8007504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29a      	uxth	r2, r3
 8007510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007514:	b29b      	uxth	r3, r3
 8007516:	029b      	lsls	r3, r3, #10
 8007518:	b29b      	uxth	r3, r3
 800751a:	4313      	orrs	r3, r2
 800751c:	b29b      	uxth	r3, r3
 800751e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	e02d      	b.n	800758c <USB_EPStartXfer+0x12a2>
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d125      	bne.n	800758c <USB_EPStartXfer+0x12a2>
 8007540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800754e:	b29b      	uxth	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007556:	4413      	add	r3, r2
 8007558:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800755c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	00da      	lsls	r2, r3, #3
 800756a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800756e:	4413      	add	r3, r2
 8007570:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007574:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	b29a      	uxth	r2, r3
 8007586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800758a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800758c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8218 	beq.w	80079ce <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <USB_EPStartXfer+0x12ec>
 80075ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10d      	bne.n	80075f2 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 81f5 	bne.w	80079ce <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 81ee 	bne.w	80079ce <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80075f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007618:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800761c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007620:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	441a      	add	r2, r3
 8007636:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800763a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800763e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007646:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800764a:	b29b      	uxth	r3, r3
 800764c:	8013      	strh	r3, [r2, #0]
 800764e:	e1be      	b.n	80079ce <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	78db      	ldrb	r3, [r3, #3]
 800765c:	2b01      	cmp	r3, #1
 800765e:	f040 81b4 	bne.w	80079ca <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	429a      	cmp	r2, r3
 800767c:	d917      	bls.n	80076ae <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800767e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800768e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	619a      	str	r2, [r3, #24]
 80076ac:	e00e      	b.n	80076cc <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80076be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2200      	movs	r2, #0
 80076ca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80076cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	785b      	ldrb	r3, [r3, #1]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f040 8085 	bne.w	80077e8 <USB_EPStartXfer+0x14fe>
 80076de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	461a      	mov	r2, r3
 80076fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007702:	4413      	add	r3, r2
 8007704:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	00da      	lsls	r2, r3, #3
 8007716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800771a:	4413      	add	r3, r2
 800771c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007720:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007724:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	b29b      	uxth	r3, r3
 800772c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007730:	b29a      	uxth	r2, r3
 8007732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007736:	801a      	strh	r2, [r3, #0]
 8007738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10c      	bne.n	800775a <USB_EPStartXfer+0x1470>
 8007740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007750:	b29a      	uxth	r2, r3
 8007752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007756:	801a      	strh	r2, [r3, #0]
 8007758:	e077      	b.n	800784a <USB_EPStartXfer+0x1560>
 800775a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007760:	d81e      	bhi.n	80077a0 <USB_EPStartXfer+0x14b6>
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007766:	085b      	lsrs	r3, r3, #1
 8007768:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800776c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <USB_EPStartXfer+0x1498>
 8007778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800777c:	3301      	adds	r3, #1
 800777e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29a      	uxth	r2, r3
 800778a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800778e:	b29b      	uxth	r3, r3
 8007790:	029b      	lsls	r3, r3, #10
 8007792:	b29b      	uxth	r3, r3
 8007794:	4313      	orrs	r3, r2
 8007796:	b29a      	uxth	r2, r3
 8007798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800779c:	801a      	strh	r2, [r3, #0]
 800779e:	e054      	b.n	800784a <USB_EPStartXfer+0x1560>
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a4:	095b      	lsrs	r3, r3, #5
 80077a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ae:	f003 031f 	and.w	r3, r3, #31
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d104      	bne.n	80077c0 <USB_EPStartXfer+0x14d6>
 80077b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ba:	3b01      	subs	r3, #1
 80077bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	029b      	lsls	r3, r3, #10
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077de:	b29a      	uxth	r2, r3
 80077e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	e030      	b.n	800784a <USB_EPStartXfer+0x1560>
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d128      	bne.n	800784a <USB_EPStartXfer+0x1560>
 80077f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007814:	b29b      	uxth	r3, r3
 8007816:	461a      	mov	r2, r3
 8007818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800781c:	4413      	add	r3, r2
 800781e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	00da      	lsls	r2, r3, #3
 8007830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007834:	4413      	add	r3, r2
 8007836:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800783a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800783e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007842:	b29a      	uxth	r2, r3
 8007844:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007848:	801a      	strh	r2, [r3, #0]
 800784a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b00      	cmp	r3, #0
 8007866:	f040 8085 	bne.w	8007974 <USB_EPStartXfer+0x168a>
 800786a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007886:	b29b      	uxth	r3, r3
 8007888:	461a      	mov	r2, r3
 800788a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800788e:	4413      	add	r3, r2
 8007890:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	00da      	lsls	r2, r3, #3
 80078a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078a6:	4413      	add	r3, r2
 80078a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078bc:	b29a      	uxth	r2, r3
 80078be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078c2:	801a      	strh	r2, [r3, #0]
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10c      	bne.n	80078e6 <USB_EPStartXfer+0x15fc>
 80078cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e073      	b.n	80079ce <USB_EPStartXfer+0x16e4>
 80078e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80078ec:	d81e      	bhi.n	800792c <USB_EPStartXfer+0x1642>
 80078ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f2:	085b      	lsrs	r3, r3, #1
 80078f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <USB_EPStartXfer+0x1624>
 8007904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007908:	3301      	adds	r3, #1
 800790a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800790e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	b29a      	uxth	r2, r3
 8007916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800791a:	b29b      	uxth	r3, r3
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	b29b      	uxth	r3, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	b29a      	uxth	r2, r3
 8007924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007928:	801a      	strh	r2, [r3, #0]
 800792a:	e050      	b.n	80079ce <USB_EPStartXfer+0x16e4>
 800792c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793a:	f003 031f 	and.w	r3, r3, #31
 800793e:	2b00      	cmp	r3, #0
 8007940:	d104      	bne.n	800794c <USB_EPStartXfer+0x1662>
 8007942:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007946:	3b01      	subs	r3, #1
 8007948:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800794c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29a      	uxth	r2, r3
 8007954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007958:	b29b      	uxth	r3, r3
 800795a:	029b      	lsls	r3, r3, #10
 800795c:	b29b      	uxth	r3, r3
 800795e:	4313      	orrs	r3, r2
 8007960:	b29b      	uxth	r3, r3
 8007962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796a:	b29a      	uxth	r2, r3
 800796c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	e02c      	b.n	80079ce <USB_EPStartXfer+0x16e4>
 8007974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d124      	bne.n	80079ce <USB_EPStartXfer+0x16e4>
 8007984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007992:	b29b      	uxth	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800799a:	4413      	add	r3, r2
 800799c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	00da      	lsls	r2, r3, #3
 80079ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079b2:	4413      	add	r3, r2
 80079b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	e001      	b.n	80079ce <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e03a      	b.n	8007a44 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80079f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	441a      	add	r2, r3
 8007a2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b085      	sub	sp, #20
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d020      	beq.n	8007aa2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a76:	81bb      	strh	r3, [r7, #12]
 8007a78:	89bb      	ldrh	r3, [r7, #12]
 8007a7a:	f083 0310 	eor.w	r3, r3, #16
 8007a7e:	81bb      	strh	r3, [r7, #12]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	441a      	add	r2, r3
 8007a8a:	89bb      	ldrh	r3, [r7, #12]
 8007a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	8013      	strh	r3, [r2, #0]
 8007aa0:	e01f      	b.n	8007ae2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab8:	81fb      	strh	r3, [r7, #14]
 8007aba:	89fb      	ldrh	r3, [r7, #14]
 8007abc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ac0:	81fb      	strh	r3, [r7, #14]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	441a      	add	r2, r3
 8007acc:	89fb      	ldrh	r3, [r7, #14]
 8007ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	7b1b      	ldrb	r3, [r3, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f040 809d 	bne.w	8007c3e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d04c      	beq.n	8007ba6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	823b      	strh	r3, [r7, #16]
 8007b1a:	8a3b      	ldrh	r3, [r7, #16]
 8007b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01b      	beq.n	8007b5c <USB_EPClearStall+0x6c>
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b3a:	81fb      	strh	r3, [r7, #14]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	441a      	add	r2, r3
 8007b46:	89fb      	ldrh	r3, [r7, #14]
 8007b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	78db      	ldrb	r3, [r3, #3]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d06c      	beq.n	8007c3e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b7a:	81bb      	strh	r3, [r7, #12]
 8007b7c:	89bb      	ldrh	r3, [r7, #12]
 8007b7e:	f083 0320 	eor.w	r3, r3, #32
 8007b82:	81bb      	strh	r3, [r7, #12]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	441a      	add	r2, r3
 8007b8e:	89bb      	ldrh	r3, [r7, #12]
 8007b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	8013      	strh	r3, [r2, #0]
 8007ba4:	e04b      	b.n	8007c3e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	82fb      	strh	r3, [r7, #22]
 8007bb4:	8afb      	ldrh	r3, [r7, #22]
 8007bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d01b      	beq.n	8007bf6 <USB_EPClearStall+0x106>
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd4:	82bb      	strh	r3, [r7, #20]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	441a      	add	r2, r3
 8007be0:	8abb      	ldrh	r3, [r7, #20]
 8007be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c0c:	827b      	strh	r3, [r7, #18]
 8007c0e:	8a7b      	ldrh	r3, [r7, #18]
 8007c10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c14:	827b      	strh	r3, [r7, #18]
 8007c16:	8a7b      	ldrh	r3, [r7, #18]
 8007c18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c1c:	827b      	strh	r3, [r7, #18]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	441a      	add	r2, r3
 8007c28:	8a7b      	ldrh	r3, [r7, #18]
 8007c2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	371c      	adds	r7, #28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2280      	movs	r2, #128	@ 0x80
 8007c62:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b08b      	sub	sp, #44	@ 0x2c
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	460b      	mov	r3, r1
 8007cba:	80fb      	strh	r3, [r7, #6]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cc0:	88bb      	ldrh	r3, [r7, #4]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cd0:	88fa      	ldrh	r2, [r7, #6]
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cda:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ce0:	e01b      	b.n	8007d1a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	3301      	adds	r3, #1
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	b21a      	sxth	r2, r3
 8007cf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	b21b      	sxth	r3, r3
 8007cfa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	8a7a      	ldrh	r2, [r7, #18]
 8007d00:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	3302      	adds	r3, #2
 8007d06:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	3301      	adds	r3, #1
 8007d12:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d16:	3b01      	subs	r3, #1
 8007d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e0      	bne.n	8007ce2 <USB_WritePMA+0x38>
  }
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	372c      	adds	r7, #44	@ 0x2c
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b08b      	sub	sp, #44	@ 0x2c
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	4611      	mov	r1, r2
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	80fb      	strh	r3, [r7, #6]
 8007d40:	4613      	mov	r3, r2
 8007d42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007d44:	88bb      	ldrh	r3, [r7, #4]
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d54:	88fa      	ldrh	r2, [r7, #6]
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d5e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d64:	e018      	b.n	8007d98 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	3302      	adds	r3, #2
 8007d72:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	3b01      	subs	r3, #1
 8007d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e3      	bne.n	8007d66 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007d9e:	88bb      	ldrh	r3, [r7, #4]
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	701a      	strb	r2, [r3, #0]
  }
}
 8007dba:	bf00      	nop
 8007dbc:	372c      	adds	r7, #44	@ 0x2c
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]

  USBD_LL_OpenEP(pdev,
 8007dd8:	2340      	movs	r3, #64	@ 0x40
 8007dda:	2202      	movs	r2, #2
 8007ddc:	2181      	movs	r1, #129	@ 0x81
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 fc55 	bl	800968e <USBD_LL_OpenEP>
                 MIDI_EPIN_ADDR,
                 USBD_EP_TYPE_BULK,
                 MIDI_EPIN_SIZE);

  USBD_LL_OpenEP(pdev,
 8007de4:	2340      	movs	r3, #64	@ 0x40
 8007de6:	2202      	movs	r2, #2
 8007de8:	2101      	movs	r1, #1
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 fc4f 	bl	800968e <USBD_LL_OpenEP>
               MIDI_EPOUT_ADDR,
               USBD_EP_TYPE_BULK,
               MIDI_EPOUT_SIZE);

  USBD_LL_PrepareReceive(pdev,
 8007df0:	2340      	movs	r3, #64	@ 0x40
 8007df2:	4a0f      	ldr	r2, [pc, #60]	@ (8007e30 <USBD_MIDI_Init+0x68>)
 8007df4:	2101      	movs	r1, #1
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 fd3a 	bl	8009870 <USBD_LL_PrepareReceive>
               MIDI_EPOUT_ADDR,
               usb_rx_buffer,
               MIDI_EPOUT_SIZE);

  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 8007dfc:	2010      	movs	r0, #16
 8007dfe:	f001 fd5b 	bl	80098b8 <USBD_static_malloc>
 8007e02:	4602      	mov	r2, r0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if(pdev->pClassData == NULL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <USBD_MIDI_Init+0x52>
  {
    ret = 1;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	e004      	b.n	8007e24 <USBD_MIDI_Init+0x5c>
  }
  else
  {
    ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e20:	2200      	movs	r2, #0
 8007e22:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	200001d4 	.word	0x200001d4

08007e34 <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  /* Close MIDI EPs */
  USBD_LL_CloseEP(pdev, MIDI_EPIN_SIZE);
 8007e40:	2140      	movs	r1, #64	@ 0x40
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f001 fc49 	bl	80096da <USBD_LL_CloseEP>

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d009      	beq.n	8007e66 <USBD_MIDI_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 fd3b 	bl	80098d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]
  USBD_MIDI_HandleTypeDef     *hmidi = pdev->pClassData;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e88:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d044      	beq.n	8007f20 <USBD_MIDI_Setup+0xb0>
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d171      	bne.n	8007f7e <USBD_MIDI_Setup+0x10e>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	785b      	ldrb	r3, [r3, #1]
 8007e9e:	3b02      	subs	r3, #2
 8007ea0:	2b09      	cmp	r3, #9
 8007ea2:	d836      	bhi.n	8007f12 <USBD_MIDI_Setup+0xa2>
 8007ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8007eac <USBD_MIDI_Setup+0x3c>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007f03 	.word	0x08007f03
 8007eb0:	08007ee3 	.word	0x08007ee3
 8007eb4:	08007f13 	.word	0x08007f13
 8007eb8:	08007f13 	.word	0x08007f13
 8007ebc:	08007f13 	.word	0x08007f13
 8007ec0:	08007f13 	.word	0x08007f13
 8007ec4:	08007f13 	.word	0x08007f13
 8007ec8:	08007f13 	.word	0x08007f13
 8007ecc:	08007ef1 	.word	0x08007ef1
 8007ed0:	08007ed5 	.word	0x08007ed5
    {
      case MIDI_REQ_SET_PROTOCOL:
        hmidi->Protocol = (uint8_t)(req->wValue);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	885b      	ldrh	r3, [r3, #2]
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	601a      	str	r2, [r3, #0]
        break;
 8007ee0:	e01d      	b.n	8007f1e <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_PROTOCOL:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->Protocol,
 8007ee2:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 f907 	bl	80090fc <USBD_CtlSendData>
                          1);
        break;
 8007eee:	e016      	b.n	8007f1e <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_SET_IDLE:
        hmidi->IdleState = (uint8_t)(req->wValue >> 8);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	885b      	ldrh	r3, [r3, #2]
 8007ef4:	0a1b      	lsrs	r3, r3, #8
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	605a      	str	r2, [r3, #4]
        break;
 8007f00:	e00d      	b.n	8007f1e <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_IDLE:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->IdleState,
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	3304      	adds	r3, #4
        USBD_CtlSendData (pdev,
 8007f06:	2201      	movs	r2, #1
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 f8f6 	bl	80090fc <USBD_CtlSendData>
                          1);
        break;
 8007f10:	e005      	b.n	8007f1e <USBD_MIDI_Setup+0xae>

      default:
        USBD_CtlError (pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 f886 	bl	8009026 <USBD_CtlError>
        return USBD_FAIL;
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e030      	b.n	8007f80 <USBD_MIDI_Setup+0x110>
    }
    break;
 8007f1e:	e02e      	b.n	8007f7e <USBD_MIDI_Setup+0x10e>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	2b0b      	cmp	r3, #11
 8007f26:	d023      	beq.n	8007f70 <USBD_MIDI_Setup+0x100>
 8007f28:	2b0b      	cmp	r3, #11
 8007f2a:	dc28      	bgt.n	8007f7e <USBD_MIDI_Setup+0x10e>
 8007f2c:	2b06      	cmp	r3, #6
 8007f2e:	d002      	beq.n	8007f36 <USBD_MIDI_Setup+0xc6>
 8007f30:	2b0a      	cmp	r3, #10
 8007f32:	d015      	beq.n	8007f60 <USBD_MIDI_Setup+0xf0>
 8007f34:	e023      	b.n	8007f7e <USBD_MIDI_Setup+0x10e>
    {
      case USB_REQ_GET_DESCRIPTOR:
        if( req->wValue >> 8 == MIDI_DESCRIPTOR_TYPE)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	885b      	ldrh	r3, [r3, #2]
 8007f3a:	0a1b      	lsrs	r3, r3, #8
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b21      	cmp	r3, #33	@ 0x21
 8007f40:	d107      	bne.n	8007f52 <USBD_MIDI_Setup+0xe2>
        {
          pbuf = USBD_MIDI_CfgDesc + USB_MIDI_CLASS_DESC_SHIFT;
 8007f42:	4b11      	ldr	r3, [pc, #68]	@ (8007f88 <USBD_MIDI_Setup+0x118>)
 8007f44:	613b      	str	r3, [r7, #16]
          len = MIN(USB_MIDI_DESC_SIZE , req->wLength);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	88db      	ldrh	r3, [r3, #6]
 8007f4a:	2b07      	cmp	r3, #7
 8007f4c:	bf28      	it	cs
 8007f4e:	2307      	movcs	r3, #7
 8007f50:	82fb      	strh	r3, [r7, #22]
        }

        USBD_CtlSendData (pdev, pbuf, len);
 8007f52:	8afb      	ldrh	r3, [r7, #22]
 8007f54:	461a      	mov	r2, r3
 8007f56:	6939      	ldr	r1, [r7, #16]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 f8cf 	bl	80090fc <USBD_CtlSendData>
        break;
 8007f5e:	e00e      	b.n	8007f7e <USBD_MIDI_Setup+0x10e>

      case USB_REQ_GET_INTERFACE :
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->AltSetting,
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3308      	adds	r3, #8
        USBD_CtlSendData (pdev,
 8007f64:	2201      	movs	r2, #1
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 f8c7 	bl	80090fc <USBD_CtlSendData>
                          1);
        break;
 8007f6e:	e006      	b.n	8007f7e <USBD_MIDI_Setup+0x10e>

      case USB_REQ_SET_INTERFACE :
        hmidi->AltSetting = (uint8_t)(req->wValue);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	885b      	ldrh	r3, [r3, #2]
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	461a      	mov	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	609a      	str	r2, [r3, #8]
        break;
 8007f7c:	bf00      	nop
    }
  }
  return USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	2000006e 	.word	0x2000006e

08007f8c <USBD_MIDI_GetState>:
  *         Get MIDI State
  * @param  pdev: device instance
  * @retval usb state  (MIDI_IDLE, MIDI_BUSY)
  */
uint8_t USBD_MIDI_GetState(USBD_HandleTypeDef  *pdev)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  return ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9a:	7b1b      	ldrb	r3, [r3, #12]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USBD_MIDI_SendPackets>:
  * @retval status
  */
uint8_t USBD_MIDI_SendPackets(USBD_HandleTypeDef  *pdev,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef *hmidi = pdev->pClassData;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fbc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d10c      	bne.n	8007fe2 <USBD_MIDI_SendPackets+0x3a>
  {
    if(hmidi->state == MIDI_IDLE)
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	7b1b      	ldrb	r3, [r3, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d108      	bne.n	8007fe2 <USBD_MIDI_SendPackets+0x3a>
    {
      hmidi->state = MIDI_BUSY;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev, MIDI_EPIN_ADDR, data, len);
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	2181      	movs	r1, #129	@ 0x81
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f001 fc24 	bl	800982a <USBD_LL_Transmit>
    }
  }
  return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2253      	movs	r2, #83	@ 0x53
 8007ff8:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8007ffa:	4b03      	ldr	r3, [pc, #12]	@ (8008008 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	2000005c 	.word	0x2000005c

0800800c <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800801e:	2200      	movs	r2, #0
 8008020:	731a      	strb	r2, [r3, #12]

  USBD_MIDI_OnPacketsSent();
 8008022:	f000 f805 	bl	8008030 <USBD_MIDI_OnPacketsSent>

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_MIDI_OnPacketsSent>:
/**
  * @brief  USBD_MIDI_OnPacketsSent
  *         on usb midi packets sent to the host callback
  */
__weak extern void USBD_MIDI_OnPacketsSent(void)
{
 8008030:	b480      	push	{r7}
 8008032:	af00      	add	r7, sp, #0
}
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
	...

08008040 <USBD_MIDI_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	70fb      	strb	r3, [r7, #3]
  uint8_t len;

  if (epnum != (MIDI_EPOUT_ADDR & 0x0F)) return USBD_FAIL;
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d001      	beq.n	8008056 <USBD_MIDI_DataOut+0x16>
 8008052:	2302      	movs	r3, #2
 8008054:	e015      	b.n	8008082 <USBD_MIDI_DataOut+0x42>

  len = (uint8_t)HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, epnum);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	4611      	mov	r1, r2
 8008060:	4618      	mov	r0, r3
 8008062:	f7fa f966 	bl	8002332 <HAL_PCD_EP_GetRxCount>
 8008066:	4603      	mov	r3, r0
 8008068:	73fb      	strb	r3, [r7, #15]

  USBD_MIDI_OnPacketsReceived(usb_rx_buffer, len);
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	4619      	mov	r1, r3
 800806e:	4807      	ldr	r0, [pc, #28]	@ (800808c <USBD_MIDI_DataOut+0x4c>)
 8008070:	f000 f80e 	bl	8008090 <USBD_MIDI_OnPacketsReceived>

  USBD_LL_PrepareReceive(pdev, MIDI_EPOUT_ADDR, usb_rx_buffer, MIDI_EPOUT_SIZE);
 8008074:	2340      	movs	r3, #64	@ 0x40
 8008076:	4a05      	ldr	r2, [pc, #20]	@ (800808c <USBD_MIDI_DataOut+0x4c>)
 8008078:	2101      	movs	r1, #1
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fbf8 	bl	8009870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	200001d4 	.word	0x200001d4

08008090 <USBD_MIDI_OnPacketsReceived>:
  *         on usb midi packets received from the host callback
  * @param  data: pointer to the data packet
  * @param  len: size of the data
  */
__weak extern void USBD_MIDI_OnPacketsReceived(uint8_t *data, uint8_t len)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  UNUSED(data);
  UNUSED(len);
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	220a      	movs	r2, #10
 80080b4:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 80080b6:	4b03      	ldr	r3, [pc, #12]	@ (80080c4 <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	200000b0 	.word	0x200000b0

080080c8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4613      	mov	r3, r2
 80080d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080dc:	2302      	movs	r3, #2
 80080de:	e01a      	b.n	8008116 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	79fa      	ldrb	r2, [r7, #7]
 800810c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f001 fa52 	bl	80095b8 <USBD_LL_Init>

  return USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d006      	beq.n	8008140 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
 800813e:	e001      	b.n	8008144 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008140:	2302      	movs	r3, #2
 8008142:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008144:	7bfb      	ldrb	r3, [r7, #15]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 fa7c 	bl	8009658 <USBD_LL_Start>

  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800818c:	2302      	movs	r3, #2
 800818e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00c      	beq.n	80081b4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	4611      	mov	r1, r2
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	4611      	mov	r1, r2
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3

  return USBD_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fedb 	bl	8008fb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800820a:	461a      	mov	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008218:	f003 031f 	and.w	r3, r3, #31
 800821c:	2b02      	cmp	r3, #2
 800821e:	d016      	beq.n	800824e <USBD_LL_SetupStage+0x6a>
 8008220:	2b02      	cmp	r3, #2
 8008222:	d81c      	bhi.n	800825e <USBD_LL_SetupStage+0x7a>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <USBD_LL_SetupStage+0x4a>
 8008228:	2b01      	cmp	r3, #1
 800822a:	d008      	beq.n	800823e <USBD_LL_SetupStage+0x5a>
 800822c:	e017      	b.n	800825e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f9ce 	bl	80085d8 <USBD_StdDevReq>
      break;
 800823c:	e01a      	b.n	8008274 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa30 	bl	80086ac <USBD_StdItfReq>
      break;
 800824c:	e012      	b.n	8008274 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa70 	bl	800873c <USBD_StdEPReq>
      break;
 800825c:	e00a      	b.n	8008274 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008264:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008268:	b2db      	uxtb	r3, r3
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 fa53 	bl	8009718 <USBD_LL_StallEP>
      break;
 8008272:	bf00      	nop
  }

  return USBD_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	460b      	mov	r3, r1
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800828c:	7afb      	ldrb	r3, [r7, #11]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d14b      	bne.n	800832a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008298:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d134      	bne.n	800830e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d919      	bls.n	80082e4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	1ad2      	subs	r2, r2, r3
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d203      	bcs.n	80082d2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	e002      	b.n	80082d8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 ff3b 	bl	8009158 <USBD_CtlContinueRx>
 80082e2:	e038      	b.n	8008356 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d105      	bne.n	8008306 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 ff38 	bl	800917c <USBD_CtlSendStatus>
 800830c:	e023      	b.n	8008356 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008314:	2b05      	cmp	r3, #5
 8008316:	d11e      	bne.n	8008356 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008320:	2100      	movs	r1, #0
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f001 f9f8 	bl	8009718 <USBD_LL_StallEP>
 8008328:	e015      	b.n	8008356 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00d      	beq.n	8008352 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800833c:	2b03      	cmp	r3, #3
 800833e:	d108      	bne.n	8008352 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	7afa      	ldrb	r2, [r7, #11]
 800834a:	4611      	mov	r1, r2
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	4798      	blx	r3
 8008350:	e001      	b.n	8008356 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008352:	2302      	movs	r3, #2
 8008354:	e000      	b.n	8008358 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	460b      	mov	r3, r1
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800836e:	7afb      	ldrb	r3, [r7, #11]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d17f      	bne.n	8008474 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3314      	adds	r3, #20
 8008378:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008380:	2b02      	cmp	r3, #2
 8008382:	d15c      	bne.n	800843e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	429a      	cmp	r2, r3
 800838e:	d915      	bls.n	80083bc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	1ad2      	subs	r2, r2, r3
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fec3 	bl	8009134 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ae:	2300      	movs	r3, #0
 80083b0:	2200      	movs	r2, #0
 80083b2:	2100      	movs	r1, #0
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f001 fa5b 	bl	8009870 <USBD_LL_PrepareReceive>
 80083ba:	e04e      	b.n	800845a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	6912      	ldr	r2, [r2, #16]
 80083c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80083c8:	fb01 f202 	mul.w	r2, r1, r2
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d11c      	bne.n	800840c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	689a      	ldr	r2, [r3, #8]
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083da:	429a      	cmp	r2, r3
 80083dc:	d316      	bcc.n	800840c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d20f      	bcs.n	800840c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fe9f 	bl	8009134 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083fe:	2300      	movs	r3, #0
 8008400:	2200      	movs	r2, #0
 8008402:	2100      	movs	r1, #0
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f001 fa33 	bl	8009870 <USBD_LL_PrepareReceive>
 800840a:	e026      	b.n	800845a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00a      	beq.n	800842e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800841e:	2b03      	cmp	r3, #3
 8008420:	d105      	bne.n	800842e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800842e:	2180      	movs	r1, #128	@ 0x80
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f001 f971 	bl	8009718 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 feb3 	bl	80091a2 <USBD_CtlReceiveStatus>
 800843c:	e00d      	b.n	800845a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008444:	2b04      	cmp	r3, #4
 8008446:	d004      	beq.n	8008452 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800844e:	2b00      	cmp	r3, #0
 8008450:	d103      	bne.n	800845a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008452:	2180      	movs	r1, #128	@ 0x80
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f001 f95f 	bl	8009718 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008460:	2b01      	cmp	r3, #1
 8008462:	d11d      	bne.n	80084a0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7ff fe80 	bl	800816a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008472:	e015      	b.n	80084a0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00d      	beq.n	800849c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008486:	2b03      	cmp	r3, #3
 8008488:	d108      	bne.n	800849c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	7afa      	ldrb	r2, [r7, #11]
 8008494:	4611      	mov	r1, r2
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	4798      	blx	r3
 800849a:	e001      	b.n	80084a0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800849c:	2302      	movs	r3, #2
 800849e:	e000      	b.n	80084a2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084b2:	2340      	movs	r3, #64	@ 0x40
 80084b4:	2200      	movs	r2, #0
 80084b6:	2100      	movs	r1, #0
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 f8e8 	bl	800968e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2240      	movs	r2, #64	@ 0x40
 80084ca:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084ce:	2340      	movs	r3, #64	@ 0x40
 80084d0:	2200      	movs	r2, #0
 80084d2:	2180      	movs	r1, #128	@ 0x80
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 f8da 	bl	800968e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2240      	movs	r2, #64	@ 0x40
 80084e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d009      	beq.n	8008522 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6852      	ldr	r2, [r2, #4]
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	4611      	mov	r1, r2
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
  }

  return USBD_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	78fa      	ldrb	r2, [r7, #3]
 800853c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2204      	movs	r2, #4
 8008564:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008584:	2b04      	cmp	r3, #4
 8008586:	d105      	bne.n	8008594 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d10b      	bne.n	80085cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085ee:	2b40      	cmp	r3, #64	@ 0x40
 80085f0:	d005      	beq.n	80085fe <USBD_StdDevReq+0x26>
 80085f2:	2b40      	cmp	r3, #64	@ 0x40
 80085f4:	d84f      	bhi.n	8008696 <USBD_StdDevReq+0xbe>
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d009      	beq.n	800860e <USBD_StdDevReq+0x36>
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d14b      	bne.n	8008696 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
      break;
 800860c:	e048      	b.n	80086a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	2b09      	cmp	r3, #9
 8008614:	d839      	bhi.n	800868a <USBD_StdDevReq+0xb2>
 8008616:	a201      	add	r2, pc, #4	@ (adr r2, 800861c <USBD_StdDevReq+0x44>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	0800866d 	.word	0x0800866d
 8008620:	08008681 	.word	0x08008681
 8008624:	0800868b 	.word	0x0800868b
 8008628:	08008677 	.word	0x08008677
 800862c:	0800868b 	.word	0x0800868b
 8008630:	0800864f 	.word	0x0800864f
 8008634:	08008645 	.word	0x08008645
 8008638:	0800868b 	.word	0x0800868b
 800863c:	08008663 	.word	0x08008663
 8008640:	08008659 	.word	0x08008659
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f9dc 	bl	8008a04 <USBD_GetDescriptor>
          break;
 800864c:	e022      	b.n	8008694 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fb3f 	bl	8008cd4 <USBD_SetAddress>
          break;
 8008656:	e01d      	b.n	8008694 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fb7e 	bl	8008d5c <USBD_SetConfig>
          break;
 8008660:	e018      	b.n	8008694 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fc07 	bl	8008e78 <USBD_GetConfig>
          break;
 800866a:	e013      	b.n	8008694 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fc37 	bl	8008ee2 <USBD_GetStatus>
          break;
 8008674:	e00e      	b.n	8008694 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fc65 	bl	8008f48 <USBD_SetFeature>
          break;
 800867e:	e009      	b.n	8008694 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fc74 	bl	8008f70 <USBD_ClrFeature>
          break;
 8008688:	e004      	b.n	8008694 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fcca 	bl	8009026 <USBD_CtlError>
          break;
 8008692:	bf00      	nop
      }
      break;
 8008694:	e004      	b.n	80086a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fcc4 	bl	8009026 <USBD_CtlError>
      break;
 800869e:	bf00      	nop
  }

  return ret;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop

080086ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086c2:	2b40      	cmp	r3, #64	@ 0x40
 80086c4:	d005      	beq.n	80086d2 <USBD_StdItfReq+0x26>
 80086c6:	2b40      	cmp	r3, #64	@ 0x40
 80086c8:	d82e      	bhi.n	8008728 <USBD_StdItfReq+0x7c>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <USBD_StdItfReq+0x26>
 80086ce:	2b20      	cmp	r3, #32
 80086d0:	d12a      	bne.n	8008728 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d8:	3b01      	subs	r3, #1
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d81d      	bhi.n	800871a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	889b      	ldrh	r3, [r3, #4]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d813      	bhi.n	8008710 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	4798      	blx	r3
 80086f6:	4603      	mov	r3, r0
 80086f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	88db      	ldrh	r3, [r3, #6]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d110      	bne.n	8008724 <USBD_StdItfReq+0x78>
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10d      	bne.n	8008724 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fd37 	bl	800917c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800870e:	e009      	b.n	8008724 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fc87 	bl	8009026 <USBD_CtlError>
          break;
 8008718:	e004      	b.n	8008724 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fc82 	bl	8009026 <USBD_CtlError>
          break;
 8008722:	e000      	b.n	8008726 <USBD_StdItfReq+0x7a>
          break;
 8008724:	bf00      	nop
      }
      break;
 8008726:	e004      	b.n	8008732 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fc7b 	bl	8009026 <USBD_CtlError>
      break;
 8008730:	bf00      	nop
  }

  return USBD_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	889b      	ldrh	r3, [r3, #4]
 800874e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008758:	2b40      	cmp	r3, #64	@ 0x40
 800875a:	d007      	beq.n	800876c <USBD_StdEPReq+0x30>
 800875c:	2b40      	cmp	r3, #64	@ 0x40
 800875e:	f200 8146 	bhi.w	80089ee <USBD_StdEPReq+0x2b2>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <USBD_StdEPReq+0x40>
 8008766:	2b20      	cmp	r3, #32
 8008768:	f040 8141 	bne.w	80089ee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
      break;
 800877a:	e13d      	b.n	80089f8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008784:	2b20      	cmp	r3, #32
 8008786:	d10a      	bne.n	800879e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	4798      	blx	r3
 8008796:	4603      	mov	r3, r0
 8008798:	73fb      	strb	r3, [r7, #15]

        return ret;
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	e12d      	b.n	80089fa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d007      	beq.n	80087b6 <USBD_StdEPReq+0x7a>
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	f300 811b 	bgt.w	80089e2 <USBD_StdEPReq+0x2a6>
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d072      	beq.n	8008896 <USBD_StdEPReq+0x15a>
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d03a      	beq.n	800882a <USBD_StdEPReq+0xee>
 80087b4:	e115      	b.n	80089e2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d002      	beq.n	80087c6 <USBD_StdEPReq+0x8a>
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d015      	beq.n	80087f0 <USBD_StdEPReq+0xb4>
 80087c4:	e02b      	b.n	800881e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00c      	beq.n	80087e6 <USBD_StdEPReq+0xaa>
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	2b80      	cmp	r3, #128	@ 0x80
 80087d0:	d009      	beq.n	80087e6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 ff9e 	bl	8009718 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80087dc:	2180      	movs	r1, #128	@ 0x80
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 ff9a 	bl	8009718 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087e4:	e020      	b.n	8008828 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fc1c 	bl	8009026 <USBD_CtlError>
              break;
 80087ee:	e01b      	b.n	8008828 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	885b      	ldrh	r3, [r3, #2]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10e      	bne.n	8008816 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <USBD_StdEPReq+0xda>
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	2b80      	cmp	r3, #128	@ 0x80
 8008802:	d008      	beq.n	8008816 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	88db      	ldrh	r3, [r3, #6]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 ff81 	bl	8009718 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fcb0 	bl	800917c <USBD_CtlSendStatus>

              break;
 800881c:	e004      	b.n	8008828 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fc00 	bl	8009026 <USBD_CtlError>
              break;
 8008826:	bf00      	nop
          }
          break;
 8008828:	e0e0      	b.n	80089ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008830:	2b02      	cmp	r3, #2
 8008832:	d002      	beq.n	800883a <USBD_StdEPReq+0xfe>
 8008834:	2b03      	cmp	r3, #3
 8008836:	d015      	beq.n	8008864 <USBD_StdEPReq+0x128>
 8008838:	e026      	b.n	8008888 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00c      	beq.n	800885a <USBD_StdEPReq+0x11e>
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	2b80      	cmp	r3, #128	@ 0x80
 8008844:	d009      	beq.n	800885a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 ff64 	bl	8009718 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008850:	2180      	movs	r1, #128	@ 0x80
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 ff60 	bl	8009718 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008858:	e01c      	b.n	8008894 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fbe2 	bl	8009026 <USBD_CtlError>
              break;
 8008862:	e017      	b.n	8008894 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	885b      	ldrh	r3, [r3, #2]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d112      	bne.n	8008892 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	4619      	mov	r1, r3
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 ff6b 	bl	8009756 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fc7b 	bl	800917c <USBD_CtlSendStatus>
              }
              break;
 8008886:	e004      	b.n	8008892 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fbcb 	bl	8009026 <USBD_CtlError>
              break;
 8008890:	e000      	b.n	8008894 <USBD_StdEPReq+0x158>
              break;
 8008892:	bf00      	nop
          }
          break;
 8008894:	e0aa      	b.n	80089ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800889c:	2b02      	cmp	r3, #2
 800889e:	d002      	beq.n	80088a6 <USBD_StdEPReq+0x16a>
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d032      	beq.n	800890a <USBD_StdEPReq+0x1ce>
 80088a4:	e097      	b.n	80089d6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <USBD_StdEPReq+0x180>
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	2b80      	cmp	r3, #128	@ 0x80
 80088b0:	d004      	beq.n	80088bc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fbb6 	bl	8009026 <USBD_CtlError>
                break;
 80088ba:	e091      	b.n	80089e0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	da0b      	bge.n	80088dc <USBD_StdEPReq+0x1a0>
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	3310      	adds	r3, #16
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	4413      	add	r3, r2
 80088d8:	3304      	adds	r3, #4
 80088da:	e00b      	b.n	80088f4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	4413      	add	r3, r2
 80088f2:	3304      	adds	r3, #4
 80088f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2202      	movs	r2, #2
 8008900:	4619      	mov	r1, r3
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fbfa 	bl	80090fc <USBD_CtlSendData>
              break;
 8008908:	e06a      	b.n	80089e0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800890a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800890e:	2b00      	cmp	r3, #0
 8008910:	da11      	bge.n	8008936 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	f003 020f 	and.w	r2, r3, #15
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	3318      	adds	r3, #24
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d117      	bne.n	800895c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fb79 	bl	8009026 <USBD_CtlError>
                  break;
 8008934:	e054      	b.n	80089e0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	f003 020f 	and.w	r2, r3, #15
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d104      	bne.n	800895c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fb66 	bl	8009026 <USBD_CtlError>
                  break;
 800895a:	e041      	b.n	80089e0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800895c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008960:	2b00      	cmp	r3, #0
 8008962:	da0b      	bge.n	800897c <USBD_StdEPReq+0x240>
 8008964:	7bbb      	ldrb	r3, [r7, #14]
 8008966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800896a:	4613      	mov	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	3310      	adds	r3, #16
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	4413      	add	r3, r2
 8008978:	3304      	adds	r3, #4
 800897a:	e00b      	b.n	8008994 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	3304      	adds	r3, #4
 8008994:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <USBD_StdEPReq+0x266>
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	2b80      	cmp	r3, #128	@ 0x80
 80089a0:	d103      	bne.n	80089aa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2200      	movs	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	e00e      	b.n	80089c8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fef0 	bl	8009794 <USBD_LL_IsStallEP>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2201      	movs	r2, #1
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	e002      	b.n	80089c8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2202      	movs	r2, #2
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fb94 	bl	80090fc <USBD_CtlSendData>
              break;
 80089d4:	e004      	b.n	80089e0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fb24 	bl	8009026 <USBD_CtlError>
              break;
 80089de:	bf00      	nop
          }
          break;
 80089e0:	e004      	b.n	80089ec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fb1e 	bl	8009026 <USBD_CtlError>
          break;
 80089ea:	bf00      	nop
      }
      break;
 80089ec:	e004      	b.n	80089f8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fb18 	bl	8009026 <USBD_CtlError>
      break;
 80089f6:	bf00      	nop
  }

  return ret;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	885b      	ldrh	r3, [r3, #2]
 8008a1e:	0a1b      	lsrs	r3, r3, #8
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b06      	cmp	r3, #6
 8008a26:	f200 8128 	bhi.w	8008c7a <USBD_GetDescriptor+0x276>
 8008a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <USBD_GetDescriptor+0x2c>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a4d 	.word	0x08008a4d
 8008a34:	08008a65 	.word	0x08008a65
 8008a38:	08008aa5 	.word	0x08008aa5
 8008a3c:	08008c7b 	.word	0x08008c7b
 8008a40:	08008c7b 	.word	0x08008c7b
 8008a44:	08008c1b 	.word	0x08008c1b
 8008a48:	08008c47 	.word	0x08008c47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	7c12      	ldrb	r2, [r2, #16]
 8008a58:	f107 0108 	add.w	r1, r7, #8
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4798      	blx	r3
 8008a60:	60f8      	str	r0, [r7, #12]
      break;
 8008a62:	e112      	b.n	8008c8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	7c1b      	ldrb	r3, [r3, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10d      	bne.n	8008a88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a74:	f107 0208 	add.w	r2, r7, #8
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
 8008a7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3301      	adds	r3, #1
 8008a82:	2202      	movs	r2, #2
 8008a84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a86:	e100      	b.n	8008c8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a90:	f107 0208 	add.w	r2, r7, #8
 8008a94:	4610      	mov	r0, r2
 8008a96:	4798      	blx	r3
 8008a98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	701a      	strb	r2, [r3, #0]
      break;
 8008aa2:	e0f2      	b.n	8008c8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	885b      	ldrh	r3, [r3, #2]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b05      	cmp	r3, #5
 8008aac:	f200 80ac 	bhi.w	8008c08 <USBD_GetDescriptor+0x204>
 8008ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab8 <USBD_GetDescriptor+0xb4>)
 8008ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	08008ad1 	.word	0x08008ad1
 8008abc:	08008b05 	.word	0x08008b05
 8008ac0:	08008b39 	.word	0x08008b39
 8008ac4:	08008b6d 	.word	0x08008b6d
 8008ac8:	08008ba1 	.word	0x08008ba1
 8008acc:	08008bd5 	.word	0x08008bd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00b      	beq.n	8008af4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	7c12      	ldrb	r2, [r2, #16]
 8008ae8:	f107 0108 	add.w	r1, r7, #8
 8008aec:	4610      	mov	r0, r2
 8008aee:	4798      	blx	r3
 8008af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008af2:	e091      	b.n	8008c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fa95 	bl	8009026 <USBD_CtlError>
            err++;
 8008afc:	7afb      	ldrb	r3, [r7, #11]
 8008afe:	3301      	adds	r3, #1
 8008b00:	72fb      	strb	r3, [r7, #11]
          break;
 8008b02:	e089      	b.n	8008c18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00b      	beq.n	8008b28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	7c12      	ldrb	r2, [r2, #16]
 8008b1c:	f107 0108 	add.w	r1, r7, #8
 8008b20:	4610      	mov	r0, r2
 8008b22:	4798      	blx	r3
 8008b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b26:	e077      	b.n	8008c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa7b 	bl	8009026 <USBD_CtlError>
            err++;
 8008b30:	7afb      	ldrb	r3, [r7, #11]
 8008b32:	3301      	adds	r3, #1
 8008b34:	72fb      	strb	r3, [r7, #11]
          break;
 8008b36:	e06f      	b.n	8008c18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00b      	beq.n	8008b5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	7c12      	ldrb	r2, [r2, #16]
 8008b50:	f107 0108 	add.w	r1, r7, #8
 8008b54:	4610      	mov	r0, r2
 8008b56:	4798      	blx	r3
 8008b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b5a:	e05d      	b.n	8008c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fa61 	bl	8009026 <USBD_CtlError>
            err++;
 8008b64:	7afb      	ldrb	r3, [r7, #11]
 8008b66:	3301      	adds	r3, #1
 8008b68:	72fb      	strb	r3, [r7, #11]
          break;
 8008b6a:	e055      	b.n	8008c18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	7c12      	ldrb	r2, [r2, #16]
 8008b84:	f107 0108 	add.w	r1, r7, #8
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4798      	blx	r3
 8008b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b8e:	e043      	b.n	8008c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fa47 	bl	8009026 <USBD_CtlError>
            err++;
 8008b98:	7afb      	ldrb	r3, [r7, #11]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b9e:	e03b      	b.n	8008c18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	7c12      	ldrb	r2, [r2, #16]
 8008bb8:	f107 0108 	add.w	r1, r7, #8
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bc2:	e029      	b.n	8008c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fa2d 	bl	8009026 <USBD_CtlError>
            err++;
 8008bcc:	7afb      	ldrb	r3, [r7, #11]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bd2:	e021      	b.n	8008c18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00b      	beq.n	8008bf8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	7c12      	ldrb	r2, [r2, #16]
 8008bec:	f107 0108 	add.w	r1, r7, #8
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4798      	blx	r3
 8008bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bf6:	e00f      	b.n	8008c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa13 	bl	8009026 <USBD_CtlError>
            err++;
 8008c00:	7afb      	ldrb	r3, [r7, #11]
 8008c02:	3301      	adds	r3, #1
 8008c04:	72fb      	strb	r3, [r7, #11]
          break;
 8008c06:	e007      	b.n	8008c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fa0b 	bl	8009026 <USBD_CtlError>
          err++;
 8008c10:	7afb      	ldrb	r3, [r7, #11]
 8008c12:	3301      	adds	r3, #1
 8008c14:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008c16:	e038      	b.n	8008c8a <USBD_GetDescriptor+0x286>
 8008c18:	e037      	b.n	8008c8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	7c1b      	ldrb	r3, [r3, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d109      	bne.n	8008c36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c2a:	f107 0208 	add.w	r2, r7, #8
 8008c2e:	4610      	mov	r0, r2
 8008c30:	4798      	blx	r3
 8008c32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c34:	e029      	b.n	8008c8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f9f4 	bl	8009026 <USBD_CtlError>
        err++;
 8008c3e:	7afb      	ldrb	r3, [r7, #11]
 8008c40:	3301      	adds	r3, #1
 8008c42:	72fb      	strb	r3, [r7, #11]
      break;
 8008c44:	e021      	b.n	8008c8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	7c1b      	ldrb	r3, [r3, #16]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10d      	bne.n	8008c6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c56:	f107 0208 	add.w	r2, r7, #8
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	4798      	blx	r3
 8008c5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3301      	adds	r3, #1
 8008c64:	2207      	movs	r2, #7
 8008c66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c68:	e00f      	b.n	8008c8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f9da 	bl	8009026 <USBD_CtlError>
        err++;
 8008c72:	7afb      	ldrb	r3, [r7, #11]
 8008c74:	3301      	adds	r3, #1
 8008c76:	72fb      	strb	r3, [r7, #11]
      break;
 8008c78:	e007      	b.n	8008c8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f9d2 	bl	8009026 <USBD_CtlError>
      err++;
 8008c82:	7afb      	ldrb	r3, [r7, #11]
 8008c84:	3301      	adds	r3, #1
 8008c86:	72fb      	strb	r3, [r7, #11]
      break;
 8008c88:	bf00      	nop
  }

  if (err != 0U)
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d11c      	bne.n	8008cca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008c90:	893b      	ldrh	r3, [r7, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d011      	beq.n	8008cba <USBD_GetDescriptor+0x2b6>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	88db      	ldrh	r3, [r3, #6]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00d      	beq.n	8008cba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	88da      	ldrh	r2, [r3, #6]
 8008ca2:	893b      	ldrh	r3, [r7, #8]
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	bf28      	it	cs
 8008ca8:	4613      	movcs	r3, r2
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cae:	893b      	ldrh	r3, [r7, #8]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	68f9      	ldr	r1, [r7, #12]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fa21 	bl	80090fc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	88db      	ldrh	r3, [r3, #6]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d104      	bne.n	8008ccc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fa5a 	bl	800917c <USBD_CtlSendStatus>
 8008cc8:	e000      	b.n	8008ccc <USBD_GetDescriptor+0x2c8>
    return;
 8008cca:	bf00      	nop
    }
  }
}
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop

08008cd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	889b      	ldrh	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d130      	bne.n	8008d48 <USBD_SetAddress+0x74>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	88db      	ldrh	r3, [r3, #6]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d12c      	bne.n	8008d48 <USBD_SetAddress+0x74>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	885b      	ldrh	r3, [r3, #2]
 8008cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008cf4:	d828      	bhi.n	8008d48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	885b      	ldrh	r3, [r3, #2]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d104      	bne.n	8008d16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f989 	bl	8009026 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d14:	e01d      	b.n	8008d52 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	7bfa      	ldrb	r2, [r7, #15]
 8008d1a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fd62 	bl	80097ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fa27 	bl	800917c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d004      	beq.n	8008d3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d3c:	e009      	b.n	8008d52 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d46:	e004      	b.n	8008d52 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f96b 	bl	8009026 <USBD_CtlError>
  }
}
 8008d50:	bf00      	nop
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	885b      	ldrh	r3, [r3, #2]
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	4b41      	ldr	r3, [pc, #260]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008d6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d70:	4b40      	ldr	r3, [pc, #256]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d904      	bls.n	8008d82 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f953 	bl	8009026 <USBD_CtlError>
 8008d80:	e075      	b.n	8008e6e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d002      	beq.n	8008d92 <USBD_SetConfig+0x36>
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d023      	beq.n	8008dd8 <USBD_SetConfig+0x7c>
 8008d90:	e062      	b.n	8008e58 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008d92:	4b38      	ldr	r3, [pc, #224]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01a      	beq.n	8008dd0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008d9a:	4b36      	ldr	r3, [pc, #216]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2203      	movs	r2, #3
 8008da8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008dac:	4b31      	ldr	r3, [pc, #196]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff f9e4 	bl	8008180 <USBD_SetClassConfig>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d104      	bne.n	8008dc8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f930 	bl	8009026 <USBD_CtlError>
            return;
 8008dc6:	e052      	b.n	8008e6e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f9d7 	bl	800917c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008dce:	e04e      	b.n	8008e6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f9d3 	bl	800917c <USBD_CtlSendStatus>
        break;
 8008dd6:	e04a      	b.n	8008e6e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008dd8:	4b26      	ldr	r3, [pc, #152]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d112      	bne.n	8008e06 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008de8:	4b22      	ldr	r3, [pc, #136]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008df2:	4b20      	ldr	r3, [pc, #128]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7ff f9e0 	bl	80081be <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f9bc 	bl	800917c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e04:	e033      	b.n	8008e6e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008e06:	4b1b      	ldr	r3, [pc, #108]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d01d      	beq.n	8008e50 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff f9ce 	bl	80081be <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008e22:	4b14      	ldr	r3, [pc, #80]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e2c:	4b11      	ldr	r3, [pc, #68]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff f9a4 	bl	8008180 <USBD_SetClassConfig>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d104      	bne.n	8008e48 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f8f0 	bl	8009026 <USBD_CtlError>
            return;
 8008e46:	e012      	b.n	8008e6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f997 	bl	800917c <USBD_CtlSendStatus>
        break;
 8008e4e:	e00e      	b.n	8008e6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f993 	bl	800917c <USBD_CtlSendStatus>
        break;
 8008e56:	e00a      	b.n	8008e6e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f8e3 	bl	8009026 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e60:	4b04      	ldr	r3, [pc, #16]	@ (8008e74 <USBD_SetConfig+0x118>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7ff f9a9 	bl	80081be <USBD_ClrClassConfig>
        break;
 8008e6c:	bf00      	nop
    }
  }
}
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20000214 	.word	0x20000214

08008e78 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	88db      	ldrh	r3, [r3, #6]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d004      	beq.n	8008e94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f8ca 	bl	8009026 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e92:	e022      	b.n	8008eda <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	dc02      	bgt.n	8008ea4 <USBD_GetConfig+0x2c>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	dc03      	bgt.n	8008eaa <USBD_GetConfig+0x32>
 8008ea2:	e015      	b.n	8008ed0 <USBD_GetConfig+0x58>
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d00b      	beq.n	8008ec0 <USBD_GetConfig+0x48>
 8008ea8:	e012      	b.n	8008ed0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f91f 	bl	80090fc <USBD_CtlSendData>
        break;
 8008ebe:	e00c      	b.n	8008eda <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f917 	bl	80090fc <USBD_CtlSendData>
        break;
 8008ece:	e004      	b.n	8008eda <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f8a7 	bl	8009026 <USBD_CtlError>
        break;
 8008ed8:	bf00      	nop
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d81e      	bhi.n	8008f36 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	88db      	ldrh	r3, [r3, #6]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d004      	beq.n	8008f0a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f88f 	bl	8009026 <USBD_CtlError>
        break;
 8008f08:	e01a      	b.n	8008f40 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f043 0202 	orr.w	r2, r3, #2
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	330c      	adds	r3, #12
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f8e4 	bl	80090fc <USBD_CtlSendData>
      break;
 8008f34:	e004      	b.n	8008f40 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008f36:	6839      	ldr	r1, [r7, #0]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f874 	bl	8009026 <USBD_CtlError>
      break;
 8008f3e:	bf00      	nop
  }
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	885b      	ldrh	r3, [r3, #2]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d106      	bne.n	8008f68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f90a 	bl	800917c <USBD_CtlSendStatus>
  }
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f80:	3b01      	subs	r3, #1
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d80b      	bhi.n	8008f9e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	885b      	ldrh	r3, [r3, #2]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d10c      	bne.n	8008fa8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f8f0 	bl	800917c <USBD_CtlSendStatus>
      }
      break;
 8008f9c:	e004      	b.n	8008fa8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f840 	bl	8009026 <USBD_CtlError>
      break;
 8008fa6:	e000      	b.n	8008faa <USBD_ClrFeature+0x3a>
      break;
 8008fa8:	bf00      	nop
  }
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781a      	ldrb	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	785a      	ldrb	r2, [r3, #1]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	3302      	adds	r3, #2
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	3303      	adds	r3, #3
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	4413      	add	r3, r2
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	3304      	adds	r3, #4
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	461a      	mov	r2, r3
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	3305      	adds	r3, #5
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	4413      	add	r3, r2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	3306      	adds	r3, #6
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	3307      	adds	r3, #7
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	b29b      	uxth	r3, r3
 8009012:	4413      	add	r3, r2
 8009014:	b29a      	uxth	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	80da      	strh	r2, [r3, #6]

}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009030:	2180      	movs	r1, #128	@ 0x80
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb70 	bl	8009718 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009038:	2100      	movs	r1, #0
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fb6c 	bl	8009718 <USBD_LL_StallEP>
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d032      	beq.n	80090c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 f834 	bl	80090cc <USBD_GetLen>
 8009064:	4603      	mov	r3, r0
 8009066:	3301      	adds	r3, #1
 8009068:	b29b      	uxth	r3, r3
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	75fa      	strb	r2, [r7, #23]
 8009078:	461a      	mov	r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	4413      	add	r3, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	7812      	ldrb	r2, [r2, #0]
 8009082:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	75fa      	strb	r2, [r7, #23]
 800908a:	461a      	mov	r2, r3
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4413      	add	r3, r2
 8009090:	2203      	movs	r2, #3
 8009092:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009094:	e012      	b.n	80090bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	60fa      	str	r2, [r7, #12]
 800909c:	7dfa      	ldrb	r2, [r7, #23]
 800909e:	1c51      	adds	r1, r2, #1
 80090a0:	75f9      	strb	r1, [r7, #23]
 80090a2:	4611      	mov	r1, r2
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	440a      	add	r2, r1
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	75fa      	strb	r2, [r7, #23]
 80090b2:	461a      	mov	r2, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4413      	add	r3, r2
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e8      	bne.n	8009096 <USBD_GetString+0x4e>
    }
  }
}
 80090c4:	bf00      	nop
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80090d8:	e005      	b.n	80090e6 <USBD_GetLen+0x1a>
  {
    len++;
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	3301      	adds	r3, #1
 80090de:	73fb      	strb	r3, [r7, #15]
    buf++;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3301      	adds	r3, #1
 80090e4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1f5      	bne.n	80090da <USBD_GetLen+0xe>
  }

  return len;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	4613      	mov	r3, r2
 8009108:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2202      	movs	r2, #2
 800910e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009112:	88fa      	ldrh	r2, [r7, #6]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009118:	88fa      	ldrh	r2, [r7, #6]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800911e:	88fb      	ldrh	r3, [r7, #6]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	2100      	movs	r1, #0
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 fb80 	bl	800982a <USBD_LL_Transmit>

  return USBD_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009142:	88fb      	ldrh	r3, [r7, #6]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	2100      	movs	r1, #0
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 fb6e 	bl	800982a <USBD_LL_Transmit>

  return USBD_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	4613      	mov	r3, r2
 8009164:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009166:	88fb      	ldrh	r3, [r7, #6]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	2100      	movs	r1, #0
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fb7f 	bl	8009870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2204      	movs	r2, #4
 8009188:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800918c:	2300      	movs	r3, #0
 800918e:	2200      	movs	r2, #0
 8009190:	2100      	movs	r1, #0
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fb49 	bl	800982a <USBD_LL_Transmit>

  return USBD_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2205      	movs	r2, #5
 80091ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091b2:	2300      	movs	r3, #0
 80091b4:	2200      	movs	r2, #0
 80091b6:	2100      	movs	r1, #0
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fb59 	bl	8009870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80091cc:	2200      	movs	r2, #0
 80091ce:	490e      	ldr	r1, [pc, #56]	@ (8009208 <MX_USB_DEVICE_Init+0x40>)
 80091d0:	480e      	ldr	r0, [pc, #56]	@ (800920c <MX_USB_DEVICE_Init+0x44>)
 80091d2:	f7fe ff79 	bl	80080c8 <USBD_Init>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80091dc:	f7f7 f970 	bl	80004c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 80091e0:	490b      	ldr	r1, [pc, #44]	@ (8009210 <MX_USB_DEVICE_Init+0x48>)
 80091e2:	480a      	ldr	r0, [pc, #40]	@ (800920c <MX_USB_DEVICE_Init+0x44>)
 80091e4:	f7fe ff9b 	bl	800811e <USBD_RegisterClass>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091ee:	f7f7 f967 	bl	80004c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091f2:	4806      	ldr	r0, [pc, #24]	@ (800920c <MX_USB_DEVICE_Init+0x44>)
 80091f4:	f7fe ffad 	bl	8008152 <USBD_Start>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80091fe:	f7f7 f95f 	bl	80004c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009202:	bf00      	nop
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	200000bc 	.word	0x200000bc
 800920c:	20000218 	.word	0x20000218
 8009210:	20000024 	.word	0x20000024

08009214 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	6039      	str	r1, [r7, #0]
 800921e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	2212      	movs	r2, #18
 8009224:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009226:	4b03      	ldr	r3, [pc, #12]	@ (8009234 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	200000d8 	.word	0x200000d8

08009238 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	6039      	str	r1, [r7, #0]
 8009242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2204      	movs	r2, #4
 8009248:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800924a:	4b03      	ldr	r3, [pc, #12]	@ (8009258 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	200000ec 	.word	0x200000ec

0800925c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	6039      	str	r1, [r7, #0]
 8009266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	4907      	ldr	r1, [pc, #28]	@ (8009290 <USBD_FS_ProductStrDescriptor+0x34>)
 8009272:	4808      	ldr	r0, [pc, #32]	@ (8009294 <USBD_FS_ProductStrDescriptor+0x38>)
 8009274:	f7ff fee8 	bl	8009048 <USBD_GetString>
 8009278:	e004      	b.n	8009284 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4904      	ldr	r1, [pc, #16]	@ (8009290 <USBD_FS_ProductStrDescriptor+0x34>)
 800927e:	4805      	ldr	r0, [pc, #20]	@ (8009294 <USBD_FS_ProductStrDescriptor+0x38>)
 8009280:	f7ff fee2 	bl	8009048 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009284:	4b02      	ldr	r3, [pc, #8]	@ (8009290 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	200004dc 	.word	0x200004dc
 8009294:	080099c8 	.word	0x080099c8

08009298 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	4904      	ldr	r1, [pc, #16]	@ (80092b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092a8:	4804      	ldr	r0, [pc, #16]	@ (80092bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092aa:	f7ff fecd 	bl	8009048 <USBD_GetString>
  return USBD_StrDesc;
 80092ae:	4b02      	ldr	r3, [pc, #8]	@ (80092b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	200004dc 	.word	0x200004dc
 80092bc:	080099e0 	.word	0x080099e0

080092c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	6039      	str	r1, [r7, #0]
 80092ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	221a      	movs	r2, #26
 80092d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092d2:	f000 f843 	bl	800935c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092d6:	4b02      	ldr	r3, [pc, #8]	@ (80092e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	200000f0 	.word	0x200000f0

080092e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	6039      	str	r1, [r7, #0]
 80092ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d105      	bne.n	8009302 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	4907      	ldr	r1, [pc, #28]	@ (8009318 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092fa:	4808      	ldr	r0, [pc, #32]	@ (800931c <USBD_FS_ConfigStrDescriptor+0x38>)
 80092fc:	f7ff fea4 	bl	8009048 <USBD_GetString>
 8009300:	e004      	b.n	800930c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	4904      	ldr	r1, [pc, #16]	@ (8009318 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009306:	4805      	ldr	r0, [pc, #20]	@ (800931c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009308:	f7ff fe9e 	bl	8009048 <USBD_GetString>
  }
  return USBD_StrDesc;
 800930c:	4b02      	ldr	r3, [pc, #8]	@ (8009318 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	200004dc 	.word	0x200004dc
 800931c:	080099f0 	.word	0x080099f0

08009320 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800932c:	79fb      	ldrb	r3, [r7, #7]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d105      	bne.n	800933e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	4907      	ldr	r1, [pc, #28]	@ (8009354 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009336:	4808      	ldr	r0, [pc, #32]	@ (8009358 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009338:	f7ff fe86 	bl	8009048 <USBD_GetString>
 800933c:	e004      	b.n	8009348 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	4904      	ldr	r1, [pc, #16]	@ (8009354 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009342:	4805      	ldr	r0, [pc, #20]	@ (8009358 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009344:	f7ff fe80 	bl	8009048 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009348:	4b02      	ldr	r3, [pc, #8]	@ (8009354 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	200004dc 	.word	0x200004dc
 8009358:	080099fc 	.word	0x080099fc

0800935c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009362:	4b0f      	ldr	r3, [pc, #60]	@ (80093a0 <Get_SerialNum+0x44>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009368:	4b0e      	ldr	r3, [pc, #56]	@ (80093a4 <Get_SerialNum+0x48>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800936e:	4b0e      	ldr	r3, [pc, #56]	@ (80093a8 <Get_SerialNum+0x4c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4413      	add	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d009      	beq.n	8009396 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009382:	2208      	movs	r2, #8
 8009384:	4909      	ldr	r1, [pc, #36]	@ (80093ac <Get_SerialNum+0x50>)
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f000 f814 	bl	80093b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800938c:	2204      	movs	r2, #4
 800938e:	4908      	ldr	r1, [pc, #32]	@ (80093b0 <Get_SerialNum+0x54>)
 8009390:	68b8      	ldr	r0, [r7, #8]
 8009392:	f000 f80f 	bl	80093b4 <IntToUnicode>
  }
}
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	1ffff7ac 	.word	0x1ffff7ac
 80093a4:	1ffff7b0 	.word	0x1ffff7b0
 80093a8:	1ffff7b4 	.word	0x1ffff7b4
 80093ac:	200000f2 	.word	0x200000f2
 80093b0:	20000102 	.word	0x20000102

080093b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	4613      	mov	r3, r2
 80093c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
 80093ca:	e027      	b.n	800941c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	0f1b      	lsrs	r3, r3, #28
 80093d0:	2b09      	cmp	r3, #9
 80093d2:	d80b      	bhi.n	80093ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	0f1b      	lsrs	r3, r3, #28
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	4619      	mov	r1, r3
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	440b      	add	r3, r1
 80093e4:	3230      	adds	r2, #48	@ 0x30
 80093e6:	b2d2      	uxtb	r2, r2
 80093e8:	701a      	strb	r2, [r3, #0]
 80093ea:	e00a      	b.n	8009402 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	0f1b      	lsrs	r3, r3, #28
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	4619      	mov	r1, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	440b      	add	r3, r1
 80093fc:	3237      	adds	r2, #55	@ 0x37
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	011b      	lsls	r3, r3, #4
 8009406:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	3301      	adds	r3, #1
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	4413      	add	r3, r2
 8009412:	2200      	movs	r2, #0
 8009414:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	3301      	adds	r3, #1
 800941a:	75fb      	strb	r3, [r7, #23]
 800941c:	7dfa      	ldrb	r2, [r7, #23]
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	429a      	cmp	r2, r3
 8009422:	d3d3      	bcc.n	80093cc <IntToUnicode+0x18>
  }
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	371c      	adds	r7, #28
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
	...

08009434 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a0d      	ldr	r2, [pc, #52]	@ (8009478 <HAL_PCD_MspInit+0x44>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d113      	bne.n	800946e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009446:	4b0d      	ldr	r3, [pc, #52]	@ (800947c <HAL_PCD_MspInit+0x48>)
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	4a0c      	ldr	r2, [pc, #48]	@ (800947c <HAL_PCD_MspInit+0x48>)
 800944c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009450:	61d3      	str	r3, [r2, #28]
 8009452:	4b0a      	ldr	r3, [pc, #40]	@ (800947c <HAL_PCD_MspInit+0x48>)
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800945e:	2200      	movs	r2, #0
 8009460:	2100      	movs	r1, #0
 8009462:	2014      	movs	r0, #20
 8009464:	f7f8 fae9 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009468:	2014      	movs	r0, #20
 800946a:	f7f8 fb02 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800946e:	bf00      	nop
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40005c00 	.word	0x40005c00
 800947c:	40021000 	.word	0x40021000

08009480 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7fe fea4 	bl	80081e4 <USBD_LL_SetupStage>
}
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 80094b6:	78fa      	ldrb	r2, [r7, #3]
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	440b      	add	r3, r1
 80094c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	78fb      	ldrb	r3, [r7, #3]
 80094cc:	4619      	mov	r1, r3
 80094ce:	f7fe fed6 	bl	800827e <USBD_LL_DataOutStage>
}
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b082      	sub	sp, #8
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	440b      	add	r3, r1
 80094fa:	3324      	adds	r3, #36	@ 0x24
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	4619      	mov	r1, r3
 8009502:	f7fe ff2d 	bl	8008360 <USBD_LL_DataInStage>
}
 8009506:	bf00      	nop
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff f840 	bl	80085a2 <USBD_LL_SOF>
}
 8009522:	bf00      	nop
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009532:	2301      	movs	r3, #1
 8009534:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	795b      	ldrb	r3, [r3, #5]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d001      	beq.n	8009542 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800953e:	f7f6 ffbf 	bl	80004c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009548:	7bfa      	ldrb	r2, [r7, #15]
 800954a:	4611      	mov	r1, r2
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe ffed 	bl	800852c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe ffa6 	bl	80084aa <USBD_LL_Reset>
}
 800955e:	bf00      	nop
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe ffe8 	bl	800854c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	7a5b      	ldrb	r3, [r3, #9]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d005      	beq.n	8009590 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009584:	4b04      	ldr	r3, [pc, #16]	@ (8009598 <HAL_PCD_SuspendCallback+0x30>)
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	4a03      	ldr	r2, [pc, #12]	@ (8009598 <HAL_PCD_SuspendCallback+0x30>)
 800958a:	f043 0306 	orr.w	r3, r3, #6
 800958e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	e000ed00 	.word	0xe000ed00

0800959c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe ffe3 	bl	8008576 <USBD_LL_Resume>
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80095c0:	4a23      	ldr	r2, [pc, #140]	@ (8009650 <USBD_LL_Init+0x98>)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a21      	ldr	r2, [pc, #132]	@ (8009650 <USBD_LL_Init+0x98>)
 80095cc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095d0:	4b1f      	ldr	r3, [pc, #124]	@ (8009650 <USBD_LL_Init+0x98>)
 80095d2:	4a20      	ldr	r2, [pc, #128]	@ (8009654 <USBD_LL_Init+0x9c>)
 80095d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009650 <USBD_LL_Init+0x98>)
 80095d8:	2208      	movs	r2, #8
 80095da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009650 <USBD_LL_Init+0x98>)
 80095de:	2202      	movs	r2, #2
 80095e0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009650 <USBD_LL_Init+0x98>)
 80095e4:	2202      	movs	r2, #2
 80095e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095e8:	4b19      	ldr	r3, [pc, #100]	@ (8009650 <USBD_LL_Init+0x98>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095ee:	4b18      	ldr	r3, [pc, #96]	@ (8009650 <USBD_LL_Init+0x98>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095f4:	4816      	ldr	r0, [pc, #88]	@ (8009650 <USBD_LL_Init+0x98>)
 80095f6:	f7f8 fbe1 	bl	8001dbc <HAL_PCD_Init>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009600:	f7f6 ff5e 	bl	80004c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800960a:	2318      	movs	r3, #24
 800960c:	2200      	movs	r2, #0
 800960e:	2100      	movs	r1, #0
 8009610:	f7fa f844 	bl	800369c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800961a:	2358      	movs	r3, #88	@ 0x58
 800961c:	2200      	movs	r2, #0
 800961e:	2180      	movs	r1, #128	@ 0x80
 8009620:	f7fa f83c 	bl	800369c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xC0);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800962a:	23c0      	movs	r3, #192	@ 0xc0
 800962c:	2200      	movs	r2, #0
 800962e:	2101      	movs	r1, #1
 8009630:	f7fa f834 	bl	800369c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800963a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800963e:	2200      	movs	r2, #0
 8009640:	2181      	movs	r1, #129	@ 0x81
 8009642:	f7fa f82b 	bl	800369c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	200006dc 	.word	0x200006dc
 8009654:	40005c00 	.word	0x40005c00

08009658 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800966e:	4618      	mov	r0, r3
 8009670:	f7f8 fc6b 	bl	8001f4a <HAL_PCD_Start>
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	4618      	mov	r0, r3
 800967c:	f000 f940 	bl	8009900 <USBD_Get_USB_Status>
 8009680:	4603      	mov	r3, r0
 8009682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009684:	7bbb      	ldrb	r3, [r7, #14]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	461a      	mov	r2, r3
 800969c:	4603      	mov	r3, r0
 800969e:	70fb      	strb	r3, [r7, #3]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70bb      	strb	r3, [r7, #2]
 80096a4:	4613      	mov	r3, r2
 80096a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096b6:	78bb      	ldrb	r3, [r7, #2]
 80096b8:	883a      	ldrh	r2, [r7, #0]
 80096ba:	78f9      	ldrb	r1, [r7, #3]
 80096bc:	f7f8 fd63 	bl	8002186 <HAL_PCD_EP_Open>
 80096c0:	4603      	mov	r3, r0
 80096c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 f91a 	bl	8009900 <USBD_Get_USB_Status>
 80096cc:	4603      	mov	r3, r0
 80096ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	460b      	mov	r3, r1
 80096e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7f8 fda1 	bl	8002240 <HAL_PCD_EP_Close>
 80096fe:	4603      	mov	r3, r0
 8009700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	4618      	mov	r0, r3
 8009706:	f000 f8fb 	bl	8009900 <USBD_Get_USB_Status>
 800970a:	4603      	mov	r3, r0
 800970c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009732:	78fa      	ldrb	r2, [r7, #3]
 8009734:	4611      	mov	r1, r2
 8009736:	4618      	mov	r0, r3
 8009738:	f7f8 fe4a 	bl	80023d0 <HAL_PCD_EP_SetStall>
 800973c:	4603      	mov	r3, r0
 800973e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	4618      	mov	r0, r3
 8009744:	f000 f8dc 	bl	8009900 <USBD_Get_USB_Status>
 8009748:	4603      	mov	r3, r0
 800974a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800974c:	7bbb      	ldrb	r3, [r7, #14]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	460b      	mov	r3, r1
 8009760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009770:	78fa      	ldrb	r2, [r7, #3]
 8009772:	4611      	mov	r1, r2
 8009774:	4618      	mov	r0, r3
 8009776:	f7f8 fe7d 	bl	8002474 <HAL_PCD_EP_ClrStall>
 800977a:	4603      	mov	r3, r0
 800977c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	4618      	mov	r0, r3
 8009782:	f000 f8bd 	bl	8009900 <USBD_Get_USB_Status>
 8009786:	4603      	mov	r3, r0
 8009788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800978a:	7bbb      	ldrb	r3, [r7, #14]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	da0b      	bge.n	80097c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097b6:	68f9      	ldr	r1, [r7, #12]
 80097b8:	4613      	mov	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	440b      	add	r3, r1
 80097c2:	3312      	adds	r3, #18
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	e00b      	b.n	80097e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097ce:	68f9      	ldr	r1, [r7, #12]
 80097d0:	4613      	mov	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4413      	add	r3, r2
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	440b      	add	r3, r1
 80097da:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80097de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009806:	78fa      	ldrb	r2, [r7, #3]
 8009808:	4611      	mov	r1, r2
 800980a:	4618      	mov	r0, r3
 800980c:	f7f8 fc97 	bl	800213e <HAL_PCD_SetAddress>
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f872 	bl	8009900 <USBD_Get_USB_Status>
 800981c:	4603      	mov	r3, r0
 800981e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009820:	7bbb      	ldrb	r3, [r7, #14]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b086      	sub	sp, #24
 800982e:	af00      	add	r7, sp, #0
 8009830:	60f8      	str	r0, [r7, #12]
 8009832:	607a      	str	r2, [r7, #4]
 8009834:	461a      	mov	r2, r3
 8009836:	460b      	mov	r3, r1
 8009838:	72fb      	strb	r3, [r7, #11]
 800983a:	4613      	mov	r3, r2
 800983c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800984c:	893b      	ldrh	r3, [r7, #8]
 800984e:	7af9      	ldrb	r1, [r7, #11]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	f7f8 fd86 	bl	8002362 <HAL_PCD_EP_Transmit>
 8009856:	4603      	mov	r3, r0
 8009858:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 f84f 	bl	8009900 <USBD_Get_USB_Status>
 8009862:	4603      	mov	r3, r0
 8009864:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009866:	7dbb      	ldrb	r3, [r7, #22]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	461a      	mov	r2, r3
 800987c:	460b      	mov	r3, r1
 800987e:	72fb      	strb	r3, [r7, #11]
 8009880:	4613      	mov	r3, r2
 8009882:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009892:	893b      	ldrh	r3, [r7, #8]
 8009894:	7af9      	ldrb	r1, [r7, #11]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	f7f8 fd1a 	bl	80022d0 <HAL_PCD_EP_Receive>
 800989c:	4603      	mov	r3, r0
 800989e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 f82c 	bl	8009900 <USBD_Get_USB_Status>
 80098a8:	4603      	mov	r3, r0
 80098aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MIDI_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098c0:	4b03      	ldr	r3, [pc, #12]	@ (80098d0 <USBD_static_malloc+0x18>)
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	200009b0 	.word	0x200009b0

080098d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]

}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	2b03      	cmp	r3, #3
 8009912:	d817      	bhi.n	8009944 <USBD_Get_USB_Status+0x44>
 8009914:	a201      	add	r2, pc, #4	@ (adr r2, 800991c <USBD_Get_USB_Status+0x1c>)
 8009916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991a:	bf00      	nop
 800991c:	0800992d 	.word	0x0800992d
 8009920:	08009933 	.word	0x08009933
 8009924:	08009939 	.word	0x08009939
 8009928:	0800993f 	.word	0x0800993f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
    break;
 8009930:	e00b      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009932:	2302      	movs	r3, #2
 8009934:	73fb      	strb	r3, [r7, #15]
    break;
 8009936:	e008      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009938:	2301      	movs	r3, #1
 800993a:	73fb      	strb	r3, [r7, #15]
    break;
 800993c:	e005      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800993e:	2302      	movs	r3, #2
 8009940:	73fb      	strb	r3, [r7, #15]
    break;
 8009942:	e002      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009944:	2302      	movs	r3, #2
 8009946:	73fb      	strb	r3, [r7, #15]
    break;
 8009948:	bf00      	nop
  }
  return usb_status;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <memset>:
 8009958:	4402      	add	r2, r0
 800995a:	4603      	mov	r3, r0
 800995c:	4293      	cmp	r3, r2
 800995e:	d100      	bne.n	8009962 <memset+0xa>
 8009960:	4770      	bx	lr
 8009962:	f803 1b01 	strb.w	r1, [r3], #1
 8009966:	e7f9      	b.n	800995c <memset+0x4>

08009968 <__libc_init_array>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	4d0d      	ldr	r5, [pc, #52]	@ (80099a0 <__libc_init_array+0x38>)
 800996c:	4c0d      	ldr	r4, [pc, #52]	@ (80099a4 <__libc_init_array+0x3c>)
 800996e:	1b64      	subs	r4, r4, r5
 8009970:	10a4      	asrs	r4, r4, #2
 8009972:	2600      	movs	r6, #0
 8009974:	42a6      	cmp	r6, r4
 8009976:	d109      	bne.n	800998c <__libc_init_array+0x24>
 8009978:	4d0b      	ldr	r5, [pc, #44]	@ (80099a8 <__libc_init_array+0x40>)
 800997a:	4c0c      	ldr	r4, [pc, #48]	@ (80099ac <__libc_init_array+0x44>)
 800997c:	f000 f818 	bl	80099b0 <_init>
 8009980:	1b64      	subs	r4, r4, r5
 8009982:	10a4      	asrs	r4, r4, #2
 8009984:	2600      	movs	r6, #0
 8009986:	42a6      	cmp	r6, r4
 8009988:	d105      	bne.n	8009996 <__libc_init_array+0x2e>
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009990:	4798      	blx	r3
 8009992:	3601      	adds	r6, #1
 8009994:	e7ee      	b.n	8009974 <__libc_init_array+0xc>
 8009996:	f855 3b04 	ldr.w	r3, [r5], #4
 800999a:	4798      	blx	r3
 800999c:	3601      	adds	r6, #1
 800999e:	e7f2      	b.n	8009986 <__libc_init_array+0x1e>
 80099a0:	08009a3c 	.word	0x08009a3c
 80099a4:	08009a3c 	.word	0x08009a3c
 80099a8:	08009a3c 	.word	0x08009a3c
 80099ac:	08009a40 	.word	0x08009a40

080099b0 <_init>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	bf00      	nop
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr

080099bc <_fini>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	bf00      	nop
 80099c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c2:	bc08      	pop	{r3}
 80099c4:	469e      	mov	lr, r3
 80099c6:	4770      	bx	lr
