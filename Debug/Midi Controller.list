
Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e08  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008f90  08008f90  00009f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ffc  08008ffc  0000b188  2**0
                  CONTENTS
  4 .ARM          00000000  08008ffc  08008ffc  0000b188  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ffc  08008ffc  0000b188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ffc  08008ffc  00009ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009000  08009000  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  08009004  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000123c  20000188  0800918c  0000b188  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200013c4  0800918c  0000b3c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125b6  00000000  00000000  0000b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000313c  00000000  00000000  0001d76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  000208b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be9  00000000  00000000  00021868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c4d  00000000  00000000  00022451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015192  00000000  00000000  0002709e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a65ab  00000000  00000000  0003c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e27db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  000e2820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e6854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f78 	.word	0x08008f78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	08008f78 	.word	0x08008f78

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb5c 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f816 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8be 	bl	8000354 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f86e 	bl	80002b8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80001dc:	f008 f9d0 	bl	8008580 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority (TIM2_IRQn, 0, 0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2100      	movs	r1, #0
 80001e4:	201c      	movs	r0, #28
 80001e6:	f000 fc90 	bl	8000b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM2_IRQn);
 80001ea:	201c      	movs	r0, #28
 80001ec:	f000 fca9 	bl	8000b42 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim2);
 80001f0:	4802      	ldr	r0, [pc, #8]	@ (80001fc <main+0x34>)
 80001f2:	f003 fef7 	bl	8003fe4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f6:	bf00      	nop
 80001f8:	e7fd      	b.n	80001f6 <main+0x2e>
 80001fa:	bf00      	nop
 80001fc:	200001a4 	.word	0x200001a4

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b09c      	sub	sp, #112	@ 0x70
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800020a:	2228      	movs	r2, #40	@ 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f008 fe86 	bl	8008f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2234      	movs	r2, #52	@ 0x34
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f008 fe78 	bl	8008f20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000230:	2301      	movs	r3, #1
 8000232:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000238:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800024c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000250:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000256:	4618      	mov	r0, r3
 8000258:	f002 facc 	bl	80027f4 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000262:	f000 f8d7 	bl	8000414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026a:	2302      	movs	r3, #2
 800026c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000276:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800027c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000280:	2101      	movs	r1, #1
 8000282:	4618      	mov	r0, r3
 8000284:	f003 faf4 	bl	8003870 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800028e:	f000 f8c1 	bl	8000414 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000292:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000296:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000298:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800029c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029e:	463b      	mov	r3, r7
 80002a0:	4618      	mov	r0, r3
 80002a2:	f003 fcb5 	bl	8003c10 <HAL_RCCEx_PeriphCLKConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002ac:	f000 f8b2 	bl	8000414 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3770      	adds	r7, #112	@ 0x70
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 359;
 80002de:	4b1c      	ldr	r3, [pc, #112]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002e0:	f240 1267 	movw	r2, #359	@ 0x167
 80002e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002ee:	f240 321f 	movw	r2, #799	@ 0x31f
 80002f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f4:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fa:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000300:	4813      	ldr	r0, [pc, #76]	@ (8000350 <MX_TIM2_Init+0x98>)
 8000302:	f003 fe17 	bl	8003f34 <HAL_TIM_Base_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800030c:	f000 f882 	bl	8000414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000314:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	480c      	ldr	r0, [pc, #48]	@ (8000350 <MX_TIM2_Init+0x98>)
 800031e:	f003 ffb7 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000328:	f000 f874 	bl	8000414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800032c:	2300      	movs	r3, #0
 800032e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_TIM2_Init+0x98>)
 800033a:	f004 f9b9 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000344:	f000 f866 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	3720      	adds	r7, #32
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200001a4 	.word	0x200001a4

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08a      	sub	sp, #40	@ 0x28
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036a:	4b28      	ldr	r3, [pc, #160]	@ (800040c <MX_GPIO_Init+0xb8>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a27      	ldr	r2, [pc, #156]	@ (800040c <MX_GPIO_Init+0xb8>)
 8000370:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b25      	ldr	r3, [pc, #148]	@ (800040c <MX_GPIO_Init+0xb8>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800037e:	613b      	str	r3, [r7, #16]
 8000380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000382:	4b22      	ldr	r3, [pc, #136]	@ (800040c <MX_GPIO_Init+0xb8>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a21      	ldr	r2, [pc, #132]	@ (800040c <MX_GPIO_Init+0xb8>)
 8000388:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b1f      	ldr	r3, [pc, #124]	@ (800040c <MX_GPIO_Init+0xb8>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <MX_GPIO_Init+0xb8>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a1b      	ldr	r2, [pc, #108]	@ (800040c <MX_GPIO_Init+0xb8>)
 80003a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b19      	ldr	r3, [pc, #100]	@ (800040c <MX_GPIO_Init+0xb8>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b2:	4b16      	ldr	r3, [pc, #88]	@ (800040c <MX_GPIO_Init+0xb8>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a15      	ldr	r2, [pc, #84]	@ (800040c <MX_GPIO_Init+0xb8>)
 80003b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b13      	ldr	r3, [pc, #76]	@ (800040c <MX_GPIO_Init+0xb8>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : GB_Pin */
  GPIO_InitStruct.Pin = GB_Pin;
 80003ca:	2380      	movs	r3, #128	@ 0x80
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80003d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GB_GPIO_Port, &GPIO_InitStruct);
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	4619      	mov	r1, r3
 80003de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e2:	f000 fbc9 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : CB_Pin CSB_Pin DB_Pin ASB_Pin
                           BB_Pin SPB_Pin DSB_Pin EB_Pin
                           FB_Pin FSB_Pin GSB_Pin AB_Pin */
  GPIO_InitStruct.Pin = CB_Pin|CSB_Pin|DB_Pin|ASB_Pin
 80003e6:	f641 737f 	movw	r3, #8063	@ 0x1f7f
 80003ea:	617b      	str	r3, [r7, #20]
                          |BB_Pin|SPB_Pin|DSB_Pin|EB_Pin
                          |FB_Pin|FSB_Pin|GSB_Pin|AB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80003f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f6:	f107 0314 	add.w	r3, r7, #20
 80003fa:	4619      	mov	r1, r3
 80003fc:	4804      	ldr	r0, [pc, #16]	@ (8000410 <MX_GPIO_Init+0xbc>)
 80003fe:	f000 fbbb 	bl	8000b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000402:	bf00      	nop
 8000404:	3728      	adds	r7, #40	@ 0x28
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000
 8000410:	48000400 	.word	0x48000400

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000418:	b672      	cpsid	i
}
 800041a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <Error_Handler+0x8>

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000426:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <HAL_MspInit+0x44>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a0e      	ldr	r2, [pc, #56]	@ (8000464 <HAL_MspInit+0x44>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <HAL_MspInit+0x44>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <HAL_MspInit+0x44>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <HAL_MspInit+0x44>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <HAL_MspInit+0x44>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000478:	d113      	bne.n	80004a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800047a:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <HAL_TIM_Base_MspInit+0x44>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a0b      	ldr	r2, [pc, #44]	@ (80004ac <HAL_TIM_Base_MspInit+0x44>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <HAL_TIM_Base_MspInit+0x44>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	201c      	movs	r0, #28
 8000498:	f000 fb37 	bl	8000b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800049c:	201c      	movs	r0, #28
 800049e:	f000 fb50 	bl	8000b42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80004a2:	bf00      	nop
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <NMI_Handler+0x4>

080004b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <MemManage_Handler+0x4>

080004c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000506:	f000 fa05 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000516:	f000 fda6 	bl	8001066 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000ed0 	.word	0x20000ed0

08000524 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!HAL_GPIO_ReadPin (CB_GPIO_Port, CB_Pin)) {
 8000528:	2101      	movs	r1, #1
 800052a:	48ae      	ldr	r0, [pc, #696]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 800052c:	f000 fc96 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d115      	bne.n	8000562 <TIM2_IRQHandler+0x3e>
		if (!pressed) {
 8000536:	4bac      	ldr	r3, [pc, #688]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	f083 0301 	eor.w	r3, r3, #1
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	f000 815c 	beq.w	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 8000546:	4ba8      	ldr	r3, [pc, #672]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 8000548:	2201      	movs	r2, #1
 800054a:	701a      	strb	r2, [r3, #0]
			message[2] = C;
 800054c:	4ba7      	ldr	r3, [pc, #668]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 800054e:	2224      	movs	r2, #36	@ 0x24
 8000550:	709a      	strb	r2, [r3, #2]
			message[4] = C;
 8000552:	4ba6      	ldr	r3, [pc, #664]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000554:	2224      	movs	r2, #36	@ 0x24
 8000556:	711a      	strb	r2, [r3, #4]
			CDC_Transmit_FS ((uint8_t *) message, 6);
 8000558:	2106      	movs	r1, #6
 800055a:	48a4      	ldr	r0, [pc, #656]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 800055c:	f008 f8fc 	bl	8008758 <CDC_Transmit_FS>
 8000560:	e14d      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (CSB_GPIO_Port, CSB_Pin)) {
 8000562:	2102      	movs	r1, #2
 8000564:	489f      	ldr	r0, [pc, #636]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 8000566:	f000 fc79 	bl	8000e5c <HAL_GPIO_ReadPin>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d111      	bne.n	8000594 <TIM2_IRQHandler+0x70>
		if (!pressed) {
 8000570:	4b9d      	ldr	r3, [pc, #628]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	f083 0301 	eor.w	r3, r3, #1
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	f000 813f 	beq.w	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 8000580:	4b99      	ldr	r3, [pc, #612]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
			message[2] = CS;
 8000586:	4b99      	ldr	r3, [pc, #612]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000588:	2225      	movs	r2, #37	@ 0x25
 800058a:	709a      	strb	r2, [r3, #2]
			message[4] = CS;
 800058c:	4b97      	ldr	r3, [pc, #604]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 800058e:	2225      	movs	r2, #37	@ 0x25
 8000590:	711a      	strb	r2, [r3, #4]
 8000592:	e134      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (DB_GPIO_Port, DB_Pin)) {
 8000594:	2104      	movs	r1, #4
 8000596:	4893      	ldr	r0, [pc, #588]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 8000598:	f000 fc60 	bl	8000e5c <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d111      	bne.n	80005c6 <TIM2_IRQHandler+0xa2>
		if (!pressed) {
 80005a2:	4b91      	ldr	r3, [pc, #580]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	f083 0301 	eor.w	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f000 8126 	beq.w	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 80005b2:	4b8d      	ldr	r3, [pc, #564]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
			message[2] = D;
 80005b8:	4b8c      	ldr	r3, [pc, #560]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 80005ba:	2226      	movs	r2, #38	@ 0x26
 80005bc:	709a      	strb	r2, [r3, #2]
			message[4] = D;
 80005be:	4b8b      	ldr	r3, [pc, #556]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 80005c0:	2226      	movs	r2, #38	@ 0x26
 80005c2:	711a      	strb	r2, [r3, #4]
 80005c4:	e11b      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (DSB_GPIO_Port, DSB_Pin)) {
 80005c6:	2108      	movs	r1, #8
 80005c8:	4886      	ldr	r0, [pc, #536]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 80005ca:	f000 fc47 	bl	8000e5c <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d111      	bne.n	80005f8 <TIM2_IRQHandler+0xd4>
		if (!pressed) {
 80005d4:	4b84      	ldr	r3, [pc, #528]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	f083 0301 	eor.w	r3, r3, #1
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	f000 810d 	beq.w	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 80005e4:	4b80      	ldr	r3, [pc, #512]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
			message[2] = DS;
 80005ea:	4b80      	ldr	r3, [pc, #512]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 80005ec:	2227      	movs	r2, #39	@ 0x27
 80005ee:	709a      	strb	r2, [r3, #2]
			message[4] = DS;
 80005f0:	4b7e      	ldr	r3, [pc, #504]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 80005f2:	2227      	movs	r2, #39	@ 0x27
 80005f4:	711a      	strb	r2, [r3, #4]
 80005f6:	e102      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (EB_GPIO_Port, EB_Pin)) {
 80005f8:	2110      	movs	r1, #16
 80005fa:	487a      	ldr	r0, [pc, #488]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 80005fc:	f000 fc2e 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d111      	bne.n	800062a <TIM2_IRQHandler+0x106>
		if (!pressed) {
 8000606:	4b78      	ldr	r3, [pc, #480]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	f083 0301 	eor.w	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	f000 80f4 	beq.w	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 8000616:	4b74      	ldr	r3, [pc, #464]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
			message[2] = E;
 800061c:	4b73      	ldr	r3, [pc, #460]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 800061e:	2228      	movs	r2, #40	@ 0x28
 8000620:	709a      	strb	r2, [r3, #2]
			message[4] = E;
 8000622:	4b72      	ldr	r3, [pc, #456]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000624:	2228      	movs	r2, #40	@ 0x28
 8000626:	711a      	strb	r2, [r3, #4]
 8000628:	e0e9      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (FB_GPIO_Port, FB_Pin)) {
 800062a:	2120      	movs	r1, #32
 800062c:	486d      	ldr	r0, [pc, #436]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 800062e:	f000 fc15 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d111      	bne.n	800065c <TIM2_IRQHandler+0x138>
		if (!pressed) {
 8000638:	4b6b      	ldr	r3, [pc, #428]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	f000 80db 	beq.w	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 8000648:	4b67      	ldr	r3, [pc, #412]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
			message[2] = F;
 800064e:	4b67      	ldr	r3, [pc, #412]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000650:	2229      	movs	r2, #41	@ 0x29
 8000652:	709a      	strb	r2, [r3, #2]
			message[4] = F;
 8000654:	4b65      	ldr	r3, [pc, #404]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000656:	2229      	movs	r2, #41	@ 0x29
 8000658:	711a      	strb	r2, [r3, #4]
 800065a:	e0d0      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (FSB_GPIO_Port, FSB_Pin)) {
 800065c:	2140      	movs	r1, #64	@ 0x40
 800065e:	4861      	ldr	r0, [pc, #388]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 8000660:	f000 fbfc 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d111      	bne.n	800068e <TIM2_IRQHandler+0x16a>
		if (!pressed) {
 800066a:	4b5f      	ldr	r3, [pc, #380]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	f000 80c2 	beq.w	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 800067a:	4b5b      	ldr	r3, [pc, #364]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
			message[2] = FS;
 8000680:	4b5a      	ldr	r3, [pc, #360]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000682:	222a      	movs	r2, #42	@ 0x2a
 8000684:	709a      	strb	r2, [r3, #2]
			message[4] = FS;
 8000686:	4b59      	ldr	r3, [pc, #356]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000688:	222a      	movs	r2, #42	@ 0x2a
 800068a:	711a      	strb	r2, [r3, #4]
 800068c:	e0b7      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (GB_GPIO_Port, GB_Pin)) {
 800068e:	2180      	movs	r1, #128	@ 0x80
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f000 fbe2 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d111      	bne.n	80006c2 <TIM2_IRQHandler+0x19e>
		if (!pressed) {
 800069e:	4b52      	ldr	r3, [pc, #328]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f083 0301 	eor.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f000 80a8 	beq.w	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 80006ae:	4b4e      	ldr	r3, [pc, #312]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
			message[2] = G;
 80006b4:	4b4d      	ldr	r3, [pc, #308]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 80006b6:	222b      	movs	r2, #43	@ 0x2b
 80006b8:	709a      	strb	r2, [r3, #2]
			message[4] = G;
 80006ba:	4b4c      	ldr	r3, [pc, #304]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 80006bc:	222b      	movs	r2, #43	@ 0x2b
 80006be:	711a      	strb	r2, [r3, #4]
 80006c0:	e09d      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (GSB_GPIO_Port, GSB_Pin)) {
 80006c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c6:	4847      	ldr	r0, [pc, #284]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 80006c8:	f000 fbc8 	bl	8000e5c <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d111      	bne.n	80006f6 <TIM2_IRQHandler+0x1d2>
		if (!pressed) {
 80006d2:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f083 0301 	eor.w	r3, r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	f000 808e 	beq.w	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 80006e2:	4b41      	ldr	r3, [pc, #260]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
			message[2] = GS;
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 80006ea:	222c      	movs	r2, #44	@ 0x2c
 80006ec:	709a      	strb	r2, [r3, #2]
			message[4] = GS;
 80006ee:	4b3f      	ldr	r3, [pc, #252]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 80006f0:	222c      	movs	r2, #44	@ 0x2c
 80006f2:	711a      	strb	r2, [r3, #4]
 80006f4:	e083      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (AB_GPIO_Port, AB_Pin)) {
 80006f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006fa:	483a      	ldr	r0, [pc, #232]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 80006fc:	f000 fbae 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d110      	bne.n	8000728 <TIM2_IRQHandler+0x204>
		if (!pressed) {
 8000706:	4b38      	ldr	r3, [pc, #224]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f083 0301 	eor.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d074      	beq.n	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 8000714:	4b34      	ldr	r3, [pc, #208]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
			message[2] = A;
 800071a:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 800071c:	222d      	movs	r2, #45	@ 0x2d
 800071e:	709a      	strb	r2, [r3, #2]
			message[4] = A;
 8000720:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000722:	222d      	movs	r2, #45	@ 0x2d
 8000724:	711a      	strb	r2, [r3, #4]
 8000726:	e06a      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (ASB_GPIO_Port, ASB_Pin)) {
 8000728:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072c:	482d      	ldr	r0, [pc, #180]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 800072e:	f000 fb95 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d110      	bne.n	800075a <TIM2_IRQHandler+0x236>
		if (!pressed) {
 8000738:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	f083 0301 	eor.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d05b      	beq.n	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 8000746:	4b28      	ldr	r3, [pc, #160]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
			message[2] = AS;
 800074c:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 800074e:	222e      	movs	r2, #46	@ 0x2e
 8000750:	709a      	strb	r2, [r3, #2]
			message[4] = AS;
 8000752:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000754:	222e      	movs	r2, #46	@ 0x2e
 8000756:	711a      	strb	r2, [r3, #4]
 8000758:	e051      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (BB_GPIO_Port, BB_Pin)) {
 800075a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800075e:	4821      	ldr	r0, [pc, #132]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 8000760:	f000 fb7c 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d110      	bne.n	800078c <TIM2_IRQHandler+0x268>
		if (!pressed) {
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	f083 0301 	eor.w	r3, r3, #1
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d042      	beq.n	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
			message[2] = B;
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000780:	222f      	movs	r2, #47	@ 0x2f
 8000782:	709a      	strb	r2, [r3, #2]
			message[4] = B;
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <TIM2_IRQHandler+0x2c8>)
 8000786:	222f      	movs	r2, #47	@ 0x2f
 8000788:	711a      	strb	r2, [r3, #4]
 800078a:	e038      	b.n	80007fe <TIM2_IRQHandler+0x2da>
//			HAL_UART_Transmit (&huart2, (uint8_t *) message, 6, 100);
		}
	} else if (!HAL_GPIO_ReadPin (SPB_GPIO_Port, SPB_Pin)) {
 800078c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000790:	4814      	ldr	r0, [pc, #80]	@ (80007e4 <TIM2_IRQHandler+0x2c0>)
 8000792:	f000 fb63 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d12d      	bne.n	80007f8 <TIM2_IRQHandler+0x2d4>
		if (!pressed) {
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	f083 0301 	eor.w	r3, r3, #1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d029      	beq.n	80007fe <TIM2_IRQHandler+0x2da>
			pressed = true;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <TIM2_IRQHandler+0x2c4>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
			play_toggled = !play_toggled;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <TIM2_IRQHandler+0x2cc>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf14      	ite	ne
 80007b8:	2301      	movne	r3, #1
 80007ba:	2300      	moveq	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f083 0301 	eor.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <TIM2_IRQHandler+0x2cc>)
 80007cc:	701a      	strb	r2, [r3, #0]
			PS_message[3] = play_toggled ? PLAY : STOP;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <TIM2_IRQHandler+0x2cc>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <TIM2_IRQHandler+0x2b6>
 80007d6:	227f      	movs	r2, #127	@ 0x7f
 80007d8:	e000      	b.n	80007dc <TIM2_IRQHandler+0x2b8>
 80007da:	2200      	movs	r2, #0
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <TIM2_IRQHandler+0x2d0>)
 80007de:	70da      	strb	r2, [r3, #3]
 80007e0:	e00d      	b.n	80007fe <TIM2_IRQHandler+0x2da>
 80007e2:	bf00      	nop
 80007e4:	48000400 	.word	0x48000400
 80007e8:	200001f9 	.word	0x200001f9
 80007ec:	20000000 	.word	0x20000000
 80007f0:	200001f8 	.word	0x200001f8
 80007f4:	20000008 	.word	0x20000008
//			sprintf (msg, "%s\r\n", play_toggled ? "PLAY" : "STOP");
//			HAL_UART_Transmit (&huart2, (uint8_t *) msg, 6, 100);
		}
	}
	else {
		pressed = false;
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <TIM2_IRQHandler+0x2e4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007fe:	4803      	ldr	r0, [pc, #12]	@ (800080c <TIM2_IRQHandler+0x2e8>)
 8000800:	f003 fc44 	bl	800408c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200001f9 	.word	0x200001f9
 800080c:	200001a4 	.word	0x200001a4

08000810 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <SystemInit+0x20>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800081a:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <SystemInit+0x20>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800086c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000838:	f7ff ffea 	bl	8000810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	@ (8000870 <LoopForever+0x6>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	@ (8000874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	@ (8000878 <LoopForever+0xe>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	@ (8000880 <LoopForever+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000862:	f008 fb65 	bl	8008f30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000866:	f7ff fcaf 	bl	80001c8 <main>

0800086a <LoopForever>:

LoopForever:
    b LoopForever
 800086a:	e7fe      	b.n	800086a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800086c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8000878:	08009004 	.word	0x08009004
  ldr r2, =_sbss
 800087c:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8000880:	200013c4 	.word	0x200013c4

08000884 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_IRQHandler>
	...

08000888 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f92b 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff fdbc 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f943 	bl	8000b5e <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 f90b 	bl	8000b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	@ (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000000c 	.word	0x2000000c
 800090c:	20000014 	.word	0x20000014
 8000910:	20000010 	.word	0x20000010

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x20>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_IncTick+0x24>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <HAL_IncTick+0x24>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000014 	.word	0x20000014
 8000938:	200001fc 	.word	0x200001fc

0800093c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000940:	4b03      	ldr	r3, [pc, #12]	@ (8000950 <HAL_GetTick+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	200001fc 	.word	0x200001fc

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	db0b      	blt.n	80009e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 021f 	and.w	r2, r3, #31
 80009d0:	4907      	ldr	r1, [pc, #28]	@ (80009f0 <__NVIC_EnableIRQ+0x38>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	2001      	movs	r0, #1
 80009da:	fa00 f202 	lsl.w	r2, r0, r2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	@ (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	@ (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	@ 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	@ 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac0:	d301      	bcc.n	8000ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00f      	b.n	8000ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <SysTick_Config+0x40>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f7ff ff8e 	bl	80009f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <SysTick_Config+0x40>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <SysTick_Config+0x40>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff29 	bl	8000954 <__NVIC_SetPriorityGrouping>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b1c:	f7ff ff3e 	bl	800099c <__NVIC_GetPriorityGrouping>
 8000b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	6978      	ldr	r0, [r7, #20]
 8000b28:	f7ff ff8e 	bl	8000a48 <NVIC_EncodePriority>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff5d 	bl	80009f4 <__NVIC_SetPriority>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff31 	bl	80009b8 <__NVIC_EnableIRQ>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffa2 	bl	8000ab0 <SysTick_Config>
 8000b6c:	4603      	mov	r3, r0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b86:	e14e      	b.n	8000e26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 8140 	beq.w	8000e20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d005      	beq.n	8000bb8 <HAL_GPIO_Init+0x40>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d130      	bne.n	8000c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bee:	2201      	movs	r2, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	091b      	lsrs	r3, r3, #4
 8000c04:	f003 0201 	and.w	r2, r3, #1
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d017      	beq.n	8000c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d123      	bne.n	8000caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	08da      	lsrs	r2, r3, #3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3208      	adds	r2, #8
 8000c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	220f      	movs	r2, #15
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	691a      	ldr	r2, [r3, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f003 0307 	and.w	r3, r3, #7
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	08da      	lsrs	r2, r3, #3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3208      	adds	r2, #8
 8000ca4:	6939      	ldr	r1, [r7, #16]
 8000ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0203 	and.w	r2, r3, #3
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 809a 	beq.w	8000e20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cec:	4b55      	ldr	r3, [pc, #340]	@ (8000e44 <HAL_GPIO_Init+0x2cc>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a54      	ldr	r2, [pc, #336]	@ (8000e44 <HAL_GPIO_Init+0x2cc>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b52      	ldr	r3, [pc, #328]	@ (8000e44 <HAL_GPIO_Init+0x2cc>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d04:	4a50      	ldr	r2, [pc, #320]	@ (8000e48 <HAL_GPIO_Init+0x2d0>)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	089b      	lsrs	r3, r3, #2
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d2e:	d013      	beq.n	8000d58 <HAL_GPIO_Init+0x1e0>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a46      	ldr	r2, [pc, #280]	@ (8000e4c <HAL_GPIO_Init+0x2d4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d00d      	beq.n	8000d54 <HAL_GPIO_Init+0x1dc>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a45      	ldr	r2, [pc, #276]	@ (8000e50 <HAL_GPIO_Init+0x2d8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d007      	beq.n	8000d50 <HAL_GPIO_Init+0x1d8>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a44      	ldr	r2, [pc, #272]	@ (8000e54 <HAL_GPIO_Init+0x2dc>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d101      	bne.n	8000d4c <HAL_GPIO_Init+0x1d4>
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x1e2>
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	e004      	b.n	8000d5a <HAL_GPIO_Init+0x1e2>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x1e2>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <HAL_GPIO_Init+0x1e2>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	f002 0203 	and.w	r2, r2, #3
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	4093      	lsls	r3, r2
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d6a:	4937      	ldr	r1, [pc, #220]	@ (8000e48 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d78:	4b37      	ldr	r3, [pc, #220]	@ (8000e58 <HAL_GPIO_Init+0x2e0>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8000e58 <HAL_GPIO_Init+0x2e0>)
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <HAL_GPIO_Init+0x2e0>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dc6:	4a24      	ldr	r2, [pc, #144]	@ (8000e58 <HAL_GPIO_Init+0x2e0>)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <HAL_GPIO_Init+0x2e0>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000df0:	4a19      	ldr	r2, [pc, #100]	@ (8000e58 <HAL_GPIO_Init+0x2e0>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <HAL_GPIO_Init+0x2e0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e58 <HAL_GPIO_Init+0x2e0>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	3301      	adds	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f47f aea9 	bne.w	8000b88 <HAL_GPIO_Init+0x10>
  }
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	48000800 	.word	0x48000800
 8000e54:	48000c00 	.word	0x48000c00
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e001      	b.n	8000e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e0b9      	b.n	8001012 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d106      	bne.n	8000eb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f007 fd86 	bl	80089c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2203      	movs	r2, #3
 8000ebc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fc8e 	bl	80047e6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e03e      	b.n	8000f4e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	440b      	add	r3, r1
 8000ede:	3311      	adds	r3, #17
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ee4:	7bfa      	ldrb	r2, [r7, #15]
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3313      	adds	r3, #19
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	3320      	adds	r3, #32
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	3324      	adds	r3, #36	@ 0x24
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	440b      	add	r3, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d3bb      	bcc.n	8000ed0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e044      	b.n	8000fe8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	791b      	ldrb	r3, [r3, #4]
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3b5      	bcc.n	8000f5e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000ffe:	f003 fc0d 	bl	800481c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_PCD_Start+0x16>
 800102c:	2302      	movs	r3, #2
 800102e:	e016      	b.n	800105e <HAL_PCD_Start+0x44>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f003 fbbb 	bl	80047b8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001042:	2101      	movs	r1, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f007 ff33 	bl	8008eb0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f005 fe78 	bl	8006d44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f005 fe71 	bl	8006d5a <USB_ReadInterrupts>
 8001078:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 fab1 	bl	80015ec <PCD_EP_ISR_Handler>

    return;
 800108a:	e0bd      	b.n	8001208 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001092:	2b00      	cmp	r3, #0
 8001094:	d013      	beq.n	80010be <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010a8:	b292      	uxth	r2, r2
 80010aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f007 fd03 	bl	8008aba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010b4:	2100      	movs	r1, #0
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f8a9 	bl	800120e <HAL_PCD_SetAddress>

    return;
 80010bc:	e0a4      	b.n	8001208 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00c      	beq.n	80010e2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80010da:	b292      	uxth	r2, r2
 80010dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010e0:	e092      	b.n	8001208 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00c      	beq.n	8001106 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010fe:	b292      	uxth	r2, r2
 8001100:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001104:	e080      	b.n	8001208 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d027      	beq.n	8001160 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001118:	b29a      	uxth	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0204 	bic.w	r2, r2, #4
 8001122:	b292      	uxth	r2, r2
 8001124:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001130:	b29a      	uxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0208 	bic.w	r2, r2, #8
 800113a:	b292      	uxth	r2, r2
 800113c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f007 fcf3 	bl	8008b2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001158:	b292      	uxth	r2, r2
 800115a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800115e:	e053      	b.n	8001208 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001166:	2b00      	cmp	r3, #0
 8001168:	d027      	beq.n	80011ba <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0208 	orr.w	r2, r2, #8
 800117c:	b292      	uxth	r2, r2
 800117e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800118a:	b29a      	uxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001194:	b292      	uxth	r2, r2
 8001196:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0204 	orr.w	r2, r2, #4
 80011ac:	b292      	uxth	r2, r2
 80011ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f007 fca0 	bl	8008af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011b8:	e026      	b.n	8001208 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00f      	beq.n	80011e4 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80011d6:	b292      	uxth	r2, r2
 80011d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f007 fc5e 	bl	8008a9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011e2:	e011      	b.n	8001208 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00c      	beq.n	8001208 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001200:	b292      	uxth	r2, r2
 8001202:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001206:	bf00      	nop
  }
}
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_PCD_SetAddress+0x1a>
 8001224:	2302      	movs	r3, #2
 8001226:	e012      	b.n	800124e <HAL_PCD_SetAddress+0x40>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	78fa      	ldrb	r2, [r7, #3]
 8001234:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f005 fd6c 	bl	8006d1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	4608      	mov	r0, r1
 8001260:	4611      	mov	r1, r2
 8001262:	461a      	mov	r2, r3
 8001264:	4603      	mov	r3, r0
 8001266:	70fb      	strb	r3, [r7, #3]
 8001268:	460b      	mov	r3, r1
 800126a:	803b      	strh	r3, [r7, #0]
 800126c:	4613      	mov	r3, r2
 800126e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001278:	2b00      	cmp	r3, #0
 800127a:	da0e      	bge.n	800129a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	f003 0207 	and.w	r2, r3, #7
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	3310      	adds	r3, #16
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2201      	movs	r2, #1
 8001296:	705a      	strb	r2, [r3, #1]
 8001298:	e00e      	b.n	80012b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	f003 0207 	and.w	r2, r3, #7
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80012c4:	883a      	ldrh	r2, [r7, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	78ba      	ldrb	r2, [r7, #2]
 80012ce:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012d0:	78bb      	ldrb	r3, [r7, #2]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d102      	bne.n	80012dc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_PCD_EP_Open+0x94>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e00e      	b.n	8001308 <HAL_PCD_EP_Open+0xb2>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68f9      	ldr	r1, [r7, #12]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 faad 	bl	8004858 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001306:	7afb      	ldrb	r3, [r7, #11]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800131c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001320:	2b00      	cmp	r3, #0
 8001322:	da0e      	bge.n	8001342 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	f003 0207 	and.w	r2, r3, #7
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	3310      	adds	r3, #16
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2201      	movs	r2, #1
 800133e:	705a      	strb	r2, [r3, #1]
 8001340:	e00e      	b.n	8001360 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	f003 0207 	and.w	r2, r3, #7
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	b2da      	uxtb	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_PCD_EP_Close+0x6a>
 8001376:	2302      	movs	r3, #2
 8001378:	e00e      	b.n	8001398 <HAL_PCD_EP_Close+0x88>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68f9      	ldr	r1, [r7, #12]
 8001388:	4618      	mov	r0, r3
 800138a:	f003 fe29 	bl	8004fe0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	460b      	mov	r3, r1
 80013ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 0207 	and.w	r2, r3, #7
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2200      	movs	r2, #0
 80013de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e0:	7afb      	ldrb	r3, [r7, #11]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6979      	ldr	r1, [r7, #20]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 ffe1 	bl	80053ba <USB_EPStartXfer>

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	f003 0207 	and.w	r2, r3, #7
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001424:	681b      	ldr	r3, [r3, #0]
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	460b      	mov	r3, r1
 8001440:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	f003 0207 	and.w	r2, r3, #7
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	3310      	adds	r3, #16
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2201      	movs	r2, #1
 800147c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	b2da      	uxtb	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6979      	ldr	r1, [r7, #20]
 8001490:	4618      	mov	r0, r3
 8001492:	f003 ff92 	bl	80053ba <USB_EPStartXfer>

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	7912      	ldrb	r2, [r2, #4]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e03e      	b.n	800153c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da0e      	bge.n	80014e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	f003 0207 	and.w	r2, r3, #7
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	3310      	adds	r3, #16
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	705a      	strb	r2, [r3, #1]
 80014e2:	e00c      	b.n	80014fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2201      	movs	r2, #1
 8001502:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2da      	uxtb	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_PCD_EP_SetStall+0x7e>
 800151a:	2302      	movs	r3, #2
 800151c:	e00e      	b.n	800153c <HAL_PCD_EP_SetStall+0x9c>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	4618      	mov	r0, r3
 800152e:	f005 faf6 	bl	8006b1e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	7912      	ldrb	r2, [r2, #4]
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e040      	b.n	80015e4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001566:	2b00      	cmp	r3, #0
 8001568:	da0e      	bge.n	8001588 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	f003 0207 	and.w	r2, r3, #7
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	3310      	adds	r3, #16
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2201      	movs	r2, #1
 8001584:	705a      	strb	r2, [r3, #1]
 8001586:	e00e      	b.n	80015a6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	f003 0207 	and.w	r2, r3, #7
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_PCD_EP_ClrStall+0x82>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e00e      	b.n	80015e4 <HAL_PCD_EP_ClrStall+0xa0>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68f9      	ldr	r1, [r7, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 faf3 	bl	8006bc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b096      	sub	sp, #88	@ 0x58
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015f4:	e3ad      	b.n	8001d52 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015fe:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001602:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8001610:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001614:	2b00      	cmp	r3, #0
 8001616:	f040 816f 	bne.w	80018f8 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800161a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b00      	cmp	r3, #0
 8001624:	d14c      	bne.n	80016c0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001636:	81fb      	strh	r3, [r7, #14]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	89fb      	ldrh	r3, [r7, #14]
 800163e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001646:	b29b      	uxth	r3, r3
 8001648:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3310      	adds	r3, #16
 800164e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001658:	b29b      	uxth	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	4413      	add	r3, r2
 800166a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001676:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	441a      	add	r2, r3
 8001682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001684:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001686:	2100      	movs	r1, #0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f007 f9ee 	bl	8008a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7b1b      	ldrb	r3, [r3, #12]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 835c 	beq.w	8001d52 <PCD_EP_ISR_Handler+0x766>
 800169a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 8357 	bne.w	8001d52 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7b1b      	ldrb	r3, [r3, #12]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	731a      	strb	r2, [r3, #12]
 80016be:	e348      	b.n	8001d52 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016c6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80016d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d032      	beq.n	8001744 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4413      	add	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001704:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001712:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001716:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001718:	b29b      	uxth	r3, r3
 800171a:	f005 fb70 	bl	8006dfe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b29a      	uxth	r2, r3
 8001726:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800172a:	4013      	ands	r3, r2
 800172c:	823b      	strh	r3, [r7, #16]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	8a3a      	ldrh	r2, [r7, #16]
 8001734:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001738:	b292      	uxth	r2, r2
 800173a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f007 f967 	bl	8008a10 <HAL_PCD_SetupStageCallback>
 8001742:	e306      	b.n	8001d52 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001744:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001748:	2b00      	cmp	r3, #0
 800174a:	f280 8302 	bge.w	8001d52 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b29a      	uxth	r2, r3
 8001756:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800175a:	4013      	ands	r3, r2
 800175c:	83fb      	strh	r3, [r7, #30]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	8bfa      	ldrh	r2, [r7, #30]
 8001764:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001768:	b292      	uxth	r2, r2
 800176a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001774:	b29b      	uxth	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	4413      	add	r3, r2
 8001786:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001792:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d019      	beq.n	80017d0 <PCD_EP_ISR_Handler+0x1e4>
 800179c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017aa:	6959      	ldr	r1, [r3, #20]
 80017ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	f005 fb22 	bl	8006dfe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	441a      	add	r2, r3
 80017c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017c8:	2100      	movs	r1, #0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f007 f932 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80017da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80017de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 82b5 	bne.w	8001d52 <PCD_EP_ISR_Handler+0x766>
 80017e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80017ec:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80017f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80017f4:	f000 82ad 	beq.w	8001d52 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001806:	b29b      	uxth	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4413      	add	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001822:	b29a      	uxth	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	801a      	strh	r2, [r3, #0]
 8001828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10a      	bne.n	8001846 <PCD_EP_ISR_Handler+0x25a>
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800183a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800183e:	b29a      	uxth	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	801a      	strh	r2, [r3, #0]
 8001844:	e039      	b.n	80018ba <PCD_EP_ISR_Handler+0x2ce>
 8001846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b3e      	cmp	r3, #62	@ 0x3e
 800184c:	d818      	bhi.n	8001880 <PCD_EP_ISR_Handler+0x294>
 800184e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	647b      	str	r3, [r7, #68]	@ 0x44
 8001856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <PCD_EP_ISR_Handler+0x27c>
 8001862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001864:	3301      	adds	r3, #1
 8001866:	647b      	str	r3, [r7, #68]	@ 0x44
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29a      	uxth	r2, r3
 800186e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001870:	b29b      	uxth	r3, r3
 8001872:	029b      	lsls	r3, r3, #10
 8001874:	b29b      	uxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	b29a      	uxth	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	801a      	strh	r2, [r3, #0]
 800187e:	e01c      	b.n	80018ba <PCD_EP_ISR_Handler+0x2ce>
 8001880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	095b      	lsrs	r3, r3, #5
 8001886:	647b      	str	r3, [r7, #68]	@ 0x44
 8001888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <PCD_EP_ISR_Handler+0x2ae>
 8001894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001896:	3b01      	subs	r3, #1
 8001898:	647b      	str	r3, [r7, #68]	@ 0x44
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	029b      	lsls	r3, r3, #10
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018ca:	827b      	strh	r3, [r7, #18]
 80018cc:	8a7b      	ldrh	r3, [r7, #18]
 80018ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80018d2:	827b      	strh	r3, [r7, #18]
 80018d4:	8a7b      	ldrh	r3, [r7, #18]
 80018d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80018da:	827b      	strh	r3, [r7, #18]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	8a7b      	ldrh	r3, [r7, #18]
 80018e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80018e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	8013      	strh	r3, [r2, #0]
 80018f6:	e22c      	b.n	8001d52 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800190c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001910:	2b00      	cmp	r3, #0
 8001912:	f280 80f6 	bge.w	8001b02 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	b29a      	uxth	r2, r3
 8001928:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800192c:	4013      	ands	r3, r2
 800192e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001944:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001948:	b292      	uxth	r2, r2
 800194a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800194c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001964:	7b1b      	ldrb	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d123      	bne.n	80019b2 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001972:	b29b      	uxth	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	4413      	add	r3, r2
 8001984:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800198e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001992:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 808e 	beq.w	8001ab8 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a2:	6959      	ldr	r1, [r3, #20]
 80019a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a6:	88da      	ldrh	r2, [r3, #6]
 80019a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80019ac:	f005 fa27 	bl	8006dfe <USB_ReadPMA>
 80019b0:	e082      	b.n	8001ab8 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b4:	78db      	ldrb	r3, [r3, #3]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d10a      	bne.n	80019d0 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80019be:	461a      	mov	r2, r3
 80019c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f9d3 	bl	8001d6e <HAL_PCD_EP_DB_Receive>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80019ce:	e073      	b.n	8001ab8 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80019e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ea:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	441a      	add	r2, r3
 80019fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d022      	beq.n	8001a74 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a52:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001a56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d02c      	beq.n	8001ab8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a64:	6959      	ldr	r1, [r3, #20]
 8001a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a68:	891a      	ldrh	r2, [r3, #8]
 8001a6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a6e:	f005 f9c6 	bl	8006dfe <USB_ReadPMA>
 8001a72:	e021      	b.n	8001ab8 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a98:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001a9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d009      	beq.n	8001ab8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aaa:	6959      	ldr	r1, [r3, #20]
 8001aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aae:	895a      	ldrh	r2, [r3, #10]
 8001ab0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ab4:	f005 f9a3 	bl	8006dfe <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aba:	69da      	ldr	r2, [r3, #28]
 8001abc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ac0:	441a      	add	r2, r3
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ace:	441a      	add	r2, r3
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <PCD_EP_ISR_Handler+0x4fc>
 8001adc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d206      	bcs.n	8001af6 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f006 ffa0 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
 8001af4:	e005      	b.n	8001b02 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 fc5c 	bl	80053ba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b02:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8121 	beq.w	8001d52 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b10:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	3310      	adds	r3, #16
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	441a      	add	r2, r3
 8001b50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b62:	78db      	ldrb	r3, [r3, #3]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	f040 80a2 	bne.w	8001cae <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8001b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b72:	7b1b      	ldrb	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 8093 	beq.w	8001ca0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d046      	beq.n	8001c14 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b88:	785b      	ldrb	r3, [r3, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d126      	bne.n	8001bdc <PCD_EP_ISR_Handler+0x5f0>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba2:	4413      	add	r3, r2
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	00da      	lsls	r2, r3, #3
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	4413      	add	r3, r2
 8001bb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001bb4:	623b      	str	r3, [r7, #32]
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	801a      	strh	r2, [r3, #0]
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	801a      	strh	r2, [r3, #0]
 8001bda:	e061      	b.n	8001ca0 <PCD_EP_ISR_Handler+0x6b4>
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bde:	785b      	ldrb	r3, [r3, #1]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d15d      	bne.n	8001ca0 <PCD_EP_ISR_Handler+0x6b4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf8:	4413      	add	r3, r2
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	00da      	lsls	r2, r3, #3
 8001c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c04:	4413      	add	r3, r2
 8001c06:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c0e:	2200      	movs	r2, #0
 8001c10:	801a      	strh	r2, [r3, #0]
 8001c12:	e045      	b.n	8001ca0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1c:	785b      	ldrb	r3, [r3, #1]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d126      	bne.n	8001c70 <PCD_EP_ISR_Handler+0x684>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c36:	4413      	add	r3, r2
 8001c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	00da      	lsls	r2, r3, #3
 8001c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c42:	4413      	add	r3, r2
 8001c44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c58:	801a      	strh	r2, [r3, #0]
 8001c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	e017      	b.n	8001ca0 <PCD_EP_ISR_Handler+0x6b4>
 8001c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d113      	bne.n	8001ca0 <PCD_EP_ISR_Handler+0x6b4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c86:	4413      	add	r3, r2
 8001c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	00da      	lsls	r2, r3, #3
 8001c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c92:	4413      	add	r3, r2
 8001c94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f006 fedf 	bl	8008a6a <HAL_PCD_DataInStageCallback>
 8001cac:	e051      	b.n	8001d52 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001cae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d144      	bne.n	8001d44 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cde:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d907      	bls.n	8001cfe <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8001cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfa:	619a      	str	r2, [r3, #24]
 8001cfc:	e002      	b.n	8001d04 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d106      	bne.n	8001d1a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f006 fea9 	bl	8008a6a <HAL_PCD_DataInStageCallback>
 8001d18:	e01b      	b.n	8001d52 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d22:	441a      	add	r2, r3
 8001d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d26:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d30:	441a      	add	r2, r3
 8001d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d34:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 fb3c 	bl	80053ba <USB_EPStartXfer>
 8001d42:	e006      	b.n	8001d52 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001d44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f917 	bl	8001f80 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f6ff ac49 	blt.w	80015f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3758      	adds	r7, #88	@ 0x58
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b088      	sub	sp, #32
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d07c      	beq.n	8001e80 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001daa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	8b7b      	ldrh	r3, [r7, #26]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d306      	bcc.n	8001dc4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	8b7b      	ldrh	r3, [r7, #26]
 8001dbc:	1ad2      	subs	r2, r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	619a      	str	r2, [r3, #24]
 8001dc2:	e002      	b.n	8001dca <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d123      	bne.n	8001e1a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dec:	833b      	strh	r3, [r7, #24]
 8001dee:	8b3b      	ldrh	r3, [r7, #24]
 8001df0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001df4:	833b      	strh	r3, [r7, #24]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	441a      	add	r2, r3
 8001e04:	8b3b      	ldrh	r3, [r7, #24]
 8001e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01f      	beq.n	8001e64 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3e:	82fb      	strh	r3, [r7, #22]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	441a      	add	r2, r3
 8001e4e:	8afb      	ldrh	r3, [r7, #22]
 8001e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e64:	8b7b      	ldrh	r3, [r7, #26]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8085 	beq.w	8001f76 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	6959      	ldr	r1, [r3, #20]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	891a      	ldrh	r2, [r3, #8]
 8001e78:	8b7b      	ldrh	r3, [r7, #26]
 8001e7a:	f004 ffc0 	bl	8006dfe <USB_ReadPMA>
 8001e7e:	e07a      	b.n	8001f76 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	8b7b      	ldrh	r3, [r7, #26]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d306      	bcc.n	8001ebe <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	699a      	ldr	r2, [r3, #24]
 8001eb4:	8b7b      	ldrh	r3, [r7, #26]
 8001eb6:	1ad2      	subs	r2, r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	619a      	str	r2, [r3, #24]
 8001ebc:	e002      	b.n	8001ec4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d123      	bne.n	8001f14 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ee6:	83fb      	strh	r3, [r7, #30]
 8001ee8:	8bfb      	ldrh	r3, [r7, #30]
 8001eea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001eee:	83fb      	strh	r3, [r7, #30]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	441a      	add	r2, r3
 8001efe:	8bfb      	ldrh	r3, [r7, #30]
 8001f00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d11f      	bne.n	8001f5e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f38:	83bb      	strh	r3, [r7, #28]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	441a      	add	r2, r3
 8001f48:	8bbb      	ldrh	r3, [r7, #28]
 8001f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f5e:	8b7b      	ldrh	r3, [r7, #26]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	6959      	ldr	r1, [r3, #20]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	895a      	ldrh	r2, [r3, #10]
 8001f70:	8b7b      	ldrh	r3, [r7, #26]
 8001f72:	f004 ff44 	bl	8006dfe <USB_ReadPMA>
    }
  }

  return count;
 8001f76:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0a4      	sub	sp, #144	@ 0x90
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 81db 	beq.w	8002350 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fbe:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d907      	bls.n	8001fde <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8001fd6:	1ad2      	subs	r2, r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	619a      	str	r2, [r3, #24]
 8001fdc:	e002      	b.n	8001fe4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f040 80b9 	bne.w	8002160 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	785b      	ldrb	r3, [r3, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d126      	bne.n	8002044 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002004:	b29b      	uxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200a:	4413      	add	r3, r2
 800200c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	00da      	lsls	r2, r3, #3
 8002014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002016:	4413      	add	r3, r2
 8002018:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800201c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800201e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002028:	b29a      	uxth	r2, r3
 800202a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203c:	b29a      	uxth	r2, r3
 800203e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	e01a      	b.n	800207a <HAL_PCD_EP_DB_Transmit+0xfa>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	785b      	ldrb	r3, [r3, #1]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d116      	bne.n	800207a <HAL_PCD_EP_DB_Transmit+0xfa>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	637b      	str	r3, [r7, #52]	@ 0x34
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002060:	4413      	add	r3, r2
 8002062:	637b      	str	r3, [r7, #52]	@ 0x34
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	00da      	lsls	r2, r3, #3
 800206a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800206c:	4413      	add	r3, r2
 800206e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
 8002074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002076:	2200      	movs	r2, #0
 8002078:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	785b      	ldrb	r3, [r3, #1]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d126      	bne.n	80020d6 <HAL_PCD_EP_DB_Transmit+0x156>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002096:	b29b      	uxth	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	00da      	lsls	r2, r3, #3
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	4413      	add	r3, r2
 80020aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	801a      	strh	r2, [r3, #0]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	e017      	b.n	8002106 <HAL_PCD_EP_DB_Transmit+0x186>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	785b      	ldrb	r3, [r3, #1]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d113      	bne.n	8002106 <HAL_PCD_EP_DB_Transmit+0x186>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	4413      	add	r3, r2
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	00da      	lsls	r2, r3, #3
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	4413      	add	r3, r2
 80020fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020fe:	623b      	str	r3, [r7, #32]
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	2200      	movs	r2, #0
 8002104:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f006 fcac 	bl	8008a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 82fa 	beq.w	8002712 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002138:	82fb      	strh	r3, [r7, #22]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	441a      	add	r2, r3
 8002148:	8afb      	ldrh	r3, [r7, #22]
 800214a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800214e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002152:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800215a:	b29b      	uxth	r3, r3
 800215c:	8013      	strh	r3, [r2, #0]
 800215e:	e2d8      	b.n	8002712 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d021      	beq.n	80021ae <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002184:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	441a      	add	r2, r3
 8002196:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800219a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800219e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	f040 82ac 	bne.w	8002712 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80021c2:	441a      	add	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80021d0:	441a      	add	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	6a1a      	ldr	r2, [r3, #32]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d30b      	bcc.n	80021fa <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	6a1a      	ldr	r2, [r3, #32]
 80021ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	621a      	str	r2, [r3, #32]
 80021f8:	e017      	b.n	800222a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d108      	bne.n	8002214 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002202:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002206:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002212:	e00a      	b.n	800222a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	785b      	ldrb	r3, [r3, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d165      	bne.n	80022fe <HAL_PCD_EP_DB_Transmit+0x37e>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002246:	4413      	add	r3, r2
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	00da      	lsls	r2, r3, #3
 8002250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002252:	4413      	add	r3, r2
 8002254:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002258:	63bb      	str	r3, [r7, #56]	@ 0x38
 800225a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002264:	b29a      	uxth	r2, r3
 8002266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002268:	801a      	strh	r2, [r3, #0]
 800226a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10a      	bne.n	8002288 <HAL_PCD_EP_DB_Transmit+0x308>
 8002272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800227c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002280:	b29a      	uxth	r2, r3
 8002282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002284:	801a      	strh	r2, [r3, #0]
 8002286:	e057      	b.n	8002338 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002288:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800228c:	2b3e      	cmp	r3, #62	@ 0x3e
 800228e:	d818      	bhi.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x342>
 8002290:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002298:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_PCD_EP_DB_Transmit+0x32a>
 80022a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022a6:	3301      	adds	r3, #1
 80022a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	029b      	lsls	r3, r3, #10
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	e03a      	b.n	8002338 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80022c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <HAL_PCD_EP_DB_Transmit+0x35c>
 80022d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022d8:	3b01      	subs	r3, #1
 80022da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022fa:	801a      	strh	r2, [r3, #0]
 80022fc:	e01c      	b.n	8002338 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d118      	bne.n	8002338 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	647b      	str	r3, [r7, #68]	@ 0x44
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002314:	b29b      	uxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231a:	4413      	add	r3, r2
 800231c:	647b      	str	r3, [r7, #68]	@ 0x44
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	00da      	lsls	r2, r3, #3
 8002324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002326:	4413      	add	r3, r2
 8002328:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800232c:	643b      	str	r3, [r7, #64]	@ 0x40
 800232e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002332:	b29a      	uxth	r2, r3
 8002334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002336:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	6959      	ldr	r1, [r3, #20]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	891a      	ldrh	r2, [r3, #8]
 8002344:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002348:	b29b      	uxth	r3, r3
 800234a:	f004 fd16 	bl	8006d7a <USB_WritePMA>
 800234e:	e1e0      	b.n	8002712 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	4413      	add	r3, r2
 800236a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002374:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002380:	429a      	cmp	r2, r3
 8002382:	d307      	bcc.n	8002394 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800238c:	1ad2      	subs	r2, r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	619a      	str	r2, [r3, #24]
 8002392:	e002      	b.n	800239a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 80c0 	bne.w	8002524 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	785b      	ldrb	r3, [r3, #1]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d126      	bne.n	80023fa <HAL_PCD_EP_DB_Transmit+0x47a>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023c0:	4413      	add	r3, r2
 80023c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	00da      	lsls	r2, r3, #3
 80023ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023cc:	4413      	add	r3, r2
 80023ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80023d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023de:	b29a      	uxth	r2, r3
 80023e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e2:	801a      	strh	r2, [r3, #0]
 80023e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023f6:	801a      	strh	r2, [r3, #0]
 80023f8:	e01a      	b.n	8002430 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	785b      	ldrb	r3, [r3, #1]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d116      	bne.n	8002430 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	667b      	str	r3, [r7, #100]	@ 0x64
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002410:	b29b      	uxth	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002416:	4413      	add	r3, r2
 8002418:	667b      	str	r3, [r7, #100]	@ 0x64
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	00da      	lsls	r2, r3, #3
 8002420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002422:	4413      	add	r3, r2
 8002424:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002428:	663b      	str	r3, [r7, #96]	@ 0x60
 800242a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800242c:	2200      	movs	r2, #0
 800242e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	677b      	str	r3, [r7, #116]	@ 0x74
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d12b      	bne.n	8002496 <HAL_PCD_EP_DB_Transmit+0x516>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800244c:	b29b      	uxth	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002452:	4413      	add	r3, r2
 8002454:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	00da      	lsls	r2, r3, #3
 800245c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800245e:	4413      	add	r3, r2
 8002460:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002468:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002474:	b29a      	uxth	r2, r3
 8002476:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800247a:	801a      	strh	r2, [r3, #0]
 800247c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800248c:	b29a      	uxth	r2, r3
 800248e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002492:	801a      	strh	r2, [r3, #0]
 8002494:	e017      	b.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x546>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d113      	bne.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x546>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ac:	4413      	add	r3, r2
 80024ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	00da      	lsls	r2, r3, #3
 80024b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024b8:	4413      	add	r3, r2
 80024ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024be:	673b      	str	r3, [r7, #112]	@ 0x70
 80024c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024c2:	2200      	movs	r2, #0
 80024c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f006 facc 	bl	8008a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 811a 	bne.w	8002712 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	441a      	add	r2, r3
 800250a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800250e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800251a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800251e:	b29b      	uxth	r3, r3
 8002520:	8013      	strh	r3, [r2, #0]
 8002522:	e0f6      	b.n	8002712 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d121      	bne.n	8002572 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002548:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800255e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002566:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800256a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002578:	2b01      	cmp	r3, #1
 800257a:	f040 80ca 	bne.w	8002712 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002586:	441a      	add	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002594:	441a      	add	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6a1a      	ldr	r2, [r3, #32]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d30b      	bcc.n	80025be <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6a1a      	ldr	r2, [r3, #32]
 80025b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025b6:	1ad2      	subs	r2, r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	621a      	str	r2, [r3, #32]
 80025bc:	e017      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80025c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80025d6:	e00a      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2200      	movs	r2, #0
 80025e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d165      	bne.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x748>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002610:	4413      	add	r3, r2
 8002612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	00da      	lsls	r2, r3, #3
 800261a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800261c:	4413      	add	r3, r2
 800261e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002622:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002624:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262e:	b29a      	uxth	r2, r3
 8002630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <HAL_PCD_EP_DB_Transmit+0x6d2>
 800263c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264a:	b29a      	uxth	r2, r3
 800264c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	e054      	b.n	80026fc <HAL_PCD_EP_DB_Transmit+0x77c>
 8002652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002656:	2b3e      	cmp	r3, #62	@ 0x3e
 8002658:	d818      	bhi.n	800268c <HAL_PCD_EP_DB_Transmit+0x70c>
 800265a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_PCD_EP_DB_Transmit+0x6f4>
 800266e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002670:	3301      	adds	r3, #1
 8002672:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002674:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29a      	uxth	r2, r3
 800267a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800267c:	b29b      	uxth	r3, r3
 800267e:	029b      	lsls	r3, r3, #10
 8002680:	b29b      	uxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b29a      	uxth	r2, r3
 8002686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002688:	801a      	strh	r2, [r3, #0]
 800268a:	e037      	b.n	80026fc <HAL_PCD_EP_DB_Transmit+0x77c>
 800268c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x726>
 80026a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026a2:	3b01      	subs	r3, #1
 80026a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c4:	801a      	strh	r2, [r3, #0]
 80026c6:	e019      	b.n	80026fc <HAL_PCD_EP_DB_Transmit+0x77c>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	785b      	ldrb	r3, [r3, #1]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d115      	bne.n	80026fc <HAL_PCD_EP_DB_Transmit+0x77c>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026de:	4413      	add	r3, r2
 80026e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	00da      	lsls	r2, r3, #3
 80026e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ea:	4413      	add	r3, r2
 80026ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80026f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80026f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026fa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6959      	ldr	r1, [r3, #20]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	895a      	ldrh	r2, [r3, #10]
 8002708:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270c:	b29b      	uxth	r3, r3
 800270e:	f004 fb34 	bl	8006d7a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800272c:	82bb      	strh	r3, [r7, #20]
 800272e:	8abb      	ldrh	r3, [r7, #20]
 8002730:	f083 0310 	eor.w	r3, r3, #16
 8002734:	82bb      	strh	r3, [r7, #20]
 8002736:	8abb      	ldrh	r3, [r7, #20]
 8002738:	f083 0320 	eor.w	r3, r3, #32
 800273c:	82bb      	strh	r3, [r7, #20]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	441a      	add	r2, r3
 800274c:	8abb      	ldrh	r3, [r7, #20]
 800274e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800275a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800275e:	b29b      	uxth	r3, r3
 8002760:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3790      	adds	r7, #144	@ 0x90
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	817b      	strh	r3, [r7, #10]
 800277a:	4613      	mov	r3, r2
 800277c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278a:	897b      	ldrh	r3, [r7, #10]
 800278c:	f003 0207 	and.w	r2, r3, #7
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	3310      	adds	r3, #16
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4413      	add	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	e009      	b.n	80027b6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027a2:	897a      	ldrh	r2, [r7, #10]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027b6:	893b      	ldrh	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2200      	movs	r2, #0
 80027c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	80da      	strh	r2, [r3, #6]
 80027ca:	e00b      	b.n	80027e4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2201      	movs	r2, #1
 80027d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	b29a      	uxth	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002800:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002804:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	f001 b823 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 817d 	beq.w	8002b2a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002830:	4bbc      	ldr	r3, [pc, #752]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b04      	cmp	r3, #4
 800283a:	d00c      	beq.n	8002856 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800283c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b08      	cmp	r3, #8
 8002846:	d15c      	bne.n	8002902 <HAL_RCC_OscConfig+0x10e>
 8002848:	4bb6      	ldr	r3, [pc, #728]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002854:	d155      	bne.n	8002902 <HAL_RCC_OscConfig+0x10e>
 8002856:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800285a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800286a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d102      	bne.n	8002888 <HAL_RCC_OscConfig+0x94>
 8002882:	4ba8      	ldr	r3, [pc, #672]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	e015      	b.n	80028b4 <HAL_RCC_OscConfig+0xc0>
 8002888:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800288c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800289c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028a0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80028a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80028b0:	4b9c      	ldr	r3, [pc, #624]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028b8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80028bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80028c0:	fa92 f2a2 	rbit	r2, r2
 80028c4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80028c8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80028cc:	fab2 f282 	clz	r2, r2
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	f042 0220 	orr.w	r2, r2, #32
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f002 021f 	and.w	r2, r2, #31
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 811f 	beq.w	8002b28 <HAL_RCC_OscConfig+0x334>
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 8116 	bne.w	8002b28 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f000 bfaf 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x12e>
 8002914:	4b83      	ldr	r3, [pc, #524]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a82      	ldr	r2, [pc, #520]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e036      	b.n	8002990 <HAL_RCC_OscConfig+0x19c>
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x158>
 8002932:	4b7c      	ldr	r3, [pc, #496]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7b      	ldr	r2, [pc, #492]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b79      	ldr	r3, [pc, #484]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a78      	ldr	r2, [pc, #480]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002944:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e021      	b.n	8002990 <HAL_RCC_OscConfig+0x19c>
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x184>
 800295e:	4b71      	ldr	r3, [pc, #452]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a70      	ldr	r2, [pc, #448]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002964:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a6d      	ldr	r2, [pc, #436]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0x19c>
 8002978:	4b6a      	ldr	r3, [pc, #424]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a69      	ldr	r2, [pc, #420]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 800297e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b67      	ldr	r3, [pc, #412]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a66      	ldr	r2, [pc, #408]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 800298a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800298e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002990:	4b64      	ldr	r3, [pc, #400]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	f023 020f 	bic.w	r2, r3, #15
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	495f      	ldr	r1, [pc, #380]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d059      	beq.n	8002a6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fd ffbf 	bl	800093c <HAL_GetTick>
 80029be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7fd ffba 	bl	800093c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b64      	cmp	r3, #100	@ 0x64
 80029d2:	d902      	bls.n	80029da <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	f000 bf43 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 80029da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029de:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80029ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_OscConfig+0x218>
 8002a06:	4b47      	ldr	r3, [pc, #284]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e015      	b.n	8002a38 <HAL_RCC_OscConfig+0x244>
 8002a0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a10:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002a20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a24:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002a28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a34:	4b3b      	ldr	r3, [pc, #236]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a3c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002a40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002a44:	fa92 f2a2 	rbit	r2, r2
 8002a48:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002a4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002a50:	fab2 f282 	clz	r2, r2
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f042 0220 	orr.w	r2, r2, #32
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f002 021f 	and.w	r2, r2, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f202 	lsl.w	r2, r1, r2
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ab      	beq.n	80029c4 <HAL_RCC_OscConfig+0x1d0>
 8002a6c:	e05d      	b.n	8002b2a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fd ff65 	bl	800093c <HAL_GetTick>
 8002a72:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fd ff60 	bl	800093c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	@ 0x64
 8002a86:	d902      	bls.n	8002a8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	f000 bee9 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 8002a8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a92:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002aa2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d102      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2cc>
 8002aba:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	e015      	b.n	8002aec <HAL_RCC_OscConfig+0x2f8>
 8002ac0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ac4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002ad4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ad8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002adc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b24 <HAL_RCC_OscConfig+0x330>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002af0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002af4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002af8:	fa92 f2a2 	rbit	r2, r2
 8002afc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002b00:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002b04:	fab2 f282 	clz	r2, r2
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	f042 0220 	orr.w	r2, r2, #32
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f002 021f 	and.w	r2, r2, #31
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ab      	bne.n	8002a78 <HAL_RCC_OscConfig+0x284>
 8002b20:	e003      	b.n	8002b2a <HAL_RCC_OscConfig+0x336>
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 817d 	beq.w	8002e3a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b40:	4ba6      	ldr	r3, [pc, #664]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b4c:	4ba3      	ldr	r3, [pc, #652]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d172      	bne.n	8002c3e <HAL_RCC_OscConfig+0x44a>
 8002b58:	4ba0      	ldr	r3, [pc, #640]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d16c      	bne.n	8002c3e <HAL_RCC_OscConfig+0x44a>
 8002b64:	2302      	movs	r3, #2
 8002b66:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002b76:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_OscConfig+0x3a0>
 8002b8e:	4b93      	ldr	r3, [pc, #588]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e013      	b.n	8002bbc <HAL_RCC_OscConfig+0x3c8>
 8002b94:	2302      	movs	r3, #2
 8002b96:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002bac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002bb8:	4b88      	ldr	r3, [pc, #544]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002bc2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002bc6:	fa92 f2a2 	rbit	r2, r2
 8002bca:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002bce:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCC_OscConfig+0x410>
 8002bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d002      	beq.n	8002c04 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f000 be2e 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b75      	ldr	r3, [pc, #468]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	21f8      	movs	r1, #248	@ 0xf8
 8002c1a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002c22:	fa91 f1a1 	rbit	r1, r1
 8002c26:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002c2a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002c2e:	fab1 f181 	clz	r1, r1
 8002c32:	b2c9      	uxtb	r1, r1
 8002c34:	408b      	lsls	r3, r1
 8002c36:	4969      	ldr	r1, [pc, #420]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3c:	e0fd      	b.n	8002e3a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8088 	beq.w	8002d60 <HAL_RCC_OscConfig+0x56c>
 8002c50:	2301      	movs	r3, #1
 8002c52:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002c62:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	461a      	mov	r2, r3
 8002c78:	2301      	movs	r3, #1
 8002c7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fd fe5e 	bl	800093c <HAL_GetTick>
 8002c80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c86:	f7fd fe59 	bl	800093c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d902      	bls.n	8002c9c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	f000 bde2 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002cae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d102      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4d8>
 8002cc6:	4b45      	ldr	r3, [pc, #276]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	e013      	b.n	8002cf4 <HAL_RCC_OscConfig+0x500>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002ce4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002cfa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002cfe:	fa92 f2a2 	rbit	r2, r2
 8002d02:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002d06:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002d0a:	fab2 f282 	clz	r2, r2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f042 0220 	orr.w	r2, r2, #32
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f002 021f 	and.w	r2, r2, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0af      	beq.n	8002c86 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b2d      	ldr	r3, [pc, #180]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	21f8      	movs	r1, #248	@ 0xf8
 8002d3c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002d44:	fa91 f1a1 	rbit	r1, r1
 8002d48:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002d4c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002d50:	fab1 f181 	clz	r1, r1
 8002d54:	b2c9      	uxtb	r1, r1
 8002d56:	408b      	lsls	r3, r1
 8002d58:	4920      	ldr	r1, [pc, #128]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
 8002d5e:	e06c      	b.n	8002e3a <HAL_RCC_OscConfig+0x646>
 8002d60:	2301      	movs	r3, #1
 8002d62:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002d72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	461a      	mov	r2, r3
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fd fdd6 	bl	800093c <HAL_GetTick>
 8002d90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fd fdd1 	bl	800093c <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d902      	bls.n	8002dac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	f000 bd5a 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d104      	bne.n	8002de0 <HAL_RCC_OscConfig+0x5ec>
 8002dd6:	4b01      	ldr	r3, [pc, #4]	@ (8002ddc <HAL_RCC_OscConfig+0x5e8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	e015      	b.n	8002e08 <HAL_RCC_OscConfig+0x614>
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	2302      	movs	r3, #2
 8002de2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002df2:	2302      	movs	r3, #2
 8002df4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002df8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002e04:	4bc8      	ldr	r3, [pc, #800]	@ (8003128 <HAL_RCC_OscConfig+0x934>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002e0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002e12:	fa92 f2a2 	rbit	r2, r2
 8002e16:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002e1a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002e1e:	fab2 f282 	clz	r2, r2
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f042 0220 	orr.w	r2, r2, #32
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	f002 021f 	and.w	r2, r2, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ad      	bne.n	8002d96 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8110 	beq.w	8003070 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d079      	beq.n	8002f54 <HAL_RCC_OscConfig+0x760>
 8002e60:	2301      	movs	r3, #1
 8002e62:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4bab      	ldr	r3, [pc, #684]	@ (800312c <HAL_RCC_OscConfig+0x938>)
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	2301      	movs	r3, #1
 8002e88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7fd fd57 	bl	800093c <HAL_GetTick>
 8002e8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e94:	f7fd fd52 	bl	800093c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d902      	bls.n	8002eaa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	f000 bcdb 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ecc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ee8:	2202      	movs	r2, #2
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fa93 f2a3 	rbit	r2, r3
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f04:	4b88      	ldr	r3, [pc, #544]	@ (8003128 <HAL_RCC_OscConfig+0x934>)
 8002f06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f10:	2102      	movs	r1, #2
 8002f12:	6019      	str	r1, [r3, #0]
 8002f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fa93 f1a3 	rbit	r1, r3
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f2a:	6019      	str	r1, [r3, #0]
  return result;
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2101      	movs	r1, #1
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0a0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x6a0>
 8002f52:	e08d      	b.n	8003070 <HAL_RCC_OscConfig+0x87c>
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f64:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f72:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f76:	601a      	str	r2, [r3, #0]
  return result;
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b68      	ldr	r3, [pc, #416]	@ (800312c <HAL_RCC_OscConfig+0x938>)
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	461a      	mov	r2, r3
 8002f92:	2300      	movs	r3, #0
 8002f94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fd fcd1 	bl	800093c <HAL_GetTick>
 8002f9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fd fccc 	bl	800093c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d902      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	f000 bc55 	b.w	8003860 <HAL_RCC_OscConfig+0x106c>
 8002fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	fa93 f2a3 	rbit	r2, r3
 8002fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003002:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003006:	2202      	movs	r2, #2
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fa93 f2a3 	rbit	r2, r3
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003020:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_RCC_OscConfig+0x934>)
 8003024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800302e:	2102      	movs	r1, #2
 8003030:	6019      	str	r1, [r3, #0]
 8003032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003036:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f1a3 	rbit	r1, r3
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003048:	6019      	str	r1, [r3, #0]
  return result;
 800304a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d197      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003074:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 81a1 	beq.w	80033c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308c:	4b26      	ldr	r3, [pc, #152]	@ (8003128 <HAL_RCC_OscConfig+0x934>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d116      	bne.n	80030c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003098:	4b23      	ldr	r3, [pc, #140]	@ (8003128 <HAL_RCC_OscConfig+0x934>)
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	4a22      	ldr	r2, [pc, #136]	@ (8003128 <HAL_RCC_OscConfig+0x934>)
 800309e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	61d3      	str	r3, [r2, #28]
 80030a4:	4b20      	ldr	r3, [pc, #128]	@ (8003128 <HAL_RCC_OscConfig+0x934>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80030ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ba:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003130 <HAL_RCC_OscConfig+0x93c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11a      	bne.n	8003108 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d2:	4b17      	ldr	r3, [pc, #92]	@ (8003130 <HAL_RCC_OscConfig+0x93c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a16      	ldr	r2, [pc, #88]	@ (8003130 <HAL_RCC_OscConfig+0x93c>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fd fc2d 	bl	800093c <HAL_GetTick>
 80030e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	e009      	b.n	80030fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e8:	f7fd fc28 	bl	800093c <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b64      	cmp	r3, #100	@ 0x64
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e3b1      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <HAL_RCC_OscConfig+0x93c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ef      	beq.n	80030e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10d      	bne.n	8003134 <HAL_RCC_OscConfig+0x940>
 8003118:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <HAL_RCC_OscConfig+0x934>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4a02      	ldr	r2, [pc, #8]	@ (8003128 <HAL_RCC_OscConfig+0x934>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6213      	str	r3, [r2, #32]
 8003124:	e03c      	b.n	80031a0 <HAL_RCC_OscConfig+0x9ac>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	10908120 	.word	0x10908120
 8003130:	40007000 	.word	0x40007000
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10c      	bne.n	800315e <HAL_RCC_OscConfig+0x96a>
 8003144:	4bc1      	ldr	r3, [pc, #772]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4ac0      	ldr	r2, [pc, #768]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	6213      	str	r3, [r2, #32]
 8003150:	4bbe      	ldr	r3, [pc, #760]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4abd      	ldr	r2, [pc, #756]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 8003156:	f023 0304 	bic.w	r3, r3, #4
 800315a:	6213      	str	r3, [r2, #32]
 800315c:	e020      	b.n	80031a0 <HAL_RCC_OscConfig+0x9ac>
 800315e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003162:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x994>
 800316e:	4bb7      	ldr	r3, [pc, #732]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4ab6      	ldr	r2, [pc, #728]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6213      	str	r3, [r2, #32]
 800317a:	4bb4      	ldr	r3, [pc, #720]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4ab3      	ldr	r2, [pc, #716]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6213      	str	r3, [r2, #32]
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0x9ac>
 8003188:	4bb0      	ldr	r3, [pc, #704]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4aaf      	ldr	r2, [pc, #700]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6213      	str	r3, [r2, #32]
 8003194:	4bad      	ldr	r3, [pc, #692]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4aac      	ldr	r2, [pc, #688]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8081 	beq.w	80032b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fd fbc3 	bl	800093c <HAL_GetTick>
 80031b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fd fbbe 	bl	800093c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e345      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
 80031d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80031dc:	2202      	movs	r2, #2
 80031de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	fa93 f2a3 	rbit	r2, r3
 80031ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003200:	2202      	movs	r2, #2
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003208:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	fa93 f2a3 	rbit	r2, r3
 8003212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003216:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800321a:	601a      	str	r2, [r3, #0]
  return result;
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003224:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d102      	bne.n	8003240 <HAL_RCC_OscConfig+0xa4c>
 800323a:	4b84      	ldr	r3, [pc, #528]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	e013      	b.n	8003268 <HAL_RCC_OscConfig+0xa74>
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003248:	2202      	movs	r2, #2
 800324a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003250:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	fa93 f2a3 	rbit	r2, r3
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	4b79      	ldr	r3, [pc, #484]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800326c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003270:	2102      	movs	r1, #2
 8003272:	6011      	str	r1, [r2, #0]
 8003274:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003278:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	fa92 f1a2 	rbit	r1, r2
 8003282:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003286:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800328a:	6011      	str	r1, [r2, #0]
  return result;
 800328c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003290:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f002 021f 	and.w	r2, r2, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d084      	beq.n	80031bc <HAL_RCC_OscConfig+0x9c8>
 80032b2:	e07f      	b.n	80033b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b4:	f7fd fb42 	bl	800093c <HAL_GetTick>
 80032b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	e00b      	b.n	80032d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fd fb3d 	bl	800093c <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e2c4      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
 80032d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80032de:	2202      	movs	r2, #2
 80032e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	fa93 f2a3 	rbit	r2, r3
 80032f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003302:	2202      	movs	r2, #2
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800331c:	601a      	str	r2, [r3, #0]
  return result;
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003326:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d102      	bne.n	8003342 <HAL_RCC_OscConfig+0xb4e>
 800333c:	4b43      	ldr	r3, [pc, #268]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	e013      	b.n	800336a <HAL_RCC_OscConfig+0xb76>
 8003342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003346:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003352:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003360:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	4b39      	ldr	r3, [pc, #228]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800336e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003372:	2102      	movs	r1, #2
 8003374:	6011      	str	r1, [r2, #0]
 8003376:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800337a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	fa92 f1a2 	rbit	r1, r2
 8003384:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003388:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800338c:	6011      	str	r1, [r2, #0]
  return result;
 800338e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003392:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	fab2 f282 	clz	r2, r2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f002 021f 	and.w	r2, r2, #31
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d184      	bne.n	80032be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033bc:	4b23      	ldr	r3, [pc, #140]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4a22      	ldr	r2, [pc, #136]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8242 	beq.w	800385e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033da:	4b1c      	ldr	r3, [pc, #112]	@ (800344c <HAL_RCC_OscConfig+0xc58>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	f000 8213 	beq.w	800380e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	f040 8162 	bne.w	80036be <HAL_RCC_OscConfig+0xeca>
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003402:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800341e:	601a      	str	r2, [r3, #0]
  return result;
 8003420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003424:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003428:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003434:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	461a      	mov	r2, r3
 800343c:	2300      	movs	r3, #0
 800343e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fd fa7c 	bl	800093c <HAL_GetTick>
 8003444:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	e00c      	b.n	8003464 <HAL_RCC_OscConfig+0xc70>
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fd fa74 	bl	800093c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1fd      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
 8003464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003468:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800346c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003476:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	fa93 f2a3 	rbit	r2, r3
 8003480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003484:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003488:	601a      	str	r2, [r3, #0]
  return result;
 800348a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003492:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <HAL_RCC_OscConfig+0xcba>
 80034a8:	4bb0      	ldr	r3, [pc, #704]	@ (800376c <HAL_RCC_OscConfig+0xf78>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	e027      	b.n	80034fe <HAL_RCC_OscConfig+0xd0a>
 80034ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ce:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80034dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	fa93 f2a3 	rbit	r2, r3
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	4b9c      	ldr	r3, [pc, #624]	@ (800376c <HAL_RCC_OscConfig+0xf78>)
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003502:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003506:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800350a:	6011      	str	r1, [r2, #0]
 800350c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003510:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	fa92 f1a2 	rbit	r1, r2
 800351a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800351e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003522:	6011      	str	r1, [r2, #0]
  return result;
 8003524:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003528:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	fab2 f282 	clz	r2, r2
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	f042 0220 	orr.w	r2, r2, #32
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	f002 021f 	and.w	r2, r2, #31
 800353e:	2101      	movs	r1, #1
 8003540:	fa01 f202 	lsl.w	r2, r1, r2
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d182      	bne.n	8003450 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354a:	4b88      	ldr	r3, [pc, #544]	@ (800376c <HAL_RCC_OscConfig+0xf78>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003556:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800355e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003562:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	430b      	orrs	r3, r1
 800356c:	497f      	ldr	r1, [pc, #508]	@ (800376c <HAL_RCC_OscConfig+0xf78>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
 8003572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003576:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800357a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800357e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003592:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003596:	601a      	str	r2, [r3, #0]
  return result;
 8003598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	461a      	mov	r2, r3
 80035b4:	2301      	movs	r3, #1
 80035b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd f9c0 	bl	800093c <HAL_GetTick>
 80035bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035c0:	e009      	b.n	80035d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd f9bb 	bl	800093c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e144      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
 80035d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035da:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80035de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	fa93 f2a3 	rbit	r2, r3
 80035f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80035fa:	601a      	str	r2, [r3, #0]
  return result;
 80035fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003600:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003604:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_RCC_OscConfig+0xe2c>
 800361a:	4b54      	ldr	r3, [pc, #336]	@ (800376c <HAL_RCC_OscConfig+0xf78>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e027      	b.n	8003670 <HAL_RCC_OscConfig+0xe7c>
 8003620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003624:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003628:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800362c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	fa93 f2a3 	rbit	r2, r3
 800363c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003640:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800364e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003658:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003666:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	4b3f      	ldr	r3, [pc, #252]	@ (800376c <HAL_RCC_OscConfig+0xf78>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003674:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003678:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003682:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	fa92 f1a2 	rbit	r1, r2
 800368c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003690:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003694:	6011      	str	r1, [r2, #0]
  return result;
 8003696:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800369a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	fab2 f282 	clz	r2, r2
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	f042 0220 	orr.w	r2, r2, #32
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	f002 021f 	and.w	r2, r2, #31
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f202 	lsl.w	r2, r1, r2
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d082      	beq.n	80035c2 <HAL_RCC_OscConfig+0xdce>
 80036bc:	e0cf      	b.n	800385e <HAL_RCC_OscConfig+0x106a>
 80036be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80036c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	fa93 f2a3 	rbit	r2, r3
 80036da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036de:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80036e2:	601a      	str	r2, [r3, #0]
  return result;
 80036e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80036ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	461a      	mov	r2, r3
 8003700:	2300      	movs	r3, #0
 8003702:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fd f91a 	bl	800093c <HAL_GetTick>
 8003708:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370c:	e009      	b.n	8003722 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370e:	f7fd f915 	bl	800093c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e09e      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
 8003722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003726:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800372a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800372e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003734:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	fa93 f2a3 	rbit	r2, r3
 800373e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003742:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003746:	601a      	str	r2, [r3, #0]
  return result;
 8003748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003750:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d104      	bne.n	8003770 <HAL_RCC_OscConfig+0xf7c>
 8003766:	4b01      	ldr	r3, [pc, #4]	@ (800376c <HAL_RCC_OscConfig+0xf78>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	e029      	b.n	80037c0 <HAL_RCC_OscConfig+0xfcc>
 800376c:	40021000 	.word	0x40021000
 8003770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003774:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003778:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800377c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003790:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800379e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	fa93 f2a3 	rbit	r2, r3
 80037b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	4b2b      	ldr	r3, [pc, #172]	@ (800386c <HAL_RCC_OscConfig+0x1078>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037c4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80037c8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037cc:	6011      	str	r1, [r2, #0]
 80037ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037d2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	fa92 f1a2 	rbit	r1, r2
 80037dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037e0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80037e4:	6011      	str	r1, [r2, #0]
  return result;
 80037e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037ea:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	fab2 f282 	clz	r2, r2
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	f042 0220 	orr.w	r2, r2, #32
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	f002 021f 	and.w	r2, r2, #31
 8003800:	2101      	movs	r1, #1
 8003802:	fa01 f202 	lsl.w	r2, r1, r2
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d180      	bne.n	800370e <HAL_RCC_OscConfig+0xf1a>
 800380c:	e027      	b.n	800385e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e01e      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <HAL_RCC_OscConfig+0x1078>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800382a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800382e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	429a      	cmp	r2, r3
 8003840:	d10b      	bne.n	800385a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003842:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003846:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800384a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b09e      	sub	sp, #120	@ 0x78
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e162      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b90      	ldr	r3, [pc, #576]	@ (8003acc <HAL_RCC_ClockConfig+0x25c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d910      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b8d      	ldr	r3, [pc, #564]	@ (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 0207 	bic.w	r2, r3, #7
 800389e:	498b      	ldr	r1, [pc, #556]	@ (8003acc <HAL_RCC_ClockConfig+0x25c>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b89      	ldr	r3, [pc, #548]	@ (8003acc <HAL_RCC_ClockConfig+0x25c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e14a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b82      	ldr	r3, [pc, #520]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	497f      	ldr	r1, [pc, #508]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80dc 	beq.w	8003a9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d13c      	bne.n	8003966 <HAL_RCC_ClockConfig+0xf6>
 80038ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038f0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80038fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d102      	bne.n	8003916 <HAL_RCC_ClockConfig+0xa6>
 8003910:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	e00f      	b.n	8003936 <HAL_RCC_ClockConfig+0xc6>
 8003916:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800391a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	667b      	str	r3, [r7, #100]	@ 0x64
 8003924:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003928:	663b      	str	r3, [r7, #96]	@ 0x60
 800392a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003932:	4b67      	ldr	r3, [pc, #412]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800393a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800393c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800393e:	fa92 f2a2 	rbit	r2, r2
 8003942:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003944:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d17b      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0f3      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d13c      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x178>
 800396e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003972:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800397c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_RCC_ClockConfig+0x128>
 8003992:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	e00f      	b.n	80039b8 <HAL_RCC_ClockConfig+0x148>
 8003998:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800399c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b4:	4b46      	ldr	r3, [pc, #280]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039bc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80039be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039c0:	fa92 f2a2 	rbit	r2, r2
 80039c4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80039c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039c8:	fab2 f282 	clz	r2, r2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f042 0220 	orr.w	r2, r2, #32
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	f002 021f 	and.w	r2, r2, #31
 80039d8:	2101      	movs	r1, #1
 80039da:	fa01 f202 	lsl.w	r2, r1, r2
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d13a      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0b2      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
 80039e8:	2302      	movs	r3, #2
 80039ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80039f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x1a0>
 8003a0a:	4b31      	ldr	r3, [pc, #196]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	e00d      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1bc>
 8003a10:	2302      	movs	r3, #2
 8003a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	623b      	str	r3, [r7, #32]
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	fa93 f3a3 	rbit	r3, r3
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	4b29      	ldr	r3, [pc, #164]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	61ba      	str	r2, [r7, #24]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	617a      	str	r2, [r7, #20]
  return result;
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f042 0220 	orr.w	r2, r2, #32
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	f002 021f 	and.w	r2, r2, #31
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e079      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	491a      	ldr	r1, [pc, #104]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a6c:	f7fc ff66 	bl	800093c <HAL_GetTick>
 8003a70:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a74:	f7fc ff62 	bl	800093c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e061      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 020c 	and.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1eb      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d214      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0207 	bic.w	r2, r3, #7
 8003ab2:	4906      	ldr	r1, [pc, #24]	@ (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e040      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	491a      	ldr	r1, [pc, #104]	@ (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afe:	4b16      	ldr	r3, [pc, #88]	@ (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4912      	ldr	r1, [pc, #72]	@ (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b12:	f000 f829 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8003b16:	4601      	mov	r1, r0
 8003b18:	4b0f      	ldr	r3, [pc, #60]	@ (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b20:	22f0      	movs	r2, #240	@ 0xf0
 8003b22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	fa92 f2a2 	rbit	r2, r2
 8003b2a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	fab2 f282 	clz	r2, r2
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	40d3      	lsrs	r3, r2
 8003b36:	4a09      	ldr	r2, [pc, #36]	@ (8003b5c <HAL_RCC_ClockConfig+0x2ec>)
 8003b38:	5cd3      	ldrb	r3, [r2, r3]
 8003b3a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b3e:	4a08      	ldr	r2, [pc, #32]	@ (8003b60 <HAL_RCC_ClockConfig+0x2f0>)
 8003b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b42:	4b08      	ldr	r3, [pc, #32]	@ (8003b64 <HAL_RCC_ClockConfig+0x2f4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fc feb4 	bl	80008b4 <HAL_InitTick>
  
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3778      	adds	r7, #120	@ 0x78
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	08008fcc 	.word	0x08008fcc
 8003b60:	2000000c 	.word	0x2000000c
 8003b64:	20000010 	.word	0x20000010

08003b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003b82:	4b1e      	ldr	r3, [pc, #120]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x94>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d002      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x30>
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d003      	beq.n	8003b9e <HAL_RCC_GetSysClockFreq+0x36>
 8003b96:	e026      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b98:	4b19      	ldr	r3, [pc, #100]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b9a:	613b      	str	r3, [r7, #16]
      break;
 8003b9c:	e026      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	0c9b      	lsrs	r3, r3, #18
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	4a17      	ldr	r2, [pc, #92]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ba8:	5cd3      	ldrb	r3, [r2, r3]
 8003baa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003bac:	4b13      	ldr	r3, [pc, #76]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x94>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	4a14      	ldr	r2, [pc, #80]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e004      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	613b      	str	r3, [r7, #16]
      break;
 8003be4:	e002      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003be6:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003be8:	613b      	str	r3, [r7, #16]
      break;
 8003bea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bec:	693b      	ldr	r3, [r7, #16]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	007a1200 	.word	0x007a1200
 8003c04:	08008fdc 	.word	0x08008fdc
 8003c08:	08008fec 	.word	0x08008fec
 8003c0c:	003d0900 	.word	0x003d0900

08003c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b092      	sub	sp, #72	@ 0x48
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80d4 	beq.w	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c34:	4b4e      	ldr	r3, [pc, #312]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10e      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c40:	4b4b      	ldr	r3, [pc, #300]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4a4a      	ldr	r2, [pc, #296]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	61d3      	str	r3, [r2, #28]
 8003c4c:	4b48      	ldr	r3, [pc, #288]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5e:	4b45      	ldr	r3, [pc, #276]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d118      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6a:	4b42      	ldr	r3, [pc, #264]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a41      	ldr	r2, [pc, #260]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c76:	f7fc fe61 	bl	800093c <HAL_GetTick>
 8003c7a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	e008      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7e:	f7fc fe5d 	bl	800093c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b64      	cmp	r3, #100	@ 0x64
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e14b      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	4b38      	ldr	r3, [pc, #224]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c9c:	4b34      	ldr	r3, [pc, #208]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8084 	beq.w	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d07c      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	fa93 f3a3 	rbit	r3, r3
 8003cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cd6:	fab3 f383 	clz	r3, r3
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b26      	ldr	r3, [pc, #152]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b1d      	ldr	r3, [pc, #116]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d0e:	4a18      	ldr	r2, [pc, #96]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d12:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04b      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fc fe0d 	bl	800093c <HAL_GetTick>
 8003d22:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fc fe09 	bl	800093c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e0f5      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d48:	2302      	movs	r3, #2
 8003d4a:	623b      	str	r3, [r7, #32]
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	61fb      	str	r3, [r7, #28]
  return result;
 8003d54:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d108      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d6a:	4b01      	ldr	r3, [pc, #4]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	e00d      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40007000 	.word	0x40007000
 8003d78:	10908100 	.word	0x10908100
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	4b69      	ldr	r3, [pc, #420]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	613a      	str	r2, [r7, #16]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	fa92 f2a2 	rbit	r2, r2
 8003d96:	60fa      	str	r2, [r7, #12]
  return result;
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	fab2 f282 	clz	r2, r2
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f002 021f 	and.w	r2, r2, #31
 8003daa:	2101      	movs	r1, #1
 8003dac:	fa01 f202 	lsl.w	r2, r1, r2
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0b7      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003db6:	4b5e      	ldr	r3, [pc, #376]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	495b      	ldr	r1, [pc, #364]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dc8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b57      	ldr	r3, [pc, #348]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	4a56      	ldr	r2, [pc, #344]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003de8:	4b51      	ldr	r3, [pc, #324]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	f023 0203 	bic.w	r2, r3, #3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	494e      	ldr	r1, [pc, #312]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e06:	4b4a      	ldr	r3, [pc, #296]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	f023 0210 	bic.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4947      	ldr	r1, [pc, #284]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e24:	4b42      	ldr	r3, [pc, #264]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	493f      	ldr	r1, [pc, #252]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e42:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	f023 0220 	bic.w	r2, r3, #32
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	4938      	ldr	r1, [pc, #224]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e60:	4b33      	ldr	r3, [pc, #204]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	4930      	ldr	r1, [pc, #192]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4929      	ldr	r1, [pc, #164]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003e9c:	4b24      	ldr	r3, [pc, #144]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	4921      	ldr	r1, [pc, #132]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003eba:	4b1d      	ldr	r3, [pc, #116]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	491a      	ldr	r1, [pc, #104]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ed8:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	4912      	ldr	r1, [pc, #72]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	490b      	ldr	r1, [pc, #44]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f14:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	4903      	ldr	r1, [pc, #12]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3748      	adds	r7, #72	@ 0x48
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000

08003f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e049      	b.n	8003fda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc fa84 	bl	8000468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f000 fa88 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d001      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e03b      	b.n	8004074 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a19      	ldr	r2, [pc, #100]	@ (8004080 <HAL_TIM_Base_Start_IT+0x9c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_TIM_Base_Start_IT+0x4e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004026:	d004      	beq.n	8004032 <HAL_TIM_Base_Start_IT+0x4e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <HAL_TIM_Base_Start_IT+0xa0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d115      	bne.n	800405e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <HAL_TIM_Base_Start_IT+0xa4>)
 800403a:	4013      	ands	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b06      	cmp	r3, #6
 8004042:	d015      	beq.n	8004070 <HAL_TIM_Base_Start_IT+0x8c>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404a:	d011      	beq.n	8004070 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405c:	e008      	b.n	8004070 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e000      	b.n	8004072 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004070:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40014000 	.word	0x40014000
 8004088:	00010007 	.word	0x00010007

0800408c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d020      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01b      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0202 	mvn.w	r2, #2
 80040c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9b7 	bl	800444a <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f9a9 	bl	8004436 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f9ba 	bl	800445e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d020      	beq.n	800413c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0204 	mvn.w	r2, #4
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f991 	bl	800444a <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f983 	bl	8004436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f994 	bl	800445e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d020      	beq.n	8004188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01b      	beq.n	8004188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0208 	mvn.w	r2, #8
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2204      	movs	r2, #4
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f96b 	bl	800444a <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f95d 	bl	8004436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f96e 	bl	800445e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0210 	mvn.w	r2, #16
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2208      	movs	r2, #8
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f945 	bl	800444a <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f937 	bl	8004436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f948 	bl	800445e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00c      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0201 	mvn.w	r2, #1
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f915 	bl	8004422 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00c      	beq.n	800421c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 faba 	bl	8004790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00c      	beq.n	8004240 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fab2 	bl	80047a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00c      	beq.n	8004264 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800425c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f907 	bl	8004472 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00c      	beq.n	8004288 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0220 	mvn.w	r2, #32
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa7a 	bl	800477c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIM_ConfigClockSource+0x1c>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e0b6      	b.n	800441a <HAL_TIM_ConfigClockSource+0x18a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e8:	d03e      	beq.n	8004368 <HAL_TIM_ConfigClockSource+0xd8>
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ee:	f200 8087 	bhi.w	8004400 <HAL_TIM_ConfigClockSource+0x170>
 80042f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f6:	f000 8086 	beq.w	8004406 <HAL_TIM_ConfigClockSource+0x176>
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fe:	d87f      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004300:	2b70      	cmp	r3, #112	@ 0x70
 8004302:	d01a      	beq.n	800433a <HAL_TIM_ConfigClockSource+0xaa>
 8004304:	2b70      	cmp	r3, #112	@ 0x70
 8004306:	d87b      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004308:	2b60      	cmp	r3, #96	@ 0x60
 800430a:	d050      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x11e>
 800430c:	2b60      	cmp	r3, #96	@ 0x60
 800430e:	d877      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004310:	2b50      	cmp	r3, #80	@ 0x50
 8004312:	d03c      	beq.n	800438e <HAL_TIM_ConfigClockSource+0xfe>
 8004314:	2b50      	cmp	r3, #80	@ 0x50
 8004316:	d873      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d058      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x13e>
 800431c:	2b40      	cmp	r3, #64	@ 0x40
 800431e:	d86f      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004320:	2b30      	cmp	r3, #48	@ 0x30
 8004322:	d064      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15e>
 8004324:	2b30      	cmp	r3, #48	@ 0x30
 8004326:	d86b      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004328:	2b20      	cmp	r3, #32
 800432a:	d060      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15e>
 800432c:	2b20      	cmp	r3, #32
 800432e:	d867      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d05c      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15e>
 8004334:	2b10      	cmp	r3, #16
 8004336:	d05a      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15e>
 8004338:	e062      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800434a:	f000 f991 	bl	8004670 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800435c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	609a      	str	r2, [r3, #8]
      break;
 8004366:	e04f      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004378:	f000 f97a 	bl	8004670 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800438a:	609a      	str	r2, [r3, #8]
      break;
 800438c:	e03c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	461a      	mov	r2, r3
 800439c:	f000 f8ee 	bl	800457c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2150      	movs	r1, #80	@ 0x50
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f947 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 80043ac:	e02c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 f90d 	bl	80045da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2160      	movs	r1, #96	@ 0x60
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f937 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 80043cc:	e01c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 f8ce 	bl	800457c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2140      	movs	r1, #64	@ 0x40
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f927 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 80043ec:	e00c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f000 f91e 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 80043fe:	e003      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      break;
 8004404:	e000      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a34      	ldr	r2, [pc, #208]	@ (800456c <TIM_Base_SetConfig+0xe4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_Base_SetConfig+0x20>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a6:	d108      	bne.n	80044ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2b      	ldr	r2, [pc, #172]	@ (800456c <TIM_Base_SetConfig+0xe4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00f      	beq.n	80044e2 <TIM_Base_SetConfig+0x5a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c8:	d00b      	beq.n	80044e2 <TIM_Base_SetConfig+0x5a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a28      	ldr	r2, [pc, #160]	@ (8004570 <TIM_Base_SetConfig+0xe8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <TIM_Base_SetConfig+0x5a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a27      	ldr	r2, [pc, #156]	@ (8004574 <TIM_Base_SetConfig+0xec>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_Base_SetConfig+0x5a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a26      	ldr	r2, [pc, #152]	@ (8004578 <TIM_Base_SetConfig+0xf0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d108      	bne.n	80044f4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a14      	ldr	r2, [pc, #80]	@ (800456c <TIM_Base_SetConfig+0xe4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00b      	beq.n	8004538 <TIM_Base_SetConfig+0xb0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a13      	ldr	r2, [pc, #76]	@ (8004570 <TIM_Base_SetConfig+0xe8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d007      	beq.n	8004538 <TIM_Base_SetConfig+0xb0>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a12      	ldr	r2, [pc, #72]	@ (8004574 <TIM_Base_SetConfig+0xec>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_Base_SetConfig+0xb0>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a11      	ldr	r2, [pc, #68]	@ (8004578 <TIM_Base_SetConfig+0xf0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d103      	bne.n	8004540 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d105      	bne.n	800455e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f023 0201 	bic.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]
  }
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40014000 	.word	0x40014000
 8004574:	40014400 	.word	0x40014400
 8004578:	40014800 	.word	0x40014800

0800457c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f023 0201 	bic.w	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f023 030a 	bic.w	r3, r3, #10
 80045b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045da:	b480      	push	{r7}
 80045dc:	b087      	sub	sp, #28
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f023 0210 	bic.w	r2, r3, #16
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004616:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	f043 0307 	orr.w	r3, r3, #7
 800465c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800468a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	021a      	lsls	r2, r3, #8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	431a      	orrs	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4313      	orrs	r3, r2
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	609a      	str	r2, [r3, #8]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e04f      	b.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a21      	ldr	r2, [pc, #132]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d108      	bne.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a14      	ldr	r2, [pc, #80]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004730:	d004      	beq.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a10      	ldr	r2, [pc, #64]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d10c      	bne.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004742:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	4313      	orrs	r3, r2
 800474c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40014000 	.word	0x40014000

0800477c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047c8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80047cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047ee:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80047f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	b29b      	uxth	r3, r3
 8004804:	4013      	ands	r3, r2
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004858:	b480      	push	{r7}
 800485a:	b09d      	sub	sp, #116	@ 0x74
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	78db      	ldrb	r3, [r3, #3]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d81f      	bhi.n	80048ca <USB_ActivateEndpoint+0x72>
 800488a:	a201      	add	r2, pc, #4	@ (adr r2, 8004890 <USB_ActivateEndpoint+0x38>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048d3 	.word	0x080048d3
 800489c:	080048af 	.word	0x080048af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80048a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80048a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80048ac:	e012      	b.n	80048d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80048ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80048b2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80048b6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80048ba:	e00b      	b.n	80048d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80048bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80048c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80048c8:	e004      	b.n	80048d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80048d0:	e000      	b.n	80048d4 <USB_ActivateEndpoint+0x7c>
      break;
 80048d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	441a      	add	r2, r3
 80048de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80048e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	b21b      	sxth	r3, r3
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800490a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490e:	b21a      	sxth	r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b21b      	sxth	r3, r3
 8004916:	4313      	orrs	r3, r2
 8004918:	b21b      	sxth	r3, r3
 800491a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	441a      	add	r2, r3
 8004928:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800492c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	7b1b      	ldrb	r3, [r3, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f040 8178 	bne.w	8004c3a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	785b      	ldrb	r3, [r3, #1]
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 8084 	beq.w	8004a5c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800495e:	b29b      	uxth	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	4413      	add	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	00da      	lsls	r2, r3, #3
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	88db      	ldrh	r3, [r3, #6]
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	b29b      	uxth	r3, r3
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	827b      	strh	r3, [r7, #18]
 8004996:	8a7b      	ldrh	r3, [r7, #18]
 8004998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01b      	beq.n	80049d8 <USB_ActivateEndpoint+0x180>
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b6:	823b      	strh	r3, [r7, #16]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	8a3b      	ldrh	r3, [r7, #16]
 80049c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	78db      	ldrb	r3, [r3, #3]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d020      	beq.n	8004a22 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049f6:	81bb      	strh	r3, [r7, #12]
 80049f8:	89bb      	ldrh	r3, [r7, #12]
 80049fa:	f083 0320 	eor.w	r3, r3, #32
 80049fe:	81bb      	strh	r3, [r7, #12]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	89bb      	ldrh	r3, [r7, #12]
 8004a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	8013      	strh	r3, [r2, #0]
 8004a20:	e2d5      	b.n	8004fce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a38:	81fb      	strh	r3, [r7, #14]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	441a      	add	r2, r3
 8004a44:	89fb      	ldrh	r3, [r7, #14]
 8004a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8013      	strh	r3, [r2, #0]
 8004a5a:	e2b8      	b.n	8004fce <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	4413      	add	r3, r2
 8004a6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	00da      	lsls	r2, r3, #3
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	4413      	add	r3, r2
 8004a7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	88db      	ldrh	r3, [r3, #6]
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	4413      	add	r3, r2
 8004aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	00da      	lsls	r2, r3, #3
 8004aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aac:	4413      	add	r3, r2
 8004aae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac2:	801a      	strh	r2, [r3, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <USB_ActivateEndpoint+0x28a>
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	e039      	b.n	8004b56 <USB_ActivateEndpoint+0x2fe>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ae8:	d818      	bhi.n	8004b1c <USB_ActivateEndpoint+0x2c4>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <USB_ActivateEndpoint+0x2ac>
 8004afe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b00:	3301      	adds	r3, #1
 8004b02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	029b      	lsls	r3, r3, #10
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	4313      	orrs	r3, r2
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	801a      	strh	r2, [r3, #0]
 8004b1a:	e01c      	b.n	8004b56 <USB_ActivateEndpoint+0x2fe>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <USB_ActivateEndpoint+0x2de>
 8004b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b32:	3b01      	subs	r3, #1
 8004b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	029b      	lsls	r3, r3, #10
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004b64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01b      	beq.n	8004ba6 <USB_ActivateEndpoint+0x34e>
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b84:	843b      	strh	r3, [r7, #32]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	8c3b      	ldrh	r3, [r7, #32]
 8004b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d124      	bne.n	8004bf8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc4:	83bb      	strh	r3, [r7, #28]
 8004bc6:	8bbb      	ldrh	r3, [r7, #28]
 8004bc8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004bcc:	83bb      	strh	r3, [r7, #28]
 8004bce:	8bbb      	ldrh	r3, [r7, #28]
 8004bd0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004bd4:	83bb      	strh	r3, [r7, #28]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	441a      	add	r2, r3
 8004be0:	8bbb      	ldrh	r3, [r7, #28]
 8004be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	8013      	strh	r3, [r2, #0]
 8004bf6:	e1ea      	b.n	8004fce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0e:	83fb      	strh	r3, [r7, #30]
 8004c10:	8bfb      	ldrh	r3, [r7, #30]
 8004c12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c16:	83fb      	strh	r3, [r7, #30]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	8bfb      	ldrh	r3, [r7, #30]
 8004c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8013      	strh	r3, [r2, #0]
 8004c38:	e1c9      	b.n	8004fce <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	78db      	ldrb	r3, [r3, #3]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d11e      	bne.n	8004c80 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c58:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004c6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c72:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	8013      	strh	r3, [r2, #0]
 8004c7e:	e01d      	b.n	8004cbc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c96:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	441a      	add	r2, r3
 8004ca4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ccc:	4413      	add	r3, r2
 8004cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	00da      	lsls	r2, r3, #3
 8004cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	891b      	ldrh	r3, [r3, #8]
 8004ce4:	085b      	lsrs	r3, r3, #1
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d00:	4413      	add	r3, r2
 8004d02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	00da      	lsls	r2, r3, #3
 8004d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	895b      	ldrh	r3, [r3, #10]
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f040 8093 	bne.w	8004e54 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004d3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01b      	beq.n	8004d82 <USB_ActivateEndpoint+0x52a>
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	441a      	add	r2, r3
 8004d6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004d90:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01b      	beq.n	8004dd2 <USB_ActivateEndpoint+0x57a>
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	441a      	add	r2, r3
 8004dbc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004dea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004dec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004df0:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004df2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004df4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004df8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e30:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	441a      	add	r2, r3
 8004e3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	8013      	strh	r3, [r2, #0]
 8004e52:	e0bc      	b.n	8004fce <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004e64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01d      	beq.n	8004eac <USB_ActivateEndpoint+0x654>
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e86:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004ebc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01d      	beq.n	8004f04 <USB_ActivateEndpoint+0x6ac>
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ede:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004efc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	78db      	ldrb	r3, [r3, #3]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d024      	beq.n	8004f56 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f22:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004f26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004f2a:	f083 0320 	eor.w	r3, r3, #32
 8004f2e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]
 8004f54:	e01d      	b.n	8004f92 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f6c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004fce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3774      	adds	r7, #116	@ 0x74
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop

08004fe0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b08d      	sub	sp, #52	@ 0x34
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	7b1b      	ldrb	r3, [r3, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 808e 	bne.w	8005110 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	785b      	ldrb	r3, [r3, #1]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d044      	beq.n	8005086 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	81bb      	strh	r3, [r7, #12]
 800500a:	89bb      	ldrh	r3, [r7, #12]
 800500c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01b      	beq.n	800504c <USB_DeactivateEndpoint+0x6c>
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502a:	817b      	strh	r3, [r7, #10]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	441a      	add	r2, r3
 8005036:	897b      	ldrh	r3, [r7, #10]
 8005038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800503c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005040:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005044:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005048:	b29b      	uxth	r3, r3
 800504a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800505e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005062:	813b      	strh	r3, [r7, #8]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	893b      	ldrh	r3, [r7, #8]
 8005070:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005074:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005078:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800507c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005080:	b29b      	uxth	r3, r3
 8005082:	8013      	strh	r3, [r2, #0]
 8005084:	e192      	b.n	80053ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	827b      	strh	r3, [r7, #18]
 8005094:	8a7b      	ldrh	r3, [r7, #18]
 8005096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01b      	beq.n	80050d6 <USB_DeactivateEndpoint+0xf6>
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b4:	823b      	strh	r3, [r7, #16]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	8a3b      	ldrh	r3, [r7, #16]
 80050c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ec:	81fb      	strh	r3, [r7, #14]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	89fb      	ldrh	r3, [r7, #14]
 80050fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800510a:	b29b      	uxth	r3, r3
 800510c:	8013      	strh	r3, [r2, #0]
 800510e:	e14d      	b.n	80053ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f040 80a5 	bne.w	8005264 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	843b      	strh	r3, [r7, #32]
 8005128:	8c3b      	ldrh	r3, [r7, #32]
 800512a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01b      	beq.n	800516a <USB_DeactivateEndpoint+0x18a>
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005148:	83fb      	strh	r3, [r7, #30]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	8bfb      	ldrh	r3, [r7, #30]
 8005156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800515a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800515e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005166:	b29b      	uxth	r3, r3
 8005168:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	83bb      	strh	r3, [r7, #28]
 8005178:	8bbb      	ldrh	r3, [r7, #28]
 800517a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01b      	beq.n	80051ba <USB_DeactivateEndpoint+0x1da>
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005198:	837b      	strh	r3, [r7, #26]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	8b7b      	ldrh	r3, [r7, #26]
 80051a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d0:	833b      	strh	r3, [r7, #24]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	8b3b      	ldrh	r3, [r7, #24]
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005208:	82fb      	strh	r3, [r7, #22]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	441a      	add	r2, r3
 8005214:	8afb      	ldrh	r3, [r7, #22]
 8005216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800521a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800521e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005226:	b29b      	uxth	r3, r3
 8005228:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800523c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005240:	82bb      	strh	r3, [r7, #20]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	441a      	add	r2, r3
 800524c:	8abb      	ldrh	r3, [r7, #20]
 800524e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005252:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800525a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800525e:	b29b      	uxth	r3, r3
 8005260:	8013      	strh	r3, [r2, #0]
 8005262:	e0a3      	b.n	80053ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005272:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01b      	beq.n	80052b4 <USB_DeactivateEndpoint+0x2d4>
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	441a      	add	r2, r3
 800529e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80052a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80052c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80052c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01b      	beq.n	8005304 <USB_DeactivateEndpoint+0x324>
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80052f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005300:	b29b      	uxth	r3, r3
 8005302:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	441a      	add	r2, r3
 8005326:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800532c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005330:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005338:	b29b      	uxth	r3, r3
 800533a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800534e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005352:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	441a      	add	r2, r3
 800535e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005370:	b29b      	uxth	r3, r3
 8005372:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800538a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	441a      	add	r2, r3
 8005396:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800539c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3734      	adds	r7, #52	@ 0x34
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b0c2      	sub	sp, #264	@ 0x108
 80053be:	af00      	add	r7, sp, #0
 80053c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053c8:	6018      	str	r0, [r3, #0]
 80053ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	f040 86b7 	bne.w	8006154 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d908      	bls.n	8005414 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005412:	e007      	b.n	8005424 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	7b1b      	ldrb	r3, [r3, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d13a      	bne.n	80054aa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6959      	ldr	r1, [r3, #20]
 8005440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	88da      	ldrh	r2, [r3, #6]
 800544c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005450:	b29b      	uxth	r3, r3
 8005452:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005456:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	f001 fc8d 	bl	8006d7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4413      	add	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	00da      	lsls	r2, r3, #3
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	f000 be1f 	b.w	80060e8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80054aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	78db      	ldrb	r3, [r3, #3]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	f040 8462 	bne.w	8005d80 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80054bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	f240 83df 	bls.w	8005c98 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80054da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005500:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800552a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800552e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005532:	b29b      	uxth	r3, r3
 8005534:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005546:	1ad2      	subs	r2, r2, r3
 8005548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 81c7 	beq.w	800590a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800557c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	633b      	str	r3, [r7, #48]	@ 0x30
 8005588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d177      	bne.n	8005688 <USB_EPStartXfer+0x2ce>
 8005598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	4413      	add	r3, r2
 80055ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	00da      	lsls	r2, r3, #3
 80055ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055cc:	4413      	add	r3, r2
 80055ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80055d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055de:	b29a      	uxth	r2, r3
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <USB_EPStartXfer+0x248>
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	801a      	strh	r2, [r3, #0]
 8005600:	e067      	b.n	80056d2 <USB_EPStartXfer+0x318>
 8005602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005606:	2b3e      	cmp	r3, #62	@ 0x3e
 8005608:	d81c      	bhi.n	8005644 <USB_EPStartXfer+0x28a>
 800560a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <USB_EPStartXfer+0x270>
 8005620:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005624:	3301      	adds	r3, #1
 8005626:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29a      	uxth	r2, r3
 8005630:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005634:	b29b      	uxth	r3, r3
 8005636:	029b      	lsls	r3, r3, #10
 8005638:	b29b      	uxth	r3, r3
 800563a:	4313      	orrs	r3, r2
 800563c:	b29a      	uxth	r2, r3
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	e046      	b.n	80056d2 <USB_EPStartXfer+0x318>
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <USB_EPStartXfer+0x2aa>
 800565a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800565e:	3b01      	subs	r3, #1
 8005660:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29a      	uxth	r2, r3
 800566a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800566e:	b29b      	uxth	r3, r3
 8005670:	029b      	lsls	r3, r3, #10
 8005672:	b29b      	uxth	r3, r3
 8005674:	4313      	orrs	r3, r2
 8005676:	b29b      	uxth	r3, r3
 8005678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005680:	b29a      	uxth	r2, r3
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	801a      	strh	r2, [r3, #0]
 8005686:	e024      	b.n	80056d2 <USB_EPStartXfer+0x318>
 8005688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d11c      	bne.n	80056d2 <USB_EPStartXfer+0x318>
 8005698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800569c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	4413      	add	r3, r2
 80056ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80056b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	00da      	lsls	r2, r3, #3
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	4413      	add	r3, r2
 80056c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	895b      	ldrh	r3, [r3, #10]
 80056de:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6959      	ldr	r1, [r3, #20]
 80056ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005700:	6800      	ldr	r0, [r0, #0]
 8005702:	f001 fb3a 	bl	8006d7a <USB_WritePMA>
            ep->xfer_buff += len;
 8005706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005716:	441a      	add	r2, r3
 8005718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	429a      	cmp	r2, r3
 800573e:	d90f      	bls.n	8005760 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005750:	1ad2      	subs	r2, r2, r3
 8005752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	621a      	str	r2, [r3, #32]
 800575e:	e00e      	b.n	800577e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800577e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d177      	bne.n	800587e <USB_EPStartXfer+0x4c4>
 800578e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	00da      	lsls	r2, r3, #3
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	4413      	add	r3, r2
 80057c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <USB_EPStartXfer+0x43e>
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	e06d      	b.n	80058d4 <USB_EPStartXfer+0x51a>
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80057fe:	d81c      	bhi.n	800583a <USB_EPStartXfer+0x480>
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800580a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <USB_EPStartXfer+0x466>
 8005816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581a:	3301      	adds	r3, #1
 800581c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29a      	uxth	r2, r3
 8005826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582a:	b29b      	uxth	r3, r3
 800582c:	029b      	lsls	r3, r3, #10
 800582e:	b29b      	uxth	r3, r3
 8005830:	4313      	orrs	r3, r2
 8005832:	b29a      	uxth	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	801a      	strh	r2, [r3, #0]
 8005838:	e04c      	b.n	80058d4 <USB_EPStartXfer+0x51a>
 800583a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2b00      	cmp	r3, #0
 800584e:	d104      	bne.n	800585a <USB_EPStartXfer+0x4a0>
 8005850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005854:	3b01      	subs	r3, #1
 8005856:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29a      	uxth	r2, r3
 8005860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005864:	b29b      	uxth	r3, r3
 8005866:	029b      	lsls	r3, r3, #10
 8005868:	b29b      	uxth	r3, r3
 800586a:	4313      	orrs	r3, r2
 800586c:	b29b      	uxth	r3, r3
 800586e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005876:	b29a      	uxth	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	e02a      	b.n	80058d4 <USB_EPStartXfer+0x51a>
 800587e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d122      	bne.n	80058d4 <USB_EPStartXfer+0x51a>
 800588e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	623b      	str	r3, [r7, #32]
 800589a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	4413      	add	r3, r2
 80058b0:	623b      	str	r3, [r7, #32]
 80058b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	00da      	lsls	r2, r3, #3
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	4413      	add	r3, r2
 80058c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	891b      	ldrh	r3, [r3, #8]
 80058e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6959      	ldr	r1, [r3, #20]
 80058f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005902:	6800      	ldr	r0, [r0, #0]
 8005904:	f001 fa39 	bl	8006d7a <USB_WritePMA>
 8005908:	e3ee      	b.n	80060e8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800590a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d177      	bne.n	8005a0a <USB_EPStartXfer+0x650>
 800591a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005934:	b29b      	uxth	r3, r3
 8005936:	461a      	mov	r2, r3
 8005938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800593a:	4413      	add	r3, r2
 800593c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800593e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	00da      	lsls	r2, r3, #3
 800594c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800594e:	4413      	add	r3, r2
 8005950:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005954:	647b      	str	r3, [r7, #68]	@ 0x44
 8005956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005960:	b29a      	uxth	r2, r3
 8005962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <USB_EPStartXfer+0x5ca>
 800596e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597c:	b29a      	uxth	r2, r3
 800597e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	e06d      	b.n	8005a60 <USB_EPStartXfer+0x6a6>
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005988:	2b3e      	cmp	r3, #62	@ 0x3e
 800598a:	d81c      	bhi.n	80059c6 <USB_EPStartXfer+0x60c>
 800598c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <USB_EPStartXfer+0x5f2>
 80059a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059a6:	3301      	adds	r3, #1
 80059a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	029b      	lsls	r3, r3, #10
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	4313      	orrs	r3, r2
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e04c      	b.n	8005a60 <USB_EPStartXfer+0x6a6>
 80059c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <USB_EPStartXfer+0x62c>
 80059dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059e0:	3b01      	subs	r3, #1
 80059e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	029b      	lsls	r3, r3, #10
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	4313      	orrs	r3, r2
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	e02a      	b.n	8005a60 <USB_EPStartXfer+0x6a6>
 8005a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d122      	bne.n	8005a60 <USB_EPStartXfer+0x6a6>
 8005a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a3a:	4413      	add	r3, r2
 8005a3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	00da      	lsls	r2, r3, #3
 8005a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a4e:	4413      	add	r3, r2
 8005a50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	891b      	ldrh	r3, [r3, #8]
 8005a6c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6959      	ldr	r1, [r3, #20]
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a86:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a8a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a8e:	6800      	ldr	r0, [r0, #0]
 8005a90:	f001 f973 	bl	8006d7a <USB_WritePMA>
            ep->xfer_buff += len;
 8005a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695a      	ldr	r2, [r3, #20]
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa4:	441a      	add	r2, r3
 8005aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6a1a      	ldr	r2, [r3, #32]
 8005abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d90f      	bls.n	8005aee <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a1a      	ldr	r2, [r3, #32]
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	621a      	str	r2, [r3, #32]
 8005aec:	e00e      	b.n	8005b0c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	785b      	ldrb	r3, [r3, #1]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d177      	bne.n	8005c18 <USB_EPStartXfer+0x85e>
 8005b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b48:	4413      	add	r3, r2
 8005b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	00da      	lsls	r2, r3, #3
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b72:	801a      	strh	r2, [r3, #0]
 8005b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <USB_EPStartXfer+0x7d8>
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8e:	801a      	strh	r2, [r3, #0]
 8005b90:	e067      	b.n	8005c62 <USB_EPStartXfer+0x8a8>
 8005b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b96:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b98:	d81c      	bhi.n	8005bd4 <USB_EPStartXfer+0x81a>
 8005b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <USB_EPStartXfer+0x800>
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	029b      	lsls	r3, r3, #10
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e046      	b.n	8005c62 <USB_EPStartXfer+0x8a8>
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d104      	bne.n	8005bf4 <USB_EPStartXfer+0x83a>
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	029b      	lsls	r3, r3, #10
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	e024      	b.n	8005c62 <USB_EPStartXfer+0x8a8>
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d11c      	bne.n	8005c62 <USB_EPStartXfer+0x8a8>
 8005c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c3c:	4413      	add	r3, r2
 8005c3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	00da      	lsls	r2, r3, #3
 8005c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c50:	4413      	add	r3, r2
 8005c52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	895b      	ldrh	r3, [r3, #10]
 8005c6e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6959      	ldr	r1, [r3, #20]
 8005c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c88:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c8c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c90:	6800      	ldr	r0, [r0, #0]
 8005c92:	f001 f872 	bl	8006d7a <USB_WritePMA>
 8005c96:	e227      	b.n	80060e8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cce:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	441a      	add	r2, r3
 8005cec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005cf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d24:	4413      	add	r3, r2
 8005d26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	00da      	lsls	r2, r3, #3
 8005d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d38:	4413      	add	r3, r2
 8005d3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	891b      	ldrh	r3, [r3, #8]
 8005d56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6959      	ldr	r1, [r3, #20]
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d70:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d74:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d78:	6800      	ldr	r0, [r0, #0]
 8005d7a:	f000 fffe 	bl	8006d7a <USB_WritePMA>
 8005d7e:	e1b3      	b.n	80060e8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6a1a      	ldr	r2, [r3, #32]
 8005d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d90:	1ad2      	subs	r2, r2, r3
 8005d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80c6 	beq.w	8005f52 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	785b      	ldrb	r3, [r3, #1]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d177      	bne.n	8005ed2 <USB_EPStartXfer+0xb18>
 8005de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e02:	4413      	add	r3, r2
 8005e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	00da      	lsls	r2, r3, #3
 8005e14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e16:	4413      	add	r3, r2
 8005e18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <USB_EPStartXfer+0xa92>
 8005e36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	e067      	b.n	8005f1c <USB_EPStartXfer+0xb62>
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e50:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e52:	d81c      	bhi.n	8005e8e <USB_EPStartXfer+0xad4>
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e58:	085b      	lsrs	r3, r3, #1
 8005e5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d004      	beq.n	8005e74 <USB_EPStartXfer+0xaba>
 8005e6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005e6e:	3301      	adds	r3, #1
 8005e70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	029b      	lsls	r3, r3, #10
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	4313      	orrs	r3, r2
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	e046      	b.n	8005f1c <USB_EPStartXfer+0xb62>
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <USB_EPStartXfer+0xaf4>
 8005ea4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005eae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	029b      	lsls	r3, r3, #10
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	e024      	b.n	8005f1c <USB_EPStartXfer+0xb62>
 8005ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d11c      	bne.n	8005f1c <USB_EPStartXfer+0xb62>
 8005ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ef6:	4413      	add	r3, r2
 8005ef8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	00da      	lsls	r2, r3, #3
 8005f08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	895b      	ldrh	r3, [r3, #10]
 8005f28:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6959      	ldr	r1, [r3, #20]
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f42:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f46:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f4a:	6800      	ldr	r0, [r0, #0]
 8005f4c:	f000 ff15 	bl	8006d7a <USB_WritePMA>
 8005f50:	e0ca      	b.n	80060e8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d177      	bne.n	8006052 <USB_EPStartXfer+0xc98>
 8005f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f82:	4413      	add	r3, r2
 8005f84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	00da      	lsls	r2, r3, #3
 8005f94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f96:	4413      	add	r3, r2
 8005f98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fac:	801a      	strh	r2, [r3, #0]
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <USB_EPStartXfer+0xc12>
 8005fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	e073      	b.n	80060b4 <USB_EPStartXfer+0xcfa>
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fd2:	d81c      	bhi.n	800600e <USB_EPStartXfer+0xc54>
 8005fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd8:	085b      	lsrs	r3, r3, #1
 8005fda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d004      	beq.n	8005ff4 <USB_EPStartXfer+0xc3a>
 8005fea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005fee:	3301      	adds	r3, #1
 8005ff0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	029b      	lsls	r3, r3, #10
 8006002:	b29b      	uxth	r3, r3
 8006004:	4313      	orrs	r3, r2
 8006006:	b29a      	uxth	r2, r3
 8006008:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	e052      	b.n	80060b4 <USB_EPStartXfer+0xcfa>
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <USB_EPStartXfer+0xc74>
 8006024:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006028:	3b01      	subs	r3, #1
 800602a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800602e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006038:	b29b      	uxth	r3, r3
 800603a:	029b      	lsls	r3, r3, #10
 800603c:	b29b      	uxth	r3, r3
 800603e:	4313      	orrs	r3, r2
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604a:	b29a      	uxth	r2, r3
 800604c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e030      	b.n	80060b4 <USB_EPStartXfer+0xcfa>
 8006052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d128      	bne.n	80060b4 <USB_EPStartXfer+0xcfa>
 8006062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006066:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800607e:	b29b      	uxth	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006086:	4413      	add	r3, r2
 8006088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800608c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	00da      	lsls	r2, r3, #3
 800609a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800609e:	4413      	add	r3, r2
 80060a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	891b      	ldrh	r3, [r3, #8]
 80060c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6959      	ldr	r1, [r3, #20]
 80060d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060da:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060de:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060e2:	6800      	ldr	r0, [r0, #0]
 80060e4:	f000 fe49 	bl	8006d7a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800610e:	817b      	strh	r3, [r7, #10]
 8006110:	897b      	ldrh	r3, [r7, #10]
 8006112:	f083 0310 	eor.w	r3, r3, #16
 8006116:	817b      	strh	r3, [r7, #10]
 8006118:	897b      	ldrh	r3, [r7, #10]
 800611a:	f083 0320 	eor.w	r3, r3, #32
 800611e:	817b      	strh	r3, [r7, #10]
 8006120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	897b      	ldrh	r3, [r7, #10]
 800613c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800614c:	b29b      	uxth	r3, r3
 800614e:	8013      	strh	r3, [r2, #0]
 8006150:	f000 bcdf 	b.w	8006b12 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	7b1b      	ldrb	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f040 80bc 	bne.w	80062de <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	429a      	cmp	r2, r3
 8006180:	d917      	bls.n	80061b2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	619a      	str	r2, [r3, #24]
 80061b0:	e00e      	b.n	80061d0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80061c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2200      	movs	r2, #0
 80061ce:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80061d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061f4:	4413      	add	r3, r2
 80061f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	00da      	lsls	r2, r3, #3
 8006208:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800620c:	4413      	add	r3, r2
 800620e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006222:	b29a      	uxth	r2, r3
 8006224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10d      	bne.n	800624e <USB_EPStartXfer+0xe94>
 8006232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006242:	b29a      	uxth	r2, r3
 8006244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	f000 bc28 	b.w	8006a9e <USB_EPStartXfer+0x16e4>
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	2b3e      	cmp	r3, #62	@ 0x3e
 8006254:	d81f      	bhi.n	8006296 <USB_EPStartXfer+0xedc>
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <USB_EPStartXfer+0xebc>
 800626c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006270:	3301      	adds	r3, #1
 8006272:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29a      	uxth	r2, r3
 800627e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006282:	b29b      	uxth	r3, r3
 8006284:	029b      	lsls	r3, r3, #10
 8006286:	b29b      	uxth	r3, r3
 8006288:	4313      	orrs	r3, r2
 800628a:	b29a      	uxth	r2, r3
 800628c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	f000 bc04 	b.w	8006a9e <USB_EPStartXfer+0x16e4>
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <USB_EPStartXfer+0xefc>
 80062ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80062b0:	3b01      	subs	r3, #1
 80062b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29a      	uxth	r2, r3
 80062be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	029b      	lsls	r3, r3, #10
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	e3df      	b.n	8006a9e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80062de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	f040 8218 	bne.w	8006720 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f040 809d 	bne.w	800643c <USB_EPStartXfer+0x1082>
 8006302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006326:	4413      	add	r3, r2
 8006328:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800632c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	00da      	lsls	r2, r3, #3
 800633a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800633e:	4413      	add	r3, r2
 8006340:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006344:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006354:	b29a      	uxth	r2, r3
 8006356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10c      	bne.n	8006386 <USB_EPStartXfer+0xfcc>
 800636c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e08f      	b.n	80064a6 <USB_EPStartXfer+0x10ec>
 8006386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b3e      	cmp	r3, #62	@ 0x3e
 8006394:	d826      	bhi.n	80063e4 <USB_EPStartXfer+0x102a>
 8006396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <USB_EPStartXfer+0x100c>
 80063bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c0:	3301      	adds	r3, #1
 80063c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	029b      	lsls	r3, r3, #10
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	4313      	orrs	r3, r2
 80063da:	b29a      	uxth	r2, r3
 80063dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	e060      	b.n	80064a6 <USB_EPStartXfer+0x10ec>
 80063e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <USB_EPStartXfer+0x105a>
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640e:	3b01      	subs	r3, #1
 8006410:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29a      	uxth	r2, r3
 800641c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006420:	b29b      	uxth	r3, r3
 8006422:	029b      	lsls	r3, r3, #10
 8006424:	b29b      	uxth	r3, r3
 8006426:	4313      	orrs	r3, r2
 8006428:	b29b      	uxth	r3, r3
 800642a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006432:	b29a      	uxth	r2, r3
 8006434:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e034      	b.n	80064a6 <USB_EPStartXfer+0x10ec>
 800643c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d12c      	bne.n	80064a6 <USB_EPStartXfer+0x10ec>
 800644c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800645a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006468:	b29b      	uxth	r3, r3
 800646a:	461a      	mov	r2, r3
 800646c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006470:	4413      	add	r3, r2
 8006472:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	00da      	lsls	r2, r3, #3
 8006484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006488:	4413      	add	r3, r2
 800648a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800648e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	b29a      	uxth	r2, r3
 80064a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f040 809d 	bne.w	8006600 <USB_EPStartXfer+0x1246>
 80064c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064ea:	4413      	add	r3, r2
 80064ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	00da      	lsls	r2, r3, #3
 80064fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006502:	4413      	add	r3, r2
 8006504:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800650c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10c      	bne.n	800654a <USB_EPStartXfer+0x1190>
 8006530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006540:	b29a      	uxth	r2, r3
 8006542:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	e088      	b.n	800665c <USB_EPStartXfer+0x12a2>
 800654a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800654e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b3e      	cmp	r3, #62	@ 0x3e
 8006558:	d826      	bhi.n	80065a8 <USB_EPStartXfer+0x11ee>
 800655a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800656c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <USB_EPStartXfer+0x11d0>
 8006580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006584:	3301      	adds	r3, #1
 8006586:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800658a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29a      	uxth	r2, r3
 8006592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006596:	b29b      	uxth	r3, r3
 8006598:	029b      	lsls	r3, r3, #10
 800659a:	b29b      	uxth	r3, r3
 800659c:	4313      	orrs	r3, r2
 800659e:	b29a      	uxth	r2, r3
 80065a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	e059      	b.n	800665c <USB_EPStartXfer+0x12a2>
 80065a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	095b      	lsrs	r3, r3, #5
 80065b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d104      	bne.n	80065d8 <USB_EPStartXfer+0x121e>
 80065ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d2:	3b01      	subs	r3, #1
 80065d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29a      	uxth	r2, r3
 80065e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	029b      	lsls	r3, r3, #10
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	4313      	orrs	r3, r2
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	e02d      	b.n	800665c <USB_EPStartXfer+0x12a2>
 8006600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d125      	bne.n	800665c <USB_EPStartXfer+0x12a2>
 8006610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006626:	4413      	add	r3, r2
 8006628:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800662c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	00da      	lsls	r2, r3, #3
 800663a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800663e:	4413      	add	r3, r2
 8006640:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006644:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	b29a      	uxth	r2, r3
 8006656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800665a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 8218 	beq.w	8006a9e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800666e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800668e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <USB_EPStartXfer+0x12ec>
 800669a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800669e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10d      	bne.n	80066c2 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f040 81f5 	bne.w	8006a9e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f040 81ee 	bne.w	8006a9e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80066c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80066ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	441a      	add	r2, r3
 8006706:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800670a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800670e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006716:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800671a:	b29b      	uxth	r3, r3
 800671c:	8013      	strh	r3, [r2, #0]
 800671e:	e1be      	b.n	8006a9e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	78db      	ldrb	r3, [r3, #3]
 800672c:	2b01      	cmp	r3, #1
 800672e:	f040 81b4 	bne.w	8006a9a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	429a      	cmp	r2, r3
 800674c:	d917      	bls.n	800677e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800674e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800675e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	619a      	str	r2, [r3, #24]
 800677c:	e00e      	b.n	800679c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800677e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800678e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2200      	movs	r2, #0
 800679a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800679c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	785b      	ldrb	r3, [r3, #1]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f040 8085 	bne.w	80068b8 <USB_EPStartXfer+0x14fe>
 80067ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067d2:	4413      	add	r3, r2
 80067d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	00da      	lsls	r2, r3, #3
 80067e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067ea:	4413      	add	r3, r2
 80067ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006800:	b29a      	uxth	r2, r3
 8006802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10c      	bne.n	800682a <USB_EPStartXfer+0x1470>
 8006810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006820:	b29a      	uxth	r2, r3
 8006822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	e077      	b.n	800691a <USB_EPStartXfer+0x1560>
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006830:	d81e      	bhi.n	8006870 <USB_EPStartXfer+0x14b6>
 8006832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <USB_EPStartXfer+0x1498>
 8006848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800684c:	3301      	adds	r3, #1
 800684e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29a      	uxth	r2, r3
 800685a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800685e:	b29b      	uxth	r3, r3
 8006860:	029b      	lsls	r3, r3, #10
 8006862:	b29b      	uxth	r3, r3
 8006864:	4313      	orrs	r3, r2
 8006866:	b29a      	uxth	r2, r3
 8006868:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	e054      	b.n	800691a <USB_EPStartXfer+0x1560>
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006874:	095b      	lsrs	r3, r3, #5
 8006876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687e:	f003 031f 	and.w	r3, r3, #31
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <USB_EPStartXfer+0x14d6>
 8006886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800688a:	3b01      	subs	r3, #1
 800688c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29a      	uxth	r2, r3
 8006898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800689c:	b29b      	uxth	r3, r3
 800689e:	029b      	lsls	r3, r3, #10
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	4313      	orrs	r3, r2
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068b4:	801a      	strh	r2, [r3, #0]
 80068b6:	e030      	b.n	800691a <USB_EPStartXfer+0x1560>
 80068b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	785b      	ldrb	r3, [r3, #1]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d128      	bne.n	800691a <USB_EPStartXfer+0x1560>
 80068c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80068d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ec:	4413      	add	r3, r2
 80068ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80068f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	00da      	lsls	r2, r3, #3
 8006900:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006904:	4413      	add	r3, r2
 8006906:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800690a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	b29a      	uxth	r2, r3
 8006914:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f040 8085 	bne.w	8006a44 <USB_EPStartXfer+0x168a>
 800693a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006956:	b29b      	uxth	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800695e:	4413      	add	r3, r2
 8006960:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	00da      	lsls	r2, r3, #3
 8006972:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006976:	4413      	add	r3, r2
 8006978:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800697c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006980:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800698c:	b29a      	uxth	r2, r3
 800698e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006992:	801a      	strh	r2, [r3, #0]
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10c      	bne.n	80069b6 <USB_EPStartXfer+0x15fc>
 800699c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	e073      	b.n	8006a9e <USB_EPStartXfer+0x16e4>
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80069bc:	d81e      	bhi.n	80069fc <USB_EPStartXfer+0x1642>
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <USB_EPStartXfer+0x1624>
 80069d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069d8:	3301      	adds	r3, #1
 80069da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	029b      	lsls	r3, r3, #10
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	4313      	orrs	r3, r2
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	e050      	b.n	8006a9e <USB_EPStartXfer+0x16e4>
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d104      	bne.n	8006a1c <USB_EPStartXfer+0x1662>
 8006a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a16:	3b01      	subs	r3, #1
 8006a18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	029b      	lsls	r3, r3, #10
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a40:	801a      	strh	r2, [r3, #0]
 8006a42:	e02c      	b.n	8006a9e <USB_EPStartXfer+0x16e4>
 8006a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d124      	bne.n	8006a9e <USB_EPStartXfer+0x16e4>
 8006a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	00da      	lsls	r2, r3, #3
 8006a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a82:	4413      	add	r3, r2
 8006a84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a96:	801a      	strh	r2, [r3, #0]
 8006a98:	e001      	b.n	8006a9e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e03a      	b.n	8006b14 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ac8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006acc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ad0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ad4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ad8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006adc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006afe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	785b      	ldrb	r3, [r3, #1]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d020      	beq.n	8006b72 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b46:	81bb      	strh	r3, [r7, #12]
 8006b48:	89bb      	ldrh	r3, [r7, #12]
 8006b4a:	f083 0310 	eor.w	r3, r3, #16
 8006b4e:	81bb      	strh	r3, [r7, #12]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	441a      	add	r2, r3
 8006b5a:	89bb      	ldrh	r3, [r7, #12]
 8006b5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8013      	strh	r3, [r2, #0]
 8006b70:	e01f      	b.n	8006bb2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b88:	81fb      	strh	r3, [r7, #14]
 8006b8a:	89fb      	ldrh	r3, [r7, #14]
 8006b8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b90:	81fb      	strh	r3, [r7, #14]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	89fb      	ldrh	r3, [r7, #14]
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	7b1b      	ldrb	r3, [r3, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f040 809d 	bne.w	8006d0e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d04c      	beq.n	8006c76 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	823b      	strh	r3, [r7, #16]
 8006bea:	8a3b      	ldrh	r3, [r7, #16]
 8006bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01b      	beq.n	8006c2c <USB_EPClearStall+0x6c>
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0a:	81fb      	strh	r3, [r7, #14]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	441a      	add	r2, r3
 8006c16:	89fb      	ldrh	r3, [r7, #14]
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	78db      	ldrb	r3, [r3, #3]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d06c      	beq.n	8006d0e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c4a:	81bb      	strh	r3, [r7, #12]
 8006c4c:	89bb      	ldrh	r3, [r7, #12]
 8006c4e:	f083 0320 	eor.w	r3, r3, #32
 8006c52:	81bb      	strh	r3, [r7, #12]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	89bb      	ldrh	r3, [r7, #12]
 8006c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8013      	strh	r3, [r2, #0]
 8006c74:	e04b      	b.n	8006d0e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	82fb      	strh	r3, [r7, #22]
 8006c84:	8afb      	ldrh	r3, [r7, #22]
 8006c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01b      	beq.n	8006cc6 <USB_EPClearStall+0x106>
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca4:	82bb      	strh	r3, [r7, #20]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	441a      	add	r2, r3
 8006cb0:	8abb      	ldrh	r3, [r7, #20]
 8006cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cdc:	827b      	strh	r3, [r7, #18]
 8006cde:	8a7b      	ldrh	r3, [r7, #18]
 8006ce0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ce4:	827b      	strh	r3, [r7, #18]
 8006ce6:	8a7b      	ldrh	r3, [r7, #18]
 8006ce8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006cec:	827b      	strh	r3, [r7, #18]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	8a7b      	ldrh	r3, [r7, #18]
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d103      	bne.n	8006d36 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2280      	movs	r2, #128	@ 0x80
 8006d32:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b08b      	sub	sp, #44	@ 0x2c
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	4611      	mov	r1, r2
 8006d86:	461a      	mov	r2, r3
 8006d88:	460b      	mov	r3, r1
 8006d8a:	80fb      	strh	r3, [r7, #6]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d90:	88bb      	ldrh	r3, [r7, #4]
 8006d92:	3301      	adds	r3, #1
 8006d94:	085b      	lsrs	r3, r3, #1
 8006d96:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006da0:	88fa      	ldrh	r2, [r7, #6]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006daa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db0:	e01b      	b.n	8006dea <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	b21a      	sxth	r2, r3
 8006dc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	b21b      	sxth	r3, r3
 8006dca:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	8a7a      	ldrh	r2, [r7, #18]
 8006dd0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	3301      	adds	r3, #1
 8006de2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de6:	3b01      	subs	r3, #1
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e0      	bne.n	8006db2 <USB_WritePMA+0x38>
  }
}
 8006df0:	bf00      	nop
 8006df2:	bf00      	nop
 8006df4:	372c      	adds	r7, #44	@ 0x2c
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b08b      	sub	sp, #44	@ 0x2c
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	4611      	mov	r1, r2
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	80fb      	strh	r3, [r7, #6]
 8006e10:	4613      	mov	r3, r2
 8006e12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006e14:	88bb      	ldrh	r3, [r7, #4]
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e24:	88fa      	ldrh	r2, [r7, #6]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e2e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e34:	e018      	b.n	8006e68 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	3302      	adds	r3, #2
 8006e42:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	0a1b      	lsrs	r3, r3, #8
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	3b01      	subs	r3, #1
 8006e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e3      	bne.n	8006e36 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006e6e:	88bb      	ldrh	r3, [r7, #4]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	701a      	strb	r2, [r3, #0]
  }
}
 8006e8a:	bf00      	nop
 8006e8c:	372c      	adds	r7, #44	@ 0x2c
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7c1b      	ldrb	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d115      	bne.n	8006eda <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006eae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	2181      	movs	r1, #129	@ 0x81
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 febb 	bl	8008c32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ec2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	2101      	movs	r1, #1
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 feb1 	bl	8008c32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006ed8:	e012      	b.n	8006f00 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006eda:	2340      	movs	r3, #64	@ 0x40
 8006edc:	2202      	movs	r2, #2
 8006ede:	2181      	movs	r1, #129	@ 0x81
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 fea6 	bl	8008c32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006eec:	2340      	movs	r3, #64	@ 0x40
 8006eee:	2202      	movs	r2, #2
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fe9d 	bl	8008c32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f00:	2308      	movs	r3, #8
 8006f02:	2203      	movs	r2, #3
 8006f04:	2182      	movs	r1, #130	@ 0x82
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 fe93 	bl	8008c32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f12:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006f16:	f001 ffb3 	bl	8008e80 <USBD_static_malloc>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
 8006f30:	e026      	b.n	8006f80 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f38:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7c1b      	ldrb	r3, [r3, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f66:	2101      	movs	r1, #1
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 ff53 	bl	8008e14 <USBD_LL_PrepareReceive>
 8006f6e:	e007      	b.n	8006f80 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f76:	2340      	movs	r3, #64	@ 0x40
 8006f78:	2101      	movs	r1, #1
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 ff4a 	bl	8008e14 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f9a:	2181      	movs	r1, #129	@ 0x81
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fe6e 	bl	8008c7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006fa8:	2101      	movs	r1, #1
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 fe67 	bl	8008c7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006fb8:	2182      	movs	r1, #130	@ 0x82
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fe5f 	bl	8008c7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00e      	beq.n	8006fee <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 ff5b 	bl	8008e9c <USBD_static_free>
    pdev->pClassData = NULL;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007008:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800701e:	2b00      	cmp	r3, #0
 8007020:	d039      	beq.n	8007096 <USBD_CDC_Setup+0x9e>
 8007022:	2b20      	cmp	r3, #32
 8007024:	d17f      	bne.n	8007126 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d029      	beq.n	8007082 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	b25b      	sxtb	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	da11      	bge.n	800705c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007044:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	88d2      	ldrh	r2, [r2, #6]
 800704a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800704c:	6939      	ldr	r1, [r7, #16]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	88db      	ldrh	r3, [r3, #6]
 8007052:	461a      	mov	r2, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fa0f 	bl	8008478 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800705a:	e06b      	b.n	8007134 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	785a      	ldrb	r2, [r3, #1]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	88db      	ldrh	r3, [r3, #6]
 800706a:	b2da      	uxtb	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007072:	6939      	ldr	r1, [r7, #16]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	88db      	ldrh	r3, [r3, #6]
 8007078:	461a      	mov	r2, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fa2a 	bl	80084d4 <USBD_CtlPrepareRx>
      break;
 8007080:	e058      	b.n	8007134 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	7850      	ldrb	r0, [r2, #1]
 800708e:	2200      	movs	r2, #0
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	4798      	blx	r3
      break;
 8007094:	e04e      	b.n	8007134 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2b0b      	cmp	r3, #11
 800709c:	d02e      	beq.n	80070fc <USBD_CDC_Setup+0x104>
 800709e:	2b0b      	cmp	r3, #11
 80070a0:	dc38      	bgt.n	8007114 <USBD_CDC_Setup+0x11c>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <USBD_CDC_Setup+0xb4>
 80070a6:	2b0a      	cmp	r3, #10
 80070a8:	d014      	beq.n	80070d4 <USBD_CDC_Setup+0xdc>
 80070aa:	e033      	b.n	8007114 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d107      	bne.n	80070c6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80070b6:	f107 030c 	add.w	r3, r7, #12
 80070ba:	2202      	movs	r2, #2
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 f9da 	bl	8008478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070c4:	e02e      	b.n	8007124 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 f96a 	bl	80083a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80070ce:	2302      	movs	r3, #2
 80070d0:	75fb      	strb	r3, [r7, #23]
          break;
 80070d2:	e027      	b.n	8007124 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d107      	bne.n	80070ee <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80070de:	f107 030f 	add.w	r3, r7, #15
 80070e2:	2201      	movs	r2, #1
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 f9c6 	bl	8008478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070ec:	e01a      	b.n	8007124 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 f956 	bl	80083a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80070f6:	2302      	movs	r3, #2
 80070f8:	75fb      	strb	r3, [r7, #23]
          break;
 80070fa:	e013      	b.n	8007124 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007102:	2b03      	cmp	r3, #3
 8007104:	d00d      	beq.n	8007122 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 f94a 	bl	80083a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800710e:	2302      	movs	r3, #2
 8007110:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007112:	e006      	b.n	8007122 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 f943 	bl	80083a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800711c:	2302      	movs	r3, #2
 800711e:	75fb      	strb	r3, [r7, #23]
          break;
 8007120:	e000      	b.n	8007124 <USBD_CDC_Setup+0x12c>
          break;
 8007122:	bf00      	nop
      }
      break;
 8007124:	e006      	b.n	8007134 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 f93a 	bl	80083a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800712e:	2302      	movs	r3, #2
 8007130:	75fb      	strb	r3, [r7, #23]
      break;
 8007132:	bf00      	nop
  }

  return ret;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	460b      	mov	r3, r1
 8007148:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007150:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007158:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d03a      	beq.n	80071da <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007164:	78fa      	ldrb	r2, [r7, #3]
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	331c      	adds	r3, #28
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d029      	beq.n	80071ce <USBD_CDC_DataIn+0x90>
 800717a:	78fa      	ldrb	r2, [r7, #3]
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	331c      	adds	r3, #28
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	78f9      	ldrb	r1, [r7, #3]
 800718e:	68b8      	ldr	r0, [r7, #8]
 8007190:	460b      	mov	r3, r1
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	4403      	add	r3, r0
 800719a:	3320      	adds	r3, #32
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	fbb2 f1f3 	udiv	r1, r2, r3
 80071a2:	fb01 f303 	mul.w	r3, r1, r3
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d110      	bne.n	80071ce <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80071ac:	78fa      	ldrb	r2, [r7, #3]
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	440b      	add	r3, r1
 80071ba:	331c      	adds	r3, #28
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80071c0:	78f9      	ldrb	r1, [r7, #3]
 80071c2:	2300      	movs	r3, #0
 80071c4:	2200      	movs	r2, #0
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 fe01 	bl	8008dce <USBD_LL_Transmit>
 80071cc:	e003      	b.n	80071d6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e000      	b.n	80071dc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80071da:	2302      	movs	r3, #2
  }
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 fe2c 	bl	8008e5a <USBD_LL_GetRxDataSize>
 8007202:	4602      	mov	r2, r0
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00d      	beq.n	8007230 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007228:	4611      	mov	r1, r2
 800722a:	4798      	blx	r3

    return USBD_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	e000      	b.n	8007232 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007230:	2302      	movs	r3, #2
  }
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007248:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007250:	2b00      	cmp	r3, #0
 8007252:	d014      	beq.n	800727e <USBD_CDC_EP0_RxReady+0x44>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800725a:	2bff      	cmp	r3, #255	@ 0xff
 800725c:	d00f      	beq.n	800727e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800726c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007274:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	22ff      	movs	r2, #255	@ 0xff
 800727a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2243      	movs	r2, #67	@ 0x43
 8007294:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007296:	4b03      	ldr	r3, [pc, #12]	@ (80072a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	200000a0 	.word	0x200000a0

080072a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2243      	movs	r2, #67	@ 0x43
 80072b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80072b6:	4b03      	ldr	r3, [pc, #12]	@ (80072c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	2000005c 	.word	0x2000005c

080072c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2243      	movs	r2, #67	@ 0x43
 80072d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80072d6:	4b03      	ldr	r3, [pc, #12]	@ (80072e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	200000e4 	.word	0x200000e4

080072e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	220a      	movs	r2, #10
 80072f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80072f6:	4b03      	ldr	r3, [pc, #12]	@ (8007304 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	20000018 	.word	0x20000018

08007308 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007312:	2302      	movs	r3, #2
 8007314:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007328:	7bfb      	ldrb	r3, [r7, #15]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007336:	b480      	push	{r7}
 8007338:	b087      	sub	sp, #28
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	4613      	mov	r3, r2
 8007342:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800734a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007354:	88fa      	ldrh	r2, [r7, #6]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800736a:	b480      	push	{r7}
 800736c:	b085      	sub	sp, #20
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800737a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01c      	beq.n	80073e6 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d115      	bne.n	80073e2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2181      	movs	r1, #129	@ 0x81
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 fcf8 	bl	8008dce <USBD_LL_Transmit>

      return USBD_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	e002      	b.n	80073e8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80073e6:	2302      	movs	r3, #2
  }
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d017      	beq.n	800743a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7c1b      	ldrb	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800741c:	2101      	movs	r1, #1
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 fcf8 	bl	8008e14 <USBD_LL_PrepareReceive>
 8007424:	e007      	b.n	8007436 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800742c:	2340      	movs	r3, #64	@ 0x40
 800742e:	2101      	movs	r1, #1
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f001 fcef 	bl	8008e14 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e000      	b.n	800743c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800743a:	2302      	movs	r3, #2
  }
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007458:	2302      	movs	r3, #2
 800745a:	e01a      	b.n	8007492 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	79fa      	ldrb	r2, [r7, #7]
 8007488:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f001 fb5c 	bl	8008b48 <USBD_LL_Init>

  return USBD_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d006      	beq.n	80074bc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]
 80074ba:	e001      	b.n	80074c0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80074bc:	2302      	movs	r3, #2
 80074be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 fb90 	bl	8008bfc <USBD_LL_Start>

  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007508:	2302      	movs	r3, #2
 800750a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00c      	beq.n	8007530 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	4611      	mov	r1, r2
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	78fa      	ldrb	r2, [r7, #3]
 8007550:	4611      	mov	r1, r2
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3

  return USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fedb 	bl	800832e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007586:	461a      	mov	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	2b02      	cmp	r3, #2
 800759a:	d016      	beq.n	80075ca <USBD_LL_SetupStage+0x6a>
 800759c:	2b02      	cmp	r3, #2
 800759e:	d81c      	bhi.n	80075da <USBD_LL_SetupStage+0x7a>
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <USBD_LL_SetupStage+0x4a>
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d008      	beq.n	80075ba <USBD_LL_SetupStage+0x5a>
 80075a8:	e017      	b.n	80075da <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9ce 	bl	8007954 <USBD_StdDevReq>
      break;
 80075b8:	e01a      	b.n	80075f0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa30 	bl	8007a28 <USBD_StdItfReq>
      break;
 80075c8:	e012      	b.n	80075f0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa70 	bl	8007ab8 <USBD_StdEPReq>
      break;
 80075d8:	e00a      	b.n	80075f0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80075e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fb67 	bl	8008cbc <USBD_LL_StallEP>
      break;
 80075ee:	bf00      	nop
  }

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b086      	sub	sp, #24
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	460b      	mov	r3, r1
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d14b      	bne.n	80076a6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007614:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800761c:	2b03      	cmp	r3, #3
 800761e:	d134      	bne.n	800768a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	68da      	ldr	r2, [r3, #12]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	429a      	cmp	r2, r3
 800762a:	d919      	bls.n	8007660 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	1ad2      	subs	r2, r2, r3
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007642:	429a      	cmp	r2, r3
 8007644:	d203      	bcs.n	800764e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800764a:	b29b      	uxth	r3, r3
 800764c:	e002      	b.n	8007654 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007652:	b29b      	uxth	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 ff59 	bl	8008510 <USBD_CtlContinueRx>
 800765e:	e038      	b.n	80076d2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007672:	2b03      	cmp	r3, #3
 8007674:	d105      	bne.n	8007682 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 ff56 	bl	8008534 <USBD_CtlSendStatus>
 8007688:	e023      	b.n	80076d2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007690:	2b05      	cmp	r3, #5
 8007692:	d11e      	bne.n	80076d2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800769c:	2100      	movs	r1, #0
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f001 fb0c 	bl	8008cbc <USBD_LL_StallEP>
 80076a4:	e015      	b.n	80076d2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00d      	beq.n	80076ce <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d108      	bne.n	80076ce <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	7afa      	ldrb	r2, [r7, #11]
 80076c6:	4611      	mov	r1, r2
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	4798      	blx	r3
 80076cc:	e001      	b.n	80076d2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076ce:	2302      	movs	r3, #2
 80076d0:	e000      	b.n	80076d4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	460b      	mov	r3, r1
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d17f      	bne.n	80077f0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3314      	adds	r3, #20
 80076f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d15c      	bne.n	80077ba <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	429a      	cmp	r2, r3
 800770a:	d915      	bls.n	8007738 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	1ad2      	subs	r2, r2, r3
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	b29b      	uxth	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 fec3 	bl	80084b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800772a:	2300      	movs	r3, #0
 800772c:	2200      	movs	r2, #0
 800772e:	2100      	movs	r1, #0
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f001 fb6f 	bl	8008e14 <USBD_LL_PrepareReceive>
 8007736:	e04e      	b.n	80077d6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	6912      	ldr	r2, [r2, #16]
 8007740:	fbb3 f1f2 	udiv	r1, r3, r2
 8007744:	fb01 f202 	mul.w	r2, r1, r2
 8007748:	1a9b      	subs	r3, r3, r2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d11c      	bne.n	8007788 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007756:	429a      	cmp	r2, r3
 8007758:	d316      	bcc.n	8007788 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	689a      	ldr	r2, [r3, #8]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007764:	429a      	cmp	r2, r3
 8007766:	d20f      	bcs.n	8007788 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007768:	2200      	movs	r2, #0
 800776a:	2100      	movs	r1, #0
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fe9f 	bl	80084b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800777a:	2300      	movs	r3, #0
 800777c:	2200      	movs	r2, #0
 800777e:	2100      	movs	r1, #0
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f001 fb47 	bl	8008e14 <USBD_LL_PrepareReceive>
 8007786:	e026      	b.n	80077d6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800779a:	2b03      	cmp	r3, #3
 800779c:	d105      	bne.n	80077aa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80077aa:	2180      	movs	r1, #128	@ 0x80
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f001 fa85 	bl	8008cbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fed1 	bl	800855a <USBD_CtlReceiveStatus>
 80077b8:	e00d      	b.n	80077d6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d004      	beq.n	80077ce <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d103      	bne.n	80077d6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80077ce:	2180      	movs	r1, #128	@ 0x80
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f001 fa73 	bl	8008cbc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d11d      	bne.n	800781c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7ff fe80 	bl	80074e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80077ee:	e015      	b.n	800781c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00d      	beq.n	8007818 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007802:	2b03      	cmp	r3, #3
 8007804:	d108      	bne.n	8007818 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	7afa      	ldrb	r2, [r7, #11]
 8007810:	4611      	mov	r1, r2
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	4798      	blx	r3
 8007816:	e001      	b.n	800781c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007818:	2302      	movs	r3, #2
 800781a:	e000      	b.n	800781e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800782e:	2340      	movs	r3, #64	@ 0x40
 8007830:	2200      	movs	r2, #0
 8007832:	2100      	movs	r1, #0
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 f9fc 	bl	8008c32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2240      	movs	r2, #64	@ 0x40
 8007846:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800784a:	2340      	movs	r3, #64	@ 0x40
 800784c:	2200      	movs	r2, #0
 800784e:	2180      	movs	r1, #128	@ 0x80
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 f9ee 	bl	8008c32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2240      	movs	r2, #64	@ 0x40
 8007860:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6852      	ldr	r2, [r2, #4]
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	4611      	mov	r1, r2
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
  }

  return USBD_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2204      	movs	r2, #4
 80078e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007900:	2b04      	cmp	r3, #4
 8007902:	d105      	bne.n	8007910 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800792c:	2b03      	cmp	r3, #3
 800792e:	d10b      	bne.n	8007948 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800796a:	2b40      	cmp	r3, #64	@ 0x40
 800796c:	d005      	beq.n	800797a <USBD_StdDevReq+0x26>
 800796e:	2b40      	cmp	r3, #64	@ 0x40
 8007970:	d84f      	bhi.n	8007a12 <USBD_StdDevReq+0xbe>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <USBD_StdDevReq+0x36>
 8007976:	2b20      	cmp	r3, #32
 8007978:	d14b      	bne.n	8007a12 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	4798      	blx	r3
      break;
 8007988:	e048      	b.n	8007a1c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	785b      	ldrb	r3, [r3, #1]
 800798e:	2b09      	cmp	r3, #9
 8007990:	d839      	bhi.n	8007a06 <USBD_StdDevReq+0xb2>
 8007992:	a201      	add	r2, pc, #4	@ (adr r2, 8007998 <USBD_StdDevReq+0x44>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	080079e9 	.word	0x080079e9
 800799c:	080079fd 	.word	0x080079fd
 80079a0:	08007a07 	.word	0x08007a07
 80079a4:	080079f3 	.word	0x080079f3
 80079a8:	08007a07 	.word	0x08007a07
 80079ac:	080079cb 	.word	0x080079cb
 80079b0:	080079c1 	.word	0x080079c1
 80079b4:	08007a07 	.word	0x08007a07
 80079b8:	080079df 	.word	0x080079df
 80079bc:	080079d5 	.word	0x080079d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f9dc 	bl	8007d80 <USBD_GetDescriptor>
          break;
 80079c8:	e022      	b.n	8007a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fb3f 	bl	8008050 <USBD_SetAddress>
          break;
 80079d2:	e01d      	b.n	8007a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fb7e 	bl	80080d8 <USBD_SetConfig>
          break;
 80079dc:	e018      	b.n	8007a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fc07 	bl	80081f4 <USBD_GetConfig>
          break;
 80079e6:	e013      	b.n	8007a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fc37 	bl	800825e <USBD_GetStatus>
          break;
 80079f0:	e00e      	b.n	8007a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fc65 	bl	80082c4 <USBD_SetFeature>
          break;
 80079fa:	e009      	b.n	8007a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fc74 	bl	80082ec <USBD_ClrFeature>
          break;
 8007a04:	e004      	b.n	8007a10 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fcca 	bl	80083a2 <USBD_CtlError>
          break;
 8007a0e:	bf00      	nop
      }
      break;
 8007a10:	e004      	b.n	8007a1c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fcc4 	bl	80083a2 <USBD_CtlError>
      break;
 8007a1a:	bf00      	nop
  }

  return ret;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop

08007a28 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a3e:	2b40      	cmp	r3, #64	@ 0x40
 8007a40:	d005      	beq.n	8007a4e <USBD_StdItfReq+0x26>
 8007a42:	2b40      	cmp	r3, #64	@ 0x40
 8007a44:	d82e      	bhi.n	8007aa4 <USBD_StdItfReq+0x7c>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <USBD_StdItfReq+0x26>
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d12a      	bne.n	8007aa4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a54:	3b01      	subs	r3, #1
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d81d      	bhi.n	8007a96 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	889b      	ldrh	r3, [r3, #4]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d813      	bhi.n	8007a8c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	4798      	blx	r3
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	88db      	ldrh	r3, [r3, #6]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d110      	bne.n	8007aa0 <USBD_StdItfReq+0x78>
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10d      	bne.n	8007aa0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fd55 	bl	8008534 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a8a:	e009      	b.n	8007aa0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fc87 	bl	80083a2 <USBD_CtlError>
          break;
 8007a94:	e004      	b.n	8007aa0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fc82 	bl	80083a2 <USBD_CtlError>
          break;
 8007a9e:	e000      	b.n	8007aa2 <USBD_StdItfReq+0x7a>
          break;
 8007aa0:	bf00      	nop
      }
      break;
 8007aa2:	e004      	b.n	8007aae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fc7b 	bl	80083a2 <USBD_CtlError>
      break;
 8007aac:	bf00      	nop
  }

  return USBD_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	889b      	ldrh	r3, [r3, #4]
 8007aca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ad4:	2b40      	cmp	r3, #64	@ 0x40
 8007ad6:	d007      	beq.n	8007ae8 <USBD_StdEPReq+0x30>
 8007ad8:	2b40      	cmp	r3, #64	@ 0x40
 8007ada:	f200 8146 	bhi.w	8007d6a <USBD_StdEPReq+0x2b2>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <USBD_StdEPReq+0x40>
 8007ae2:	2b20      	cmp	r3, #32
 8007ae4:	f040 8141 	bne.w	8007d6a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
      break;
 8007af6:	e13d      	b.n	8007d74 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b00:	2b20      	cmp	r3, #32
 8007b02:	d10a      	bne.n	8007b1a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	e12d      	b.n	8007d76 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d007      	beq.n	8007b32 <USBD_StdEPReq+0x7a>
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	f300 811b 	bgt.w	8007d5e <USBD_StdEPReq+0x2a6>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d072      	beq.n	8007c12 <USBD_StdEPReq+0x15a>
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d03a      	beq.n	8007ba6 <USBD_StdEPReq+0xee>
 8007b30:	e115      	b.n	8007d5e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d002      	beq.n	8007b42 <USBD_StdEPReq+0x8a>
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d015      	beq.n	8007b6c <USBD_StdEPReq+0xb4>
 8007b40:	e02b      	b.n	8007b9a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00c      	beq.n	8007b62 <USBD_StdEPReq+0xaa>
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	2b80      	cmp	r3, #128	@ 0x80
 8007b4c:	d009      	beq.n	8007b62 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 f8b2 	bl	8008cbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b58:	2180      	movs	r1, #128	@ 0x80
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 f8ae 	bl	8008cbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b60:	e020      	b.n	8007ba4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fc1c 	bl	80083a2 <USBD_CtlError>
              break;
 8007b6a:	e01b      	b.n	8007ba4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	885b      	ldrh	r3, [r3, #2]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10e      	bne.n	8007b92 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00b      	beq.n	8007b92 <USBD_StdEPReq+0xda>
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b80      	cmp	r3, #128	@ 0x80
 8007b7e:	d008      	beq.n	8007b92 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	88db      	ldrh	r3, [r3, #6]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d104      	bne.n	8007b92 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 f895 	bl	8008cbc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fcce 	bl	8008534 <USBD_CtlSendStatus>

              break;
 8007b98:	e004      	b.n	8007ba4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fc00 	bl	80083a2 <USBD_CtlError>
              break;
 8007ba2:	bf00      	nop
          }
          break;
 8007ba4:	e0e0      	b.n	8007d68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d002      	beq.n	8007bb6 <USBD_StdEPReq+0xfe>
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d015      	beq.n	8007be0 <USBD_StdEPReq+0x128>
 8007bb4:	e026      	b.n	8007c04 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00c      	beq.n	8007bd6 <USBD_StdEPReq+0x11e>
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b80      	cmp	r3, #128	@ 0x80
 8007bc0:	d009      	beq.n	8007bd6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 f878 	bl	8008cbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007bcc:	2180      	movs	r1, #128	@ 0x80
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 f874 	bl	8008cbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bd4:	e01c      	b.n	8007c10 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fbe2 	bl	80083a2 <USBD_CtlError>
              break;
 8007bde:	e017      	b.n	8007c10 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	885b      	ldrh	r3, [r3, #2]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d112      	bne.n	8007c0e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 f87f 	bl	8008cfa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fc99 	bl	8008534 <USBD_CtlSendStatus>
              }
              break;
 8007c02:	e004      	b.n	8007c0e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fbcb 	bl	80083a2 <USBD_CtlError>
              break;
 8007c0c:	e000      	b.n	8007c10 <USBD_StdEPReq+0x158>
              break;
 8007c0e:	bf00      	nop
          }
          break;
 8007c10:	e0aa      	b.n	8007d68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d002      	beq.n	8007c22 <USBD_StdEPReq+0x16a>
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d032      	beq.n	8007c86 <USBD_StdEPReq+0x1ce>
 8007c20:	e097      	b.n	8007d52 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <USBD_StdEPReq+0x180>
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	2b80      	cmp	r3, #128	@ 0x80
 8007c2c:	d004      	beq.n	8007c38 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fbb6 	bl	80083a2 <USBD_CtlError>
                break;
 8007c36:	e091      	b.n	8007d5c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	da0b      	bge.n	8007c58 <USBD_StdEPReq+0x1a0>
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	3310      	adds	r3, #16
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4413      	add	r3, r2
 8007c54:	3304      	adds	r3, #4
 8007c56:	e00b      	b.n	8007c70 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3304      	adds	r3, #4
 8007c70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fbfa 	bl	8008478 <USBD_CtlSendData>
              break;
 8007c84:	e06a      	b.n	8007d5c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	da11      	bge.n	8007cb2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	f003 020f 	and.w	r2, r3, #15
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	3318      	adds	r3, #24
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d117      	bne.n	8007cd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fb79 	bl	80083a2 <USBD_CtlError>
                  break;
 8007cb0:	e054      	b.n	8007d5c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	f003 020f 	and.w	r2, r3, #15
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d104      	bne.n	8007cd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fb66 	bl	80083a2 <USBD_CtlError>
                  break;
 8007cd6:	e041      	b.n	8007d5c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da0b      	bge.n	8007cf8 <USBD_StdEPReq+0x240>
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
 8007ce2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	3310      	adds	r3, #16
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	e00b      	b.n	8007d10 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	3304      	adds	r3, #4
 8007d10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <USBD_StdEPReq+0x266>
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	2b80      	cmp	r3, #128	@ 0x80
 8007d1c:	d103      	bne.n	8007d26 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e00e      	b.n	8007d44 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 f804 	bl	8008d38 <USBD_LL_IsStallEP>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	e002      	b.n	8007d44 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2202      	movs	r2, #2
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fb94 	bl	8008478 <USBD_CtlSendData>
              break;
 8007d50:	e004      	b.n	8007d5c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fb24 	bl	80083a2 <USBD_CtlError>
              break;
 8007d5a:	bf00      	nop
          }
          break;
 8007d5c:	e004      	b.n	8007d68 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fb1e 	bl	80083a2 <USBD_CtlError>
          break;
 8007d66:	bf00      	nop
      }
      break;
 8007d68:	e004      	b.n	8007d74 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fb18 	bl	80083a2 <USBD_CtlError>
      break;
 8007d72:	bf00      	nop
  }

  return ret;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	885b      	ldrh	r3, [r3, #2]
 8007d9a:	0a1b      	lsrs	r3, r3, #8
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	2b06      	cmp	r3, #6
 8007da2:	f200 8128 	bhi.w	8007ff6 <USBD_GetDescriptor+0x276>
 8007da6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dac <USBD_GetDescriptor+0x2c>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007dc9 	.word	0x08007dc9
 8007db0:	08007de1 	.word	0x08007de1
 8007db4:	08007e21 	.word	0x08007e21
 8007db8:	08007ff7 	.word	0x08007ff7
 8007dbc:	08007ff7 	.word	0x08007ff7
 8007dc0:	08007f97 	.word	0x08007f97
 8007dc4:	08007fc3 	.word	0x08007fc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 0108 	add.w	r1, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
      break;
 8007dde:	e112      	b.n	8008006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	7c1b      	ldrb	r3, [r3, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10d      	bne.n	8007e04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df0:	f107 0208 	add.w	r2, r7, #8
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	2202      	movs	r2, #2
 8007e00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e02:	e100      	b.n	8008006 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0c:	f107 0208 	add.w	r2, r7, #8
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	701a      	strb	r2, [r3, #0]
      break;
 8007e1e:	e0f2      	b.n	8008006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	885b      	ldrh	r3, [r3, #2]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b05      	cmp	r3, #5
 8007e28:	f200 80ac 	bhi.w	8007f84 <USBD_GetDescriptor+0x204>
 8007e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e34 <USBD_GetDescriptor+0xb4>)
 8007e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e32:	bf00      	nop
 8007e34:	08007e4d 	.word	0x08007e4d
 8007e38:	08007e81 	.word	0x08007e81
 8007e3c:	08007eb5 	.word	0x08007eb5
 8007e40:	08007ee9 	.word	0x08007ee9
 8007e44:	08007f1d 	.word	0x08007f1d
 8007e48:	08007f51 	.word	0x08007f51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	7c12      	ldrb	r2, [r2, #16]
 8007e64:	f107 0108 	add.w	r1, r7, #8
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6e:	e091      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa95 	bl	80083a2 <USBD_CtlError>
            err++;
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7e:	e089      	b.n	8007f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00b      	beq.n	8007ea4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	7c12      	ldrb	r2, [r2, #16]
 8007e98:	f107 0108 	add.w	r1, r7, #8
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
 8007ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea2:	e077      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa7b 	bl	80083a2 <USBD_CtlError>
            err++;
 8007eac:	7afb      	ldrb	r3, [r7, #11]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb2:	e06f      	b.n	8007f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	7c12      	ldrb	r2, [r2, #16]
 8007ecc:	f107 0108 	add.w	r1, r7, #8
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
 8007ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ed6:	e05d      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa61 	bl	80083a2 <USBD_CtlError>
            err++;
 8007ee0:	7afb      	ldrb	r3, [r7, #11]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ee6:	e055      	b.n	8007f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	7c12      	ldrb	r2, [r2, #16]
 8007f00:	f107 0108 	add.w	r1, r7, #8
 8007f04:	4610      	mov	r0, r2
 8007f06:	4798      	blx	r3
 8007f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f0a:	e043      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fa47 	bl	80083a2 <USBD_CtlError>
            err++;
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	3301      	adds	r3, #1
 8007f18:	72fb      	strb	r3, [r7, #11]
          break;
 8007f1a:	e03b      	b.n	8007f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	7c12      	ldrb	r2, [r2, #16]
 8007f34:	f107 0108 	add.w	r1, r7, #8
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4798      	blx	r3
 8007f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f3e:	e029      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa2d 	bl	80083a2 <USBD_CtlError>
            err++;
 8007f48:	7afb      	ldrb	r3, [r7, #11]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f4e:	e021      	b.n	8007f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	7c12      	ldrb	r2, [r2, #16]
 8007f68:	f107 0108 	add.w	r1, r7, #8
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	4798      	blx	r3
 8007f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f72:	e00f      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa13 	bl	80083a2 <USBD_CtlError>
            err++;
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	72fb      	strb	r3, [r7, #11]
          break;
 8007f82:	e007      	b.n	8007f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa0b 	bl	80083a2 <USBD_CtlError>
          err++;
 8007f8c:	7afb      	ldrb	r3, [r7, #11]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007f92:	e038      	b.n	8008006 <USBD_GetDescriptor+0x286>
 8007f94:	e037      	b.n	8008006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	7c1b      	ldrb	r3, [r3, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d109      	bne.n	8007fb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa6:	f107 0208 	add.w	r2, r7, #8
 8007faa:	4610      	mov	r0, r2
 8007fac:	4798      	blx	r3
 8007fae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fb0:	e029      	b.n	8008006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f9f4 	bl	80083a2 <USBD_CtlError>
        err++;
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007fc0:	e021      	b.n	8008006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	7c1b      	ldrb	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10d      	bne.n	8007fe6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd2:	f107 0208 	add.w	r2, r7, #8
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	4798      	blx	r3
 8007fda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	2207      	movs	r2, #7
 8007fe2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fe4:	e00f      	b.n	8008006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f9da 	bl	80083a2 <USBD_CtlError>
        err++;
 8007fee:	7afb      	ldrb	r3, [r7, #11]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ff4:	e007      	b.n	8008006 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f9d2 	bl	80083a2 <USBD_CtlError>
      err++;
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	3301      	adds	r3, #1
 8008002:	72fb      	strb	r3, [r7, #11]
      break;
 8008004:	bf00      	nop
  }

  if (err != 0U)
 8008006:	7afb      	ldrb	r3, [r7, #11]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11c      	bne.n	8008046 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800800c:	893b      	ldrh	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d011      	beq.n	8008036 <USBD_GetDescriptor+0x2b6>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	88db      	ldrh	r3, [r3, #6]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00d      	beq.n	8008036 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	88da      	ldrh	r2, [r3, #6]
 800801e:	893b      	ldrh	r3, [r7, #8]
 8008020:	4293      	cmp	r3, r2
 8008022:	bf28      	it	cs
 8008024:	4613      	movcs	r3, r2
 8008026:	b29b      	uxth	r3, r3
 8008028:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800802a:	893b      	ldrh	r3, [r7, #8]
 800802c:	461a      	mov	r2, r3
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fa21 	bl	8008478 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	88db      	ldrh	r3, [r3, #6]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d104      	bne.n	8008048 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa78 	bl	8008534 <USBD_CtlSendStatus>
 8008044:	e000      	b.n	8008048 <USBD_GetDescriptor+0x2c8>
    return;
 8008046:	bf00      	nop
    }
  }
}
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop

08008050 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	889b      	ldrh	r3, [r3, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d130      	bne.n	80080c4 <USBD_SetAddress+0x74>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	88db      	ldrh	r3, [r3, #6]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d12c      	bne.n	80080c4 <USBD_SetAddress+0x74>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	885b      	ldrh	r3, [r3, #2]
 800806e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008070:	d828      	bhi.n	80080c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	885b      	ldrh	r3, [r3, #2]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800807c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008084:	2b03      	cmp	r3, #3
 8008086:	d104      	bne.n	8008092 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f989 	bl	80083a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008090:	e01d      	b.n	80080ce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	7bfa      	ldrb	r2, [r7, #15]
 8008096:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fe76 	bl	8008d90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fa45 	bl	8008534 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b8:	e009      	b.n	80080ce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c2:	e004      	b.n	80080ce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f96b 	bl	80083a2 <USBD_CtlError>
  }
}
 80080cc:	bf00      	nop
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	885b      	ldrh	r3, [r3, #2]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	4b41      	ldr	r3, [pc, #260]	@ (80081f0 <USBD_SetConfig+0x118>)
 80080ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080ec:	4b40      	ldr	r3, [pc, #256]	@ (80081f0 <USBD_SetConfig+0x118>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d904      	bls.n	80080fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f953 	bl	80083a2 <USBD_CtlError>
 80080fc:	e075      	b.n	80081ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008104:	2b02      	cmp	r3, #2
 8008106:	d002      	beq.n	800810e <USBD_SetConfig+0x36>
 8008108:	2b03      	cmp	r3, #3
 800810a:	d023      	beq.n	8008154 <USBD_SetConfig+0x7c>
 800810c:	e062      	b.n	80081d4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800810e:	4b38      	ldr	r3, [pc, #224]	@ (80081f0 <USBD_SetConfig+0x118>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d01a      	beq.n	800814c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008116:	4b36      	ldr	r3, [pc, #216]	@ (80081f0 <USBD_SetConfig+0x118>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2203      	movs	r2, #3
 8008124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008128:	4b31      	ldr	r3, [pc, #196]	@ (80081f0 <USBD_SetConfig+0x118>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff f9e4 	bl	80074fc <USBD_SetClassConfig>
 8008134:	4603      	mov	r3, r0
 8008136:	2b02      	cmp	r3, #2
 8008138:	d104      	bne.n	8008144 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f930 	bl	80083a2 <USBD_CtlError>
            return;
 8008142:	e052      	b.n	80081ea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f9f5 	bl	8008534 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800814a:	e04e      	b.n	80081ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f9f1 	bl	8008534 <USBD_CtlSendStatus>
        break;
 8008152:	e04a      	b.n	80081ea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008154:	4b26      	ldr	r3, [pc, #152]	@ (80081f0 <USBD_SetConfig+0x118>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d112      	bne.n	8008182 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008164:	4b22      	ldr	r3, [pc, #136]	@ (80081f0 <USBD_SetConfig+0x118>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	461a      	mov	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800816e:	4b20      	ldr	r3, [pc, #128]	@ (80081f0 <USBD_SetConfig+0x118>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff f9e0 	bl	800753a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9da 	bl	8008534 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008180:	e033      	b.n	80081ea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008182:	4b1b      	ldr	r3, [pc, #108]	@ (80081f0 <USBD_SetConfig+0x118>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	429a      	cmp	r2, r3
 800818e:	d01d      	beq.n	80081cc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	b2db      	uxtb	r3, r3
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff f9ce 	bl	800753a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800819e:	4b14      	ldr	r3, [pc, #80]	@ (80081f0 <USBD_SetConfig+0x118>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80081a8:	4b11      	ldr	r3, [pc, #68]	@ (80081f0 <USBD_SetConfig+0x118>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff f9a4 	bl	80074fc <USBD_SetClassConfig>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d104      	bne.n	80081c4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f8f0 	bl	80083a2 <USBD_CtlError>
            return;
 80081c2:	e012      	b.n	80081ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f9b5 	bl	8008534 <USBD_CtlSendStatus>
        break;
 80081ca:	e00e      	b.n	80081ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f9b1 	bl	8008534 <USBD_CtlSendStatus>
        break;
 80081d2:	e00a      	b.n	80081ea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f8e3 	bl	80083a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80081dc:	4b04      	ldr	r3, [pc, #16]	@ (80081f0 <USBD_SetConfig+0x118>)
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff f9a9 	bl	800753a <USBD_ClrClassConfig>
        break;
 80081e8:	bf00      	nop
    }
  }
}
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20000200 	.word	0x20000200

080081f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	88db      	ldrh	r3, [r3, #6]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d004      	beq.n	8008210 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f8ca 	bl	80083a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800820e:	e022      	b.n	8008256 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008216:	2b02      	cmp	r3, #2
 8008218:	dc02      	bgt.n	8008220 <USBD_GetConfig+0x2c>
 800821a:	2b00      	cmp	r3, #0
 800821c:	dc03      	bgt.n	8008226 <USBD_GetConfig+0x32>
 800821e:	e015      	b.n	800824c <USBD_GetConfig+0x58>
 8008220:	2b03      	cmp	r3, #3
 8008222:	d00b      	beq.n	800823c <USBD_GetConfig+0x48>
 8008224:	e012      	b.n	800824c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3308      	adds	r3, #8
 8008230:	2201      	movs	r2, #1
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f91f 	bl	8008478 <USBD_CtlSendData>
        break;
 800823a:	e00c      	b.n	8008256 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3304      	adds	r3, #4
 8008240:	2201      	movs	r2, #1
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f917 	bl	8008478 <USBD_CtlSendData>
        break;
 800824a:	e004      	b.n	8008256 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f8a7 	bl	80083a2 <USBD_CtlError>
        break;
 8008254:	bf00      	nop
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800826e:	3b01      	subs	r3, #1
 8008270:	2b02      	cmp	r3, #2
 8008272:	d81e      	bhi.n	80082b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	88db      	ldrh	r3, [r3, #6]
 8008278:	2b02      	cmp	r3, #2
 800827a:	d004      	beq.n	8008286 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f88f 	bl	80083a2 <USBD_CtlError>
        break;
 8008284:	e01a      	b.n	80082bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f043 0202 	orr.w	r2, r3, #2
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	330c      	adds	r3, #12
 80082a6:	2202      	movs	r2, #2
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f8e4 	bl	8008478 <USBD_CtlSendData>
      break;
 80082b0:	e004      	b.n	80082bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f874 	bl	80083a2 <USBD_CtlError>
      break;
 80082ba:	bf00      	nop
  }
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	885b      	ldrh	r3, [r3, #2]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d106      	bne.n	80082e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f928 	bl	8008534 <USBD_CtlSendStatus>
  }
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082fc:	3b01      	subs	r3, #1
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d80b      	bhi.n	800831a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	885b      	ldrh	r3, [r3, #2]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d10c      	bne.n	8008324 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f90e 	bl	8008534 <USBD_CtlSendStatus>
      }
      break;
 8008318:	e004      	b.n	8008324 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f840 	bl	80083a2 <USBD_CtlError>
      break;
 8008322:	e000      	b.n	8008326 <USBD_ClrFeature+0x3a>
      break;
 8008324:	bf00      	nop
  }
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	785a      	ldrb	r2, [r3, #1]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	3302      	adds	r3, #2
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	3303      	adds	r3, #3
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	021b      	lsls	r3, r3, #8
 8008358:	b29b      	uxth	r3, r3
 800835a:	4413      	add	r3, r2
 800835c:	b29a      	uxth	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	3304      	adds	r3, #4
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	3305      	adds	r3, #5
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	b29b      	uxth	r3, r3
 8008374:	4413      	add	r3, r2
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	3306      	adds	r3, #6
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	3307      	adds	r3, #7
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	021b      	lsls	r3, r3, #8
 800838c:	b29b      	uxth	r3, r3
 800838e:	4413      	add	r3, r2
 8008390:	b29a      	uxth	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	80da      	strh	r2, [r3, #6]

}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80083ac:	2180      	movs	r1, #128	@ 0x80
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fc84 	bl	8008cbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80083b4:	2100      	movs	r1, #0
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fc80 	bl	8008cbc <USBD_LL_StallEP>
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d032      	beq.n	8008440 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f834 	bl	8008448 <USBD_GetLen>
 80083e0:	4603      	mov	r3, r0
 80083e2:	3301      	adds	r3, #1
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	005b      	lsls	r3, r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	75fa      	strb	r2, [r7, #23]
 80083f4:	461a      	mov	r2, r3
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	4413      	add	r3, r2
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	7812      	ldrb	r2, [r2, #0]
 80083fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	75fa      	strb	r2, [r7, #23]
 8008406:	461a      	mov	r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4413      	add	r3, r2
 800840c:	2203      	movs	r2, #3
 800840e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008410:	e012      	b.n	8008438 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	60fa      	str	r2, [r7, #12]
 8008418:	7dfa      	ldrb	r2, [r7, #23]
 800841a:	1c51      	adds	r1, r2, #1
 800841c:	75f9      	strb	r1, [r7, #23]
 800841e:	4611      	mov	r1, r2
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	440a      	add	r2, r1
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	75fa      	strb	r2, [r7, #23]
 800842e:	461a      	mov	r2, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4413      	add	r3, r2
 8008434:	2200      	movs	r2, #0
 8008436:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e8      	bne.n	8008412 <USBD_GetString+0x4e>
    }
  }
}
 8008440:	bf00      	nop
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008454:	e005      	b.n	8008462 <USBD_GetLen+0x1a>
  {
    len++;
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	3301      	adds	r3, #1
 800845a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3301      	adds	r3, #1
 8008460:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1f5      	bne.n	8008456 <USBD_GetLen+0xe>
  }

  return len;
 800846a:	7bfb      	ldrb	r3, [r7, #15]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2202      	movs	r2, #2
 800848a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800848e:	88fa      	ldrh	r2, [r7, #6]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008494:	88fa      	ldrh	r2, [r7, #6]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	2100      	movs	r1, #0
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 fc94 	bl	8008dce <USBD_LL_Transmit>

  return USBD_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	4613      	mov	r3, r2
 80084bc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	2100      	movs	r1, #0
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 fc82 	bl	8008dce <USBD_LL_Transmit>

  return USBD_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2203      	movs	r2, #3
 80084e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80084ea:	88fa      	ldrh	r2, [r7, #6]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80084f2:	88fa      	ldrh	r2, [r7, #6]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084fa:	88fb      	ldrh	r3, [r7, #6]
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	2100      	movs	r1, #0
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 fc87 	bl	8008e14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800851e:	88fb      	ldrh	r3, [r7, #6]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	2100      	movs	r1, #0
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 fc75 	bl	8008e14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2204      	movs	r2, #4
 8008540:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008544:	2300      	movs	r3, #0
 8008546:	2200      	movs	r2, #0
 8008548:	2100      	movs	r1, #0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fc3f 	bl	8008dce <USBD_LL_Transmit>

  return USBD_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2205      	movs	r2, #5
 8008566:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800856a:	2300      	movs	r3, #0
 800856c:	2200      	movs	r2, #0
 800856e:	2100      	movs	r1, #0
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fc4f 	bl	8008e14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008584:	2200      	movs	r2, #0
 8008586:	4912      	ldr	r1, [pc, #72]	@ (80085d0 <MX_USB_DEVICE_Init+0x50>)
 8008588:	4812      	ldr	r0, [pc, #72]	@ (80085d4 <MX_USB_DEVICE_Init+0x54>)
 800858a:	f7fe ff5b 	bl	8007444 <USBD_Init>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008594:	f7f7 ff3e 	bl	8000414 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008598:	490f      	ldr	r1, [pc, #60]	@ (80085d8 <MX_USB_DEVICE_Init+0x58>)
 800859a:	480e      	ldr	r0, [pc, #56]	@ (80085d4 <MX_USB_DEVICE_Init+0x54>)
 800859c:	f7fe ff7d 	bl	800749a <USBD_RegisterClass>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085a6:	f7f7 ff35 	bl	8000414 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085aa:	490c      	ldr	r1, [pc, #48]	@ (80085dc <MX_USB_DEVICE_Init+0x5c>)
 80085ac:	4809      	ldr	r0, [pc, #36]	@ (80085d4 <MX_USB_DEVICE_Init+0x54>)
 80085ae:	f7fe feab 	bl	8007308 <USBD_CDC_RegisterInterface>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085b8:	f7f7 ff2c 	bl	8000414 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085bc:	4805      	ldr	r0, [pc, #20]	@ (80085d4 <MX_USB_DEVICE_Init+0x54>)
 80085be:	f7fe ff86 	bl	80074ce <USBD_Start>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085c8:	f7f7 ff24 	bl	8000414 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085cc:	bf00      	nop
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20000138 	.word	0x20000138
 80085d4:	20000204 	.word	0x20000204
 80085d8:	20000024 	.word	0x20000024
 80085dc:	20000128 	.word	0x20000128

080085e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085e4:	2200      	movs	r2, #0
 80085e6:	4905      	ldr	r1, [pc, #20]	@ (80085fc <CDC_Init_FS+0x1c>)
 80085e8:	4805      	ldr	r0, [pc, #20]	@ (8008600 <CDC_Init_FS+0x20>)
 80085ea:	f7fe fea4 	bl	8007336 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085ee:	4905      	ldr	r1, [pc, #20]	@ (8008604 <CDC_Init_FS+0x24>)
 80085f0:	4803      	ldr	r0, [pc, #12]	@ (8008600 <CDC_Init_FS+0x20>)
 80085f2:	f7fe feba 	bl	800736a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	200008d0 	.word	0x200008d0
 8008600:	20000204 	.word	0x20000204
 8008604:	200004d0 	.word	0x200004d0

08008608 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008608:	b480      	push	{r7}
 800860a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800860c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800860e:	4618      	mov	r0, r3
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	6039      	str	r1, [r7, #0]
 8008622:	71fb      	strb	r3, [r7, #7]
 8008624:	4613      	mov	r3, r2
 8008626:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	2b23      	cmp	r3, #35	@ 0x23
 800862c:	d86c      	bhi.n	8008708 <CDC_Control_FS+0xf0>
 800862e:	a201      	add	r2, pc, #4	@ (adr r2, 8008634 <CDC_Control_FS+0x1c>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	08008709 	.word	0x08008709
 8008638:	08008709 	.word	0x08008709
 800863c:	08008709 	.word	0x08008709
 8008640:	08008709 	.word	0x08008709
 8008644:	08008709 	.word	0x08008709
 8008648:	08008709 	.word	0x08008709
 800864c:	08008709 	.word	0x08008709
 8008650:	08008709 	.word	0x08008709
 8008654:	08008709 	.word	0x08008709
 8008658:	08008709 	.word	0x08008709
 800865c:	08008709 	.word	0x08008709
 8008660:	08008709 	.word	0x08008709
 8008664:	08008709 	.word	0x08008709
 8008668:	08008709 	.word	0x08008709
 800866c:	08008709 	.word	0x08008709
 8008670:	08008709 	.word	0x08008709
 8008674:	08008709 	.word	0x08008709
 8008678:	08008709 	.word	0x08008709
 800867c:	08008709 	.word	0x08008709
 8008680:	08008709 	.word	0x08008709
 8008684:	08008709 	.word	0x08008709
 8008688:	08008709 	.word	0x08008709
 800868c:	08008709 	.word	0x08008709
 8008690:	08008709 	.word	0x08008709
 8008694:	08008709 	.word	0x08008709
 8008698:	08008709 	.word	0x08008709
 800869c:	08008709 	.word	0x08008709
 80086a0:	08008709 	.word	0x08008709
 80086a4:	08008709 	.word	0x08008709
 80086a8:	08008709 	.word	0x08008709
 80086ac:	08008709 	.word	0x08008709
 80086b0:	08008709 	.word	0x08008709
 80086b4:	080086c5 	.word	0x080086c5
 80086b8:	080086e7 	.word	0x080086e7
 80086bc:	08008709 	.word	0x08008709
 80086c0:	08008709 	.word	0x08008709
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	for (uint8_t i = 0; i < 7; i++) {
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]
 80086c8:	e009      	b.n	80086de <CDC_Control_FS+0xc6>
    		buffer[i] = pbuf[i];
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	441a      	add	r2, r3
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	7811      	ldrb	r1, [r2, #0]
 80086d4:	4a10      	ldr	r2, [pc, #64]	@ (8008718 <CDC_Control_FS+0x100>)
 80086d6:	54d1      	strb	r1, [r2, r3]
    	for (uint8_t i = 0; i < 7; i++) {
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	3301      	adds	r3, #1
 80086dc:	73fb      	strb	r3, [r7, #15]
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	2b06      	cmp	r3, #6
 80086e2:	d9f2      	bls.n	80086ca <CDC_Control_FS+0xb2>
    	}
    break;
 80086e4:	e011      	b.n	800870a <CDC_Control_FS+0xf2>

    case CDC_GET_LINE_CODING:
    	for (uint8_t i = 0; i < 7; i++) {
 80086e6:	2300      	movs	r3, #0
 80086e8:	73bb      	strb	r3, [r7, #14]
 80086ea:	e009      	b.n	8008700 <CDC_Control_FS+0xe8>
			pbuf[i] = buffer[i];
 80086ec:	7bba      	ldrb	r2, [r7, #14]
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	440b      	add	r3, r1
 80086f4:	4908      	ldr	r1, [pc, #32]	@ (8008718 <CDC_Control_FS+0x100>)
 80086f6:	5c8a      	ldrb	r2, [r1, r2]
 80086f8:	701a      	strb	r2, [r3, #0]
    	for (uint8_t i = 0; i < 7; i++) {
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	3301      	adds	r3, #1
 80086fe:	73bb      	strb	r3, [r7, #14]
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b06      	cmp	r3, #6
 8008704:	d9f2      	bls.n	80086ec <CDC_Control_FS+0xd4>
		}
    break;
 8008706:	e000      	b.n	800870a <CDC_Control_FS+0xf2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008708:	bf00      	nop
  }

  return (USBD_OK);
 800870a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	200004c8 	.word	0x200004c8

0800871c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	4808      	ldr	r0, [pc, #32]	@ (800874c <CDC_Receive_FS+0x30>)
 800872a:	f7fe fe1e 	bl	800736a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800872e:	4807      	ldr	r0, [pc, #28]	@ (800874c <CDC_Receive_FS+0x30>)
 8008730:	f7fe fe5e 	bl	80073f0 <USBD_CDC_ReceivePacket>

  usbd_ch = Buf[0];
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	781a      	ldrb	r2, [r3, #0]
 8008738:	4b05      	ldr	r3, [pc, #20]	@ (8008750 <CDC_Receive_FS+0x34>)
 800873a:	701a      	strb	r2, [r3, #0]
  flag = 1;
 800873c:	4b05      	ldr	r3, [pc, #20]	@ (8008754 <CDC_Receive_FS+0x38>)
 800873e:	2201      	movs	r2, #1
 8008740:	601a      	str	r2, [r3, #0]
//  memset (buffer, '\0', 64);
//  uint8_t len = (uint8_t)*Len;
//  memcpy (buffer, Buf, len);
//  memset (Buf, '\0', len);

  return (USBD_OK);
 8008742:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20000204 	.word	0x20000204
 8008750:	200001f0 	.word	0x200001f0
 8008754:	200001f4 	.word	0x200001f4

08008758 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008768:	4b0d      	ldr	r3, [pc, #52]	@ (80087a0 <CDC_Transmit_FS+0x48>)
 800876a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800876e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800877a:	2301      	movs	r3, #1
 800877c:	e00b      	b.n	8008796 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800877e:	887b      	ldrh	r3, [r7, #2]
 8008780:	461a      	mov	r2, r3
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4806      	ldr	r0, [pc, #24]	@ (80087a0 <CDC_Transmit_FS+0x48>)
 8008786:	f7fe fdd6 	bl	8007336 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800878a:	4805      	ldr	r0, [pc, #20]	@ (80087a0 <CDC_Transmit_FS+0x48>)
 800878c:	f7fe fe01 	bl	8007392 <USBD_CDC_TransmitPacket>
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008794:	7bfb      	ldrb	r3, [r7, #15]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000204 	.word	0x20000204

080087a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2212      	movs	r2, #18
 80087b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087b6:	4b03      	ldr	r3, [pc, #12]	@ (80087c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	20000154 	.word	0x20000154

080087c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2204      	movs	r2, #4
 80087d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087da:	4b03      	ldr	r3, [pc, #12]	@ (80087e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	20000168 	.word	0x20000168

080087ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4907      	ldr	r1, [pc, #28]	@ (8008820 <USBD_FS_ProductStrDescriptor+0x34>)
 8008802:	4808      	ldr	r0, [pc, #32]	@ (8008824 <USBD_FS_ProductStrDescriptor+0x38>)
 8008804:	f7ff fdde 	bl	80083c4 <USBD_GetString>
 8008808:	e004      	b.n	8008814 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4904      	ldr	r1, [pc, #16]	@ (8008820 <USBD_FS_ProductStrDescriptor+0x34>)
 800880e:	4805      	ldr	r0, [pc, #20]	@ (8008824 <USBD_FS_ProductStrDescriptor+0x38>)
 8008810:	f7ff fdd8 	bl	80083c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008814:	4b02      	ldr	r3, [pc, #8]	@ (8008820 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000cd0 	.word	0x20000cd0
 8008824:	08008f90 	.word	0x08008f90

08008828 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	4904      	ldr	r1, [pc, #16]	@ (8008848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008838:	4804      	ldr	r0, [pc, #16]	@ (800884c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800883a:	f7ff fdc3 	bl	80083c4 <USBD_GetString>
  return USBD_StrDesc;
 800883e:	4b02      	ldr	r3, [pc, #8]	@ (8008848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20000cd0 	.word	0x20000cd0
 800884c:	08008f9c 	.word	0x08008f9c

08008850 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	221a      	movs	r2, #26
 8008860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008862:	f000 f843 	bl	80088ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008866:	4b02      	ldr	r3, [pc, #8]	@ (8008870 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008868:	4618      	mov	r0, r3
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	2000016c 	.word	0x2000016c

08008874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	6039      	str	r1, [r7, #0]
 800887e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d105      	bne.n	8008892 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	4907      	ldr	r1, [pc, #28]	@ (80088a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800888a:	4808      	ldr	r0, [pc, #32]	@ (80088ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800888c:	f7ff fd9a 	bl	80083c4 <USBD_GetString>
 8008890:	e004      	b.n	800889c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	4904      	ldr	r1, [pc, #16]	@ (80088a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008896:	4805      	ldr	r0, [pc, #20]	@ (80088ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8008898:	f7ff fd94 	bl	80083c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800889c:	4b02      	ldr	r3, [pc, #8]	@ (80088a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000cd0 	.word	0x20000cd0
 80088ac:	08008fb0 	.word	0x08008fb0

080088b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	6039      	str	r1, [r7, #0]
 80088ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d105      	bne.n	80088ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	4907      	ldr	r1, [pc, #28]	@ (80088e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088c6:	4808      	ldr	r0, [pc, #32]	@ (80088e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088c8:	f7ff fd7c 	bl	80083c4 <USBD_GetString>
 80088cc:	e004      	b.n	80088d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	4904      	ldr	r1, [pc, #16]	@ (80088e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088d2:	4805      	ldr	r0, [pc, #20]	@ (80088e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088d4:	f7ff fd76 	bl	80083c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088d8:	4b02      	ldr	r3, [pc, #8]	@ (80088e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20000cd0 	.word	0x20000cd0
 80088e8:	08008fbc 	.word	0x08008fbc

080088ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088f2:	4b0f      	ldr	r3, [pc, #60]	@ (8008930 <Get_SerialNum+0x44>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008934 <Get_SerialNum+0x48>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008938 <Get_SerialNum+0x4c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4413      	add	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d009      	beq.n	8008926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008912:	2208      	movs	r2, #8
 8008914:	4909      	ldr	r1, [pc, #36]	@ (800893c <Get_SerialNum+0x50>)
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 f814 	bl	8008944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800891c:	2204      	movs	r2, #4
 800891e:	4908      	ldr	r1, [pc, #32]	@ (8008940 <Get_SerialNum+0x54>)
 8008920:	68b8      	ldr	r0, [r7, #8]
 8008922:	f000 f80f 	bl	8008944 <IntToUnicode>
  }
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	1ffff7ac 	.word	0x1ffff7ac
 8008934:	1ffff7b0 	.word	0x1ffff7b0
 8008938:	1ffff7b4 	.word	0x1ffff7b4
 800893c:	2000016e 	.word	0x2000016e
 8008940:	2000017e 	.word	0x2000017e

08008944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4613      	mov	r3, r2
 8008950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008956:	2300      	movs	r3, #0
 8008958:	75fb      	strb	r3, [r7, #23]
 800895a:	e027      	b.n	80089ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	0f1b      	lsrs	r3, r3, #28
 8008960:	2b09      	cmp	r3, #9
 8008962:	d80b      	bhi.n	800897c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	0f1b      	lsrs	r3, r3, #28
 8008968:	b2da      	uxtb	r2, r3
 800896a:	7dfb      	ldrb	r3, [r7, #23]
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	4619      	mov	r1, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	440b      	add	r3, r1
 8008974:	3230      	adds	r2, #48	@ 0x30
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	e00a      	b.n	8008992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	0f1b      	lsrs	r3, r3, #28
 8008980:	b2da      	uxtb	r2, r3
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	4619      	mov	r1, r3
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	440b      	add	r3, r1
 800898c:	3237      	adds	r2, #55	@ 0x37
 800898e:	b2d2      	uxtb	r2, r2
 8008990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	3301      	adds	r3, #1
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	4413      	add	r3, r2
 80089a2:	2200      	movs	r2, #0
 80089a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	3301      	adds	r3, #1
 80089aa:	75fb      	strb	r3, [r7, #23]
 80089ac:	7dfa      	ldrb	r2, [r7, #23]
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d3d3      	bcc.n	800895c <IntToUnicode+0x18>
  }
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	371c      	adds	r7, #28
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
	...

080089c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a0d      	ldr	r2, [pc, #52]	@ (8008a08 <HAL_PCD_MspInit+0x44>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d113      	bne.n	80089fe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80089d6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <HAL_PCD_MspInit+0x48>)
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	4a0c      	ldr	r2, [pc, #48]	@ (8008a0c <HAL_PCD_MspInit+0x48>)
 80089dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80089e0:	61d3      	str	r3, [r2, #28]
 80089e2:	4b0a      	ldr	r3, [pc, #40]	@ (8008a0c <HAL_PCD_MspInit+0x48>)
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80089ee:	2200      	movs	r2, #0
 80089f0:	2100      	movs	r1, #0
 80089f2:	2014      	movs	r0, #20
 80089f4:	f7f8 f889 	bl	8000b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80089f8:	2014      	movs	r0, #20
 80089fa:	f7f8 f8a2 	bl	8000b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80089fe:	bf00      	nop
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	40005c00 	.word	0x40005c00
 8008a0c:	40021000 	.word	0x40021000

08008a10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f7fe fd9a 	bl	8007560 <USBD_LL_SetupStage>
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8008a46:	78fa      	ldrb	r2, [r7, #3]
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	440b      	add	r3, r1
 8008a54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f7fe fdcc 	bl	80075fa <USBD_LL_DataOutStage>
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	460b      	mov	r3, r1
 8008a74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8008a7c:	78fa      	ldrb	r2, [r7, #3]
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	440b      	add	r3, r1
 8008a8a:	3324      	adds	r3, #36	@ 0x24
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	4619      	mov	r1, r3
 8008a92:	f7fe fe23 	bl	80076dc <USBD_LL_DataInStage>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe ff36 	bl	800791e <USBD_LL_SOF>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	795b      	ldrb	r3, [r3, #5]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d001      	beq.n	8008ad2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ace:	f7f7 fca1 	bl	8000414 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008ad8:	7bfa      	ldrb	r2, [r7, #15]
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe fee3 	bl	80078a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fe9c 	bl	8007826 <USBD_LL_Reset>
}
 8008aee:	bf00      	nop
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fede 	bl	80078c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	7a5b      	ldrb	r3, [r3, #9]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d005      	beq.n	8008b20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b14:	4b04      	ldr	r3, [pc, #16]	@ (8008b28 <HAL_PCD_SuspendCallback+0x30>)
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	4a03      	ldr	r2, [pc, #12]	@ (8008b28 <HAL_PCD_SuspendCallback+0x30>)
 8008b1a:	f043 0306 	orr.w	r3, r3, #6
 8008b1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	e000ed00 	.word	0xe000ed00

08008b2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fed9 	bl	80078f2 <USBD_LL_Resume>
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b50:	4a28      	ldr	r2, [pc, #160]	@ (8008bf4 <USBD_LL_Init+0xac>)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a26      	ldr	r2, [pc, #152]	@ (8008bf4 <USBD_LL_Init+0xac>)
 8008b5c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008b60:	4b24      	ldr	r3, [pc, #144]	@ (8008bf4 <USBD_LL_Init+0xac>)
 8008b62:	4a25      	ldr	r2, [pc, #148]	@ (8008bf8 <USBD_LL_Init+0xb0>)
 8008b64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b66:	4b23      	ldr	r3, [pc, #140]	@ (8008bf4 <USBD_LL_Init+0xac>)
 8008b68:	2208      	movs	r2, #8
 8008b6a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b6c:	4b21      	ldr	r3, [pc, #132]	@ (8008bf4 <USBD_LL_Init+0xac>)
 8008b6e:	2202      	movs	r2, #2
 8008b70:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b72:	4b20      	ldr	r3, [pc, #128]	@ (8008bf4 <USBD_LL_Init+0xac>)
 8008b74:	2202      	movs	r2, #2
 8008b76:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b78:	4b1e      	ldr	r3, [pc, #120]	@ (8008bf4 <USBD_LL_Init+0xac>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008bf4 <USBD_LL_Init+0xac>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b84:	481b      	ldr	r0, [pc, #108]	@ (8008bf4 <USBD_LL_Init+0xac>)
 8008b86:	f7f8 f981 	bl	8000e8c <HAL_PCD_Init>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008b90:	f7f7 fc40 	bl	8000414 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b9a:	2318      	movs	r3, #24
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	f7f9 fde4 	bl	800276c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008baa:	2358      	movs	r3, #88	@ 0x58
 8008bac:	2200      	movs	r2, #0
 8008bae:	2180      	movs	r1, #128	@ 0x80
 8008bb0:	f7f9 fddc 	bl	800276c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bba:	23c0      	movs	r3, #192	@ 0xc0
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2181      	movs	r1, #129	@ 0x81
 8008bc0:	f7f9 fdd4 	bl	800276c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	f7f9 fdcb 	bl	800276c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008be0:	2200      	movs	r2, #0
 8008be2:	2182      	movs	r1, #130	@ 0x82
 8008be4:	f7f9 fdc2 	bl	800276c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000ed0 	.word	0x20000ed0
 8008bf8:	40005c00 	.word	0x40005c00

08008bfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7f8 fa01 	bl	800101a <HAL_PCD_Start>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f952 	bl	8008ec8 <USBD_Get_USB_Status>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	461a      	mov	r2, r3
 8008c40:	4603      	mov	r3, r0
 8008c42:	70fb      	strb	r3, [r7, #3]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70bb      	strb	r3, [r7, #2]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c5a:	78bb      	ldrb	r3, [r7, #2]
 8008c5c:	883a      	ldrh	r2, [r7, #0]
 8008c5e:	78f9      	ldrb	r1, [r7, #3]
 8008c60:	f7f8 faf9 	bl	8001256 <HAL_PCD_EP_Open>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f92c 	bl	8008ec8 <USBD_Get_USB_Status>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c98:	78fa      	ldrb	r2, [r7, #3]
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7f8 fb37 	bl	8001310 <HAL_PCD_EP_Close>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 f90d 	bl	8008ec8 <USBD_Get_USB_Status>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cd6:	78fa      	ldrb	r2, [r7, #3]
 8008cd8:	4611      	mov	r1, r2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7f8 fbe0 	bl	80014a0 <HAL_PCD_EP_SetStall>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f8ee 	bl	8008ec8 <USBD_Get_USB_Status>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d14:	78fa      	ldrb	r2, [r7, #3]
 8008d16:	4611      	mov	r1, r2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7f8 fc13 	bl	8001544 <HAL_PCD_EP_ClrStall>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f8cf 	bl	8008ec8 <USBD_Get_USB_Status>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	da0b      	bge.n	8008d6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d5a:	68f9      	ldr	r1, [r7, #12]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	440b      	add	r3, r1
 8008d66:	3312      	adds	r3, #18
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	e00b      	b.n	8008d84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d72:	68f9      	ldr	r1, [r7, #12]
 8008d74:	4613      	mov	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	440b      	add	r3, r1
 8008d7e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008d82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008daa:	78fa      	ldrb	r2, [r7, #3]
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7f8 fa2d 	bl	800120e <HAL_PCD_SetAddress>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 f884 	bl	8008ec8 <USBD_Get_USB_Status>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b086      	sub	sp, #24
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	607a      	str	r2, [r7, #4]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	460b      	mov	r3, r1
 8008ddc:	72fb      	strb	r3, [r7, #11]
 8008dde:	4613      	mov	r3, r2
 8008de0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008df0:	893b      	ldrh	r3, [r7, #8]
 8008df2:	7af9      	ldrb	r1, [r7, #11]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	f7f8 fb1c 	bl	8001432 <HAL_PCD_EP_Transmit>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 f861 	bl	8008ec8 <USBD_Get_USB_Status>
 8008e06:	4603      	mov	r3, r0
 8008e08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	460b      	mov	r3, r1
 8008e22:	72fb      	strb	r3, [r7, #11]
 8008e24:	4613      	mov	r3, r2
 8008e26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e36:	893b      	ldrh	r3, [r7, #8]
 8008e38:	7af9      	ldrb	r1, [r7, #11]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	f7f8 fab0 	bl	80013a0 <HAL_PCD_EP_Receive>
 8008e40:	4603      	mov	r3, r0
 8008e42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 f83e 	bl	8008ec8 <USBD_Get_USB_Status>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e50:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3718      	adds	r7, #24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	460b      	mov	r3, r1
 8008e64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e6c:	78fa      	ldrb	r2, [r7, #3]
 8008e6e:	4611      	mov	r1, r2
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7f8 fac6 	bl	8001402 <HAL_PCD_EP_GetRxCount>
 8008e76:	4603      	mov	r3, r0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e88:	4b03      	ldr	r3, [pc, #12]	@ (8008e98 <USBD_static_malloc+0x18>)
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	200011a4 	.word	0x200011a4

08008e9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]

}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d817      	bhi.n	8008f0c <USBD_Get_USB_Status+0x44>
 8008edc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee4 <USBD_Get_USB_Status+0x1c>)
 8008ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee2:	bf00      	nop
 8008ee4:	08008ef5 	.word	0x08008ef5
 8008ee8:	08008efb 	.word	0x08008efb
 8008eec:	08008f01 	.word	0x08008f01
 8008ef0:	08008f07 	.word	0x08008f07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef8:	e00b      	b.n	8008f12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008efa:	2302      	movs	r3, #2
 8008efc:	73fb      	strb	r3, [r7, #15]
    break;
 8008efe:	e008      	b.n	8008f12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f00:	2301      	movs	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]
    break;
 8008f04:	e005      	b.n	8008f12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f06:	2302      	movs	r3, #2
 8008f08:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0a:	e002      	b.n	8008f12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f10:	bf00      	nop
  }
  return usb_status;
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <memset>:
 8008f20:	4402      	add	r2, r0
 8008f22:	4603      	mov	r3, r0
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d100      	bne.n	8008f2a <memset+0xa>
 8008f28:	4770      	bx	lr
 8008f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f2e:	e7f9      	b.n	8008f24 <memset+0x4>

08008f30 <__libc_init_array>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	4d0d      	ldr	r5, [pc, #52]	@ (8008f68 <__libc_init_array+0x38>)
 8008f34:	4c0d      	ldr	r4, [pc, #52]	@ (8008f6c <__libc_init_array+0x3c>)
 8008f36:	1b64      	subs	r4, r4, r5
 8008f38:	10a4      	asrs	r4, r4, #2
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	42a6      	cmp	r6, r4
 8008f3e:	d109      	bne.n	8008f54 <__libc_init_array+0x24>
 8008f40:	4d0b      	ldr	r5, [pc, #44]	@ (8008f70 <__libc_init_array+0x40>)
 8008f42:	4c0c      	ldr	r4, [pc, #48]	@ (8008f74 <__libc_init_array+0x44>)
 8008f44:	f000 f818 	bl	8008f78 <_init>
 8008f48:	1b64      	subs	r4, r4, r5
 8008f4a:	10a4      	asrs	r4, r4, #2
 8008f4c:	2600      	movs	r6, #0
 8008f4e:	42a6      	cmp	r6, r4
 8008f50:	d105      	bne.n	8008f5e <__libc_init_array+0x2e>
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f58:	4798      	blx	r3
 8008f5a:	3601      	adds	r6, #1
 8008f5c:	e7ee      	b.n	8008f3c <__libc_init_array+0xc>
 8008f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f62:	4798      	blx	r3
 8008f64:	3601      	adds	r6, #1
 8008f66:	e7f2      	b.n	8008f4e <__libc_init_array+0x1e>
 8008f68:	08008ffc 	.word	0x08008ffc
 8008f6c:	08008ffc 	.word	0x08008ffc
 8008f70:	08008ffc 	.word	0x08008ffc
 8008f74:	08009000 	.word	0x08009000

08008f78 <_init>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr

08008f84 <_fini>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr
