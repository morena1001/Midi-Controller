
Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008950  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008ad8  08008ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b4c  08008b4c  0000a100  2**0
                  CONTENTS
  4 .ARM          00000000  08008b4c  08008b4c  0000a100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b4c  08008b4c  0000a100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b4c  08008b4c  00009b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08008b54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000100  08008c54  0000a100  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000960  08008c54  0000a960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e51  00000000  00000000  0000a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4f  00000000  00000000  0001bf81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0001eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbb  00000000  00000000  0001fe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dacb  00000000  00000000  00020a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146f4  00000000  00000000  0003e4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a650f  00000000  00000000  00052bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f90d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f68  00000000  00000000  000f9114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000fd07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ac0 	.word	0x08008ac0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08008ac0 	.word	0x08008ac0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb7c 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f816 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8be 	bl	8000354 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f86e 	bl	80002b8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80001dc:	f008 f87c 	bl	80082d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority (TIM2_IRQn, 0, 0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2100      	movs	r1, #0
 80001e4:	201c      	movs	r0, #28
 80001e6:	f000 fcb0 	bl	8000b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM2_IRQn);
 80001ea:	201c      	movs	r0, #28
 80001ec:	f000 fcc9 	bl	8000b82 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim2);
 80001f0:	4802      	ldr	r0, [pc, #8]	@ (80001fc <main+0x34>)
 80001f2:	f003 ff17 	bl	8004024 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f6:	bf00      	nop
 80001f8:	e7fd      	b.n	80001f6 <main+0x2e>
 80001fa:	bf00      	nop
 80001fc:	2000011c 	.word	0x2000011c

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b09c      	sub	sp, #112	@ 0x70
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800020a:	2228      	movs	r2, #40	@ 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f008 fc2a 	bl	8008a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2234      	movs	r2, #52	@ 0x34
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f008 fc1c 	bl	8008a68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000230:	2301      	movs	r3, #1
 8000232:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000238:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800024c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000250:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000256:	4618      	mov	r0, r3
 8000258:	f002 faec 	bl	8002834 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000262:	f000 f8cb 	bl	80003fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026a:	2302      	movs	r3, #2
 800026c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000276:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800027c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000280:	2101      	movs	r1, #1
 8000282:	4618      	mov	r0, r3
 8000284:	f003 fb14 	bl	80038b0 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800028e:	f000 f8b5 	bl	80003fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000292:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000296:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000298:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800029c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029e:	463b      	mov	r3, r7
 80002a0:	4618      	mov	r0, r3
 80002a2:	f003 fcd5 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002ac:	f000 f8a6 	bl	80003fc <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3770      	adds	r7, #112	@ 0x70
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 359;
 80002de:	4b1c      	ldr	r3, [pc, #112]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002e0:	f240 1267 	movw	r2, #359	@ 0x167
 80002e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002ee:	f240 321f 	movw	r2, #799	@ 0x31f
 80002f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f4:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fa:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <MX_TIM2_Init+0x98>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000300:	4813      	ldr	r0, [pc, #76]	@ (8000350 <MX_TIM2_Init+0x98>)
 8000302:	f003 fe37 	bl	8003f74 <HAL_TIM_Base_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800030c:	f000 f876 	bl	80003fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000314:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	480c      	ldr	r0, [pc, #48]	@ (8000350 <MX_TIM2_Init+0x98>)
 800031e:	f003 ffd7 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000328:	f000 f868 	bl	80003fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800032c:	2300      	movs	r3, #0
 800032e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_TIM2_Init+0x98>)
 800033a:	f004 f9d9 	bl	80046f0 <HAL_TIMEx_MasterConfigSynchronization>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000344:	f000 f85a 	bl	80003fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	3720      	adds	r7, #32
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	2000011c 	.word	0x2000011c

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 030c 	add.w	r3, r7, #12
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800036a:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <MX_GPIO_Init+0xa0>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a21      	ldr	r2, [pc, #132]	@ (80003f4 <MX_GPIO_Init+0xa0>)
 8000370:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b1f      	ldr	r3, [pc, #124]	@ (80003f4 <MX_GPIO_Init+0xa0>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	4b1c      	ldr	r3, [pc, #112]	@ (80003f4 <MX_GPIO_Init+0xa0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a1b      	ldr	r2, [pc, #108]	@ (80003f4 <MX_GPIO_Init+0xa0>)
 8000388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b19      	ldr	r3, [pc, #100]	@ (80003f4 <MX_GPIO_Init+0xa0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039a:	4b16      	ldr	r3, [pc, #88]	@ (80003f4 <MX_GPIO_Init+0xa0>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a15      	ldr	r2, [pc, #84]	@ (80003f4 <MX_GPIO_Init+0xa0>)
 80003a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <MX_GPIO_Init+0xa0>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : GB_Pin */
  GPIO_InitStruct.Pin = GB_Pin;
 80003b2:	2380      	movs	r3, #128	@ 0x80
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003bc:	2301      	movs	r3, #1
 80003be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GB_GPIO_Port, &GPIO_InitStruct);
 80003c0:	f107 030c 	add.w	r3, r7, #12
 80003c4:	4619      	mov	r1, r3
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ca:	f000 fbf5 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CB_Pin CSB_Pin DB_Pin ASB_Pin
                           BB_Pin SPB_Pin DSB_Pin EB_Pin
                           FB_Pin FSB_Pin GSB_Pin AB_Pin */
  GPIO_InitStruct.Pin = CB_Pin|CSB_Pin|DB_Pin|ASB_Pin
 80003ce:	f641 737f 	movw	r3, #8063	@ 0x1f7f
 80003d2:	60fb      	str	r3, [r7, #12]
                          |BB_Pin|SPB_Pin|DSB_Pin|EB_Pin
                          |FB_Pin|FSB_Pin|GSB_Pin|AB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003da:	2301      	movs	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003de:	f107 030c 	add.w	r3, r7, #12
 80003e2:	4619      	mov	r1, r3
 80003e4:	4804      	ldr	r0, [pc, #16]	@ (80003f8 <MX_GPIO_Init+0xa4>)
 80003e6:	f000 fbe7 	bl	8000bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ea:	bf00      	nop
 80003ec:	3720      	adds	r7, #32
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000
 80003f8:	48000400 	.word	0x48000400

080003fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000400:	b672      	cpsid	i
}
 8000402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <Error_Handler+0x8>

08000408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_MspInit+0x44>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <HAL_MspInit+0x44>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <HAL_MspInit+0x44>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000426:	4b09      	ldr	r3, [pc, #36]	@ (800044c <HAL_MspInit+0x44>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	4a08      	ldr	r2, [pc, #32]	@ (800044c <HAL_MspInit+0x44>)
 800042c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000430:	61d3      	str	r3, [r2, #28]
 8000432:	4b06      	ldr	r3, [pc, #24]	@ (800044c <HAL_MspInit+0x44>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000460:	d113      	bne.n	800048a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <HAL_TIM_Base_MspInit+0x44>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a0b      	ldr	r2, [pc, #44]	@ (8000494 <HAL_TIM_Base_MspInit+0x44>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	61d3      	str	r3, [r2, #28]
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <HAL_TIM_Base_MspInit+0x44>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	201c      	movs	r0, #28
 8000480:	f000 fb63 	bl	8000b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000484:	201c      	movs	r0, #28
 8000486:	f000 fb7c 	bl	8000b82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <NMI_Handler+0x4>

080004a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <MemManage_Handler+0x4>

080004b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <BusFault_Handler+0x4>

080004b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <UsageFault_Handler+0x4>

080004c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ee:	f000 fa31 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80004fe:	f000 fdd2 	bl	80010a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000678 	.word	0x20000678

0800050c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!HAL_GPIO_ReadPin (CB_GPIO_Port, CB_Pin)) {
 8000510:	2101      	movs	r1, #1
 8000512:	489b      	ldr	r0, [pc, #620]	@ (8000780 <TIM2_IRQHandler+0x274>)
 8000514:	f000 fcc2 	bl	8000e9c <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d10e      	bne.n	800053c <TIM2_IRQHandler+0x30>
		if (!pressed) {
 800051e:	4b99      	ldr	r3, [pc, #612]	@ (8000784 <TIM2_IRQHandler+0x278>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	f083 0301 	eor.w	r3, r3, #1
 8000526:	b2db      	uxtb	r3, r3
 8000528:	2b00      	cmp	r3, #0
 800052a:	f000 8123 	beq.w	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 800052e:	4b95      	ldr	r3, [pc, #596]	@ (8000784 <TIM2_IRQHandler+0x278>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]

			Note_Change (C);
 8000534:	2030      	movs	r0, #48	@ 0x30
 8000536:	f000 f92b 	bl	8000790 <Note_Change>
 800053a:	e11b      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = C;
//			off_message [2] = C;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (CSB_GPIO_Port, CSB_Pin)) {
 800053c:	2102      	movs	r1, #2
 800053e:	4890      	ldr	r0, [pc, #576]	@ (8000780 <TIM2_IRQHandler+0x274>)
 8000540:	f000 fcac 	bl	8000e9c <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10e      	bne.n	8000568 <TIM2_IRQHandler+0x5c>
		if (!pressed) {
 800054a:	4b8e      	ldr	r3, [pc, #568]	@ (8000784 <TIM2_IRQHandler+0x278>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	f083 0301 	eor.w	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	f000 810d 	beq.w	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 800055a:	4b8a      	ldr	r3, [pc, #552]	@ (8000784 <TIM2_IRQHandler+0x278>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]

			Note_Change (CS);
 8000560:	2031      	movs	r0, #49	@ 0x31
 8000562:	f000 f915 	bl	8000790 <Note_Change>
 8000566:	e105      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = CS;
//			off_message [2] = CS;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (DB_GPIO_Port, DB_Pin)) {
 8000568:	2104      	movs	r1, #4
 800056a:	4885      	ldr	r0, [pc, #532]	@ (8000780 <TIM2_IRQHandler+0x274>)
 800056c:	f000 fc96 	bl	8000e9c <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d10e      	bne.n	8000594 <TIM2_IRQHandler+0x88>
		if (!pressed) {
 8000576:	4b83      	ldr	r3, [pc, #524]	@ (8000784 <TIM2_IRQHandler+0x278>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	f083 0301 	eor.w	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	f000 80f7 	beq.w	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 8000586:	4b7f      	ldr	r3, [pc, #508]	@ (8000784 <TIM2_IRQHandler+0x278>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]

			Note_Change (D);
 800058c:	2032      	movs	r0, #50	@ 0x32
 800058e:	f000 f8ff 	bl	8000790 <Note_Change>
 8000592:	e0ef      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = D;
//			off_message [2] = D;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (DSB_GPIO_Port, DSB_Pin)) {
 8000594:	2108      	movs	r1, #8
 8000596:	487a      	ldr	r0, [pc, #488]	@ (8000780 <TIM2_IRQHandler+0x274>)
 8000598:	f000 fc80 	bl	8000e9c <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d10e      	bne.n	80005c0 <TIM2_IRQHandler+0xb4>
		if (!pressed) {
 80005a2:	4b78      	ldr	r3, [pc, #480]	@ (8000784 <TIM2_IRQHandler+0x278>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	f083 0301 	eor.w	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f000 80e1 	beq.w	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 80005b2:	4b74      	ldr	r3, [pc, #464]	@ (8000784 <TIM2_IRQHandler+0x278>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]

			Note_Change (DS);
 80005b8:	2033      	movs	r0, #51	@ 0x33
 80005ba:	f000 f8e9 	bl	8000790 <Note_Change>
 80005be:	e0d9      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = DS;
//			off_message [2] = DS;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (EB_GPIO_Port, EB_Pin)) {
 80005c0:	2110      	movs	r1, #16
 80005c2:	486f      	ldr	r0, [pc, #444]	@ (8000780 <TIM2_IRQHandler+0x274>)
 80005c4:	f000 fc6a 	bl	8000e9c <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <TIM2_IRQHandler+0xe0>
		if (!pressed) {
 80005ce:	4b6d      	ldr	r3, [pc, #436]	@ (8000784 <TIM2_IRQHandler+0x278>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	f000 80cb 	beq.w	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 80005de:	4b69      	ldr	r3, [pc, #420]	@ (8000784 <TIM2_IRQHandler+0x278>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]

			Note_Change (E);
 80005e4:	2034      	movs	r0, #52	@ 0x34
 80005e6:	f000 f8d3 	bl	8000790 <Note_Change>
 80005ea:	e0c3      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = E;
//			off_message [2] = E;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (FB_GPIO_Port, FB_Pin)) {
 80005ec:	2120      	movs	r1, #32
 80005ee:	4864      	ldr	r0, [pc, #400]	@ (8000780 <TIM2_IRQHandler+0x274>)
 80005f0:	f000 fc54 	bl	8000e9c <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d10e      	bne.n	8000618 <TIM2_IRQHandler+0x10c>
		if (!pressed) {
 80005fa:	4b62      	ldr	r3, [pc, #392]	@ (8000784 <TIM2_IRQHandler+0x278>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	f083 0301 	eor.w	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	f000 80b5 	beq.w	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 800060a:	4b5e      	ldr	r3, [pc, #376]	@ (8000784 <TIM2_IRQHandler+0x278>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]

			Note_Change (F);
 8000610:	2035      	movs	r0, #53	@ 0x35
 8000612:	f000 f8bd 	bl	8000790 <Note_Change>
 8000616:	e0ad      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = F;
//			off_message [2] = F;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (FSB_GPIO_Port, FSB_Pin)) {
 8000618:	2140      	movs	r1, #64	@ 0x40
 800061a:	4859      	ldr	r0, [pc, #356]	@ (8000780 <TIM2_IRQHandler+0x274>)
 800061c:	f000 fc3e 	bl	8000e9c <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d10b      	bne.n	800063e <TIM2_IRQHandler+0x132>
		if (!pressed) {
 8000626:	4b57      	ldr	r3, [pc, #348]	@ (8000784 <TIM2_IRQHandler+0x278>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	f083 0301 	eor.w	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 809f 	beq.w	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 8000636:	4b53      	ldr	r3, [pc, #332]	@ (8000784 <TIM2_IRQHandler+0x278>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e09a      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = FS;
//			off_message [2] = FS;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (GB_GPIO_Port, GB_Pin)) {
 800063e:	2180      	movs	r1, #128	@ 0x80
 8000640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000644:	f000 fc2a 	bl	8000e9c <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d10e      	bne.n	800066c <TIM2_IRQHandler+0x160>
		if (!pressed) {
 800064e:	4b4d      	ldr	r3, [pc, #308]	@ (8000784 <TIM2_IRQHandler+0x278>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	f000 808b 	beq.w	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 800065e:	4b49      	ldr	r3, [pc, #292]	@ (8000784 <TIM2_IRQHandler+0x278>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]

			Note_Change (G);
 8000664:	2037      	movs	r0, #55	@ 0x37
 8000666:	f000 f893 	bl	8000790 <Note_Change>
 800066a:	e083      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = G;
//			off_message [2] = G;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (GSB_GPIO_Port, GSB_Pin)) {
 800066c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000670:	4843      	ldr	r0, [pc, #268]	@ (8000780 <TIM2_IRQHandler+0x274>)
 8000672:	f000 fc13 	bl	8000e9c <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10d      	bne.n	8000698 <TIM2_IRQHandler+0x18c>
		if (!pressed) {
 800067c:	4b41      	ldr	r3, [pc, #260]	@ (8000784 <TIM2_IRQHandler+0x278>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	f083 0301 	eor.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d074      	beq.n	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 800068a:	4b3e      	ldr	r3, [pc, #248]	@ (8000784 <TIM2_IRQHandler+0x278>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]

			Note_Change (GS);
 8000690:	2038      	movs	r0, #56	@ 0x38
 8000692:	f000 f87d 	bl	8000790 <Note_Change>
 8000696:	e06d      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = GS;
//			off_message [2] = GS;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (AB_GPIO_Port, AB_Pin)) {
 8000698:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800069c:	4838      	ldr	r0, [pc, #224]	@ (8000780 <TIM2_IRQHandler+0x274>)
 800069e:	f000 fbfd 	bl	8000e9c <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10d      	bne.n	80006c4 <TIM2_IRQHandler+0x1b8>
		if (!pressed) {
 80006a8:	4b36      	ldr	r3, [pc, #216]	@ (8000784 <TIM2_IRQHandler+0x278>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f083 0301 	eor.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d05e      	beq.n	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 80006b6:	4b33      	ldr	r3, [pc, #204]	@ (8000784 <TIM2_IRQHandler+0x278>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]

			Note_Change (A);
 80006bc:	2039      	movs	r0, #57	@ 0x39
 80006be:	f000 f867 	bl	8000790 <Note_Change>
 80006c2:	e057      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = A;
//			off_message [2] = A;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (ASB_GPIO_Port, ASB_Pin)) {
 80006c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c8:	482d      	ldr	r0, [pc, #180]	@ (8000780 <TIM2_IRQHandler+0x274>)
 80006ca:	f000 fbe7 	bl	8000e9c <HAL_GPIO_ReadPin>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d10d      	bne.n	80006f0 <TIM2_IRQHandler+0x1e4>
		if (!pressed) {
 80006d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <TIM2_IRQHandler+0x278>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	f083 0301 	eor.w	r3, r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d048      	beq.n	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 80006e2:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <TIM2_IRQHandler+0x278>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]

			Note_Change (AS);
 80006e8:	203a      	movs	r0, #58	@ 0x3a
 80006ea:	f000 f851 	bl	8000790 <Note_Change>
 80006ee:	e041      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = AS;
//			off_message [2] = AS;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (BB_GPIO_Port, BB_Pin)) {
 80006f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006f4:	4822      	ldr	r0, [pc, #136]	@ (8000780 <TIM2_IRQHandler+0x274>)
 80006f6:	f000 fbd1 	bl	8000e9c <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10d      	bne.n	800071c <TIM2_IRQHandler+0x210>
		if (!pressed) {
 8000700:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <TIM2_IRQHandler+0x278>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f083 0301 	eor.w	r3, r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d032      	beq.n	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <TIM2_IRQHandler+0x278>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]

			Note_Change (B);
 8000714:	203b      	movs	r0, #59	@ 0x3b
 8000716:	f000 f83b 	bl	8000790 <Note_Change>
 800071a:	e02b      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			on_message [2] = B;
//			off_message [2] = B;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
		}
	} else if (!HAL_GPIO_ReadPin (SPB_GPIO_Port, SPB_Pin)) {
 800071c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000720:	4817      	ldr	r0, [pc, #92]	@ (8000780 <TIM2_IRQHandler+0x274>)
 8000722:	f000 fbbb 	bl	8000e9c <HAL_GPIO_ReadPin>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10f      	bne.n	800074c <TIM2_IRQHandler+0x240>
		if (!pressed) {
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <TIM2_IRQHandler+0x278>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f083 0301 	eor.w	r3, r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d01c      	beq.n	8000774 <TIM2_IRQHandler+0x268>
			pressed = true;
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <TIM2_IRQHandler+0x278>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
			control_toggled = true;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <TIM2_IRQHandler+0x27c>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]

			Toggle_Control ();
 8000746:	f000 f855 	bl	80007f4 <Toggle_Control>
 800074a:	e013      	b.n	8000774 <TIM2_IRQHandler+0x268>
//			PS_message[3] = play_toggled ? PLAY : STOP;
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, PS_message, 4);
		}
	} else {
		if (pressed && !control_toggled) {
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <TIM2_IRQHandler+0x278>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d009      	beq.n	8000768 <TIM2_IRQHandler+0x25c>
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <TIM2_IRQHandler+0x27c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f083 0301 	eor.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d002      	beq.n	8000768 <TIM2_IRQHandler+0x25c>
			Note_Change (END);
 8000762:	2000      	movs	r0, #0
 8000764:	f000 f814 	bl	8000790 <Note_Change>
//			while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//			USBD_MIDI_SendPackets (&hUsbDeviceFS, off_message, 4);
		}

		pressed = false;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <TIM2_IRQHandler+0x278>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
		control_toggled = false;
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <TIM2_IRQHandler+0x27c>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <TIM2_IRQHandler+0x280>)
 8000776:	f003 fca9 	bl	80040cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	48000400 	.word	0x48000400
 8000784:	2000016a 	.word	0x2000016a
 8000788:	20000168 	.word	0x20000168
 800078c:	2000011c 	.word	0x2000011c

08000790 <Note_Change>:

/* USER CODE BEGIN 1 */
void Note_Change (uint8_t value) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	if (value == END) {
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10c      	bne.n	80007ba <Note_Change+0x2a>
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 80007a0:	bf00      	nop
 80007a2:	4811      	ldr	r0, [pc, #68]	@ (80007e8 <Note_Change+0x58>)
 80007a4:	f006 fc7a 	bl	800709c <USBD_MIDI_GetState>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f9      	bne.n	80007a2 <Note_Change+0x12>
		USBD_MIDI_SendPackets (&hUsbDeviceFS, off_message, 4);
 80007ae:	2204      	movs	r2, #4
 80007b0:	490e      	ldr	r1, [pc, #56]	@ (80007ec <Note_Change+0x5c>)
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <Note_Change+0x58>)
 80007b4:	f006 fc80 	bl	80070b8 <USBD_MIDI_SendPackets>
		off_message [2] = value;

		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
	}
}
 80007b8:	e011      	b.n	80007de <Note_Change+0x4e>
		on_message [2] = value;
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <Note_Change+0x60>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	7093      	strb	r3, [r2, #2]
		off_message [2] = value;
 80007c0:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <Note_Change+0x5c>)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	7093      	strb	r3, [r2, #2]
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 80007c6:	bf00      	nop
 80007c8:	4807      	ldr	r0, [pc, #28]	@ (80007e8 <Note_Change+0x58>)
 80007ca:	f006 fc67 	bl	800709c <USBD_MIDI_GetState>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f9      	bne.n	80007c8 <Note_Change+0x38>
		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
 80007d4:	2204      	movs	r2, #4
 80007d6:	4906      	ldr	r1, [pc, #24]	@ (80007f0 <Note_Change+0x60>)
 80007d8:	4803      	ldr	r0, [pc, #12]	@ (80007e8 <Note_Change+0x58>)
 80007da:	f006 fc6d 	bl	80070b8 <USBD_MIDI_SendPackets>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200001b4 	.word	0x200001b4
 80007ec:	20000004 	.word	0x20000004
 80007f0:	20000000 	.word	0x20000000

080007f4 <Toggle_Control>:

void Toggle_Control () {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	play_toggled = !play_toggled;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <Toggle_Control+0x50>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf14      	ite	ne
 8000800:	2301      	movne	r3, #1
 8000802:	2300      	moveq	r3, #0
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f083 0301 	eor.w	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <Toggle_Control+0x50>)
 8000814:	701a      	strb	r2, [r3, #0]
	PS_message[3] = play_toggled ? PLAY : STOP;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <Toggle_Control+0x50>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <Toggle_Control+0x2e>
 800081e:	227f      	movs	r2, #127	@ 0x7f
 8000820:	e000      	b.n	8000824 <Toggle_Control+0x30>
 8000822:	2200      	movs	r2, #0
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <Toggle_Control+0x54>)
 8000826:	70da      	strb	r2, [r3, #3]

	while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000828:	bf00      	nop
 800082a:	4808      	ldr	r0, [pc, #32]	@ (800084c <Toggle_Control+0x58>)
 800082c:	f006 fc36 	bl	800709c <USBD_MIDI_GetState>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f9      	bne.n	800082a <Toggle_Control+0x36>
	USBD_MIDI_SendPackets (&hUsbDeviceFS, PS_message, 4);
 8000836:	2204      	movs	r2, #4
 8000838:	4903      	ldr	r1, [pc, #12]	@ (8000848 <Toggle_Control+0x54>)
 800083a:	4804      	ldr	r0, [pc, #16]	@ (800084c <Toggle_Control+0x58>)
 800083c:	f006 fc3c 	bl	80070b8 <USBD_MIDI_SendPackets>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000169 	.word	0x20000169
 8000848:	20000008 	.word	0x20000008
 800084c:	200001b4 	.word	0x200001b4

08000850 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <SystemInit+0x20>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800085a:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <SystemInit+0x20>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000878:	f7ff ffea 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	@ (80008b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <LoopForever+0xe>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	@ (80008c0 <LoopForever+0x16>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a2:	f008 f8e9 	bl	8008a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008a6:	f7ff fc8f 	bl	80001c8 <main>

080008aa <LoopForever>:

LoopForever:
    b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80008b8:	08008b54 	.word	0x08008b54
  ldr r2, =_sbss
 80008bc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80008c0:	20000960 	.word	0x20000960

080008c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f92b 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	200f      	movs	r0, #15
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff fd90 	bl	8000408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f943 	bl	8000b9e <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f000 f90b 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000000c 	.word	0x2000000c
 800094c:	20000014 	.word	0x20000014
 8000950:	20000010 	.word	0x20000010

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x20>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_IncTick+0x24>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <HAL_IncTick+0x24>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000014 	.word	0x20000014
 8000978:	2000016c 	.word	0x2000016c

0800097c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <HAL_GetTick+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	2000016c 	.word	0x2000016c

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	db0b      	blt.n	8000a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 021f 	and.w	r2, r3, #31
 8000a10:	4907      	ldr	r1, [pc, #28]	@ (8000a30 <__NVIC_EnableIRQ+0x38>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	2001      	movs	r0, #1
 8000a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	@ (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f7ff ff8e 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff29 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff3e 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff8e 	bl	8000a88 <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5d 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff31 	bl	80009f8 <__NVIC_EnableIRQ>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffa2 	bl	8000af0 <SysTick_Config>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc6:	e14e      	b.n	8000e66 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8140 	beq.w	8000e60 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d005      	beq.n	8000bf8 <HAL_GPIO_Init+0x40>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d130      	bne.n	8000c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	f003 0201 	and.w	r2, r3, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d017      	beq.n	8000c96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d123      	bne.n	8000cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	6939      	ldr	r1, [r7, #16]
 8000ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0203 	and.w	r2, r3, #3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 809a 	beq.w	8000e60 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2c:	4b55      	ldr	r3, [pc, #340]	@ (8000e84 <HAL_GPIO_Init+0x2cc>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a54      	ldr	r2, [pc, #336]	@ (8000e84 <HAL_GPIO_Init+0x2cc>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b52      	ldr	r3, [pc, #328]	@ (8000e84 <HAL_GPIO_Init+0x2cc>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d44:	4a50      	ldr	r2, [pc, #320]	@ (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d6e:	d013      	beq.n	8000d98 <HAL_GPIO_Init+0x1e0>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a46      	ldr	r2, [pc, #280]	@ (8000e8c <HAL_GPIO_Init+0x2d4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d00d      	beq.n	8000d94 <HAL_GPIO_Init+0x1dc>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a45      	ldr	r2, [pc, #276]	@ (8000e90 <HAL_GPIO_Init+0x2d8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d007      	beq.n	8000d90 <HAL_GPIO_Init+0x1d8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a44      	ldr	r2, [pc, #272]	@ (8000e94 <HAL_GPIO_Init+0x2dc>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d101      	bne.n	8000d8c <HAL_GPIO_Init+0x1d4>
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e006      	b.n	8000d9a <HAL_GPIO_Init+0x1e2>
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	e004      	b.n	8000d9a <HAL_GPIO_Init+0x1e2>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e002      	b.n	8000d9a <HAL_GPIO_Init+0x1e2>
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <HAL_GPIO_Init+0x1e2>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	f002 0203 	and.w	r2, r2, #3
 8000da0:	0092      	lsls	r2, r2, #2
 8000da2:	4093      	lsls	r3, r2
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000daa:	4937      	ldr	r1, [pc, #220]	@ (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3302      	adds	r3, #2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db8:	4b37      	ldr	r3, [pc, #220]	@ (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e06:	4a24      	ldr	r2, [pc, #144]	@ (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e98 <HAL_GPIO_Init+0x2e0>)
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f47f aea9 	bne.w	8000bc8 <HAL_GPIO_Init+0x10>
  }
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	48000800 	.word	0x48000800
 8000e94:	48000c00 	.word	0x48000c00
 8000e98:	40010400 	.word	0x40010400

08000e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e001      	b.n	8000ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0b9      	b.n	8001052 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f007 fb26 	bl	8008544 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fc8e 	bl	8004826 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e03e      	b.n	8000f8e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3311      	adds	r3, #17
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	3310      	adds	r3, #16
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	3313      	adds	r3, #19
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	440b      	add	r3, r1
 8000f5a:	3320      	adds	r3, #32
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3324      	adds	r3, #36	@ 0x24
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	440b      	add	r3, r1
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	791b      	ldrb	r3, [r3, #4]
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3bb      	bcc.n	8000f10 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e044      	b.n	8001028 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	440b      	add	r3, r1
 8000fac:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	440b      	add	r3, r1
 8000fc2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	440b      	add	r3, r1
 8001004:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3301      	adds	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	429a      	cmp	r2, r3
 8001030:	d3b5      	bcc.n	8000f9e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3304      	adds	r3, #4
 800103a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800103e:	f003 fc0d 	bl	800485c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_PCD_Start+0x16>
 800106c:	2302      	movs	r3, #2
 800106e:	e016      	b.n	800109e <HAL_PCD_Start+0x44>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fbbb 	bl	80047f8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001082:	2101      	movs	r1, #1
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f007 fcb7 	bl	80089f8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f005 fe78 	bl	8006d84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 fe71 	bl	8006d9a <USB_ReadInterrupts>
 80010b8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fab1 	bl	800162c <PCD_EP_ISR_Handler>

    return;
 80010ca:	e0bd      	b.n	8001248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d013      	beq.n	80010fe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010e8:	b292      	uxth	r2, r2
 80010ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f007 faa3 	bl	800863a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010f4:	2100      	movs	r1, #0
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f8a9 	bl	800124e <HAL_PCD_SetAddress>

    return;
 80010fc:	e0a4      	b.n	8001248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00c      	beq.n	8001122 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001110:	b29a      	uxth	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800111a:	b292      	uxth	r2, r2
 800111c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001120:	e092      	b.n	8001248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00c      	beq.n	8001146 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001134:	b29a      	uxth	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800113e:	b292      	uxth	r2, r2
 8001140:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001144:	e080      	b.n	8001248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d027      	beq.n	80011a0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0204 	bic.w	r2, r2, #4
 8001162:	b292      	uxth	r2, r2
 8001164:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0208 	bic.w	r2, r2, #8
 800117a:	b292      	uxth	r2, r2
 800117c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f007 fa93 	bl	80086ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001198:	b292      	uxth	r2, r2
 800119a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800119e:	e053      	b.n	8001248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d027      	beq.n	80011fa <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0208 	orr.w	r2, r2, #8
 80011bc:	b292      	uxth	r2, r2
 80011be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011d4:	b292      	uxth	r2, r2
 80011d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 0204 	orr.w	r2, r2, #4
 80011ec:	b292      	uxth	r2, r2
 80011ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f007 fa40 	bl	8008678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011f8:	e026      	b.n	8001248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00f      	beq.n	8001224 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800120c:	b29a      	uxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001216:	b292      	uxth	r2, r2
 8001218:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f007 f9fe 	bl	800861e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001222:	e011      	b.n	8001248 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00c      	beq.n	8001248 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001240:	b292      	uxth	r2, r2
 8001242:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001246:	bf00      	nop
  }
}
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_PCD_SetAddress+0x1a>
 8001264:	2302      	movs	r3, #2
 8001266:	e012      	b.n	800128e <HAL_PCD_SetAddress+0x40>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	78fa      	ldrb	r2, [r7, #3]
 8001274:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	78fa      	ldrb	r2, [r7, #3]
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f005 fd6c 	bl	8006d5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	4608      	mov	r0, r1
 80012a0:	4611      	mov	r1, r2
 80012a2:	461a      	mov	r2, r3
 80012a4:	4603      	mov	r3, r0
 80012a6:	70fb      	strb	r3, [r7, #3]
 80012a8:	460b      	mov	r3, r1
 80012aa:	803b      	strh	r3, [r7, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da0e      	bge.n	80012da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	f003 0207 	and.w	r2, r3, #7
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	3310      	adds	r3, #16
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2201      	movs	r2, #1
 80012d6:	705a      	strb	r2, [r3, #1]
 80012d8:	e00e      	b.n	80012f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f003 0207 	and.w	r2, r3, #7
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001304:	883a      	ldrh	r2, [r7, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	78ba      	ldrb	r2, [r7, #2]
 800130e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001310:	78bb      	ldrb	r3, [r7, #2]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d102      	bne.n	800131c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <HAL_PCD_EP_Open+0x94>
 8001326:	2302      	movs	r3, #2
 8001328:	e00e      	b.n	8001348 <HAL_PCD_EP_Open+0xb2>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68f9      	ldr	r1, [r7, #12]
 8001338:	4618      	mov	r0, r3
 800133a:	f003 faad 	bl	8004898 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001346:	7afb      	ldrb	r3, [r7, #11]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800135c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001360:	2b00      	cmp	r3, #0
 8001362:	da0e      	bge.n	8001382 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	f003 0207 	and.w	r2, r3, #7
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	3310      	adds	r3, #16
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2201      	movs	r2, #1
 800137e:	705a      	strb	r2, [r3, #1]
 8001380:	e00e      	b.n	80013a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	f003 0207 	and.w	r2, r3, #7
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d101      	bne.n	80013ba <HAL_PCD_EP_Close+0x6a>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e00e      	b.n	80013d8 <HAL_PCD_EP_Close+0x88>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68f9      	ldr	r1, [r7, #12]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fe29 	bl	8005020 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	460b      	mov	r3, r1
 80013ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013f0:	7afb      	ldrb	r3, [r7, #11]
 80013f2:	f003 0207 	and.w	r2, r3, #7
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2200      	movs	r2, #0
 800141e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	b2da      	uxtb	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6979      	ldr	r1, [r7, #20]
 8001432:	4618      	mov	r0, r3
 8001434:	f003 ffe1 	bl	80053fa <USB_EPStartXfer>

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	f003 0207 	and.w	r2, r3, #7
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001464:	681b      	ldr	r3, [r3, #0]
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	460b      	mov	r3, r1
 8001480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001482:	7afb      	ldrb	r3, [r7, #11]
 8001484:	f003 0207 	and.w	r2, r3, #7
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	3310      	adds	r3, #16
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4413      	add	r3, r2
 8001496:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2201      	movs	r2, #1
 80014bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6979      	ldr	r1, [r7, #20]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 ff92 	bl	80053fa <USB_EPStartXfer>

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	7912      	ldrb	r2, [r2, #4]
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e03e      	b.n	800157c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001502:	2b00      	cmp	r3, #0
 8001504:	da0e      	bge.n	8001524 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	f003 0207 	and.w	r2, r3, #7
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	3310      	adds	r3, #16
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2201      	movs	r2, #1
 8001520:	705a      	strb	r2, [r3, #1]
 8001522:	e00c      	b.n	800153e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	b2da      	uxtb	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_PCD_EP_SetStall+0x7e>
 800155a:	2302      	movs	r3, #2
 800155c:	e00e      	b.n	800157c <HAL_PCD_EP_SetStall+0x9c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68f9      	ldr	r1, [r7, #12]
 800156c:	4618      	mov	r0, r3
 800156e:	f005 faf6 	bl	8006b5e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	7912      	ldrb	r2, [r2, #4]
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e040      	b.n	8001624 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da0e      	bge.n	80015c8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	f003 0207 	and.w	r2, r3, #7
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	3310      	adds	r3, #16
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	705a      	strb	r2, [r3, #1]
 80015c6:	e00e      	b.n	80015e6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	f003 0207 	and.w	r2, r3, #7
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_PCD_EP_ClrStall+0x82>
 8001602:	2302      	movs	r3, #2
 8001604:	e00e      	b.n	8001624 <HAL_PCD_EP_ClrStall+0xa0>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	4618      	mov	r0, r3
 8001616:	f005 faf3 	bl	8006c00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b096      	sub	sp, #88	@ 0x58
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001634:	e3ad      	b.n	8001d92 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800163e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001642:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8001650:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 816f 	bne.w	8001938 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800165a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	d14c      	bne.n	8001700 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001676:	81fb      	strh	r3, [r7, #14]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001686:	b29b      	uxth	r3, r3
 8001688:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3310      	adds	r3, #16
 800168e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001698:	b29b      	uxth	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	441a      	add	r2, r3
 80016c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016c6:	2100      	movs	r1, #0
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f006 ff8e 	bl	80085ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7b1b      	ldrb	r3, [r3, #12]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 835c 	beq.w	8001d92 <PCD_EP_ISR_Handler+0x766>
 80016da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 8357 	bne.w	8001d92 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7b1b      	ldrb	r3, [r3, #12]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	731a      	strb	r2, [r3, #12]
 80016fe:	e348      	b.n	8001d92 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001706:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001712:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001716:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800171a:	2b00      	cmp	r3, #0
 800171c:	d032      	beq.n	8001784 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	4413      	add	r3, r2
 8001738:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001744:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001752:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001756:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001758:	b29b      	uxth	r3, r3
 800175a:	f005 fb70 	bl	8006e3e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b29a      	uxth	r2, r3
 8001766:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800176a:	4013      	ands	r3, r2
 800176c:	823b      	strh	r3, [r7, #16]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	8a3a      	ldrh	r2, [r7, #16]
 8001774:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001778:	b292      	uxth	r2, r2
 800177a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f006 ff07 	bl	8008590 <HAL_PCD_SetupStageCallback>
 8001782:	e306      	b.n	8001d92 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001784:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001788:	2b00      	cmp	r3, #0
 800178a:	f280 8302 	bge.w	8001d92 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	b29a      	uxth	r2, r3
 8001796:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800179a:	4013      	ands	r3, r2
 800179c:	83fb      	strh	r3, [r7, #30]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	8bfa      	ldrh	r2, [r7, #30]
 80017a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017a8:	b292      	uxth	r2, r2
 80017aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	4413      	add	r3, r2
 80017c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d019      	beq.n	8001810 <PCD_EP_ISR_Handler+0x1e4>
 80017dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d015      	beq.n	8001810 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ea:	6959      	ldr	r1, [r3, #20]
 80017ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	f005 fb22 	bl	8006e3e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	441a      	add	r2, r3
 8001804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001806:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001808:	2100      	movs	r1, #0
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f006 fed2 	bl	80085b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800181a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800181e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 82b5 	bne.w	8001d92 <PCD_EP_ISR_Handler+0x766>
 8001828:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800182c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001830:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001834:	f000 82ad 	beq.w	8001d92 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001846:	b29b      	uxth	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4413      	add	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001862:	b29a      	uxth	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	801a      	strh	r2, [r3, #0]
 8001868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10a      	bne.n	8001886 <PCD_EP_ISR_Handler+0x25a>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800187a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800187e:	b29a      	uxth	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	801a      	strh	r2, [r3, #0]
 8001884:	e039      	b.n	80018fa <PCD_EP_ISR_Handler+0x2ce>
 8001886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b3e      	cmp	r3, #62	@ 0x3e
 800188c:	d818      	bhi.n	80018c0 <PCD_EP_ISR_Handler+0x294>
 800188e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	647b      	str	r3, [r7, #68]	@ 0x44
 8001896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <PCD_EP_ISR_Handler+0x27c>
 80018a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018a4:	3301      	adds	r3, #1
 80018a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	029b      	lsls	r3, r3, #10
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	801a      	strh	r2, [r3, #0]
 80018be:	e01c      	b.n	80018fa <PCD_EP_ISR_Handler+0x2ce>
 80018c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80018c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <PCD_EP_ISR_Handler+0x2ae>
 80018d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018d6:	3b01      	subs	r3, #1
 80018d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	029b      	lsls	r3, r3, #10
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800190a:	827b      	strh	r3, [r7, #18]
 800190c:	8a7b      	ldrh	r3, [r7, #18]
 800190e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001912:	827b      	strh	r3, [r7, #18]
 8001914:	8a7b      	ldrh	r3, [r7, #18]
 8001916:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800191a:	827b      	strh	r3, [r7, #18]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	8a7b      	ldrh	r3, [r7, #18]
 8001922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800192a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800192e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001932:	b29b      	uxth	r3, r3
 8001934:	8013      	strh	r3, [r2, #0]
 8001936:	e22c      	b.n	8001d92 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800194c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001950:	2b00      	cmp	r3, #0
 8001952:	f280 80f6 	bge.w	8001b42 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29a      	uxth	r2, r3
 8001968:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800196c:	4013      	ands	r3, r2
 800196e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001984:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001988:	b292      	uxth	r2, r2
 800198a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800198c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a4:	7b1b      	ldrb	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d123      	bne.n	80019f2 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ce:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80019d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 808e 	beq.w	8001af8 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e2:	6959      	ldr	r1, [r3, #20]
 80019e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e6:	88da      	ldrh	r2, [r3, #6]
 80019e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80019ec:	f005 fa27 	bl	8006e3e <USB_ReadPMA>
 80019f0:	e082      	b.n	8001af8 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f4:	78db      	ldrb	r3, [r3, #3]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d10a      	bne.n	8001a10 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80019fe:	461a      	mov	r2, r3
 8001a00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f9d3 	bl	8001dae <HAL_PCD_EP_DB_Receive>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001a0e:	e073      	b.n	8001af8 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a2a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	441a      	add	r2, r3
 8001a3c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001a40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d022      	beq.n	8001ab4 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a92:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001a96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d02c      	beq.n	8001af8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	6959      	ldr	r1, [r3, #20]
 8001aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa8:	891a      	ldrh	r2, [r3, #8]
 8001aaa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001aae:	f005 f9c6 	bl	8006e3e <USB_ReadPMA>
 8001ab2:	e021      	b.n	8001af8 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001adc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aea:	6959      	ldr	r1, [r3, #20]
 8001aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aee:	895a      	ldrh	r2, [r3, #10]
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001af4:	f005 f9a3 	bl	8006e3e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afa:	69da      	ldr	r2, [r3, #28]
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b00:	441a      	add	r2, r3
 8001b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b04:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b0e:	441a      	add	r2, r3
 8001b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b12:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <PCD_EP_ISR_Handler+0x4fc>
 8001b1c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d206      	bcs.n	8001b36 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f006 fd40 	bl	80085b4 <HAL_PCD_DataOutStageCallback>
 8001b34:	e005      	b.n	8001b42 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fc5c 	bl	80053fa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8121 	beq.w	8001d92 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b50:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	3310      	adds	r3, #16
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b7e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	441a      	add	r2, r3
 8001b90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba2:	78db      	ldrb	r3, [r3, #3]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	f040 80a2 	bne.w	8001cee <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8001baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb2:	7b1b      	ldrb	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8093 	beq.w	8001ce0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d046      	beq.n	8001c54 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc8:	785b      	ldrb	r3, [r3, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d126      	bne.n	8001c1c <PCD_EP_ISR_Handler+0x5f0>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	4413      	add	r3, r2
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	00da      	lsls	r2, r3, #3
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	4413      	add	r3, r2
 8001bf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	801a      	strh	r2, [r3, #0]
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	e061      	b.n	8001ce0 <PCD_EP_ISR_Handler+0x6b4>
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d15d      	bne.n	8001ce0 <PCD_EP_ISR_Handler+0x6b4>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c38:	4413      	add	r3, r2
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	00da      	lsls	r2, r3, #3
 8001c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c44:	4413      	add	r3, r2
 8001c46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4e:	2200      	movs	r2, #0
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	e045      	b.n	8001ce0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d126      	bne.n	8001cb0 <PCD_EP_ISR_Handler+0x684>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c76:	4413      	add	r3, r2
 8001c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	00da      	lsls	r2, r3, #3
 8001c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c82:	4413      	add	r3, r2
 8001c84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cac:	801a      	strh	r2, [r3, #0]
 8001cae:	e017      	b.n	8001ce0 <PCD_EP_ISR_Handler+0x6b4>
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d113      	bne.n	8001ce0 <PCD_EP_ISR_Handler+0x6b4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cc6:	4413      	add	r3, r2
 8001cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	00da      	lsls	r2, r3, #3
 8001cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cdc:	2200      	movs	r2, #0
 8001cde:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f006 fc7f 	bl	80085ea <HAL_PCD_DataInStageCallback>
 8001cec:	e051      	b.n	8001d92 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001cee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d144      	bne.n	8001d84 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d1e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d24:	699a      	ldr	r2, [r3, #24]
 8001d26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d907      	bls.n	8001d3e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8001d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d36:	1ad2      	subs	r2, r2, r3
 8001d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3a:	619a      	str	r2, [r3, #24]
 8001d3c:	e002      	b.n	8001d44 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d106      	bne.n	8001d5a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f006 fc49 	bl	80085ea <HAL_PCD_DataInStageCallback>
 8001d58:	e01b      	b.n	8001d92 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d62:	441a      	add	r2, r3
 8001d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d66:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6a:	69da      	ldr	r2, [r3, #28]
 8001d6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d70:	441a      	add	r2, r3
 8001d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d74:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fb3c 	bl	80053fa <USB_EPStartXfer>
 8001d82:	e006      	b.n	8001d92 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001d84:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d88:	461a      	mov	r2, r3
 8001d8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f917 	bl	8001fc0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f6ff ac49 	blt.w	8001636 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3758      	adds	r7, #88	@ 0x58
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b088      	sub	sp, #32
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d07c      	beq.n	8001ec0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	8b7b      	ldrh	r3, [r7, #26]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d306      	bcc.n	8001e04 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	699a      	ldr	r2, [r3, #24]
 8001dfa:	8b7b      	ldrh	r3, [r7, #26]
 8001dfc:	1ad2      	subs	r2, r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	619a      	str	r2, [r3, #24]
 8001e02:	e002      	b.n	8001e0a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d123      	bne.n	8001e5a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e2c:	833b      	strh	r3, [r7, #24]
 8001e2e:	8b3b      	ldrh	r3, [r7, #24]
 8001e30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001e34:	833b      	strh	r3, [r7, #24]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	441a      	add	r2, r3
 8001e44:	8b3b      	ldrh	r3, [r7, #24]
 8001e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01f      	beq.n	8001ea4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e7e:	82fb      	strh	r3, [r7, #22]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	441a      	add	r2, r3
 8001e8e:	8afb      	ldrh	r3, [r7, #22]
 8001e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ea4:	8b7b      	ldrh	r3, [r7, #26]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8085 	beq.w	8001fb6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	6959      	ldr	r1, [r3, #20]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	891a      	ldrh	r2, [r3, #8]
 8001eb8:	8b7b      	ldrh	r3, [r7, #26]
 8001eba:	f004 ffc0 	bl	8006e3e <USB_ReadPMA>
 8001ebe:	e07a      	b.n	8001fb6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	8b7b      	ldrh	r3, [r7, #26]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d306      	bcc.n	8001efe <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	699a      	ldr	r2, [r3, #24]
 8001ef4:	8b7b      	ldrh	r3, [r7, #26]
 8001ef6:	1ad2      	subs	r2, r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	619a      	str	r2, [r3, #24]
 8001efc:	e002      	b.n	8001f04 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d123      	bne.n	8001f54 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f26:	83fb      	strh	r3, [r7, #30]
 8001f28:	8bfb      	ldrh	r3, [r7, #30]
 8001f2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f2e:	83fb      	strh	r3, [r7, #30]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	441a      	add	r2, r3
 8001f3e:	8bfb      	ldrh	r3, [r7, #30]
 8001f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d11f      	bne.n	8001f9e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f78:	83bb      	strh	r3, [r7, #28]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	441a      	add	r2, r3
 8001f88:	8bbb      	ldrh	r3, [r7, #28]
 8001f8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f9e:	8b7b      	ldrh	r3, [r7, #26]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	6959      	ldr	r1, [r3, #20]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	895a      	ldrh	r2, [r3, #10]
 8001fb0:	8b7b      	ldrh	r3, [r7, #26]
 8001fb2:	f004 ff44 	bl	8006e3e <USB_ReadPMA>
    }
  }

  return count;
 8001fb6:	8b7b      	ldrh	r3, [r7, #26]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0a4      	sub	sp, #144	@ 0x90
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 81db 	beq.w	8002390 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ffe:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800200a:	429a      	cmp	r2, r3
 800200c:	d907      	bls.n	800201e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	619a      	str	r2, [r3, #24]
 800201c:	e002      	b.n	8002024 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 80b9 	bne.w	80021a0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d126      	bne.n	8002084 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800204a:	4413      	add	r3, r2
 800204c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	00da      	lsls	r2, r3, #3
 8002054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002056:	4413      	add	r3, r2
 8002058:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800205c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002068:	b29a      	uxth	r2, r3
 800206a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206c:	801a      	strh	r2, [r3, #0]
 800206e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800207c:	b29a      	uxth	r2, r3
 800207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	e01a      	b.n	80020ba <HAL_PCD_EP_DB_Transmit+0xfa>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	785b      	ldrb	r3, [r3, #1]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d116      	bne.n	80020ba <HAL_PCD_EP_DB_Transmit+0xfa>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	637b      	str	r3, [r7, #52]	@ 0x34
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800209a:	b29b      	uxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020a0:	4413      	add	r3, r2
 80020a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	00da      	lsls	r2, r3, #3
 80020aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ac:	4413      	add	r3, r2
 80020ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80020b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b6:	2200      	movs	r2, #0
 80020b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	785b      	ldrb	r3, [r3, #1]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d126      	bne.n	8002116 <HAL_PCD_EP_DB_Transmit+0x156>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	4413      	add	r3, r2
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	00da      	lsls	r2, r3, #3
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	801a      	strh	r2, [r3, #0]
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800210a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800210e:	b29a      	uxth	r2, r3
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	801a      	strh	r2, [r3, #0]
 8002114:	e017      	b.n	8002146 <HAL_PCD_EP_DB_Transmit+0x186>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d113      	bne.n	8002146 <HAL_PCD_EP_DB_Transmit+0x186>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002126:	b29b      	uxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	4413      	add	r3, r2
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	00da      	lsls	r2, r3, #3
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	4413      	add	r3, r2
 800213a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800213e:	623b      	str	r3, [r7, #32]
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	2200      	movs	r2, #0
 8002144:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4619      	mov	r1, r3
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f006 fa4c 	bl	80085ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 82fa 	beq.w	8002752 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002178:	82fb      	strh	r3, [r7, #22]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	441a      	add	r2, r3
 8002188:	8afb      	ldrh	r3, [r7, #22]
 800218a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800218e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002192:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800219a:	b29b      	uxth	r3, r3
 800219c:	8013      	strh	r3, [r2, #0]
 800219e:	e2d8      	b.n	8002752 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d021      	beq.n	80021ee <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	441a      	add	r2, r3
 80021d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80021da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	f040 82ac 	bne.w	8002752 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002202:	441a      	add	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	69da      	ldr	r2, [r3, #28]
 800220c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002210:	441a      	add	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	6a1a      	ldr	r2, [r3, #32]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	429a      	cmp	r2, r3
 8002220:	d30b      	bcc.n	800223a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	6a1a      	ldr	r2, [r3, #32]
 800222e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002232:	1ad2      	subs	r2, r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	621a      	str	r2, [r3, #32]
 8002238:	e017      	b.n	800226a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d108      	bne.n	8002254 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002242:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002246:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002252:	e00a      	b.n	800226a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2200      	movs	r2, #0
 8002268:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	785b      	ldrb	r3, [r3, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d165      	bne.n	800233e <HAL_PCD_EP_DB_Transmit+0x37e>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002286:	4413      	add	r3, r2
 8002288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	00da      	lsls	r2, r3, #3
 8002290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002292:	4413      	add	r3, r2
 8002294:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002298:	63bb      	str	r3, [r7, #56]	@ 0x38
 800229a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a8:	801a      	strh	r2, [r3, #0]
 80022aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <HAL_PCD_EP_DB_Transmit+0x308>
 80022b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	e057      	b.n	8002378 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80022c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80022ce:	d818      	bhi.n	8002302 <HAL_PCD_EP_DB_Transmit+0x342>
 80022d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_PCD_EP_DB_Transmit+0x32a>
 80022e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e6:	3301      	adds	r3, #1
 80022e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	029b      	lsls	r3, r3, #10
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022fe:	801a      	strh	r2, [r3, #0]
 8002300:	e03a      	b.n	8002378 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800230a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <HAL_PCD_EP_DB_Transmit+0x35c>
 8002316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002318:	3b01      	subs	r3, #1
 800231a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800231c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29a      	uxth	r2, r3
 8002322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002324:	b29b      	uxth	r3, r3
 8002326:	029b      	lsls	r3, r3, #10
 8002328:	b29b      	uxth	r3, r3
 800232a:	4313      	orrs	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002336:	b29a      	uxth	r2, r3
 8002338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800233a:	801a      	strh	r2, [r3, #0]
 800233c:	e01c      	b.n	8002378 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d118      	bne.n	8002378 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	647b      	str	r3, [r7, #68]	@ 0x44
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002354:	b29b      	uxth	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800235a:	4413      	add	r3, r2
 800235c:	647b      	str	r3, [r7, #68]	@ 0x44
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	00da      	lsls	r2, r3, #3
 8002364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002366:	4413      	add	r3, r2
 8002368:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800236c:	643b      	str	r3, [r7, #64]	@ 0x40
 800236e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002372:	b29a      	uxth	r2, r3
 8002374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002376:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6959      	ldr	r1, [r3, #20]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	891a      	ldrh	r2, [r3, #8]
 8002384:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002388:	b29b      	uxth	r3, r3
 800238a:	f004 fd16 	bl	8006dba <USB_WritePMA>
 800238e:	e1e0      	b.n	8002752 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d307      	bcc.n	80023d4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80023cc:	1ad2      	subs	r2, r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	619a      	str	r2, [r3, #24]
 80023d2:	e002      	b.n	80023da <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 80c0 	bne.w	8002564 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	785b      	ldrb	r3, [r3, #1]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d126      	bne.n	800243a <HAL_PCD_EP_DB_Transmit+0x47a>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002400:	4413      	add	r3, r2
 8002402:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	00da      	lsls	r2, r3, #3
 800240a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800240c:	4413      	add	r3, r2
 800240e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002412:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241e:	b29a      	uxth	r2, r3
 8002420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002432:	b29a      	uxth	r2, r3
 8002434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	e01a      	b.n	8002470 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	785b      	ldrb	r3, [r3, #1]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d116      	bne.n	8002470 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	667b      	str	r3, [r7, #100]	@ 0x64
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002456:	4413      	add	r3, r2
 8002458:	667b      	str	r3, [r7, #100]	@ 0x64
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	00da      	lsls	r2, r3, #3
 8002460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002462:	4413      	add	r3, r2
 8002464:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002468:	663b      	str	r3, [r7, #96]	@ 0x60
 800246a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	677b      	str	r3, [r7, #116]	@ 0x74
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d12b      	bne.n	80024d6 <HAL_PCD_EP_DB_Transmit+0x516>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002492:	4413      	add	r3, r2
 8002494:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	00da      	lsls	r2, r3, #3
 800249c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800249e:	4413      	add	r3, r2
 80024a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	e017      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x546>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d113      	bne.n	8002506 <HAL_PCD_EP_DB_Transmit+0x546>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ec:	4413      	add	r3, r2
 80024ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	00da      	lsls	r2, r3, #3
 80024f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024f8:	4413      	add	r3, r2
 80024fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002500:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002502:	2200      	movs	r2, #0
 8002504:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	4619      	mov	r1, r3
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f006 f86c 	bl	80085ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f040 811a 	bne.w	8002752 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002538:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	441a      	add	r2, r3
 800254a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800254e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800255a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800255e:	b29b      	uxth	r3, r3
 8002560:	8013      	strh	r3, [r2, #0]
 8002562:	e0f6      	b.n	8002752 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d121      	bne.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002588:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	441a      	add	r2, r3
 800259a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800259e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f040 80ca 	bne.w	8002752 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025c6:	441a      	add	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025d4:	441a      	add	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	6a1a      	ldr	r2, [r3, #32]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d30b      	bcc.n	80025fe <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025f6:	1ad2      	subs	r2, r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	621a      	str	r2, [r3, #32]
 80025fc:	e017      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d108      	bne.n	8002618 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002606:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800260a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002616:	e00a      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	657b      	str	r3, [r7, #84]	@ 0x54
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	785b      	ldrb	r3, [r3, #1]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d165      	bne.n	8002708 <HAL_PCD_EP_DB_Transmit+0x748>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800264a:	b29b      	uxth	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002650:	4413      	add	r3, r2
 8002652:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	00da      	lsls	r2, r3, #3
 800265a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800265c:	4413      	add	r3, r2
 800265e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002662:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266e:	b29a      	uxth	r2, r3
 8002670:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002672:	801a      	strh	r2, [r3, #0]
 8002674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0x6d2>
 800267c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268a:	b29a      	uxth	r2, r3
 800268c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800268e:	801a      	strh	r2, [r3, #0]
 8002690:	e054      	b.n	800273c <HAL_PCD_EP_DB_Transmit+0x77c>
 8002692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002696:	2b3e      	cmp	r3, #62	@ 0x3e
 8002698:	d818      	bhi.n	80026cc <HAL_PCD_EP_DB_Transmit+0x70c>
 800269a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_PCD_EP_DB_Transmit+0x6f4>
 80026ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026b0:	3301      	adds	r3, #1
 80026b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026bc:	b29b      	uxth	r3, r3
 80026be:	029b      	lsls	r3, r3, #10
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c8:	801a      	strh	r2, [r3, #0]
 80026ca:	e037      	b.n	800273c <HAL_PCD_EP_DB_Transmit+0x77c>
 80026cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x726>
 80026e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026e2:	3b01      	subs	r3, #1
 80026e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	029b      	lsls	r3, r3, #10
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002700:	b29a      	uxth	r2, r3
 8002702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002704:	801a      	strh	r2, [r3, #0]
 8002706:	e019      	b.n	800273c <HAL_PCD_EP_DB_Transmit+0x77c>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	785b      	ldrb	r3, [r3, #1]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d115      	bne.n	800273c <HAL_PCD_EP_DB_Transmit+0x77c>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002718:	b29b      	uxth	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271e:	4413      	add	r3, r2
 8002720:	657b      	str	r3, [r7, #84]	@ 0x54
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	00da      	lsls	r2, r3, #3
 8002728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272a:	4413      	add	r3, r2
 800272c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002730:	653b      	str	r3, [r7, #80]	@ 0x50
 8002732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002736:	b29a      	uxth	r2, r3
 8002738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800273a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	6959      	ldr	r1, [r3, #20]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	895a      	ldrh	r2, [r3, #10]
 8002748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800274c:	b29b      	uxth	r3, r3
 800274e:	f004 fb34 	bl	8006dba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800276c:	82bb      	strh	r3, [r7, #20]
 800276e:	8abb      	ldrh	r3, [r7, #20]
 8002770:	f083 0310 	eor.w	r3, r3, #16
 8002774:	82bb      	strh	r3, [r7, #20]
 8002776:	8abb      	ldrh	r3, [r7, #20]
 8002778:	f083 0320 	eor.w	r3, r3, #32
 800277c:	82bb      	strh	r3, [r7, #20]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	441a      	add	r2, r3
 800278c:	8abb      	ldrh	r3, [r7, #20]
 800278e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002792:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800279a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800279e:	b29b      	uxth	r3, r3
 80027a0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3790      	adds	r7, #144	@ 0x90
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	817b      	strh	r3, [r7, #10]
 80027ba:	4613      	mov	r3, r2
 80027bc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ca:	897b      	ldrh	r3, [r7, #10]
 80027cc:	f003 0207 	and.w	r2, r3, #7
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	3310      	adds	r3, #16
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	e009      	b.n	80027f6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027e2:	897a      	ldrh	r2, [r7, #10]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027f6:	893b      	ldrh	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	b29a      	uxth	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	80da      	strh	r2, [r3, #6]
 800280a:	e00b      	b.n	8002824 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2201      	movs	r2, #1
 8002810:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	b29a      	uxth	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	b29a      	uxth	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800283a:	af00      	add	r7, sp, #0
 800283c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002840:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002844:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	f001 b823 	b.w	80038a0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 817d 	beq.w	8002b6a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002870:	4bbc      	ldr	r3, [pc, #752]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b04      	cmp	r3, #4
 800287a:	d00c      	beq.n	8002896 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800287c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b08      	cmp	r3, #8
 8002886:	d15c      	bne.n	8002942 <HAL_RCC_OscConfig+0x10e>
 8002888:	4bb6      	ldr	r3, [pc, #728]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002894:	d155      	bne.n	8002942 <HAL_RCC_OscConfig+0x10e>
 8002896:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800289a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d102      	bne.n	80028c8 <HAL_RCC_OscConfig+0x94>
 80028c2:	4ba8      	ldr	r3, [pc, #672]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e015      	b.n	80028f4 <HAL_RCC_OscConfig+0xc0>
 80028c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028cc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80028dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028e0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80028e4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80028f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028f8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80028fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002900:	fa92 f2a2 	rbit	r2, r2
 8002904:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002908:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800290c:	fab2 f282 	clz	r2, r2
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f042 0220 	orr.w	r2, r2, #32
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f002 021f 	and.w	r2, r2, #31
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f202 	lsl.w	r2, r1, r2
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 811f 	beq.w	8002b68 <HAL_RCC_OscConfig+0x334>
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 8116 	bne.w	8002b68 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f000 bfaf 	b.w	80038a0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x12e>
 8002954:	4b83      	ldr	r3, [pc, #524]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a82      	ldr	r2, [pc, #520]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 800295a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	e036      	b.n	80029d0 <HAL_RCC_OscConfig+0x19c>
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x158>
 8002972:	4b7c      	ldr	r3, [pc, #496]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a7b      	ldr	r2, [pc, #492]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 8002978:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	4b79      	ldr	r3, [pc, #484]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a78      	ldr	r2, [pc, #480]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 8002984:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e021      	b.n	80029d0 <HAL_RCC_OscConfig+0x19c>
 800298c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002990:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x184>
 800299e:	4b71      	ldr	r3, [pc, #452]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a70      	ldr	r2, [pc, #448]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80029a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a6d      	ldr	r2, [pc, #436]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0x19c>
 80029b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a69      	ldr	r2, [pc, #420]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80029be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b67      	ldr	r3, [pc, #412]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a66      	ldr	r2, [pc, #408]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80029ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029d0:	4b64      	ldr	r3, [pc, #400]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	f023 020f 	bic.w	r2, r3, #15
 80029d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	495f      	ldr	r1, [pc, #380]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d059      	beq.n	8002aae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7fd ffbf 	bl	800097c <HAL_GetTick>
 80029fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fd ffba 	bl	800097c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b64      	cmp	r3, #100	@ 0x64
 8002a12:	d902      	bls.n	8002a1a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	f000 bf43 	b.w	80038a0 <HAL_RCC_OscConfig+0x106c>
 8002a1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a1e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002a2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d102      	bne.n	8002a4c <HAL_RCC_OscConfig+0x218>
 8002a46:	4b47      	ldr	r3, [pc, #284]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	e015      	b.n	8002a78 <HAL_RCC_OscConfig+0x244>
 8002a4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a50:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002a60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a64:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002a68:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a74:	4b3b      	ldr	r3, [pc, #236]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a7c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002a80:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002a84:	fa92 f2a2 	rbit	r2, r2
 8002a88:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002a8c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002a90:	fab2 f282 	clz	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f042 0220 	orr.w	r2, r2, #32
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f002 021f 	and.w	r2, r2, #31
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ab      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1d0>
 8002aac:	e05d      	b.n	8002b6a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fd ff65 	bl	800097c <HAL_GetTick>
 8002ab2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7fd ff60 	bl	800097c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b64      	cmp	r3, #100	@ 0x64
 8002ac6:	d902      	bls.n	8002ace <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	f000 bee9 	b.w	80038a0 <HAL_RCC_OscConfig+0x106c>
 8002ace:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ad2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002ae2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d102      	bne.n	8002b00 <HAL_RCC_OscConfig+0x2cc>
 8002afa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	e015      	b.n	8002b2c <HAL_RCC_OscConfig+0x2f8>
 8002b00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b04:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002b14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b18:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002b1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002b28:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <HAL_RCC_OscConfig+0x330>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b30:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002b34:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002b38:	fa92 f2a2 	rbit	r2, r2
 8002b3c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002b40:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002b44:	fab2 f282 	clz	r2, r2
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	f042 0220 	orr.w	r2, r2, #32
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	f002 021f 	and.w	r2, r2, #31
 8002b54:	2101      	movs	r1, #1
 8002b56:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ab      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x284>
 8002b60:	e003      	b.n	8002b6a <HAL_RCC_OscConfig+0x336>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 817d 	beq.w	8002e7a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b80:	4ba6      	ldr	r3, [pc, #664]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b8c:	4ba3      	ldr	r3, [pc, #652]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d172      	bne.n	8002c7e <HAL_RCC_OscConfig+0x44a>
 8002b98:	4ba0      	ldr	r3, [pc, #640]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d16c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x44a>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002bb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3a0>
 8002bce:	4b93      	ldr	r3, [pc, #588]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	e013      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c8>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002be6:	2302      	movs	r3, #2
 8002be8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002bec:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002bf8:	4b88      	ldr	r3, [pc, #544]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002c02:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002c06:	fa92 f2a2 	rbit	r2, r2
 8002c0a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002c0e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002c12:	fab2 f282 	clz	r2, r2
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	f042 0220 	orr.w	r2, r2, #32
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f002 021f 	and.w	r2, r2, #31
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCC_OscConfig+0x410>
 8002c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f000 be2e 	b.w	80038a0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b75      	ldr	r3, [pc, #468]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	21f8      	movs	r1, #248	@ 0xf8
 8002c5a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002c62:	fa91 f1a1 	rbit	r1, r1
 8002c66:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002c6a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002c6e:	fab1 f181 	clz	r1, r1
 8002c72:	b2c9      	uxtb	r1, r1
 8002c74:	408b      	lsls	r3, r1
 8002c76:	4969      	ldr	r1, [pc, #420]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7c:	e0fd      	b.n	8002e7a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8088 	beq.w	8002da0 <HAL_RCC_OscConfig+0x56c>
 8002c90:	2301      	movs	r3, #1
 8002c92:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002ca2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cb0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2301      	movs	r3, #1
 8002cba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fd fe5e 	bl	800097c <HAL_GetTick>
 8002cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc6:	f7fd fe59 	bl	800097c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d902      	bls.n	8002cdc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	f000 bde2 	b.w	80038a0 <HAL_RCC_OscConfig+0x106c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002cee:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4d8>
 8002d06:	4b45      	ldr	r3, [pc, #276]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e013      	b.n	8002d34 <HAL_RCC_OscConfig+0x500>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002d1e:	2302      	movs	r3, #2
 8002d20:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002d24:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002d30:	4b3a      	ldr	r3, [pc, #232]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	2202      	movs	r2, #2
 8002d36:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002d3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002d3e:	fa92 f2a2 	rbit	r2, r2
 8002d42:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002d46:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002d4a:	fab2 f282 	clz	r2, r2
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	f042 0220 	orr.w	r2, r2, #32
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f002 021f 	and.w	r2, r2, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0af      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b2d      	ldr	r3, [pc, #180]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	21f8      	movs	r1, #248	@ 0xf8
 8002d7c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002d84:	fa91 f1a1 	rbit	r1, r1
 8002d88:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002d8c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002d90:	fab1 f181 	clz	r1, r1
 8002d94:	b2c9      	uxtb	r1, r1
 8002d96:	408b      	lsls	r3, r1
 8002d98:	4920      	ldr	r1, [pc, #128]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
 8002d9e:	e06c      	b.n	8002e7a <HAL_RCC_OscConfig+0x646>
 8002da0:	2301      	movs	r3, #1
 8002da2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002db2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002dc0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fd fdd6 	bl	800097c <HAL_GetTick>
 8002dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fd fdd1 	bl	800097c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d902      	bls.n	8002dec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	f000 bd5a 	b.w	80038a0 <HAL_RCC_OscConfig+0x106c>
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d104      	bne.n	8002e20 <HAL_RCC_OscConfig+0x5ec>
 8002e16:	4b01      	ldr	r3, [pc, #4]	@ (8002e1c <HAL_RCC_OscConfig+0x5e8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	e015      	b.n	8002e48 <HAL_RCC_OscConfig+0x614>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	2302      	movs	r3, #2
 8002e22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002e32:	2302      	movs	r3, #2
 8002e34:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002e38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002e44:	4bc8      	ldr	r3, [pc, #800]	@ (8003168 <HAL_RCC_OscConfig+0x934>)
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002e4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002e52:	fa92 f2a2 	rbit	r2, r2
 8002e56:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002e5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002e5e:	fab2 f282 	clz	r2, r2
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	f042 0220 	orr.w	r2, r2, #32
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	f002 021f 	and.w	r2, r2, #31
 8002e6e:	2101      	movs	r1, #1
 8002e70:	fa01 f202 	lsl.w	r2, r1, r2
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ad      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8110 	beq.w	80030b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d079      	beq.n	8002f94 <HAL_RCC_OscConfig+0x760>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4bab      	ldr	r3, [pc, #684]	@ (800316c <HAL_RCC_OscConfig+0x938>)
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fd fd57 	bl	800097c <HAL_GetTick>
 8002ece:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fd fd52 	bl	800097c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d902      	bls.n	8002eea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	f000 bcdb 	b.w	80038a0 <HAL_RCC_OscConfig+0x106c>
 8002eea:	2302      	movs	r3, #2
 8002eec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f04:	2202      	movs	r2, #2
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	fa93 f2a3 	rbit	r2, r3
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f28:	2202      	movs	r2, #2
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	fa93 f2a3 	rbit	r2, r3
 8002f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f42:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f44:	4b88      	ldr	r3, [pc, #544]	@ (8003168 <HAL_RCC_OscConfig+0x934>)
 8002f46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f50:	2102      	movs	r1, #2
 8002f52:	6019      	str	r1, [r3, #0]
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f1a3 	rbit	r1, r3
 8002f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f6a:	6019      	str	r1, [r3, #0]
  return result;
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	2101      	movs	r1, #1
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0a0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x6a0>
 8002f92:	e08d      	b.n	80030b0 <HAL_RCC_OscConfig+0x87c>
 8002f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	fa93 f2a3 	rbit	r2, r3
 8002fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002fb6:	601a      	str	r2, [r3, #0]
  return result;
 8002fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002fc0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b68      	ldr	r3, [pc, #416]	@ (800316c <HAL_RCC_OscConfig+0x938>)
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fd fcd1 	bl	800097c <HAL_GetTick>
 8002fda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fd fccc 	bl	800097c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d902      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	f000 bc55 	b.w	80038a0 <HAL_RCC_OscConfig+0x106c>
 8002ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ffe:	2202      	movs	r2, #2
 8003000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	fa93 f2a3 	rbit	r2, r3
 8003010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003014:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003022:	2202      	movs	r2, #2
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	fa93 f2a3 	rbit	r2, r3
 8003034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003038:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003042:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003046:	2202      	movs	r2, #2
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003060:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003062:	4b41      	ldr	r3, [pc, #260]	@ (8003168 <HAL_RCC_OscConfig+0x934>)
 8003064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800306e:	2102      	movs	r1, #2
 8003070:	6019      	str	r1, [r3, #0]
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	fa93 f1a3 	rbit	r1, r3
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003088:	6019      	str	r1, [r3, #0]
  return result;
 800308a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d197      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 81a1 	beq.w	8003408 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030cc:	4b26      	ldr	r3, [pc, #152]	@ (8003168 <HAL_RCC_OscConfig+0x934>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d116      	bne.n	8003106 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	4b23      	ldr	r3, [pc, #140]	@ (8003168 <HAL_RCC_OscConfig+0x934>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	4a22      	ldr	r2, [pc, #136]	@ (8003168 <HAL_RCC_OscConfig+0x934>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	61d3      	str	r3, [r2, #28]
 80030e4:	4b20      	ldr	r3, [pc, #128]	@ (8003168 <HAL_RCC_OscConfig+0x934>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80030ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	4b1a      	ldr	r3, [pc, #104]	@ (8003170 <HAL_RCC_OscConfig+0x93c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d11a      	bne.n	8003148 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003112:	4b17      	ldr	r3, [pc, #92]	@ (8003170 <HAL_RCC_OscConfig+0x93c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a16      	ldr	r2, [pc, #88]	@ (8003170 <HAL_RCC_OscConfig+0x93c>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311e:	f7fd fc2d 	bl	800097c <HAL_GetTick>
 8003122:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003126:	e009      	b.n	800313c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003128:	f7fd fc28 	bl	800097c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b64      	cmp	r3, #100	@ 0x64
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e3b1      	b.n	80038a0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <HAL_RCC_OscConfig+0x93c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ef      	beq.n	8003128 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d10d      	bne.n	8003174 <HAL_RCC_OscConfig+0x940>
 8003158:	4b03      	ldr	r3, [pc, #12]	@ (8003168 <HAL_RCC_OscConfig+0x934>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4a02      	ldr	r2, [pc, #8]	@ (8003168 <HAL_RCC_OscConfig+0x934>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6213      	str	r3, [r2, #32]
 8003164:	e03c      	b.n	80031e0 <HAL_RCC_OscConfig+0x9ac>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	10908120 	.word	0x10908120
 8003170:	40007000 	.word	0x40007000
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10c      	bne.n	800319e <HAL_RCC_OscConfig+0x96a>
 8003184:	4bc1      	ldr	r3, [pc, #772]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4ac0      	ldr	r2, [pc, #768]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	6213      	str	r3, [r2, #32]
 8003190:	4bbe      	ldr	r3, [pc, #760]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4abd      	ldr	r2, [pc, #756]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 8003196:	f023 0304 	bic.w	r3, r3, #4
 800319a:	6213      	str	r3, [r2, #32]
 800319c:	e020      	b.n	80031e0 <HAL_RCC_OscConfig+0x9ac>
 800319e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x994>
 80031ae:	4bb7      	ldr	r3, [pc, #732]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4ab6      	ldr	r2, [pc, #728]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	6213      	str	r3, [r2, #32]
 80031ba:	4bb4      	ldr	r3, [pc, #720]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4ab3      	ldr	r2, [pc, #716]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6213      	str	r3, [r2, #32]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0x9ac>
 80031c8:	4bb0      	ldr	r3, [pc, #704]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4aaf      	ldr	r2, [pc, #700]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	4bad      	ldr	r3, [pc, #692]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4aac      	ldr	r2, [pc, #688]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80031da:	f023 0304 	bic.w	r3, r3, #4
 80031de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8081 	beq.w	80032f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f7fd fbc3 	bl	800097c <HAL_GetTick>
 80031f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fd fbbe 	bl	800097c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e345      	b.n	80038a0 <HAL_RCC_OscConfig+0x106c>
 8003214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003218:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800321c:	2202      	movs	r2, #2
 800321e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003224:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003240:	2202      	movs	r2, #2
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003248:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	fa93 f2a3 	rbit	r2, r3
 8003252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003256:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800325a:	601a      	str	r2, [r3, #0]
  return result;
 800325c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003260:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003264:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d102      	bne.n	8003280 <HAL_RCC_OscConfig+0xa4c>
 800327a:	4b84      	ldr	r3, [pc, #528]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	e013      	b.n	80032a8 <HAL_RCC_OscConfig+0xa74>
 8003280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003284:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003288:	2202      	movs	r2, #2
 800328a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003290:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f2a3 	rbit	r2, r3
 800329a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	4b79      	ldr	r3, [pc, #484]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80032b0:	2102      	movs	r1, #2
 80032b2:	6011      	str	r1, [r2, #0]
 80032b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032b8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	fa92 f1a2 	rbit	r1, r2
 80032c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032c6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80032ca:	6011      	str	r1, [r2, #0]
  return result;
 80032cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032d0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	fab2 f282 	clz	r2, r2
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	f002 021f 	and.w	r2, r2, #31
 80032e6:	2101      	movs	r1, #1
 80032e8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d084      	beq.n	80031fc <HAL_RCC_OscConfig+0x9c8>
 80032f2:	e07f      	b.n	80033f4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f4:	f7fd fb42 	bl	800097c <HAL_GetTick>
 80032f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fc:	e00b      	b.n	8003316 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7fd fb3d 	bl	800097c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e2c4      	b.n	80038a0 <HAL_RCC_OscConfig+0x106c>
 8003316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800331e:	2202      	movs	r2, #2
 8003320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003326:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fa93 f2a3 	rbit	r2, r3
 8003330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003334:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003342:	2202      	movs	r2, #2
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	fa93 f2a3 	rbit	r2, r3
 8003354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003358:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800335c:	601a      	str	r2, [r3, #0]
  return result;
 800335e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003362:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003366:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f043 0302 	orr.w	r3, r3, #2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d102      	bne.n	8003382 <HAL_RCC_OscConfig+0xb4e>
 800337c:	4b43      	ldr	r3, [pc, #268]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	e013      	b.n	80033aa <HAL_RCC_OscConfig+0xb76>
 8003382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003386:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800338a:	2202      	movs	r2, #2
 800338c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003392:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fa93 f2a3 	rbit	r2, r3
 800339c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	4b39      	ldr	r3, [pc, #228]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033ae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80033b2:	2102      	movs	r1, #2
 80033b4:	6011      	str	r1, [r2, #0]
 80033b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033ba:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	fa92 f1a2 	rbit	r1, r2
 80033c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033c8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80033cc:	6011      	str	r1, [r2, #0]
  return result;
 80033ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033d2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	fab2 f282 	clz	r2, r2
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f002 021f 	and.w	r2, r2, #31
 80033e8:	2101      	movs	r1, #1
 80033ea:	fa01 f202 	lsl.w	r2, r1, r2
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d184      	bne.n	80032fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d105      	bne.n	8003408 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fc:	4b23      	ldr	r3, [pc, #140]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4a22      	ldr	r2, [pc, #136]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 8003402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003406:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8242 	beq.w	800389e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800341a:	4b1c      	ldr	r3, [pc, #112]	@ (800348c <HAL_RCC_OscConfig+0xc58>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b08      	cmp	r3, #8
 8003424:	f000 8213 	beq.w	800384e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	2b02      	cmp	r3, #2
 8003436:	f040 8162 	bne.w	80036fe <HAL_RCC_OscConfig+0xeca>
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003442:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800345e:	601a      	str	r2, [r3, #0]
  return result;
 8003460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003464:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003468:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003474:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	461a      	mov	r2, r3
 800347c:	2300      	movs	r3, #0
 800347e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fd fa7c 	bl	800097c <HAL_GetTick>
 8003484:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003488:	e00c      	b.n	80034a4 <HAL_RCC_OscConfig+0xc70>
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fd fa74 	bl	800097c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e1fd      	b.n	80038a0 <HAL_RCC_OscConfig+0x106c>
 80034a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80034ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80034c8:	601a      	str	r2, [r3, #0]
  return result;
 80034ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ce:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80034d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d102      	bne.n	80034ee <HAL_RCC_OscConfig+0xcba>
 80034e8:	4bb0      	ldr	r3, [pc, #704]	@ (80037ac <HAL_RCC_OscConfig+0xf78>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	e027      	b.n	800353e <HAL_RCC_OscConfig+0xd0a>
 80034ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003500:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	fa93 f2a3 	rbit	r2, r3
 800350a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003518:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800351c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fa93 f2a3 	rbit	r2, r3
 8003530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003534:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	4b9c      	ldr	r3, [pc, #624]	@ (80037ac <HAL_RCC_OscConfig+0xf78>)
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003542:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003546:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800354a:	6011      	str	r1, [r2, #0]
 800354c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003550:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	fa92 f1a2 	rbit	r1, r2
 800355a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800355e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003562:	6011      	str	r1, [r2, #0]
  return result;
 8003564:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003568:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	fab2 f282 	clz	r2, r2
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f042 0220 	orr.w	r2, r2, #32
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	f002 021f 	and.w	r2, r2, #31
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f202 	lsl.w	r2, r1, r2
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d182      	bne.n	8003490 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800358a:	4b88      	ldr	r3, [pc, #544]	@ (80037ac <HAL_RCC_OscConfig+0xf78>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003596:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800359e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	430b      	orrs	r3, r1
 80035ac:	497f      	ldr	r1, [pc, #508]	@ (80037ac <HAL_RCC_OscConfig+0xf78>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	604b      	str	r3, [r1, #4]
 80035b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80035ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	fa93 f2a3 	rbit	r2, r3
 80035ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035d6:	601a      	str	r2, [r3, #0]
  return result;
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035e0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	461a      	mov	r2, r3
 80035f4:	2301      	movs	r3, #1
 80035f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fd f9c0 	bl	800097c <HAL_GetTick>
 80035fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003600:	e009      	b.n	8003616 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003602:	f7fd f9bb 	bl	800097c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e144      	b.n	80038a0 <HAL_RCC_OscConfig+0x106c>
 8003616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800361e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003628:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	fa93 f2a3 	rbit	r2, r3
 8003632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003636:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800363a:	601a      	str	r2, [r3, #0]
  return result;
 800363c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003640:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003644:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d102      	bne.n	8003660 <HAL_RCC_OscConfig+0xe2c>
 800365a:	4b54      	ldr	r3, [pc, #336]	@ (80037ac <HAL_RCC_OscConfig+0xf78>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	e027      	b.n	80036b0 <HAL_RCC_OscConfig+0xe7c>
 8003660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003664:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003668:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800366c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003672:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003680:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800368e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003698:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	fa93 f2a3 	rbit	r2, r3
 80036a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	4b3f      	ldr	r3, [pc, #252]	@ (80037ac <HAL_RCC_OscConfig+0xf78>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036b4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80036b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036bc:	6011      	str	r1, [r2, #0]
 80036be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036c2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	fa92 f1a2 	rbit	r1, r2
 80036cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036d0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80036d4:	6011      	str	r1, [r2, #0]
  return result;
 80036d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036da:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	fab2 f282 	clz	r2, r2
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f042 0220 	orr.w	r2, r2, #32
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	f002 021f 	and.w	r2, r2, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f202 	lsl.w	r2, r1, r2
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d082      	beq.n	8003602 <HAL_RCC_OscConfig+0xdce>
 80036fc:	e0cf      	b.n	800389e <HAL_RCC_OscConfig+0x106a>
 80036fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003702:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003706:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800370a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003710:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	fa93 f2a3 	rbit	r2, r3
 800371a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003722:	601a      	str	r2, [r3, #0]
  return result;
 8003724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003728:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800372c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003738:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	461a      	mov	r2, r3
 8003740:	2300      	movs	r3, #0
 8003742:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fd f91a 	bl	800097c <HAL_GetTick>
 8003748:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374c:	e009      	b.n	8003762 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374e:	f7fd f915 	bl	800097c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e09e      	b.n	80038a0 <HAL_RCC_OscConfig+0x106c>
 8003762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003766:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800376a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800376e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003774:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	fa93 f2a3 	rbit	r2, r3
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003786:	601a      	str	r2, [r3, #0]
  return result;
 8003788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003790:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d104      	bne.n	80037b0 <HAL_RCC_OscConfig+0xf7c>
 80037a6:	4b01      	ldr	r3, [pc, #4]	@ (80037ac <HAL_RCC_OscConfig+0xf78>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	e029      	b.n	8003800 <HAL_RCC_OscConfig+0xfcc>
 80037ac:	40021000 	.word	0x40021000
 80037b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80037b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	fa93 f2a3 	rbit	r2, r3
 80037cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037da:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80037de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f2a3 	rbit	r2, r3
 80037f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	4b2b      	ldr	r3, [pc, #172]	@ (80038ac <HAL_RCC_OscConfig+0x1078>)
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003804:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003808:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800380c:	6011      	str	r1, [r2, #0]
 800380e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003812:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	fa92 f1a2 	rbit	r1, r2
 800381c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003820:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003824:	6011      	str	r1, [r2, #0]
  return result;
 8003826:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800382a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	fab2 f282 	clz	r2, r2
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f042 0220 	orr.w	r2, r2, #32
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	f002 021f 	and.w	r2, r2, #31
 8003840:	2101      	movs	r1, #1
 8003842:	fa01 f202 	lsl.w	r2, r1, r2
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d180      	bne.n	800374e <HAL_RCC_OscConfig+0xf1a>
 800384c:	e027      	b.n	800389e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003852:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e01e      	b.n	80038a0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003862:	4b12      	ldr	r3, [pc, #72]	@ (80038ac <HAL_RCC_OscConfig+0x1078>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800386a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800386e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003876:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	429a      	cmp	r2, r3
 8003880:	d10b      	bne.n	800389a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003882:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003886:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800388a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003896:	429a      	cmp	r2, r3
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000

080038b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b09e      	sub	sp, #120	@ 0x78
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e162      	b.n	8003b8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b90      	ldr	r3, [pc, #576]	@ (8003b0c <HAL_RCC_ClockConfig+0x25c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b8d      	ldr	r3, [pc, #564]	@ (8003b0c <HAL_RCC_ClockConfig+0x25c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 0207 	bic.w	r2, r3, #7
 80038de:	498b      	ldr	r1, [pc, #556]	@ (8003b0c <HAL_RCC_ClockConfig+0x25c>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b89      	ldr	r3, [pc, #548]	@ (8003b0c <HAL_RCC_ClockConfig+0x25c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e14a      	b.n	8003b8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003904:	4b82      	ldr	r3, [pc, #520]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	497f      	ldr	r1, [pc, #508]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80dc 	beq.w	8003adc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d13c      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xf6>
 800392c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003930:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800393a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d102      	bne.n	8003956 <HAL_RCC_ClockConfig+0xa6>
 8003950:	4b6f      	ldr	r3, [pc, #444]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	e00f      	b.n	8003976 <HAL_RCC_ClockConfig+0xc6>
 8003956:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800395a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	667b      	str	r3, [r7, #100]	@ 0x64
 8003964:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003968:	663b      	str	r3, [r7, #96]	@ 0x60
 800396a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003972:	4b67      	ldr	r3, [pc, #412]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800397a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800397c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800397e:	fa92 f2a2 	rbit	r2, r2
 8003982:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003984:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003986:	fab2 f282 	clz	r2, r2
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	f042 0220 	orr.w	r2, r2, #32
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f002 021f 	and.w	r2, r2, #31
 8003996:	2101      	movs	r1, #1
 8003998:	fa01 f202 	lsl.w	r2, r1, r2
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d17b      	bne.n	8003a9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0f3      	b.n	8003b8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d13c      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x178>
 80039ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80039bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x128>
 80039d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	e00f      	b.n	80039f8 <HAL_RCC_ClockConfig+0x148>
 80039d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039f4:	4b46      	ldr	r3, [pc, #280]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039fc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80039fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a00:	fa92 f2a2 	rbit	r2, r2
 8003a04:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003a06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a08:	fab2 f282 	clz	r2, r2
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f042 0220 	orr.w	r2, r2, #32
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	f002 021f 	and.w	r2, r2, #31
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d13a      	bne.n	8003a9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0b2      	b.n	8003b8e <HAL_RCC_ClockConfig+0x2de>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d102      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x1a0>
 8003a4a:	4b31      	ldr	r3, [pc, #196]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	e00d      	b.n	8003a6c <HAL_RCC_ClockConfig+0x1bc>
 8003a50:	2302      	movs	r3, #2
 8003a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	623b      	str	r3, [r7, #32]
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	4b29      	ldr	r3, [pc, #164]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	61ba      	str	r2, [r7, #24]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	fa92 f2a2 	rbit	r2, r2
 8003a76:	617a      	str	r2, [r7, #20]
  return result;
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	fab2 f282 	clz	r2, r2
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	f042 0220 	orr.w	r2, r2, #32
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	f002 021f 	and.w	r2, r2, #31
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e079      	b.n	8003b8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f023 0203 	bic.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	491a      	ldr	r1, [pc, #104]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aac:	f7fc ff66 	bl	800097c <HAL_GetTick>
 8003ab0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab4:	f7fc ff62 	bl	800097c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e061      	b.n	8003b8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 020c 	and.w	r2, r3, #12
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1eb      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003adc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_ClockConfig+0x25c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d214      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <HAL_RCC_ClockConfig+0x25c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 0207 	bic.w	r2, r3, #7
 8003af2:	4906      	ldr	r1, [pc, #24]	@ (8003b0c <HAL_RCC_ClockConfig+0x25c>)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <HAL_RCC_ClockConfig+0x25c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e040      	b.n	8003b8e <HAL_RCC_ClockConfig+0x2de>
 8003b0c:	40022000 	.word	0x40022000
 8003b10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b1d      	ldr	r3, [pc, #116]	@ (8003b98 <HAL_RCC_ClockConfig+0x2e8>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	491a      	ldr	r1, [pc, #104]	@ (8003b98 <HAL_RCC_ClockConfig+0x2e8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3e:	4b16      	ldr	r3, [pc, #88]	@ (8003b98 <HAL_RCC_ClockConfig+0x2e8>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4912      	ldr	r1, [pc, #72]	@ (8003b98 <HAL_RCC_ClockConfig+0x2e8>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b52:	f000 f829 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b56:	4601      	mov	r1, r0
 8003b58:	4b0f      	ldr	r3, [pc, #60]	@ (8003b98 <HAL_RCC_ClockConfig+0x2e8>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b60:	22f0      	movs	r2, #240	@ 0xf0
 8003b62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	fa92 f2a2 	rbit	r2, r2
 8003b6a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	fab2 f282 	clz	r2, r2
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	40d3      	lsrs	r3, r2
 8003b76:	4a09      	ldr	r2, [pc, #36]	@ (8003b9c <HAL_RCC_ClockConfig+0x2ec>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
 8003b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ba0 <HAL_RCC_ClockConfig+0x2f0>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b82:	4b08      	ldr	r3, [pc, #32]	@ (8003ba4 <HAL_RCC_ClockConfig+0x2f4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fc feb4 	bl	80008f4 <HAL_InitTick>
  
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3778      	adds	r7, #120	@ 0x78
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	08008b1c 	.word	0x08008b1c
 8003ba0:	2000000c 	.word	0x2000000c
 8003ba4:	20000010 	.word	0x20000010

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d002      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x36>
 8003bd6:	e026      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bd8:	4b19      	ldr	r3, [pc, #100]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bda:	613b      	str	r3, [r7, #16]
      break;
 8003bdc:	e026      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	0c9b      	lsrs	r3, r3, #18
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	4a17      	ldr	r2, [pc, #92]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003be8:	5cd3      	ldrb	r3, [r2, r3]
 8003bea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003bec:	4b13      	ldr	r3, [pc, #76]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	4a14      	ldr	r2, [pc, #80]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bf6:	5cd3      	ldrb	r3, [r2, r3]
 8003bf8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c04:	4a0e      	ldr	r2, [pc, #56]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e004      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a0c      	ldr	r2, [pc, #48]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	613b      	str	r3, [r7, #16]
      break;
 8003c24:	e002      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c28:	613b      	str	r3, [r7, #16]
      break;
 8003c2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2c:	693b      	ldr	r3, [r7, #16]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	007a1200 	.word	0x007a1200
 8003c44:	08008b2c 	.word	0x08008b2c
 8003c48:	08008b3c 	.word	0x08008b3c
 8003c4c:	003d0900 	.word	0x003d0900

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b092      	sub	sp, #72	@ 0x48
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80d4 	beq.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c74:	4b4e      	ldr	r3, [pc, #312]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10e      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b4b      	ldr	r3, [pc, #300]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4a4a      	ldr	r2, [pc, #296]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	61d3      	str	r3, [r2, #28]
 8003c8c:	4b48      	ldr	r3, [pc, #288]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4b45      	ldr	r3, [pc, #276]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003caa:	4b42      	ldr	r3, [pc, #264]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a41      	ldr	r2, [pc, #260]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb6:	f7fc fe61 	bl	800097c <HAL_GetTick>
 8003cba:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7fc fe5d 	bl	800097c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b64      	cmp	r3, #100	@ 0x64
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e14b      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	4b38      	ldr	r3, [pc, #224]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cdc:	4b34      	ldr	r3, [pc, #208]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8084 	beq.w	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d07c      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b26      	ldr	r3, [pc, #152]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	461a      	mov	r2, r3
 8003d26:	2301      	movs	r3, #1
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d4e:	4a18      	ldr	r2, [pc, #96]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d04b      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fc fe0d 	bl	800097c <HAL_GetTick>
 8003d62:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fc fe09 	bl	800097c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0f5      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d88:	2302      	movs	r3, #2
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	61fb      	str	r3, [r7, #28]
  return result;
 8003d94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d108      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003daa:	4b01      	ldr	r3, [pc, #4]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	e00d      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	10908100 	.word	0x10908100
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa93 f3a3 	rbit	r3, r3
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	4b69      	ldr	r3, [pc, #420]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	2202      	movs	r2, #2
 8003dce:	613a      	str	r2, [r7, #16]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	fa92 f2a2 	rbit	r2, r2
 8003dd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	fab2 f282 	clz	r2, r2
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f002 021f 	and.w	r2, r2, #31
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f202 	lsl.w	r2, r1, r2
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0b7      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003df6:	4b5e      	ldr	r3, [pc, #376]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	495b      	ldr	r1, [pc, #364]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b57      	ldr	r3, [pc, #348]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	4a56      	ldr	r2, [pc, #344]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e28:	4b51      	ldr	r3, [pc, #324]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2c:	f023 0203 	bic.w	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	494e      	ldr	r1, [pc, #312]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e46:	4b4a      	ldr	r3, [pc, #296]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	f023 0210 	bic.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4947      	ldr	r1, [pc, #284]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e64:	4b42      	ldr	r3, [pc, #264]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	493f      	ldr	r1, [pc, #252]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e82:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	f023 0220 	bic.w	r2, r3, #32
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	4938      	ldr	r1, [pc, #224]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ea0:	4b33      	ldr	r3, [pc, #204]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	4930      	ldr	r1, [pc, #192]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4929      	ldr	r1, [pc, #164]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003edc:	4b24      	ldr	r3, [pc, #144]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	4921      	ldr	r1, [pc, #132]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003efa:	4b1d      	ldr	r3, [pc, #116]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	491a      	ldr	r1, [pc, #104]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f18:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	4912      	ldr	r1, [pc, #72]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f36:	4b0e      	ldr	r3, [pc, #56]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	490b      	ldr	r1, [pc, #44]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f54:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	4903      	ldr	r1, [pc, #12]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3748      	adds	r7, #72	@ 0x48
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000

08003f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e049      	b.n	800401a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fc fa58 	bl	8000450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f000 fa88 	bl	80044c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d001      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e03b      	b.n	80040b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a19      	ldr	r2, [pc, #100]	@ (80040c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_TIM_Base_Start_IT+0x4e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004066:	d004      	beq.n	8004072 <HAL_TIM_Base_Start_IT+0x4e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d115      	bne.n	800409e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	4b13      	ldr	r3, [pc, #76]	@ (80040c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800407a:	4013      	ands	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b06      	cmp	r3, #6
 8004082:	d015      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x8c>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408a:	d011      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409c:	e008      	b.n	80040b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e000      	b.n	80040b2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40014000 	.word	0x40014000
 80040c8:	00010007 	.word	0x00010007

080040cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d020      	beq.n	8004130 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01b      	beq.n	8004130 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0202 	mvn.w	r2, #2
 8004100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9b7 	bl	800448a <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f9a9 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f9ba 	bl	800449e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d020      	beq.n	800417c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01b      	beq.n	800417c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0204 	mvn.w	r2, #4
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f991 	bl	800448a <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f983 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f994 	bl	800449e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d020      	beq.n	80041c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01b      	beq.n	80041c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0208 	mvn.w	r2, #8
 8004198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2204      	movs	r2, #4
 800419e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f96b 	bl	800448a <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f95d 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f96e 	bl	800449e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d020      	beq.n	8004214 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01b      	beq.n	8004214 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0210 	mvn.w	r2, #16
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2208      	movs	r2, #8
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f945 	bl	800448a <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f937 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f948 	bl	800449e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00c      	beq.n	8004238 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0201 	mvn.w	r2, #1
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f915 	bl	8004462 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 faba 	bl	80047d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fab2 	bl	80047e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f907 	bl	80044b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0220 	mvn.w	r2, #32
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fa7a 	bl	80047bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0b6      	b.n	800445a <HAL_TIM_ConfigClockSource+0x18a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800430e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004328:	d03e      	beq.n	80043a8 <HAL_TIM_ConfigClockSource+0xd8>
 800432a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432e:	f200 8087 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004336:	f000 8086 	beq.w	8004446 <HAL_TIM_ConfigClockSource+0x176>
 800433a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433e:	d87f      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004340:	2b70      	cmp	r3, #112	@ 0x70
 8004342:	d01a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0xaa>
 8004344:	2b70      	cmp	r3, #112	@ 0x70
 8004346:	d87b      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004348:	2b60      	cmp	r3, #96	@ 0x60
 800434a:	d050      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x11e>
 800434c:	2b60      	cmp	r3, #96	@ 0x60
 800434e:	d877      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004350:	2b50      	cmp	r3, #80	@ 0x50
 8004352:	d03c      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0xfe>
 8004354:	2b50      	cmp	r3, #80	@ 0x50
 8004356:	d873      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d058      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x13e>
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d86f      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004360:	2b30      	cmp	r3, #48	@ 0x30
 8004362:	d064      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 8004364:	2b30      	cmp	r3, #48	@ 0x30
 8004366:	d86b      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d060      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d867      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05c      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 8004374:	2b10      	cmp	r3, #16
 8004376:	d05a      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 8004378:	e062      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	f000 f991 	bl	80046b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800439c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	609a      	str	r2, [r3, #8]
      break;
 80043a6:	e04f      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b8:	f000 f97a 	bl	80046b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ca:	609a      	str	r2, [r3, #8]
      break;
 80043cc:	e03c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 f8ee 	bl	80045bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2150      	movs	r1, #80	@ 0x50
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f947 	bl	800467a <TIM_ITRx_SetConfig>
      break;
 80043ec:	e02c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 f90d 	bl	800461a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2160      	movs	r1, #96	@ 0x60
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f937 	bl	800467a <TIM_ITRx_SetConfig>
      break;
 800440c:	e01c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441a:	461a      	mov	r2, r3
 800441c:	f000 f8ce 	bl	80045bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2140      	movs	r1, #64	@ 0x40
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f927 	bl	800467a <TIM_ITRx_SetConfig>
      break;
 800442c:	e00c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f000 f91e 	bl	800467a <TIM_ITRx_SetConfig>
      break;
 800443e:	e003      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      break;
 8004444:	e000      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a34      	ldr	r2, [pc, #208]	@ (80045ac <TIM_Base_SetConfig+0xe4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0x20>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e6:	d108      	bne.n	80044fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2b      	ldr	r2, [pc, #172]	@ (80045ac <TIM_Base_SetConfig+0xe4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00f      	beq.n	8004522 <TIM_Base_SetConfig+0x5a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004508:	d00b      	beq.n	8004522 <TIM_Base_SetConfig+0x5a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a28      	ldr	r2, [pc, #160]	@ (80045b0 <TIM_Base_SetConfig+0xe8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d007      	beq.n	8004522 <TIM_Base_SetConfig+0x5a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a27      	ldr	r2, [pc, #156]	@ (80045b4 <TIM_Base_SetConfig+0xec>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d003      	beq.n	8004522 <TIM_Base_SetConfig+0x5a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a26      	ldr	r2, [pc, #152]	@ (80045b8 <TIM_Base_SetConfig+0xf0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d108      	bne.n	8004534 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a14      	ldr	r2, [pc, #80]	@ (80045ac <TIM_Base_SetConfig+0xe4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <TIM_Base_SetConfig+0xb0>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a13      	ldr	r2, [pc, #76]	@ (80045b0 <TIM_Base_SetConfig+0xe8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <TIM_Base_SetConfig+0xb0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a12      	ldr	r2, [pc, #72]	@ (80045b4 <TIM_Base_SetConfig+0xec>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0xb0>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a11      	ldr	r2, [pc, #68]	@ (80045b8 <TIM_Base_SetConfig+0xf0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d103      	bne.n	8004580 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d105      	bne.n	800459e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f023 0201 	bic.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	611a      	str	r2, [r3, #16]
  }
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800

080045bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0201 	bic.w	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 030a 	bic.w	r3, r3, #10
 80045f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800461a:	b480      	push	{r7}
 800461c:	b087      	sub	sp, #28
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f023 0210 	bic.w	r2, r3, #16
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	031b      	lsls	r3, r3, #12
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004656:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	f043 0307 	orr.w	r3, r3, #7
 800469c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	609a      	str	r2, [r3, #8]
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	609a      	str	r2, [r3, #8]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004704:	2302      	movs	r3, #2
 8004706:	e04f      	b.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a21      	ldr	r2, [pc, #132]	@ (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004738:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a14      	ldr	r2, [pc, #80]	@ (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004770:	d004      	beq.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a10      	ldr	r2, [pc, #64]	@ (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10c      	bne.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	4313      	orrs	r3, r2
 800478c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40014000 	.word	0x40014000

080047bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004808:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800480c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800482e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004832:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	b29b      	uxth	r3, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	b29b      	uxth	r3, r3
 8004844:	4013      	ands	r3, r2
 8004846:	b29a      	uxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	1d3b      	adds	r3, r7, #4
 8004866:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004898:	b480      	push	{r7}
 800489a:	b09d      	sub	sp, #116	@ 0x74
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80048ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048be:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	78db      	ldrb	r3, [r3, #3]
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d81f      	bhi.n	800490a <USB_ActivateEndpoint+0x72>
 80048ca:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <USB_ActivateEndpoint+0x38>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	080048e1 	.word	0x080048e1
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	08004913 	.word	0x08004913
 80048dc:	080048ef 	.word	0x080048ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80048e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80048e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80048ec:	e012      	b.n	8004914 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80048ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80048f2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80048f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80048fa:	e00b      	b.n	8004914 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80048fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004900:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004904:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004908:	e004      	b.n	8004914 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004910:	e000      	b.n	8004914 <USB_ActivateEndpoint+0x7c>
      break;
 8004912:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800492a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800492e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	b21b      	sxth	r3, r3
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800494a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494e:	b21a      	sxth	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	b21b      	sxth	r3, r3
 8004956:	4313      	orrs	r3, r2
 8004958:	b21b      	sxth	r3, r3
 800495a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	441a      	add	r2, r3
 8004968:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	7b1b      	ldrb	r3, [r3, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 8178 	bne.w	8004c7a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	785b      	ldrb	r3, [r3, #1]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8084 	beq.w	8004a9c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	61bb      	str	r3, [r7, #24]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800499e:	b29b      	uxth	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	4413      	add	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	00da      	lsls	r2, r3, #3
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	88db      	ldrh	r3, [r3, #6]
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	827b      	strh	r3, [r7, #18]
 80049d6:	8a7b      	ldrh	r3, [r7, #18]
 80049d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01b      	beq.n	8004a18 <USB_ActivateEndpoint+0x180>
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f6:	823b      	strh	r3, [r7, #16]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	441a      	add	r2, r3
 8004a02:	8a3b      	ldrh	r3, [r7, #16]
 8004a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	78db      	ldrb	r3, [r3, #3]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d020      	beq.n	8004a62 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a36:	81bb      	strh	r3, [r7, #12]
 8004a38:	89bb      	ldrh	r3, [r7, #12]
 8004a3a:	f083 0320 	eor.w	r3, r3, #32
 8004a3e:	81bb      	strh	r3, [r7, #12]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	89bb      	ldrh	r3, [r7, #12]
 8004a4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	8013      	strh	r3, [r2, #0]
 8004a60:	e2d5      	b.n	800500e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a78:	81fb      	strh	r3, [r7, #14]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	89fb      	ldrh	r3, [r7, #14]
 8004a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]
 8004a9a:	e2b8      	b.n	800500e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	4413      	add	r3, r2
 8004aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	00da      	lsls	r2, r3, #3
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	4413      	add	r3, r2
 8004aba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	88db      	ldrh	r3, [r3, #6]
 8004ac4:	085b      	lsrs	r3, r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ace:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	4413      	add	r3, r2
 8004ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	00da      	lsls	r2, r3, #3
 8004aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aec:	4413      	add	r3, r2
 8004aee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <USB_ActivateEndpoint+0x28a>
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	801a      	strh	r2, [r3, #0]
 8004b20:	e039      	b.n	8004b96 <USB_ActivateEndpoint+0x2fe>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b28:	d818      	bhi.n	8004b5c <USB_ActivateEndpoint+0x2c4>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <USB_ActivateEndpoint+0x2ac>
 8004b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b40:	3301      	adds	r3, #1
 8004b42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	029b      	lsls	r3, r3, #10
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4313      	orrs	r3, r2
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	801a      	strh	r2, [r3, #0]
 8004b5a:	e01c      	b.n	8004b96 <USB_ActivateEndpoint+0x2fe>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <USB_ActivateEndpoint+0x2de>
 8004b70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b72:	3b01      	subs	r3, #1
 8004b74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	029b      	lsls	r3, r3, #10
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	4313      	orrs	r3, r2
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004ba4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01b      	beq.n	8004be6 <USB_ActivateEndpoint+0x34e>
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc4:	843b      	strh	r3, [r7, #32]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	441a      	add	r2, r3
 8004bd0:	8c3b      	ldrh	r3, [r7, #32]
 8004bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d124      	bne.n	8004c38 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c04:	83bb      	strh	r3, [r7, #28]
 8004c06:	8bbb      	ldrh	r3, [r7, #28]
 8004c08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004c0c:	83bb      	strh	r3, [r7, #28]
 8004c0e:	8bbb      	ldrh	r3, [r7, #28]
 8004c10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c14:	83bb      	strh	r3, [r7, #28]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	441a      	add	r2, r3
 8004c20:	8bbb      	ldrh	r3, [r7, #28]
 8004c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]
 8004c36:	e1ea      	b.n	800500e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4e:	83fb      	strh	r3, [r7, #30]
 8004c50:	8bfb      	ldrh	r3, [r7, #30]
 8004c52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c56:	83fb      	strh	r3, [r7, #30]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	8bfb      	ldrh	r3, [r7, #30]
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]
 8004c78:	e1c9      	b.n	800500e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	78db      	ldrb	r3, [r3, #3]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d11e      	bne.n	8004cc0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c98:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	8013      	strh	r3, [r2, #0]
 8004cbe:	e01d      	b.n	8004cfc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	441a      	add	r2, r3
 8004ce4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d0c:	4413      	add	r3, r2
 8004d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	00da      	lsls	r2, r3, #3
 8004d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	891b      	ldrh	r3, [r3, #8]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d2e:	801a      	strh	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d40:	4413      	add	r3, r2
 8004d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	00da      	lsls	r2, r3, #3
 8004d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	895b      	ldrh	r3, [r3, #10]
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d62:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f040 8093 	bne.w	8004e94 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004d7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01b      	beq.n	8004dc2 <USB_ActivateEndpoint+0x52a>
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	441a      	add	r2, r3
 8004dac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004dd0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01b      	beq.n	8004e12 <USB_ActivateEndpoint+0x57a>
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	441a      	add	r2, r3
 8004dfc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e28:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004e2a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004e2c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004e30:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004e32:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004e34:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e38:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	441a      	add	r2, r3
 8004e44:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e70:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	8013      	strh	r3, [r2, #0]
 8004e92:	e0bc      	b.n	800500e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004ea4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004ea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01d      	beq.n	8004eec <USB_ActivateEndpoint+0x654>
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ed8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004edc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ee0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004efc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01d      	beq.n	8004f44 <USB_ActivateEndpoint+0x6ac>
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	78db      	ldrb	r3, [r3, #3]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d024      	beq.n	8004f96 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f62:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004f66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004f6a:	f083 0320 	eor.w	r3, r3, #32
 8004f6e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	441a      	add	r2, r3
 8004f7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004f80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	8013      	strh	r3, [r2, #0]
 8004f94:	e01d      	b.n	8004fd2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	441a      	add	r2, r3
 8004fba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004fbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	441a      	add	r2, r3
 8004ff6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500a:	b29b      	uxth	r3, r3
 800500c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800500e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005012:	4618      	mov	r0, r3
 8005014:	3774      	adds	r7, #116	@ 0x74
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop

08005020 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005020:	b480      	push	{r7}
 8005022:	b08d      	sub	sp, #52	@ 0x34
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	7b1b      	ldrb	r3, [r3, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 808e 	bne.w	8005150 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d044      	beq.n	80050c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	81bb      	strh	r3, [r7, #12]
 800504a:	89bb      	ldrh	r3, [r7, #12]
 800504c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <USB_DeactivateEndpoint+0x6c>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506a:	817b      	strh	r3, [r7, #10]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	897b      	ldrh	r3, [r7, #10]
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005084:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050a2:	813b      	strh	r3, [r7, #8]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	893b      	ldrh	r3, [r7, #8]
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]
 80050c4:	e192      	b.n	80053ec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	827b      	strh	r3, [r7, #18]
 80050d4:	8a7b      	ldrh	r3, [r7, #18]
 80050d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01b      	beq.n	8005116 <USB_DeactivateEndpoint+0xf6>
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f4:	823b      	strh	r3, [r7, #16]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	441a      	add	r2, r3
 8005100:	8a3b      	ldrh	r3, [r7, #16]
 8005102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800510a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800510e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005112:	b29b      	uxth	r3, r3
 8005114:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512c:	81fb      	strh	r3, [r7, #14]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	89fb      	ldrh	r3, [r7, #14]
 800513a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800513e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514a:	b29b      	uxth	r3, r3
 800514c:	8013      	strh	r3, [r2, #0]
 800514e:	e14d      	b.n	80053ec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 80a5 	bne.w	80052a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	843b      	strh	r3, [r7, #32]
 8005168:	8c3b      	ldrh	r3, [r7, #32]
 800516a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01b      	beq.n	80051aa <USB_DeactivateEndpoint+0x18a>
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005188:	83fb      	strh	r3, [r7, #30]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	441a      	add	r2, r3
 8005194:	8bfb      	ldrh	r3, [r7, #30]
 8005196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800519a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800519e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	83bb      	strh	r3, [r7, #28]
 80051b8:	8bbb      	ldrh	r3, [r7, #28]
 80051ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01b      	beq.n	80051fa <USB_DeactivateEndpoint+0x1da>
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d8:	837b      	strh	r3, [r7, #26]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	8b7b      	ldrh	r3, [r7, #26]
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005210:	833b      	strh	r3, [r7, #24]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	8b3b      	ldrh	r3, [r7, #24]
 800521e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800522a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005248:	82fb      	strh	r3, [r7, #22]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	441a      	add	r2, r3
 8005254:	8afb      	ldrh	r3, [r7, #22]
 8005256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800525a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800525e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005266:	b29b      	uxth	r3, r3
 8005268:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800527c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005280:	82bb      	strh	r3, [r7, #20]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	441a      	add	r2, r3
 800528c:	8abb      	ldrh	r3, [r7, #20]
 800528e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800529a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8013      	strh	r3, [r2, #0]
 80052a2:	e0a3      	b.n	80053ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80052b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80052b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01b      	beq.n	80052f4 <USB_DeactivateEndpoint+0x2d4>
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	441a      	add	r2, r3
 80052de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80052e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005302:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <USB_DeactivateEndpoint+0x324>
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800531e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005322:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800533c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005340:	b29b      	uxth	r3, r3
 8005342:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	441a      	add	r2, r3
 8005366:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800536c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005370:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005378:	b29b      	uxth	r3, r3
 800537a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800538e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005392:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	441a      	add	r2, r3
 80053d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80053d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3734      	adds	r7, #52	@ 0x34
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b0c2      	sub	sp, #264	@ 0x108
 80053fe:	af00      	add	r7, sp, #0
 8005400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005408:	6018      	str	r0, [r3, #0]
 800540a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005412:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	2b01      	cmp	r3, #1
 8005422:	f040 86b7 	bne.w	8006194 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	429a      	cmp	r2, r3
 8005440:	d908      	bls.n	8005454 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005452:	e007      	b.n	8005464 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	7b1b      	ldrb	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d13a      	bne.n	80054ea <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6959      	ldr	r1, [r3, #20]
 8005480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	88da      	ldrh	r2, [r3, #6]
 800548c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005490:	b29b      	uxth	r3, r3
 8005492:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005496:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	f001 fc8d 	bl	8006dba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4413      	add	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	00da      	lsls	r2, r3, #3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	4413      	add	r3, r2
 80054d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	f000 be1f 	b.w	8006128 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80054ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	78db      	ldrb	r3, [r3, #3]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	f040 8462 	bne.w	8005dc0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80054fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	429a      	cmp	r2, r3
 8005516:	f240 83df 	bls.w	8005cd8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800551a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005540:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005548:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800556a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800556e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005572:	b29b      	uxth	r3, r3
 8005574:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6a1a      	ldr	r2, [r3, #32]
 8005582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 81c7 	beq.w	800594a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80055c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d177      	bne.n	80056c8 <USB_EPStartXfer+0x2ce>
 80055d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f8:	4413      	add	r3, r2
 80055fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	00da      	lsls	r2, r3, #3
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	4413      	add	r3, r2
 800560e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005612:	627b      	str	r3, [r7, #36]	@ 0x24
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561e:	b29a      	uxth	r2, r3
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <USB_EPStartXfer+0x248>
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563a:	b29a      	uxth	r2, r3
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	e067      	b.n	8005712 <USB_EPStartXfer+0x318>
 8005642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005646:	2b3e      	cmp	r3, #62	@ 0x3e
 8005648:	d81c      	bhi.n	8005684 <USB_EPStartXfer+0x28a>
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564e:	085b      	lsrs	r3, r3, #1
 8005650:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <USB_EPStartXfer+0x270>
 8005660:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005664:	3301      	adds	r3, #1
 8005666:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29a      	uxth	r2, r3
 8005670:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005674:	b29b      	uxth	r3, r3
 8005676:	029b      	lsls	r3, r3, #10
 8005678:	b29b      	uxth	r3, r3
 800567a:	4313      	orrs	r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e046      	b.n	8005712 <USB_EPStartXfer+0x318>
 8005684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <USB_EPStartXfer+0x2aa>
 800569a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800569e:	3b01      	subs	r3, #1
 80056a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	029b      	lsls	r3, r3, #10
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4313      	orrs	r3, r2
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e024      	b.n	8005712 <USB_EPStartXfer+0x318>
 80056c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d11c      	bne.n	8005712 <USB_EPStartXfer+0x318>
 80056d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ec:	4413      	add	r3, r2
 80056ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80056f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	00da      	lsls	r2, r3, #3
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	4413      	add	r3, r2
 8005702:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570c:	b29a      	uxth	r2, r3
 800570e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005710:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	895b      	ldrh	r3, [r3, #10]
 800571e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6959      	ldr	r1, [r3, #20]
 800572e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005732:	b29b      	uxth	r3, r3
 8005734:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005738:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800573c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005740:	6800      	ldr	r0, [r0, #0]
 8005742:	f001 fb3a 	bl	8006dba <USB_WritePMA>
            ep->xfer_buff += len;
 8005746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005756:	441a      	add	r2, r3
 8005758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a1a      	ldr	r2, [r3, #32]
 8005770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	429a      	cmp	r2, r3
 800577e:	d90f      	bls.n	80057a0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005790:	1ad2      	subs	r2, r2, r3
 8005792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	621a      	str	r2, [r3, #32]
 800579e:	e00e      	b.n	80057be <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80057a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80057b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2200      	movs	r2, #0
 80057bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d177      	bne.n	80058be <USB_EPStartXfer+0x4c4>
 80057ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	4413      	add	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	00da      	lsls	r2, r3, #3
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	4413      	add	r3, r2
 8005804:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005814:	b29a      	uxth	r2, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	801a      	strh	r2, [r3, #0]
 800581a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <USB_EPStartXfer+0x43e>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005830:	b29a      	uxth	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	e06d      	b.n	8005914 <USB_EPStartXfer+0x51a>
 8005838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583c:	2b3e      	cmp	r3, #62	@ 0x3e
 800583e:	d81c      	bhi.n	800587a <USB_EPStartXfer+0x480>
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <USB_EPStartXfer+0x466>
 8005856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800585a:	3301      	adds	r3, #1
 800585c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29a      	uxth	r2, r3
 8005866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800586a:	b29b      	uxth	r3, r3
 800586c:	029b      	lsls	r3, r3, #10
 800586e:	b29b      	uxth	r3, r3
 8005870:	4313      	orrs	r3, r2
 8005872:	b29a      	uxth	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	801a      	strh	r2, [r3, #0]
 8005878:	e04c      	b.n	8005914 <USB_EPStartXfer+0x51a>
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <USB_EPStartXfer+0x4a0>
 8005890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005894:	3b01      	subs	r3, #1
 8005896:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	029b      	lsls	r3, r3, #10
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	4313      	orrs	r3, r2
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	801a      	strh	r2, [r3, #0]
 80058bc:	e02a      	b.n	8005914 <USB_EPStartXfer+0x51a>
 80058be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d122      	bne.n	8005914 <USB_EPStartXfer+0x51a>
 80058ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	623b      	str	r3, [r7, #32]
 80058da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	4413      	add	r3, r2
 80058f0:	623b      	str	r3, [r7, #32]
 80058f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	00da      	lsls	r2, r3, #3
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	4413      	add	r3, r2
 8005904:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590e:	b29a      	uxth	r2, r3
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	891b      	ldrh	r3, [r3, #8]
 8005920:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6959      	ldr	r1, [r3, #20]
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	b29b      	uxth	r3, r3
 8005936:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800593a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800593e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005942:	6800      	ldr	r0, [r0, #0]
 8005944:	f001 fa39 	bl	8006dba <USB_WritePMA>
 8005948:	e3ee      	b.n	8006128 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800594a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d177      	bne.n	8005a4a <USB_EPStartXfer+0x650>
 800595a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005974:	b29b      	uxth	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800597a:	4413      	add	r3, r2
 800597c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	00da      	lsls	r2, r3, #3
 800598c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800598e:	4413      	add	r3, r2
 8005990:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005994:	647b      	str	r3, [r7, #68]	@ 0x44
 8005996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <USB_EPStartXfer+0x5ca>
 80059ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059bc:	b29a      	uxth	r2, r3
 80059be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059c0:	801a      	strh	r2, [r3, #0]
 80059c2:	e06d      	b.n	8005aa0 <USB_EPStartXfer+0x6a6>
 80059c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80059ca:	d81c      	bhi.n	8005a06 <USB_EPStartXfer+0x60c>
 80059cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d0:	085b      	lsrs	r3, r3, #1
 80059d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d004      	beq.n	80059ec <USB_EPStartXfer+0x5f2>
 80059e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059e6:	3301      	adds	r3, #1
 80059e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	029b      	lsls	r3, r3, #10
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4313      	orrs	r3, r2
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	e04c      	b.n	8005aa0 <USB_EPStartXfer+0x6a6>
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d104      	bne.n	8005a26 <USB_EPStartXfer+0x62c>
 8005a1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a20:	3b01      	subs	r3, #1
 8005a22:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	029b      	lsls	r3, r3, #10
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	4313      	orrs	r3, r2
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	e02a      	b.n	8005aa0 <USB_EPStartXfer+0x6a6>
 8005a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	785b      	ldrb	r3, [r3, #1]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d122      	bne.n	8005aa0 <USB_EPStartXfer+0x6a6>
 8005a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a7a:	4413      	add	r3, r2
 8005a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	00da      	lsls	r2, r3, #3
 8005a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a8e:	4413      	add	r3, r2
 8005a90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	891b      	ldrh	r3, [r3, #8]
 8005aac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6959      	ldr	r1, [r3, #20]
 8005abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005ac6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005aca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ace:	6800      	ldr	r0, [r0, #0]
 8005ad0:	f001 f973 	bl	8006dba <USB_WritePMA>
            ep->xfer_buff += len;
 8005ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695a      	ldr	r2, [r3, #20]
 8005ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae4:	441a      	add	r2, r3
 8005ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a1a      	ldr	r2, [r3, #32]
 8005afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d90f      	bls.n	8005b2e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6a1a      	ldr	r2, [r3, #32]
 8005b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	621a      	str	r2, [r3, #32]
 8005b2c:	e00e      	b.n	8005b4c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d177      	bne.n	8005c58 <USB_EPStartXfer+0x85e>
 8005b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b88:	4413      	add	r3, r2
 8005b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	00da      	lsls	r2, r3, #3
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <USB_EPStartXfer+0x7d8>
 8005bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e067      	b.n	8005ca2 <USB_EPStartXfer+0x8a8>
 8005bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bd8:	d81c      	bhi.n	8005c14 <USB_EPStartXfer+0x81a>
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <USB_EPStartXfer+0x800>
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	029b      	lsls	r3, r3, #10
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	e046      	b.n	8005ca2 <USB_EPStartXfer+0x8a8>
 8005c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c18:	095b      	lsrs	r3, r3, #5
 8005c1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c22:	f003 031f 	and.w	r3, r3, #31
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d104      	bne.n	8005c34 <USB_EPStartXfer+0x83a>
 8005c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e024      	b.n	8005ca2 <USB_EPStartXfer+0x8a8>
 8005c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d11c      	bne.n	8005ca2 <USB_EPStartXfer+0x8a8>
 8005c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c7c:	4413      	add	r3, r2
 8005c7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	00da      	lsls	r2, r3, #3
 8005c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c90:	4413      	add	r3, r2
 8005c92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	895b      	ldrh	r3, [r3, #10]
 8005cae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6959      	ldr	r1, [r3, #20]
 8005cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005cc8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ccc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005cd0:	6800      	ldr	r0, [r0, #0]
 8005cd2:	f001 f872 	bl	8006dba <USB_WritePMA>
 8005cd6:	e227      	b.n	8006128 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	441a      	add	r2, r3
 8005d2c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d64:	4413      	add	r3, r2
 8005d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	00da      	lsls	r2, r3, #3
 8005d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d78:	4413      	add	r3, r2
 8005d7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	891b      	ldrh	r3, [r3, #8]
 8005d96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6959      	ldr	r1, [r3, #20]
 8005da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005db0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005db4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005db8:	6800      	ldr	r0, [r0, #0]
 8005dba:	f000 fffe 	bl	8006dba <USB_WritePMA>
 8005dbe:	e1b3      	b.n	8006128 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6a1a      	ldr	r2, [r3, #32]
 8005dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd0:	1ad2      	subs	r2, r2, r3
 8005dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80c6 	beq.w	8005f92 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	785b      	ldrb	r3, [r3, #1]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d177      	bne.n	8005f12 <USB_EPStartXfer+0xb18>
 8005e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e42:	4413      	add	r3, r2
 8005e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	00da      	lsls	r2, r3, #3
 8005e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e56:	4413      	add	r3, r2
 8005e58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <USB_EPStartXfer+0xa92>
 8005e76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	e067      	b.n	8005f5c <USB_EPStartXfer+0xb62>
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e90:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e92:	d81c      	bhi.n	8005ece <USB_EPStartXfer+0xad4>
 8005e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d004      	beq.n	8005eb4 <USB_EPStartXfer+0xaba>
 8005eaa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005eae:	3301      	adds	r3, #1
 8005eb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e046      	b.n	8005f5c <USB_EPStartXfer+0xb62>
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005edc:	f003 031f 	and.w	r3, r3, #31
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <USB_EPStartXfer+0xaf4>
 8005ee4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	029b      	lsls	r3, r3, #10
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	4313      	orrs	r3, r2
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	e024      	b.n	8005f5c <USB_EPStartXfer+0xb62>
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d11c      	bne.n	8005f5c <USB_EPStartXfer+0xb62>
 8005f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f36:	4413      	add	r3, r2
 8005f38:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	00da      	lsls	r2, r3, #3
 8005f48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	895b      	ldrh	r3, [r3, #10]
 8005f68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6959      	ldr	r1, [r3, #20]
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f86:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f8a:	6800      	ldr	r0, [r0, #0]
 8005f8c:	f000 ff15 	bl	8006dba <USB_WritePMA>
 8005f90:	e0ca      	b.n	8006128 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d177      	bne.n	8006092 <USB_EPStartXfer+0xc98>
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fc2:	4413      	add	r3, r2
 8005fc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	00da      	lsls	r2, r3, #3
 8005fd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005fdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <USB_EPStartXfer+0xc12>
 8005ff6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006004:	b29a      	uxth	r2, r3
 8006006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	e073      	b.n	80060f4 <USB_EPStartXfer+0xcfa>
 800600c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006010:	2b3e      	cmp	r3, #62	@ 0x3e
 8006012:	d81c      	bhi.n	800604e <USB_EPStartXfer+0xc54>
 8006014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006018:	085b      	lsrs	r3, r3, #1
 800601a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <USB_EPStartXfer+0xc3a>
 800602a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800602e:	3301      	adds	r3, #1
 8006030:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29a      	uxth	r2, r3
 800603a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800603e:	b29b      	uxth	r3, r3
 8006040:	029b      	lsls	r3, r3, #10
 8006042:	b29b      	uxth	r3, r3
 8006044:	4313      	orrs	r3, r2
 8006046:	b29a      	uxth	r2, r3
 8006048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	e052      	b.n	80060f4 <USB_EPStartXfer+0xcfa>
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	f003 031f 	and.w	r3, r3, #31
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <USB_EPStartXfer+0xc74>
 8006064:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006068:	3b01      	subs	r3, #1
 800606a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800606e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006078:	b29b      	uxth	r3, r3
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	b29b      	uxth	r3, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	b29b      	uxth	r3, r3
 8006082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608a:	b29a      	uxth	r2, r3
 800608c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	e030      	b.n	80060f4 <USB_EPStartXfer+0xcfa>
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d128      	bne.n	80060f4 <USB_EPStartXfer+0xcfa>
 80060a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060be:	b29b      	uxth	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060c6:	4413      	add	r3, r2
 80060c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	00da      	lsls	r2, r3, #3
 80060da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060de:	4413      	add	r3, r2
 80060e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	891b      	ldrh	r3, [r3, #8]
 8006100:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6959      	ldr	r1, [r3, #20]
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006114:	b29b      	uxth	r3, r3
 8006116:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800611a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800611e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006122:	6800      	ldr	r0, [r0, #0]
 8006124:	f000 fe49 	bl	8006dba <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800614a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800614e:	817b      	strh	r3, [r7, #10]
 8006150:	897b      	ldrh	r3, [r7, #10]
 8006152:	f083 0310 	eor.w	r3, r3, #16
 8006156:	817b      	strh	r3, [r7, #10]
 8006158:	897b      	ldrh	r3, [r7, #10]
 800615a:	f083 0320 	eor.w	r3, r3, #32
 800615e:	817b      	strh	r3, [r7, #10]
 8006160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	441a      	add	r2, r3
 800617a:	897b      	ldrh	r3, [r7, #10]
 800617c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]
 8006190:	f000 bcdf 	b.w	8006b52 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	7b1b      	ldrb	r3, [r3, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f040 80bc 	bne.w	800631e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80061a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d917      	bls.n	80061f2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80061c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80061d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	619a      	str	r2, [r3, #24]
 80061f0:	e00e      	b.n	8006210 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80061f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2200      	movs	r2, #0
 800620e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800621e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800622c:	b29b      	uxth	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006234:	4413      	add	r3, r2
 8006236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800623a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	00da      	lsls	r2, r3, #3
 8006248:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800624c:	4413      	add	r3, r2
 800624e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006262:	b29a      	uxth	r2, r3
 8006264:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006268:	801a      	strh	r2, [r3, #0]
 800626a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10d      	bne.n	800628e <USB_EPStartXfer+0xe94>
 8006272:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29b      	uxth	r3, r3
 800627a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006282:	b29a      	uxth	r2, r3
 8006284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	f000 bc28 	b.w	8006ade <USB_EPStartXfer+0x16e4>
 800628e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006292:	2b3e      	cmp	r3, #62	@ 0x3e
 8006294:	d81f      	bhi.n	80062d6 <USB_EPStartXfer+0xedc>
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d004      	beq.n	80062b6 <USB_EPStartXfer+0xebc>
 80062ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80062b0:	3301      	adds	r3, #1
 80062b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29a      	uxth	r2, r3
 80062be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	029b      	lsls	r3, r3, #10
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	f000 bc04 	b.w	8006ade <USB_EPStartXfer+0x16e4>
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <USB_EPStartXfer+0xefc>
 80062ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80062f0:	3b01      	subs	r3, #1
 80062f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006302:	b29b      	uxth	r3, r3
 8006304:	029b      	lsls	r3, r3, #10
 8006306:	b29b      	uxth	r3, r3
 8006308:	4313      	orrs	r3, r2
 800630a:	b29b      	uxth	r3, r3
 800630c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006314:	b29a      	uxth	r2, r3
 8006316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	e3df      	b.n	8006ade <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800631e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	78db      	ldrb	r3, [r3, #3]
 800632a:	2b02      	cmp	r3, #2
 800632c:	f040 8218 	bne.w	8006760 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f040 809d 	bne.w	800647c <USB_EPStartXfer+0x1082>
 8006342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800635e:	b29b      	uxth	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006366:	4413      	add	r3, r2
 8006368:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800636c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	00da      	lsls	r2, r3, #3
 800637a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800637e:	4413      	add	r3, r2
 8006380:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006388:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006394:	b29a      	uxth	r2, r3
 8006396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10c      	bne.n	80063c6 <USB_EPStartXfer+0xfcc>
 80063ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063bc:	b29a      	uxth	r2, r3
 80063be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	e08f      	b.n	80064e6 <USB_EPStartXfer+0x10ec>
 80063c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80063d4:	d826      	bhi.n	8006424 <USB_EPStartXfer+0x102a>
 80063d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <USB_EPStartXfer+0x100c>
 80063fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006400:	3301      	adds	r3, #1
 8006402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29a      	uxth	r2, r3
 800640e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006412:	b29b      	uxth	r3, r3
 8006414:	029b      	lsls	r3, r3, #10
 8006416:	b29b      	uxth	r3, r3
 8006418:	4313      	orrs	r3, r2
 800641a:	b29a      	uxth	r2, r3
 800641c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	e060      	b.n	80064e6 <USB_EPStartXfer+0x10ec>
 8006424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	2b00      	cmp	r3, #0
 8006448:	d104      	bne.n	8006454 <USB_EPStartXfer+0x105a>
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800644e:	3b01      	subs	r3, #1
 8006450:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29a      	uxth	r2, r3
 800645c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006460:	b29b      	uxth	r3, r3
 8006462:	029b      	lsls	r3, r3, #10
 8006464:	b29b      	uxth	r3, r3
 8006466:	4313      	orrs	r3, r2
 8006468:	b29b      	uxth	r3, r3
 800646a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006472:	b29a      	uxth	r2, r3
 8006474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	e034      	b.n	80064e6 <USB_EPStartXfer+0x10ec>
 800647c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d12c      	bne.n	80064e6 <USB_EPStartXfer+0x10ec>
 800648c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006490:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800649a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80064b0:	4413      	add	r3, r2
 80064b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	00da      	lsls	r2, r3, #3
 80064c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80064c8:	4413      	add	r3, r2
 80064ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80064ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 809d 	bne.w	8006640 <USB_EPStartXfer+0x1246>
 8006506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800652a:	4413      	add	r3, r2
 800652c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	00da      	lsls	r2, r3, #3
 800653e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006542:	4413      	add	r3, r2
 8006544:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800654c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006558:	b29a      	uxth	r2, r3
 800655a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10c      	bne.n	800658a <USB_EPStartXfer+0x1190>
 8006570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006580:	b29a      	uxth	r2, r3
 8006582:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006586:	801a      	strh	r2, [r3, #0]
 8006588:	e088      	b.n	800669c <USB_EPStartXfer+0x12a2>
 800658a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b3e      	cmp	r3, #62	@ 0x3e
 8006598:	d826      	bhi.n	80065e8 <USB_EPStartXfer+0x11ee>
 800659a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <USB_EPStartXfer+0x11d0>
 80065c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c4:	3301      	adds	r3, #1
 80065c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	029b      	lsls	r3, r3, #10
 80065da:	b29b      	uxth	r3, r3
 80065dc:	4313      	orrs	r3, r2
 80065de:	b29a      	uxth	r2, r3
 80065e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065e4:	801a      	strh	r2, [r3, #0]
 80065e6:	e059      	b.n	800669c <USB_EPStartXfer+0x12a2>
 80065e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <USB_EPStartXfer+0x121e>
 800660e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006612:	3b01      	subs	r3, #1
 8006614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29a      	uxth	r2, r3
 8006620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006624:	b29b      	uxth	r3, r3
 8006626:	029b      	lsls	r3, r3, #10
 8006628:	b29b      	uxth	r3, r3
 800662a:	4313      	orrs	r3, r2
 800662c:	b29b      	uxth	r3, r3
 800662e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006636:	b29a      	uxth	r2, r3
 8006638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	e02d      	b.n	800669c <USB_EPStartXfer+0x12a2>
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d125      	bne.n	800669c <USB_EPStartXfer+0x12a2>
 8006650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800665e:	b29b      	uxth	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006666:	4413      	add	r3, r2
 8006668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800666c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	00da      	lsls	r2, r3, #3
 800667a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800667e:	4413      	add	r3, r2
 8006680:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006684:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	b29a      	uxth	r2, r3
 8006696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800669a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800669c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8218 	beq.w	8006ade <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80066ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <USB_EPStartXfer+0x12ec>
 80066da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 81f5 	bne.w	8006ade <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80066f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 81ee 	bne.w	8006ade <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006728:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800672c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006730:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	441a      	add	r2, r3
 8006746:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800674a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800674e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006756:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800675a:	b29b      	uxth	r3, r3
 800675c:	8013      	strh	r3, [r2, #0]
 800675e:	e1be      	b.n	8006ade <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	78db      	ldrb	r3, [r3, #3]
 800676c:	2b01      	cmp	r3, #1
 800676e:	f040 81b4 	bne.w	8006ada <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	429a      	cmp	r2, r3
 800678c:	d917      	bls.n	80067be <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800678e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800679e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	619a      	str	r2, [r3, #24]
 80067bc:	e00e      	b.n	80067dc <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80067be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80067ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2200      	movs	r2, #0
 80067da:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80067dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f040 8085 	bne.w	80068f8 <USB_EPStartXfer+0x14fe>
 80067ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800680a:	b29b      	uxth	r3, r3
 800680c:	461a      	mov	r2, r3
 800680e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006812:	4413      	add	r3, r2
 8006814:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	00da      	lsls	r2, r3, #3
 8006826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800682a:	4413      	add	r3, r2
 800682c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006830:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006840:	b29a      	uxth	r2, r3
 8006842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10c      	bne.n	800686a <USB_EPStartXfer+0x1470>
 8006850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e077      	b.n	800695a <USB_EPStartXfer+0x1560>
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006870:	d81e      	bhi.n	80068b0 <USB_EPStartXfer+0x14b6>
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800687c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <USB_EPStartXfer+0x1498>
 8006888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800688c:	3301      	adds	r3, #1
 800688e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006892:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	b29a      	uxth	r2, r3
 800689a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800689e:	b29b      	uxth	r3, r3
 80068a0:	029b      	lsls	r3, r3, #10
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4313      	orrs	r3, r2
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	e054      	b.n	800695a <USB_EPStartXfer+0x1560>
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <USB_EPStartXfer+0x14d6>
 80068c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ca:	3b01      	subs	r3, #1
 80068cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80068d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068dc:	b29b      	uxth	r3, r3
 80068de:	029b      	lsls	r3, r3, #10
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80068f4:	801a      	strh	r2, [r3, #0]
 80068f6:	e030      	b.n	800695a <USB_EPStartXfer+0x1560>
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d128      	bne.n	800695a <USB_EPStartXfer+0x1560>
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006924:	b29b      	uxth	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800692c:	4413      	add	r3, r2
 800692e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	00da      	lsls	r2, r3, #3
 8006940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006944:	4413      	add	r3, r2
 8006946:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800694a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800694e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006952:	b29a      	uxth	r2, r3
 8006954:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006958:	801a      	strh	r2, [r3, #0]
 800695a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 8085 	bne.w	8006a84 <USB_EPStartXfer+0x168a>
 800697a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800699e:	4413      	add	r3, r2
 80069a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80069a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	00da      	lsls	r2, r3, #3
 80069b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80069b6:	4413      	add	r3, r2
 80069b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80069bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10c      	bne.n	80069f6 <USB_EPStartXfer+0x15fc>
 80069dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	e073      	b.n	8006ade <USB_EPStartXfer+0x16e4>
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80069fc:	d81e      	bhi.n	8006a3c <USB_EPStartXfer+0x1642>
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d004      	beq.n	8006a1e <USB_EPStartXfer+0x1624>
 8006a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a18:	3301      	adds	r3, #1
 8006a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	029b      	lsls	r3, r3, #10
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4313      	orrs	r3, r2
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	e050      	b.n	8006ade <USB_EPStartXfer+0x16e4>
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	095b      	lsrs	r3, r3, #5
 8006a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d104      	bne.n	8006a5c <USB_EPStartXfer+0x1662>
 8006a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a56:	3b01      	subs	r3, #1
 8006a58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	029b      	lsls	r3, r3, #10
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	e02c      	b.n	8006ade <USB_EPStartXfer+0x16e4>
 8006a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d124      	bne.n	8006ade <USB_EPStartXfer+0x16e4>
 8006a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006aaa:	4413      	add	r3, r2
 8006aac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	00da      	lsls	r2, r3, #3
 8006abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e001      	b.n	8006ade <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e03a      	b.n	8006b54 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006b08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006b0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006b14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006b18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	441a      	add	r2, r3
 8006b3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d020      	beq.n	8006bb2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b86:	81bb      	strh	r3, [r7, #12]
 8006b88:	89bb      	ldrh	r3, [r7, #12]
 8006b8a:	f083 0310 	eor.w	r3, r3, #16
 8006b8e:	81bb      	strh	r3, [r7, #12]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	441a      	add	r2, r3
 8006b9a:	89bb      	ldrh	r3, [r7, #12]
 8006b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	8013      	strh	r3, [r2, #0]
 8006bb0:	e01f      	b.n	8006bf2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc8:	81fb      	strh	r3, [r7, #14]
 8006bca:	89fb      	ldrh	r3, [r7, #14]
 8006bcc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bd0:	81fb      	strh	r3, [r7, #14]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	7b1b      	ldrb	r3, [r3, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f040 809d 	bne.w	8006d4e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d04c      	beq.n	8006cb6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	823b      	strh	r3, [r7, #16]
 8006c2a:	8a3b      	ldrh	r3, [r7, #16]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01b      	beq.n	8006c6c <USB_EPClearStall+0x6c>
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4a:	81fb      	strh	r3, [r7, #14]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	89fb      	ldrh	r3, [r7, #14]
 8006c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	78db      	ldrb	r3, [r3, #3]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d06c      	beq.n	8006d4e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c8a:	81bb      	strh	r3, [r7, #12]
 8006c8c:	89bb      	ldrh	r3, [r7, #12]
 8006c8e:	f083 0320 	eor.w	r3, r3, #32
 8006c92:	81bb      	strh	r3, [r7, #12]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	441a      	add	r2, r3
 8006c9e:	89bb      	ldrh	r3, [r7, #12]
 8006ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	8013      	strh	r3, [r2, #0]
 8006cb4:	e04b      	b.n	8006d4e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	82fb      	strh	r3, [r7, #22]
 8006cc4:	8afb      	ldrh	r3, [r7, #22]
 8006cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01b      	beq.n	8006d06 <USB_EPClearStall+0x106>
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce4:	82bb      	strh	r3, [r7, #20]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	441a      	add	r2, r3
 8006cf0:	8abb      	ldrh	r3, [r7, #20]
 8006cf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d1c:	827b      	strh	r3, [r7, #18]
 8006d1e:	8a7b      	ldrh	r3, [r7, #18]
 8006d20:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d24:	827b      	strh	r3, [r7, #18]
 8006d26:	8a7b      	ldrh	r3, [r7, #18]
 8006d28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d2c:	827b      	strh	r3, [r7, #18]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	8a7b      	ldrh	r3, [r7, #18]
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d103      	bne.n	8006d76 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2280      	movs	r2, #128	@ 0x80
 8006d72:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006dac:	68fb      	ldr	r3, [r7, #12]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b08b      	sub	sp, #44	@ 0x2c
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	460b      	mov	r3, r1
 8006dca:	80fb      	strh	r3, [r7, #6]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006dd0:	88bb      	ldrh	r3, [r7, #4]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006de0:	88fa      	ldrh	r2, [r7, #6]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dea:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8006df0:	e01b      	b.n	8006e2a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	b21a      	sxth	r2, r3
 8006e02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	b21b      	sxth	r3, r3
 8006e0a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	8a7a      	ldrh	r2, [r7, #18]
 8006e10:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	3302      	adds	r3, #2
 8006e16:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	3301      	adds	r3, #1
 8006e22:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e26:	3b01      	subs	r3, #1
 8006e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e0      	bne.n	8006df2 <USB_WritePMA+0x38>
  }
}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	372c      	adds	r7, #44	@ 0x2c
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b08b      	sub	sp, #44	@ 0x2c
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	4611      	mov	r1, r2
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	80fb      	strh	r3, [r7, #6]
 8006e50:	4613      	mov	r3, r2
 8006e52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006e54:	88bb      	ldrh	r3, [r7, #4]
 8006e56:	085b      	lsrs	r3, r3, #1
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e64:	88fa      	ldrh	r2, [r7, #6]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e6e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e74:	e018      	b.n	8006ea8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	3302      	adds	r3, #2
 8006e82:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	0a1b      	lsrs	r3, r3, #8
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e3      	bne.n	8006e76 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006eae:	88bb      	ldrh	r3, [r7, #4]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	701a      	strb	r2, [r3, #0]
  }
}
 8006eca:	bf00      	nop
 8006ecc:	372c      	adds	r7, #44	@ 0x2c
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
	...

08006ed8 <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]

  USBD_LL_OpenEP(pdev,
 8006ee8:	2340      	movs	r3, #64	@ 0x40
 8006eea:	2202      	movs	r2, #2
 8006eec:	2181      	movs	r1, #129	@ 0x81
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 fc55 	bl	800879e <USBD_LL_OpenEP>
                 MIDI_EPIN_ADDR,
                 USBD_EP_TYPE_BULK,
                 MIDI_EPIN_SIZE);

  USBD_LL_OpenEP(pdev,
 8006ef4:	2340      	movs	r3, #64	@ 0x40
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	2101      	movs	r1, #1
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 fc4f 	bl	800879e <USBD_LL_OpenEP>
               MIDI_EPOUT_ADDR,
               USBD_EP_TYPE_BULK,
               MIDI_EPOUT_SIZE);

  USBD_LL_PrepareReceive(pdev,
 8006f00:	2340      	movs	r3, #64	@ 0x40
 8006f02:	4a0f      	ldr	r2, [pc, #60]	@ (8006f40 <USBD_MIDI_Init+0x68>)
 8006f04:	2101      	movs	r1, #1
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 fd3a 	bl	8008980 <USBD_LL_PrepareReceive>
               MIDI_EPOUT_ADDR,
               usb_rx_buffer,
               MIDI_EPOUT_SIZE);

  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 8006f0c:	2010      	movs	r0, #16
 8006f0e:	f001 fd5b 	bl	80089c8 <USBD_static_malloc>
 8006f12:	4602      	mov	r2, r0
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if(pdev->pClassData == NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <USBD_MIDI_Init+0x52>
  {
    ret = 1;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	e004      	b.n	8006f34 <USBD_MIDI_Init+0x5c>
  }
  else
  {
    ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f30:	2200      	movs	r2, #0
 8006f32:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000170 	.word	0x20000170

08006f44 <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]
  /* Close MIDI EPs */
  USBD_LL_CloseEP(pdev, MIDI_EPIN_SIZE);
 8006f50:	2140      	movs	r1, #64	@ 0x40
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fc49 	bl	80087ea <USBD_LL_CloseEP>

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <USBD_MIDI_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f001 fd3b 	bl	80089e4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	613b      	str	r3, [r7, #16]
  USBD_MIDI_HandleTypeDef     *hmidi = pdev->pClassData;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f98:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d044      	beq.n	8007030 <USBD_MIDI_Setup+0xb0>
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d171      	bne.n	800708e <USBD_MIDI_Setup+0x10e>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	3b02      	subs	r3, #2
 8006fb0:	2b09      	cmp	r3, #9
 8006fb2:	d836      	bhi.n	8007022 <USBD_MIDI_Setup+0xa2>
 8006fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fbc <USBD_MIDI_Setup+0x3c>)
 8006fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fba:	bf00      	nop
 8006fbc:	08007013 	.word	0x08007013
 8006fc0:	08006ff3 	.word	0x08006ff3
 8006fc4:	08007023 	.word	0x08007023
 8006fc8:	08007023 	.word	0x08007023
 8006fcc:	08007023 	.word	0x08007023
 8006fd0:	08007023 	.word	0x08007023
 8006fd4:	08007023 	.word	0x08007023
 8006fd8:	08007023 	.word	0x08007023
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	08006fe5 	.word	0x08006fe5
    {
      case MIDI_REQ_SET_PROTOCOL:
        hmidi->Protocol = (uint8_t)(req->wValue);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	885b      	ldrh	r3, [r3, #2]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	601a      	str	r2, [r3, #0]
        break;
 8006ff0:	e01d      	b.n	800702e <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_PROTOCOL:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->Protocol,
 8006ff2:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 f907 	bl	800820c <USBD_CtlSendData>
                          1);
        break;
 8006ffe:	e016      	b.n	800702e <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_SET_IDLE:
        hmidi->IdleState = (uint8_t)(req->wValue >> 8);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	885b      	ldrh	r3, [r3, #2]
 8007004:	0a1b      	lsrs	r3, r3, #8
 8007006:	b29b      	uxth	r3, r3
 8007008:	b2db      	uxtb	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	605a      	str	r2, [r3, #4]
        break;
 8007010:	e00d      	b.n	800702e <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_IDLE:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->IdleState,
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3304      	adds	r3, #4
        USBD_CtlSendData (pdev,
 8007016:	2201      	movs	r2, #1
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 f8f6 	bl	800820c <USBD_CtlSendData>
                          1);
        break;
 8007020:	e005      	b.n	800702e <USBD_MIDI_Setup+0xae>

      default:
        USBD_CtlError (pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 f886 	bl	8008136 <USBD_CtlError>
        return USBD_FAIL;
 800702a:	2302      	movs	r3, #2
 800702c:	e030      	b.n	8007090 <USBD_MIDI_Setup+0x110>
    }
    break;
 800702e:	e02e      	b.n	800708e <USBD_MIDI_Setup+0x10e>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	785b      	ldrb	r3, [r3, #1]
 8007034:	2b0b      	cmp	r3, #11
 8007036:	d023      	beq.n	8007080 <USBD_MIDI_Setup+0x100>
 8007038:	2b0b      	cmp	r3, #11
 800703a:	dc28      	bgt.n	800708e <USBD_MIDI_Setup+0x10e>
 800703c:	2b06      	cmp	r3, #6
 800703e:	d002      	beq.n	8007046 <USBD_MIDI_Setup+0xc6>
 8007040:	2b0a      	cmp	r3, #10
 8007042:	d015      	beq.n	8007070 <USBD_MIDI_Setup+0xf0>
 8007044:	e023      	b.n	800708e <USBD_MIDI_Setup+0x10e>
    {
      case USB_REQ_GET_DESCRIPTOR:
        if( req->wValue >> 8 == MIDI_DESCRIPTOR_TYPE)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	885b      	ldrh	r3, [r3, #2]
 800704a:	0a1b      	lsrs	r3, r3, #8
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b21      	cmp	r3, #33	@ 0x21
 8007050:	d107      	bne.n	8007062 <USBD_MIDI_Setup+0xe2>
        {
          pbuf = USBD_MIDI_CfgDesc + USB_MIDI_CLASS_DESC_SHIFT;
 8007052:	4b11      	ldr	r3, [pc, #68]	@ (8007098 <USBD_MIDI_Setup+0x118>)
 8007054:	613b      	str	r3, [r7, #16]
          len = MIN(USB_MIDI_DESC_SIZE , req->wLength);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	88db      	ldrh	r3, [r3, #6]
 800705a:	2b07      	cmp	r3, #7
 800705c:	bf28      	it	cs
 800705e:	2307      	movcs	r3, #7
 8007060:	82fb      	strh	r3, [r7, #22]
        }

        USBD_CtlSendData (pdev, pbuf, len);
 8007062:	8afb      	ldrh	r3, [r7, #22]
 8007064:	461a      	mov	r2, r3
 8007066:	6939      	ldr	r1, [r7, #16]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 f8cf 	bl	800820c <USBD_CtlSendData>
        break;
 800706e:	e00e      	b.n	800708e <USBD_MIDI_Setup+0x10e>

      case USB_REQ_GET_INTERFACE :
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->AltSetting,
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3308      	adds	r3, #8
        USBD_CtlSendData (pdev,
 8007074:	2201      	movs	r2, #1
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f8c7 	bl	800820c <USBD_CtlSendData>
                          1);
        break;
 800707e:	e006      	b.n	800708e <USBD_MIDI_Setup+0x10e>

      case USB_REQ_SET_INTERFACE :
        hmidi->AltSetting = (uint8_t)(req->wValue);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	885b      	ldrh	r3, [r3, #2]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	609a      	str	r2, [r3, #8]
        break;
 800708c:	bf00      	nop
    }
  }
  return USBD_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000062 	.word	0x20000062

0800709c <USBD_MIDI_GetState>:
  *         Get MIDI State
  * @param  pdev: device instance
  * @retval usb state  (MIDI_IDLE, MIDI_BUSY)
  */
uint8_t USBD_MIDI_GetState(USBD_HandleTypeDef  *pdev)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  return ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070aa:	7b1b      	ldrb	r3, [r3, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBD_MIDI_SendPackets>:
  * @retval status
  */
uint8_t USBD_MIDI_SendPackets(USBD_HandleTypeDef  *pdev,
                                 uint8_t *data,
                                 uint16_t len)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef *hmidi = pdev->pClassData;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070cc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d10c      	bne.n	80070f2 <USBD_MIDI_SendPackets+0x3a>
  {
    if(hmidi->state == MIDI_IDLE)
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	7b1b      	ldrb	r3, [r3, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d108      	bne.n	80070f2 <USBD_MIDI_SendPackets+0x3a>
    {
      hmidi->state = MIDI_BUSY;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2201      	movs	r2, #1
 80070e4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev, MIDI_EPIN_ADDR, data, len);
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	2181      	movs	r1, #129	@ 0x81
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f001 fc24 	bl	800893a <USBD_LL_Transmit>
    }
  }
  return USBD_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2253      	movs	r2, #83	@ 0x53
 8007108:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800710a:	4b03      	ldr	r3, [pc, #12]	@ (8007118 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	20000050 	.word	0x20000050

0800711c <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800712e:	2200      	movs	r2, #0
 8007130:	731a      	strb	r2, [r3, #12]

  USBD_MIDI_OnPacketsSent();
 8007132:	f000 f805 	bl	8007140 <USBD_MIDI_OnPacketsSent>

  return USBD_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_MIDI_OnPacketsSent>:
/**
  * @brief  USBD_MIDI_OnPacketsSent
  *         on usb midi packets sent to the host callback
  */
__weak extern void USBD_MIDI_OnPacketsSent(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
}
 8007144:	bf00      	nop
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <USBD_MIDI_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  uint8_t len;

  if (epnum != (MIDI_EPOUT_ADDR & 0x0F)) return USBD_FAIL;
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d001      	beq.n	8007166 <USBD_MIDI_DataOut+0x16>
 8007162:	2302      	movs	r3, #2
 8007164:	e015      	b.n	8007192 <USBD_MIDI_DataOut+0x42>

  len = (uint8_t)HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, epnum);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	4611      	mov	r1, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f7fa f966 	bl	8001442 <HAL_PCD_EP_GetRxCount>
 8007176:	4603      	mov	r3, r0
 8007178:	73fb      	strb	r3, [r7, #15]

  USBD_MIDI_OnPacketsReceived(usb_rx_buffer, len);
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	4619      	mov	r1, r3
 800717e:	4807      	ldr	r0, [pc, #28]	@ (800719c <USBD_MIDI_DataOut+0x4c>)
 8007180:	f000 f80e 	bl	80071a0 <USBD_MIDI_OnPacketsReceived>

  USBD_LL_PrepareReceive(pdev, MIDI_EPOUT_ADDR, usb_rx_buffer, MIDI_EPOUT_SIZE);
 8007184:	2340      	movs	r3, #64	@ 0x40
 8007186:	4a05      	ldr	r2, [pc, #20]	@ (800719c <USBD_MIDI_DataOut+0x4c>)
 8007188:	2101      	movs	r1, #1
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fbf8 	bl	8008980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000170 	.word	0x20000170

080071a0 <USBD_MIDI_OnPacketsReceived>:
  *         on usb midi packets received from the host callback
  * @param  data: pointer to the data packet
  * @param  len: size of the data
  */
__weak extern void USBD_MIDI_OnPacketsReceived(uint8_t *data, uint8_t len)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(data);
  UNUSED(len);
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	220a      	movs	r2, #10
 80071c4:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 80071c6:	4b03      	ldr	r3, [pc, #12]	@ (80071d4 <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	200000a4 	.word	0x200000a4

080071d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	4613      	mov	r3, r2
 80071e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071ec:	2302      	movs	r3, #2
 80071ee:	e01a      	b.n	8007226 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	79fa      	ldrb	r2, [r7, #7]
 800721c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f001 fa52 	bl	80086c8 <USBD_LL_Init>

  return USBD_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d006      	beq.n	8007250 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
 800724e:	e001      	b.n	8007254 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007250:	2302      	movs	r3, #2
 8007252:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fa7c 	bl	8008768 <USBD_LL_Start>

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800729c:	2302      	movs	r3, #2
 800729e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00c      	beq.n	80072c4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	4611      	mov	r1, r2
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	4798      	blx	r3
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	78fa      	ldrb	r2, [r7, #3]
 80072e4:	4611      	mov	r1, r2
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	4798      	blx	r3

  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fedb 	bl	80080c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007328:	f003 031f 	and.w	r3, r3, #31
 800732c:	2b02      	cmp	r3, #2
 800732e:	d016      	beq.n	800735e <USBD_LL_SetupStage+0x6a>
 8007330:	2b02      	cmp	r3, #2
 8007332:	d81c      	bhi.n	800736e <USBD_LL_SetupStage+0x7a>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <USBD_LL_SetupStage+0x4a>
 8007338:	2b01      	cmp	r3, #1
 800733a:	d008      	beq.n	800734e <USBD_LL_SetupStage+0x5a>
 800733c:	e017      	b.n	800736e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f9ce 	bl	80076e8 <USBD_StdDevReq>
      break;
 800734c:	e01a      	b.n	8007384 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa30 	bl	80077bc <USBD_StdItfReq>
      break;
 800735c:	e012      	b.n	8007384 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa70 	bl	800784c <USBD_StdEPReq>
      break;
 800736c:	e00a      	b.n	8007384 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007374:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007378:	b2db      	uxtb	r3, r3
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 fa53 	bl	8008828 <USBD_LL_StallEP>
      break;
 8007382:	bf00      	nop
  }

  return USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	460b      	mov	r3, r1
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800739c:	7afb      	ldrb	r3, [r7, #11]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d14b      	bne.n	800743a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80073a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d134      	bne.n	800741e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d919      	bls.n	80073f4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	1ad2      	subs	r2, r2, r3
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d203      	bcs.n	80073e2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073de:	b29b      	uxth	r3, r3
 80073e0:	e002      	b.n	80073e8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 ff3b 	bl	8008268 <USBD_CtlContinueRx>
 80073f2:	e038      	b.n	8007466 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007406:	2b03      	cmp	r3, #3
 8007408:	d105      	bne.n	8007416 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 ff38 	bl	800828c <USBD_CtlSendStatus>
 800741c:	e023      	b.n	8007466 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007424:	2b05      	cmp	r3, #5
 8007426:	d11e      	bne.n	8007466 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007430:	2100      	movs	r1, #0
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f001 f9f8 	bl	8008828 <USBD_LL_StallEP>
 8007438:	e015      	b.n	8007466 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00d      	beq.n	8007462 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800744c:	2b03      	cmp	r3, #3
 800744e:	d108      	bne.n	8007462 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	7afa      	ldrb	r2, [r7, #11]
 800745a:	4611      	mov	r1, r2
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	4798      	blx	r3
 8007460:	e001      	b.n	8007466 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007462:	2302      	movs	r3, #2
 8007464:	e000      	b.n	8007468 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	460b      	mov	r3, r1
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d17f      	bne.n	8007584 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3314      	adds	r3, #20
 8007488:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007490:	2b02      	cmp	r3, #2
 8007492:	d15c      	bne.n	800754e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	429a      	cmp	r2, r3
 800749e:	d915      	bls.n	80074cc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	1ad2      	subs	r2, r2, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fec3 	bl	8008244 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074be:	2300      	movs	r3, #0
 80074c0:	2200      	movs	r2, #0
 80074c2:	2100      	movs	r1, #0
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f001 fa5b 	bl	8008980 <USBD_LL_PrepareReceive>
 80074ca:	e04e      	b.n	800756a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	6912      	ldr	r2, [r2, #16]
 80074d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80074d8:	fb01 f202 	mul.w	r2, r1, r2
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d11c      	bne.n	800751c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d316      	bcc.n	800751c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d20f      	bcs.n	800751c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074fc:	2200      	movs	r2, #0
 80074fe:	2100      	movs	r1, #0
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 fe9f 	bl	8008244 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800750e:	2300      	movs	r3, #0
 8007510:	2200      	movs	r2, #0
 8007512:	2100      	movs	r1, #0
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f001 fa33 	bl	8008980 <USBD_LL_PrepareReceive>
 800751a:	e026      	b.n	800756a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800752e:	2b03      	cmp	r3, #3
 8007530:	d105      	bne.n	800753e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800753e:	2180      	movs	r1, #128	@ 0x80
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f001 f971 	bl	8008828 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 feb3 	bl	80082b2 <USBD_CtlReceiveStatus>
 800754c:	e00d      	b.n	800756a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007554:	2b04      	cmp	r3, #4
 8007556:	d004      	beq.n	8007562 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800755e:	2b00      	cmp	r3, #0
 8007560:	d103      	bne.n	800756a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007562:	2180      	movs	r1, #128	@ 0x80
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f001 f95f 	bl	8008828 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007570:	2b01      	cmp	r3, #1
 8007572:	d11d      	bne.n	80075b0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff fe80 	bl	800727a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007582:	e015      	b.n	80075b0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00d      	beq.n	80075ac <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007596:	2b03      	cmp	r3, #3
 8007598:	d108      	bne.n	80075ac <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	7afa      	ldrb	r2, [r7, #11]
 80075a4:	4611      	mov	r1, r2
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	4798      	blx	r3
 80075aa:	e001      	b.n	80075b0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075ac:	2302      	movs	r3, #2
 80075ae:	e000      	b.n	80075b2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075c2:	2340      	movs	r3, #64	@ 0x40
 80075c4:	2200      	movs	r2, #0
 80075c6:	2100      	movs	r1, #0
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f8e8 	bl	800879e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2240      	movs	r2, #64	@ 0x40
 80075da:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075de:	2340      	movs	r3, #64	@ 0x40
 80075e0:	2200      	movs	r2, #0
 80075e2:	2180      	movs	r1, #128	@ 0x80
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 f8da 	bl	800879e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2240      	movs	r2, #64	@ 0x40
 80075f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d009      	beq.n	8007632 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	6852      	ldr	r2, [r2, #4]
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	4611      	mov	r1, r2
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
  }

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	78fa      	ldrb	r2, [r7, #3]
 800764c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2204      	movs	r2, #4
 8007674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007694:	2b04      	cmp	r3, #4
 8007696:	d105      	bne.n	80076a4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d10b      	bne.n	80076dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076fe:	2b40      	cmp	r3, #64	@ 0x40
 8007700:	d005      	beq.n	800770e <USBD_StdDevReq+0x26>
 8007702:	2b40      	cmp	r3, #64	@ 0x40
 8007704:	d84f      	bhi.n	80077a6 <USBD_StdDevReq+0xbe>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <USBD_StdDevReq+0x36>
 800770a:	2b20      	cmp	r3, #32
 800770c:	d14b      	bne.n	80077a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	4798      	blx	r3
      break;
 800771c:	e048      	b.n	80077b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	2b09      	cmp	r3, #9
 8007724:	d839      	bhi.n	800779a <USBD_StdDevReq+0xb2>
 8007726:	a201      	add	r2, pc, #4	@ (adr r2, 800772c <USBD_StdDevReq+0x44>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	0800777d 	.word	0x0800777d
 8007730:	08007791 	.word	0x08007791
 8007734:	0800779b 	.word	0x0800779b
 8007738:	08007787 	.word	0x08007787
 800773c:	0800779b 	.word	0x0800779b
 8007740:	0800775f 	.word	0x0800775f
 8007744:	08007755 	.word	0x08007755
 8007748:	0800779b 	.word	0x0800779b
 800774c:	08007773 	.word	0x08007773
 8007750:	08007769 	.word	0x08007769
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f9dc 	bl	8007b14 <USBD_GetDescriptor>
          break;
 800775c:	e022      	b.n	80077a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fb3f 	bl	8007de4 <USBD_SetAddress>
          break;
 8007766:	e01d      	b.n	80077a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fb7e 	bl	8007e6c <USBD_SetConfig>
          break;
 8007770:	e018      	b.n	80077a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fc07 	bl	8007f88 <USBD_GetConfig>
          break;
 800777a:	e013      	b.n	80077a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fc37 	bl	8007ff2 <USBD_GetStatus>
          break;
 8007784:	e00e      	b.n	80077a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fc65 	bl	8008058 <USBD_SetFeature>
          break;
 800778e:	e009      	b.n	80077a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fc74 	bl	8008080 <USBD_ClrFeature>
          break;
 8007798:	e004      	b.n	80077a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fcca 	bl	8008136 <USBD_CtlError>
          break;
 80077a2:	bf00      	nop
      }
      break;
 80077a4:	e004      	b.n	80077b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fcc4 	bl	8008136 <USBD_CtlError>
      break;
 80077ae:	bf00      	nop
  }

  return ret;
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop

080077bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077d2:	2b40      	cmp	r3, #64	@ 0x40
 80077d4:	d005      	beq.n	80077e2 <USBD_StdItfReq+0x26>
 80077d6:	2b40      	cmp	r3, #64	@ 0x40
 80077d8:	d82e      	bhi.n	8007838 <USBD_StdItfReq+0x7c>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <USBD_StdItfReq+0x26>
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d12a      	bne.n	8007838 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077e8:	3b01      	subs	r3, #1
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d81d      	bhi.n	800782a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	889b      	ldrh	r3, [r3, #4]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d813      	bhi.n	8007820 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	4798      	blx	r3
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	88db      	ldrh	r3, [r3, #6]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d110      	bne.n	8007834 <USBD_StdItfReq+0x78>
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10d      	bne.n	8007834 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fd37 	bl	800828c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800781e:	e009      	b.n	8007834 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fc87 	bl	8008136 <USBD_CtlError>
          break;
 8007828:	e004      	b.n	8007834 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fc82 	bl	8008136 <USBD_CtlError>
          break;
 8007832:	e000      	b.n	8007836 <USBD_StdItfReq+0x7a>
          break;
 8007834:	bf00      	nop
      }
      break;
 8007836:	e004      	b.n	8007842 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fc7b 	bl	8008136 <USBD_CtlError>
      break;
 8007840:	bf00      	nop
  }

  return USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	889b      	ldrh	r3, [r3, #4]
 800785e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007868:	2b40      	cmp	r3, #64	@ 0x40
 800786a:	d007      	beq.n	800787c <USBD_StdEPReq+0x30>
 800786c:	2b40      	cmp	r3, #64	@ 0x40
 800786e:	f200 8146 	bhi.w	8007afe <USBD_StdEPReq+0x2b2>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <USBD_StdEPReq+0x40>
 8007876:	2b20      	cmp	r3, #32
 8007878:	f040 8141 	bne.w	8007afe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	4798      	blx	r3
      break;
 800788a:	e13d      	b.n	8007b08 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007894:	2b20      	cmp	r3, #32
 8007896:	d10a      	bne.n	80078ae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	4798      	blx	r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	e12d      	b.n	8007b0a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	785b      	ldrb	r3, [r3, #1]
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d007      	beq.n	80078c6 <USBD_StdEPReq+0x7a>
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	f300 811b 	bgt.w	8007af2 <USBD_StdEPReq+0x2a6>
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d072      	beq.n	80079a6 <USBD_StdEPReq+0x15a>
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d03a      	beq.n	800793a <USBD_StdEPReq+0xee>
 80078c4:	e115      	b.n	8007af2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d002      	beq.n	80078d6 <USBD_StdEPReq+0x8a>
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d015      	beq.n	8007900 <USBD_StdEPReq+0xb4>
 80078d4:	e02b      	b.n	800792e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00c      	beq.n	80078f6 <USBD_StdEPReq+0xaa>
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b80      	cmp	r3, #128	@ 0x80
 80078e0:	d009      	beq.n	80078f6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 ff9e 	bl	8008828 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078ec:	2180      	movs	r1, #128	@ 0x80
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 ff9a 	bl	8008828 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078f4:	e020      	b.n	8007938 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc1c 	bl	8008136 <USBD_CtlError>
              break;
 80078fe:	e01b      	b.n	8007938 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	885b      	ldrh	r3, [r3, #2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10e      	bne.n	8007926 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <USBD_StdEPReq+0xda>
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b80      	cmp	r3, #128	@ 0x80
 8007912:	d008      	beq.n	8007926 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	88db      	ldrh	r3, [r3, #6]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 ff81 	bl	8008828 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fcb0 	bl	800828c <USBD_CtlSendStatus>

              break;
 800792c:	e004      	b.n	8007938 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fc00 	bl	8008136 <USBD_CtlError>
              break;
 8007936:	bf00      	nop
          }
          break;
 8007938:	e0e0      	b.n	8007afc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007940:	2b02      	cmp	r3, #2
 8007942:	d002      	beq.n	800794a <USBD_StdEPReq+0xfe>
 8007944:	2b03      	cmp	r3, #3
 8007946:	d015      	beq.n	8007974 <USBD_StdEPReq+0x128>
 8007948:	e026      	b.n	8007998 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00c      	beq.n	800796a <USBD_StdEPReq+0x11e>
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b80      	cmp	r3, #128	@ 0x80
 8007954:	d009      	beq.n	800796a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 ff64 	bl	8008828 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007960:	2180      	movs	r1, #128	@ 0x80
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 ff60 	bl	8008828 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007968:	e01c      	b.n	80079a4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fbe2 	bl	8008136 <USBD_CtlError>
              break;
 8007972:	e017      	b.n	80079a4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	885b      	ldrh	r3, [r3, #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d112      	bne.n	80079a2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 ff6b 	bl	8008866 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fc7b 	bl	800828c <USBD_CtlSendStatus>
              }
              break;
 8007996:	e004      	b.n	80079a2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fbcb 	bl	8008136 <USBD_CtlError>
              break;
 80079a0:	e000      	b.n	80079a4 <USBD_StdEPReq+0x158>
              break;
 80079a2:	bf00      	nop
          }
          break;
 80079a4:	e0aa      	b.n	8007afc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d002      	beq.n	80079b6 <USBD_StdEPReq+0x16a>
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d032      	beq.n	8007a1a <USBD_StdEPReq+0x1ce>
 80079b4:	e097      	b.n	8007ae6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d007      	beq.n	80079cc <USBD_StdEPReq+0x180>
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b80      	cmp	r3, #128	@ 0x80
 80079c0:	d004      	beq.n	80079cc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fbb6 	bl	8008136 <USBD_CtlError>
                break;
 80079ca:	e091      	b.n	8007af0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	da0b      	bge.n	80079ec <USBD_StdEPReq+0x1a0>
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	3310      	adds	r3, #16
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	3304      	adds	r3, #4
 80079ea:	e00b      	b.n	8007a04 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	3304      	adds	r3, #4
 8007a04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fbfa 	bl	800820c <USBD_CtlSendData>
              break;
 8007a18:	e06a      	b.n	8007af0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	da11      	bge.n	8007a46 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	f003 020f 	and.w	r2, r3, #15
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	3318      	adds	r3, #24
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d117      	bne.n	8007a6c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fb79 	bl	8008136 <USBD_CtlError>
                  break;
 8007a44:	e054      	b.n	8007af0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	f003 020f 	and.w	r2, r3, #15
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d104      	bne.n	8007a6c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fb66 	bl	8008136 <USBD_CtlError>
                  break;
 8007a6a:	e041      	b.n	8007af0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	da0b      	bge.n	8007a8c <USBD_StdEPReq+0x240>
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	3310      	adds	r3, #16
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	3304      	adds	r3, #4
 8007a8a:	e00b      	b.n	8007aa4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <USBD_StdEPReq+0x266>
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b80      	cmp	r3, #128	@ 0x80
 8007ab0:	d103      	bne.n	8007aba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e00e      	b.n	8007ad8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fef0 	bl	80088a4 <USBD_LL_IsStallEP>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2201      	movs	r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e002      	b.n	8007ad8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2202      	movs	r2, #2
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fb94 	bl	800820c <USBD_CtlSendData>
              break;
 8007ae4:	e004      	b.n	8007af0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fb24 	bl	8008136 <USBD_CtlError>
              break;
 8007aee:	bf00      	nop
          }
          break;
 8007af0:	e004      	b.n	8007afc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fb1e 	bl	8008136 <USBD_CtlError>
          break;
 8007afa:	bf00      	nop
      }
      break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fb18 	bl	8008136 <USBD_CtlError>
      break;
 8007b06:	bf00      	nop
  }

  return ret;
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	2b06      	cmp	r3, #6
 8007b36:	f200 8128 	bhi.w	8007d8a <USBD_GetDescriptor+0x276>
 8007b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <USBD_GetDescriptor+0x2c>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b5d 	.word	0x08007b5d
 8007b44:	08007b75 	.word	0x08007b75
 8007b48:	08007bb5 	.word	0x08007bb5
 8007b4c:	08007d8b 	.word	0x08007d8b
 8007b50:	08007d8b 	.word	0x08007d8b
 8007b54:	08007d2b 	.word	0x08007d2b
 8007b58:	08007d57 	.word	0x08007d57
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7c12      	ldrb	r2, [r2, #16]
 8007b68:	f107 0108 	add.w	r1, r7, #8
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
      break;
 8007b72:	e112      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7c1b      	ldrb	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10d      	bne.n	8007b98 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b84:	f107 0208 	add.w	r2, r7, #8
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3301      	adds	r3, #1
 8007b92:	2202      	movs	r2, #2
 8007b94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b96:	e100      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba0:	f107 0208 	add.w	r2, r7, #8
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	2202      	movs	r2, #2
 8007bb0:	701a      	strb	r2, [r3, #0]
      break;
 8007bb2:	e0f2      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	885b      	ldrh	r3, [r3, #2]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b05      	cmp	r3, #5
 8007bbc:	f200 80ac 	bhi.w	8007d18 <USBD_GetDescriptor+0x204>
 8007bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc8 <USBD_GetDescriptor+0xb4>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007be1 	.word	0x08007be1
 8007bcc:	08007c15 	.word	0x08007c15
 8007bd0:	08007c49 	.word	0x08007c49
 8007bd4:	08007c7d 	.word	0x08007c7d
 8007bd8:	08007cb1 	.word	0x08007cb1
 8007bdc:	08007ce5 	.word	0x08007ce5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	7c12      	ldrb	r2, [r2, #16]
 8007bf8:	f107 0108 	add.w	r1, r7, #8
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
 8007c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c02:	e091      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa95 	bl	8008136 <USBD_CtlError>
            err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
          break;
 8007c12:	e089      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	7c12      	ldrb	r2, [r2, #16]
 8007c2c:	f107 0108 	add.w	r1, r7, #8
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c36:	e077      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa7b 	bl	8008136 <USBD_CtlError>
            err++;
 8007c40:	7afb      	ldrb	r3, [r7, #11]
 8007c42:	3301      	adds	r3, #1
 8007c44:	72fb      	strb	r3, [r7, #11]
          break;
 8007c46:	e06f      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	7c12      	ldrb	r2, [r2, #16]
 8007c60:	f107 0108 	add.w	r1, r7, #8
 8007c64:	4610      	mov	r0, r2
 8007c66:	4798      	blx	r3
 8007c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6a:	e05d      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa61 	bl	8008136 <USBD_CtlError>
            err++;
 8007c74:	7afb      	ldrb	r3, [r7, #11]
 8007c76:	3301      	adds	r3, #1
 8007c78:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7a:	e055      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	7c12      	ldrb	r2, [r2, #16]
 8007c94:	f107 0108 	add.w	r1, r7, #8
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
 8007c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c9e:	e043      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa47 	bl	8008136 <USBD_CtlError>
            err++;
 8007ca8:	7afb      	ldrb	r3, [r7, #11]
 8007caa:	3301      	adds	r3, #1
 8007cac:	72fb      	strb	r3, [r7, #11]
          break;
 8007cae:	e03b      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7c12      	ldrb	r2, [r2, #16]
 8007cc8:	f107 0108 	add.w	r1, r7, #8
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd2:	e029      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa2d 	bl	8008136 <USBD_CtlError>
            err++;
 8007cdc:	7afb      	ldrb	r3, [r7, #11]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce2:	e021      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7c12      	ldrb	r2, [r2, #16]
 8007cfc:	f107 0108 	add.w	r1, r7, #8
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d06:	e00f      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa13 	bl	8008136 <USBD_CtlError>
            err++;
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	3301      	adds	r3, #1
 8007d14:	72fb      	strb	r3, [r7, #11]
          break;
 8007d16:	e007      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa0b 	bl	8008136 <USBD_CtlError>
          err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d26:	e038      	b.n	8007d9a <USBD_GetDescriptor+0x286>
 8007d28:	e037      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7c1b      	ldrb	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d3a:	f107 0208 	add.w	r2, r7, #8
 8007d3e:	4610      	mov	r0, r2
 8007d40:	4798      	blx	r3
 8007d42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d44:	e029      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f9f4 	bl	8008136 <USBD_CtlError>
        err++;
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	3301      	adds	r3, #1
 8007d52:	72fb      	strb	r3, [r7, #11]
      break;
 8007d54:	e021      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	7c1b      	ldrb	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10d      	bne.n	8007d7a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d66:	f107 0208 	add.w	r2, r7, #8
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4798      	blx	r3
 8007d6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	2207      	movs	r2, #7
 8007d76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d78:	e00f      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f9da 	bl	8008136 <USBD_CtlError>
        err++;
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	3301      	adds	r3, #1
 8007d86:	72fb      	strb	r3, [r7, #11]
      break;
 8007d88:	e007      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f9d2 	bl	8008136 <USBD_CtlError>
      err++;
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	3301      	adds	r3, #1
 8007d96:	72fb      	strb	r3, [r7, #11]
      break;
 8007d98:	bf00      	nop
  }

  if (err != 0U)
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11c      	bne.n	8007dda <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007da0:	893b      	ldrh	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d011      	beq.n	8007dca <USBD_GetDescriptor+0x2b6>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88db      	ldrh	r3, [r3, #6]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00d      	beq.n	8007dca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	88da      	ldrh	r2, [r3, #6]
 8007db2:	893b      	ldrh	r3, [r7, #8]
 8007db4:	4293      	cmp	r3, r2
 8007db6:	bf28      	it	cs
 8007db8:	4613      	movcs	r3, r2
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dbe:	893b      	ldrh	r3, [r7, #8]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa21 	bl	800820c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	88db      	ldrh	r3, [r3, #6]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fa5a 	bl	800828c <USBD_CtlSendStatus>
 8007dd8:	e000      	b.n	8007ddc <USBD_GetDescriptor+0x2c8>
    return;
 8007dda:	bf00      	nop
    }
  }
}
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop

08007de4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	889b      	ldrh	r3, [r3, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d130      	bne.n	8007e58 <USBD_SetAddress+0x74>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	88db      	ldrh	r3, [r3, #6]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d12c      	bne.n	8007e58 <USBD_SetAddress+0x74>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	885b      	ldrh	r3, [r3, #2]
 8007e02:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e04:	d828      	bhi.n	8007e58 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	885b      	ldrh	r3, [r3, #2]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d104      	bne.n	8007e26 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f989 	bl	8008136 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e24:	e01d      	b.n	8007e62 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7bfa      	ldrb	r2, [r7, #15]
 8007e2a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fd62 	bl	80088fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fa27 	bl	800828c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4c:	e009      	b.n	8007e62 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e56:	e004      	b.n	8007e62 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f96b 	bl	8008136 <USBD_CtlError>
  }
}
 8007e60:	bf00      	nop
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	4b41      	ldr	r3, [pc, #260]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007e7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e80:	4b40      	ldr	r3, [pc, #256]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d904      	bls.n	8007e92 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f953 	bl	8008136 <USBD_CtlError>
 8007e90:	e075      	b.n	8007f7e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d002      	beq.n	8007ea2 <USBD_SetConfig+0x36>
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d023      	beq.n	8007ee8 <USBD_SetConfig+0x7c>
 8007ea0:	e062      	b.n	8007f68 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007ea2:	4b38      	ldr	r3, [pc, #224]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d01a      	beq.n	8007ee0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007eaa:	4b36      	ldr	r3, [pc, #216]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ebc:	4b31      	ldr	r3, [pc, #196]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff f9e4 	bl	8007290 <USBD_SetClassConfig>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d104      	bne.n	8007ed8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f930 	bl	8008136 <USBD_CtlError>
            return;
 8007ed6:	e052      	b.n	8007f7e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9d7 	bl	800828c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ede:	e04e      	b.n	8007f7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f9d3 	bl	800828c <USBD_CtlSendStatus>
        break;
 8007ee6:	e04a      	b.n	8007f7e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ee8:	4b26      	ldr	r3, [pc, #152]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d112      	bne.n	8007f16 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007ef8:	4b22      	ldr	r3, [pc, #136]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f02:	4b20      	ldr	r3, [pc, #128]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff f9e0 	bl	80072ce <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f9bc 	bl	800828c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f14:	e033      	b.n	8007f7e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f16:	4b1b      	ldr	r3, [pc, #108]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d01d      	beq.n	8007f60 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff f9ce 	bl	80072ce <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f32:	4b14      	ldr	r3, [pc, #80]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f3c:	4b11      	ldr	r3, [pc, #68]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff f9a4 	bl	8007290 <USBD_SetClassConfig>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d104      	bne.n	8007f58 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f8f0 	bl	8008136 <USBD_CtlError>
            return;
 8007f56:	e012      	b.n	8007f7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f997 	bl	800828c <USBD_CtlSendStatus>
        break;
 8007f5e:	e00e      	b.n	8007f7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f993 	bl	800828c <USBD_CtlSendStatus>
        break;
 8007f66:	e00a      	b.n	8007f7e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f8e3 	bl	8008136 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f70:	4b04      	ldr	r3, [pc, #16]	@ (8007f84 <USBD_SetConfig+0x118>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff f9a9 	bl	80072ce <USBD_ClrClassConfig>
        break;
 8007f7c:	bf00      	nop
    }
  }
}
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	200001b0 	.word	0x200001b0

08007f88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	88db      	ldrh	r3, [r3, #6]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d004      	beq.n	8007fa4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f8ca 	bl	8008136 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fa2:	e022      	b.n	8007fea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	dc02      	bgt.n	8007fb4 <USBD_GetConfig+0x2c>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dc03      	bgt.n	8007fba <USBD_GetConfig+0x32>
 8007fb2:	e015      	b.n	8007fe0 <USBD_GetConfig+0x58>
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d00b      	beq.n	8007fd0 <USBD_GetConfig+0x48>
 8007fb8:	e012      	b.n	8007fe0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f91f 	bl	800820c <USBD_CtlSendData>
        break;
 8007fce:	e00c      	b.n	8007fea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f917 	bl	800820c <USBD_CtlSendData>
        break;
 8007fde:	e004      	b.n	8007fea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f8a7 	bl	8008136 <USBD_CtlError>
        break;
 8007fe8:	bf00      	nop
}
 8007fea:	bf00      	nop
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008002:	3b01      	subs	r3, #1
 8008004:	2b02      	cmp	r3, #2
 8008006:	d81e      	bhi.n	8008046 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	88db      	ldrh	r3, [r3, #6]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d004      	beq.n	800801a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f88f 	bl	8008136 <USBD_CtlError>
        break;
 8008018:	e01a      	b.n	8008050 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f043 0202 	orr.w	r2, r3, #2
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	330c      	adds	r3, #12
 800803a:	2202      	movs	r2, #2
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8e4 	bl	800820c <USBD_CtlSendData>
      break;
 8008044:	e004      	b.n	8008050 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f874 	bl	8008136 <USBD_CtlError>
      break;
 800804e:	bf00      	nop
  }
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	885b      	ldrh	r3, [r3, #2]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d106      	bne.n	8008078 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f90a 	bl	800828c <USBD_CtlSendStatus>
  }
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008090:	3b01      	subs	r3, #1
 8008092:	2b02      	cmp	r3, #2
 8008094:	d80b      	bhi.n	80080ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	885b      	ldrh	r3, [r3, #2]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d10c      	bne.n	80080b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f8f0 	bl	800828c <USBD_CtlSendStatus>
      }
      break;
 80080ac:	e004      	b.n	80080b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f840 	bl	8008136 <USBD_CtlError>
      break;
 80080b6:	e000      	b.n	80080ba <USBD_ClrFeature+0x3a>
      break;
 80080b8:	bf00      	nop
  }
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781a      	ldrb	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	785a      	ldrb	r2, [r3, #1]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	3302      	adds	r3, #2
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	3303      	adds	r3, #3
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	4413      	add	r3, r2
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	3304      	adds	r3, #4
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	3305      	adds	r3, #5
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	b29b      	uxth	r3, r3
 8008108:	4413      	add	r3, r2
 800810a:	b29a      	uxth	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	3306      	adds	r3, #6
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	3307      	adds	r3, #7
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	b29b      	uxth	r3, r3
 8008122:	4413      	add	r3, r2
 8008124:	b29a      	uxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	80da      	strh	r2, [r3, #6]

}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008140:	2180      	movs	r1, #128	@ 0x80
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fb70 	bl	8008828 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008148:	2100      	movs	r1, #0
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fb6c 	bl	8008828 <USBD_LL_StallEP>
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d032      	beq.n	80081d4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f834 	bl	80081dc <USBD_GetLen>
 8008174:	4603      	mov	r3, r0
 8008176:	3301      	adds	r3, #1
 8008178:	b29b      	uxth	r3, r3
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	b29a      	uxth	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	1c5a      	adds	r2, r3, #1
 8008186:	75fa      	strb	r2, [r7, #23]
 8008188:	461a      	mov	r2, r3
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	7812      	ldrb	r2, [r2, #0]
 8008192:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	75fa      	strb	r2, [r7, #23]
 800819a:	461a      	mov	r2, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4413      	add	r3, r2
 80081a0:	2203      	movs	r2, #3
 80081a2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80081a4:	e012      	b.n	80081cc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	60fa      	str	r2, [r7, #12]
 80081ac:	7dfa      	ldrb	r2, [r7, #23]
 80081ae:	1c51      	adds	r1, r2, #1
 80081b0:	75f9      	strb	r1, [r7, #23]
 80081b2:	4611      	mov	r1, r2
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	440a      	add	r2, r1
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	75fa      	strb	r2, [r7, #23]
 80081c2:	461a      	mov	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4413      	add	r3, r2
 80081c8:	2200      	movs	r2, #0
 80081ca:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e8      	bne.n	80081a6 <USBD_GetString+0x4e>
    }
  }
}
 80081d4:	bf00      	nop
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081e8:	e005      	b.n	80081f6 <USBD_GetLen+0x1a>
  {
    len++;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	3301      	adds	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3301      	adds	r3, #1
 80081f4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f5      	bne.n	80081ea <USBD_GetLen+0xe>
  }

  return len;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2202      	movs	r2, #2
 800821e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008222:	88fa      	ldrh	r2, [r7, #6]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008228:	88fa      	ldrh	r2, [r7, #6]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	2100      	movs	r1, #0
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 fb80 	bl	800893a <USBD_LL_Transmit>

  return USBD_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	2100      	movs	r1, #0
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 fb6e 	bl	800893a <USBD_LL_Transmit>

  return USBD_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008276:	88fb      	ldrh	r3, [r7, #6]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	2100      	movs	r1, #0
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 fb7f 	bl	8008980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2204      	movs	r2, #4
 8008298:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800829c:	2300      	movs	r3, #0
 800829e:	2200      	movs	r2, #0
 80082a0:	2100      	movs	r1, #0
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fb49 	bl	800893a <USBD_LL_Transmit>

  return USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2205      	movs	r2, #5
 80082be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082c2:	2300      	movs	r3, #0
 80082c4:	2200      	movs	r2, #0
 80082c6:	2100      	movs	r1, #0
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fb59 	bl	8008980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082dc:	2200      	movs	r2, #0
 80082de:	490e      	ldr	r1, [pc, #56]	@ (8008318 <MX_USB_DEVICE_Init+0x40>)
 80082e0:	480e      	ldr	r0, [pc, #56]	@ (800831c <MX_USB_DEVICE_Init+0x44>)
 80082e2:	f7fe ff79 	bl	80071d8 <USBD_Init>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082ec:	f7f8 f886 	bl	80003fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 80082f0:	490b      	ldr	r1, [pc, #44]	@ (8008320 <MX_USB_DEVICE_Init+0x48>)
 80082f2:	480a      	ldr	r0, [pc, #40]	@ (800831c <MX_USB_DEVICE_Init+0x44>)
 80082f4:	f7fe ff9b 	bl	800722e <USBD_RegisterClass>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082fe:	f7f8 f87d 	bl	80003fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008302:	4806      	ldr	r0, [pc, #24]	@ (800831c <MX_USB_DEVICE_Init+0x44>)
 8008304:	f7fe ffad 	bl	8007262 <USBD_Start>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800830e:	f7f8 f875 	bl	80003fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008312:	bf00      	nop
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	200000b0 	.word	0x200000b0
 800831c:	200001b4 	.word	0x200001b4
 8008320:	20000018 	.word	0x20000018

08008324 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2212      	movs	r2, #18
 8008334:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008336:	4b03      	ldr	r3, [pc, #12]	@ (8008344 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	200000cc 	.word	0x200000cc

08008348 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	6039      	str	r1, [r7, #0]
 8008352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2204      	movs	r2, #4
 8008358:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800835a:	4b03      	ldr	r3, [pc, #12]	@ (8008368 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	200000e0 	.word	0x200000e0

0800836c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	6039      	str	r1, [r7, #0]
 8008376:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d105      	bne.n	800838a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	4907      	ldr	r1, [pc, #28]	@ (80083a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008382:	4808      	ldr	r0, [pc, #32]	@ (80083a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008384:	f7ff fee8 	bl	8008158 <USBD_GetString>
 8008388:	e004      	b.n	8008394 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	4904      	ldr	r1, [pc, #16]	@ (80083a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800838e:	4805      	ldr	r0, [pc, #20]	@ (80083a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008390:	f7ff fee2 	bl	8008158 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008394:	4b02      	ldr	r3, [pc, #8]	@ (80083a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000478 	.word	0x20000478
 80083a4:	08008ad8 	.word	0x08008ad8

080083a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	6039      	str	r1, [r7, #0]
 80083b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	4904      	ldr	r1, [pc, #16]	@ (80083c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083b8:	4804      	ldr	r0, [pc, #16]	@ (80083cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083ba:	f7ff fecd 	bl	8008158 <USBD_GetString>
  return USBD_StrDesc;
 80083be:	4b02      	ldr	r3, [pc, #8]	@ (80083c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	20000478 	.word	0x20000478
 80083cc:	08008af0 	.word	0x08008af0

080083d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	6039      	str	r1, [r7, #0]
 80083da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	221a      	movs	r2, #26
 80083e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083e2:	f000 f843 	bl	800846c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083e6:	4b02      	ldr	r3, [pc, #8]	@ (80083f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	200000e4 	.word	0x200000e4

080083f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d105      	bne.n	8008412 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	4907      	ldr	r1, [pc, #28]	@ (8008428 <USBD_FS_ConfigStrDescriptor+0x34>)
 800840a:	4808      	ldr	r0, [pc, #32]	@ (800842c <USBD_FS_ConfigStrDescriptor+0x38>)
 800840c:	f7ff fea4 	bl	8008158 <USBD_GetString>
 8008410:	e004      	b.n	800841c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4904      	ldr	r1, [pc, #16]	@ (8008428 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008416:	4805      	ldr	r0, [pc, #20]	@ (800842c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008418:	f7ff fe9e 	bl	8008158 <USBD_GetString>
  }
  return USBD_StrDesc;
 800841c:	4b02      	ldr	r3, [pc, #8]	@ (8008428 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000478 	.word	0x20000478
 800842c:	08008b00 	.word	0x08008b00

08008430 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	6039      	str	r1, [r7, #0]
 800843a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d105      	bne.n	800844e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	4907      	ldr	r1, [pc, #28]	@ (8008464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008446:	4808      	ldr	r0, [pc, #32]	@ (8008468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008448:	f7ff fe86 	bl	8008158 <USBD_GetString>
 800844c:	e004      	b.n	8008458 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	4904      	ldr	r1, [pc, #16]	@ (8008464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008452:	4805      	ldr	r0, [pc, #20]	@ (8008468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008454:	f7ff fe80 	bl	8008158 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008458:	4b02      	ldr	r3, [pc, #8]	@ (8008464 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20000478 	.word	0x20000478
 8008468:	08008b0c 	.word	0x08008b0c

0800846c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008472:	4b0f      	ldr	r3, [pc, #60]	@ (80084b0 <Get_SerialNum+0x44>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008478:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <Get_SerialNum+0x48>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800847e:	4b0e      	ldr	r3, [pc, #56]	@ (80084b8 <Get_SerialNum+0x4c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4413      	add	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d009      	beq.n	80084a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008492:	2208      	movs	r2, #8
 8008494:	4909      	ldr	r1, [pc, #36]	@ (80084bc <Get_SerialNum+0x50>)
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f814 	bl	80084c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800849c:	2204      	movs	r2, #4
 800849e:	4908      	ldr	r1, [pc, #32]	@ (80084c0 <Get_SerialNum+0x54>)
 80084a0:	68b8      	ldr	r0, [r7, #8]
 80084a2:	f000 f80f 	bl	80084c4 <IntToUnicode>
  }
}
 80084a6:	bf00      	nop
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	1ffff7ac 	.word	0x1ffff7ac
 80084b4:	1ffff7b0 	.word	0x1ffff7b0
 80084b8:	1ffff7b4 	.word	0x1ffff7b4
 80084bc:	200000e6 	.word	0x200000e6
 80084c0:	200000f6 	.word	0x200000f6

080084c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	4613      	mov	r3, r2
 80084d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084d6:	2300      	movs	r3, #0
 80084d8:	75fb      	strb	r3, [r7, #23]
 80084da:	e027      	b.n	800852c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	0f1b      	lsrs	r3, r3, #28
 80084e0:	2b09      	cmp	r3, #9
 80084e2:	d80b      	bhi.n	80084fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	0f1b      	lsrs	r3, r3, #28
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	4619      	mov	r1, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	440b      	add	r3, r1
 80084f4:	3230      	adds	r2, #48	@ 0x30
 80084f6:	b2d2      	uxtb	r2, r2
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	e00a      	b.n	8008512 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	0f1b      	lsrs	r3, r3, #28
 8008500:	b2da      	uxtb	r2, r3
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	4619      	mov	r1, r3
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	440b      	add	r3, r1
 800850c:	3237      	adds	r2, #55	@ 0x37
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	011b      	lsls	r3, r3, #4
 8008516:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008518:	7dfb      	ldrb	r3, [r7, #23]
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	3301      	adds	r3, #1
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	4413      	add	r3, r2
 8008522:	2200      	movs	r2, #0
 8008524:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	3301      	adds	r3, #1
 800852a:	75fb      	strb	r3, [r7, #23]
 800852c:	7dfa      	ldrb	r2, [r7, #23]
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	429a      	cmp	r2, r3
 8008532:	d3d3      	bcc.n	80084dc <IntToUnicode+0x18>
  }
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
	...

08008544 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a0d      	ldr	r2, [pc, #52]	@ (8008588 <HAL_PCD_MspInit+0x44>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d113      	bne.n	800857e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008556:	4b0d      	ldr	r3, [pc, #52]	@ (800858c <HAL_PCD_MspInit+0x48>)
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	4a0c      	ldr	r2, [pc, #48]	@ (800858c <HAL_PCD_MspInit+0x48>)
 800855c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008560:	61d3      	str	r3, [r2, #28]
 8008562:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <HAL_PCD_MspInit+0x48>)
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800856e:	2200      	movs	r2, #0
 8008570:	2100      	movs	r1, #0
 8008572:	2014      	movs	r0, #20
 8008574:	f7f8 fae9 	bl	8000b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8008578:	2014      	movs	r0, #20
 800857a:	f7f8 fb02 	bl	8000b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40005c00 	.word	0x40005c00
 800858c:	40021000 	.word	0x40021000

08008590 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f7fe fea4 	bl	80072f4 <USBD_LL_SetupStage>
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	440b      	add	r3, r1
 80085d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	4619      	mov	r1, r3
 80085de:	f7fe fed6 	bl	800738e <USBD_LL_DataOutStage>
}
 80085e2:	bf00      	nop
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 80085fc:	78fa      	ldrb	r2, [r7, #3]
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	4613      	mov	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	00db      	lsls	r3, r3, #3
 8008608:	440b      	add	r3, r1
 800860a:	3324      	adds	r3, #36	@ 0x24
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	4619      	mov	r1, r3
 8008612:	f7fe ff2d 	bl	8007470 <USBD_LL_DataInStage>
}
 8008616:	bf00      	nop
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b082      	sub	sp, #8
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff f840 	bl	80076b2 <USBD_LL_SOF>
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008642:	2301      	movs	r3, #1
 8008644:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	795b      	ldrb	r3, [r3, #5]
 800864a:	2b02      	cmp	r3, #2
 800864c:	d001      	beq.n	8008652 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800864e:	f7f7 fed5 	bl	80003fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008658:	7bfa      	ldrb	r2, [r7, #15]
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe ffed 	bl	800763c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe ffa6 	bl	80075ba <USBD_LL_Reset>
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe ffe8 	bl	800765c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	7a5b      	ldrb	r3, [r3, #9]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008694:	4b04      	ldr	r3, [pc, #16]	@ (80086a8 <HAL_PCD_SuspendCallback+0x30>)
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	4a03      	ldr	r2, [pc, #12]	@ (80086a8 <HAL_PCD_SuspendCallback+0x30>)
 800869a:	f043 0306 	orr.w	r3, r3, #6
 800869e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	e000ed00 	.word	0xe000ed00

080086ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe ffe3 	bl	8007686 <USBD_LL_Resume>
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80086d0:	4a23      	ldr	r2, [pc, #140]	@ (8008760 <USBD_LL_Init+0x98>)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a21      	ldr	r2, [pc, #132]	@ (8008760 <USBD_LL_Init+0x98>)
 80086dc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80086e0:	4b1f      	ldr	r3, [pc, #124]	@ (8008760 <USBD_LL_Init+0x98>)
 80086e2:	4a20      	ldr	r2, [pc, #128]	@ (8008764 <USBD_LL_Init+0x9c>)
 80086e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80086e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008760 <USBD_LL_Init+0x98>)
 80086e8:	2208      	movs	r2, #8
 80086ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80086ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008760 <USBD_LL_Init+0x98>)
 80086ee:	2202      	movs	r2, #2
 80086f0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008760 <USBD_LL_Init+0x98>)
 80086f4:	2202      	movs	r2, #2
 80086f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80086f8:	4b19      	ldr	r3, [pc, #100]	@ (8008760 <USBD_LL_Init+0x98>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80086fe:	4b18      	ldr	r3, [pc, #96]	@ (8008760 <USBD_LL_Init+0x98>)
 8008700:	2200      	movs	r2, #0
 8008702:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008704:	4816      	ldr	r0, [pc, #88]	@ (8008760 <USBD_LL_Init+0x98>)
 8008706:	f7f8 fbe1 	bl	8000ecc <HAL_PCD_Init>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008710:	f7f7 fe74 	bl	80003fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800871a:	2318      	movs	r3, #24
 800871c:	2200      	movs	r2, #0
 800871e:	2100      	movs	r1, #0
 8008720:	f7fa f844 	bl	80027ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800872a:	2358      	movs	r3, #88	@ 0x58
 800872c:	2200      	movs	r2, #0
 800872e:	2180      	movs	r1, #128	@ 0x80
 8008730:	f7fa f83c 	bl	80027ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xC0);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800873a:	23c0      	movs	r3, #192	@ 0xc0
 800873c:	2200      	movs	r2, #0
 800873e:	2101      	movs	r1, #1
 8008740:	f7fa f834 	bl	80027ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800874a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800874e:	2200      	movs	r2, #0
 8008750:	2181      	movs	r1, #129	@ 0x81
 8008752:	f7fa f82b 	bl	80027ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000678 	.word	0x20000678
 8008764:	40005c00 	.word	0x40005c00

08008768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800877e:	4618      	mov	r0, r3
 8008780:	f7f8 fc6b 	bl	800105a <HAL_PCD_Start>
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f940 	bl	8008a10 <USBD_Get_USB_Status>
 8008790:	4603      	mov	r3, r0
 8008792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008794:	7bbb      	ldrb	r3, [r7, #14]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	4608      	mov	r0, r1
 80087a8:	4611      	mov	r1, r2
 80087aa:	461a      	mov	r2, r3
 80087ac:	4603      	mov	r3, r0
 80087ae:	70fb      	strb	r3, [r7, #3]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70bb      	strb	r3, [r7, #2]
 80087b4:	4613      	mov	r3, r2
 80087b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087c6:	78bb      	ldrb	r3, [r7, #2]
 80087c8:	883a      	ldrh	r2, [r7, #0]
 80087ca:	78f9      	ldrb	r1, [r7, #3]
 80087cc:	f7f8 fd63 	bl	8001296 <HAL_PCD_EP_Open>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f91a 	bl	8008a10 <USBD_Get_USB_Status>
 80087dc:	4603      	mov	r3, r0
 80087de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	460b      	mov	r3, r1
 80087f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f7f8 fda1 	bl	8001350 <HAL_PCD_EP_Close>
 800880e:	4603      	mov	r3, r0
 8008810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f8fb 	bl	8008a10 <USBD_Get_USB_Status>
 800881a:	4603      	mov	r3, r0
 800881c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800881e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f7f8 fe4a 	bl	80014e0 <HAL_PCD_EP_SetStall>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f8dc 	bl	8008a10 <USBD_Get_USB_Status>
 8008858:	4603      	mov	r3, r0
 800885a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885c:	7bbb      	ldrb	r3, [r7, #14]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7f8 fe7d 	bl	8001584 <HAL_PCD_EP_ClrStall>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f8bd 	bl	8008a10 <USBD_Get_USB_Status>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889a:	7bbb      	ldrb	r3, [r7, #14]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	da0b      	bge.n	80088d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088c6:	68f9      	ldr	r1, [r7, #12]
 80088c8:	4613      	mov	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	440b      	add	r3, r1
 80088d2:	3312      	adds	r3, #18
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	e00b      	b.n	80088f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	4613      	mov	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	440b      	add	r3, r1
 80088ea:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80088ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008916:	78fa      	ldrb	r2, [r7, #3]
 8008918:	4611      	mov	r1, r2
 800891a:	4618      	mov	r0, r3
 800891c:	f7f8 fc97 	bl	800124e <HAL_PCD_SetAddress>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	4618      	mov	r0, r3
 8008928:	f000 f872 	bl	8008a10 <USBD_Get_USB_Status>
 800892c:	4603      	mov	r3, r0
 800892e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008930:	7bbb      	ldrb	r3, [r7, #14]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b086      	sub	sp, #24
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	461a      	mov	r2, r3
 8008946:	460b      	mov	r3, r1
 8008948:	72fb      	strb	r3, [r7, #11]
 800894a:	4613      	mov	r3, r2
 800894c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800895c:	893b      	ldrh	r3, [r7, #8]
 800895e:	7af9      	ldrb	r1, [r7, #11]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	f7f8 fd86 	bl	8001472 <HAL_PCD_EP_Transmit>
 8008966:	4603      	mov	r3, r0
 8008968:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800896a:	7dfb      	ldrb	r3, [r7, #23]
 800896c:	4618      	mov	r0, r3
 800896e:	f000 f84f 	bl	8008a10 <USBD_Get_USB_Status>
 8008972:	4603      	mov	r3, r0
 8008974:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008976:	7dbb      	ldrb	r3, [r7, #22]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	461a      	mov	r2, r3
 800898c:	460b      	mov	r3, r1
 800898e:	72fb      	strb	r3, [r7, #11]
 8008990:	4613      	mov	r3, r2
 8008992:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80089a2:	893b      	ldrh	r3, [r7, #8]
 80089a4:	7af9      	ldrb	r1, [r7, #11]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	f7f8 fd1a 	bl	80013e0 <HAL_PCD_EP_Receive>
 80089ac:	4603      	mov	r3, r0
 80089ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 f82c 	bl	8008a10 <USBD_Get_USB_Status>
 80089b8:	4603      	mov	r3, r0
 80089ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MIDI_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089d0:	4b03      	ldr	r3, [pc, #12]	@ (80089e0 <USBD_static_malloc+0x18>)
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	2000094c 	.word	0x2000094c

080089e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]

}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d817      	bhi.n	8008a54 <USBD_Get_USB_Status+0x44>
 8008a24:	a201      	add	r2, pc, #4	@ (adr r2, 8008a2c <USBD_Get_USB_Status+0x1c>)
 8008a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2a:	bf00      	nop
 8008a2c:	08008a3d 	.word	0x08008a3d
 8008a30:	08008a43 	.word	0x08008a43
 8008a34:	08008a49 	.word	0x08008a49
 8008a38:	08008a4f 	.word	0x08008a4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a40:	e00b      	b.n	8008a5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a42:	2302      	movs	r3, #2
 8008a44:	73fb      	strb	r3, [r7, #15]
    break;
 8008a46:	e008      	b.n	8008a5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a4c:	e005      	b.n	8008a5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a4e:	2302      	movs	r3, #2
 8008a50:	73fb      	strb	r3, [r7, #15]
    break;
 8008a52:	e002      	b.n	8008a5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a54:	2302      	movs	r3, #2
 8008a56:	73fb      	strb	r3, [r7, #15]
    break;
 8008a58:	bf00      	nop
  }
  return usb_status;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <memset>:
 8008a68:	4402      	add	r2, r0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d100      	bne.n	8008a72 <memset+0xa>
 8008a70:	4770      	bx	lr
 8008a72:	f803 1b01 	strb.w	r1, [r3], #1
 8008a76:	e7f9      	b.n	8008a6c <memset+0x4>

08008a78 <__libc_init_array>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8008ab0 <__libc_init_array+0x38>)
 8008a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8008ab4 <__libc_init_array+0x3c>)
 8008a7e:	1b64      	subs	r4, r4, r5
 8008a80:	10a4      	asrs	r4, r4, #2
 8008a82:	2600      	movs	r6, #0
 8008a84:	42a6      	cmp	r6, r4
 8008a86:	d109      	bne.n	8008a9c <__libc_init_array+0x24>
 8008a88:	4d0b      	ldr	r5, [pc, #44]	@ (8008ab8 <__libc_init_array+0x40>)
 8008a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8008abc <__libc_init_array+0x44>)
 8008a8c:	f000 f818 	bl	8008ac0 <_init>
 8008a90:	1b64      	subs	r4, r4, r5
 8008a92:	10a4      	asrs	r4, r4, #2
 8008a94:	2600      	movs	r6, #0
 8008a96:	42a6      	cmp	r6, r4
 8008a98:	d105      	bne.n	8008aa6 <__libc_init_array+0x2e>
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa0:	4798      	blx	r3
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	e7ee      	b.n	8008a84 <__libc_init_array+0xc>
 8008aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aaa:	4798      	blx	r3
 8008aac:	3601      	adds	r6, #1
 8008aae:	e7f2      	b.n	8008a96 <__libc_init_array+0x1e>
 8008ab0:	08008b4c 	.word	0x08008b4c
 8008ab4:	08008b4c 	.word	0x08008b4c
 8008ab8:	08008b4c 	.word	0x08008b4c
 8008abc:	08008b50 	.word	0x08008b50

08008ac0 <_init>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	bf00      	nop
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr

08008acc <_fini>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	bf00      	nop
 8008ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad2:	bc08      	pop	{r3}
 8008ad4:	469e      	mov	lr, r3
 8008ad6:	4770      	bx	lr
