
Blue Pill Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008168  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008274  08008274  00009274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082dc  080082dc  0000a100  2**0
                  CONTENTS
  4 .ARM          00000000  080082dc  080082dc  0000a100  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082dc  080082dc  0000a100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082dc  080082dc  000092dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082e0  080082e0  000092e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  080082e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000100  080083e4  0000a100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000990  080083e4  0000a990  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dc5  00000000  00000000  0000a129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d6  00000000  00000000  0001beee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001efc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c99  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a717  00000000  00000000  00020cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145e0  00000000  00000000  0003b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f89  00000000  00000000  0004f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004420  00000000  00000000  000e19bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e5ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	0800825c 	.word	0x0800825c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	0800825c 	.word	0x0800825c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc00 	bl	8000954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f818 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f910 	bl	800037c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 fc92 	bl	8007a84 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000160:	f000 f870 	bl	8000244 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000164:	f000 f8bc 	bl	80002e0 <MX_TIM2_Init>
//  while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
//  USBD_MIDI_SendPackets (&hUsbDeviceFS, P_vol_message, 4);



  HAL_NVIC_SetPriority (TIM2_IRQn, 0, 0);
 8000168:	2200      	movs	r2, #0
 800016a:	2100      	movs	r1, #0
 800016c:	201c      	movs	r0, #28
 800016e:	f000 ff3c 	bl	8000fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (TIM2_IRQn);
 8000172:	201c      	movs	r0, #28
 8000174:	f000 ff55 	bl	8001022 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT (&htim2);
 8000178:	4802      	ldr	r0, [pc, #8]	@ (8000184 <main+0x38>)
 800017a:	f003 fb4d 	bl	8003818 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800017e:	bf00      	nop
 8000180:	e7fd      	b.n	800017e <main+0x32>
 8000182:	bf00      	nop
 8000184:	2000014c 	.word	0x2000014c

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b094      	sub	sp, #80	@ 0x50
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000192:	2228      	movs	r2, #40	@ 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f008 f834 	bl	8008204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	f107 0314 	add.w	r3, r7, #20
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]
 80001aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b8:	2301      	movs	r3, #1
 80001ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c2:	2300      	movs	r3, #0
 80001c4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ca:	2302      	movs	r3, #2
 80001cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80001d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fe36 	bl	8002e50 <HAL_RCC_OscConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001ea:	f000 f919 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ee:	230f      	movs	r3, #15
 80001f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2101      	movs	r1, #1
 800020a:	4618      	mov	r0, r3
 800020c:	f003 f8a2 	bl	8003354 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000216:	f000 f903 	bl	8000420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800021a:	2312      	movs	r3, #18
 800021c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800021e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000222:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000224:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000228:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f003 f9ed 	bl	800360c <HAL_RCCEx_PeriphCLKConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000238:	f000 f8f2 	bl	8000420 <Error_Handler>
  }
}
 800023c:	bf00      	nop
 800023e:	3750      	adds	r7, #80	@ 0x50
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000254:	4b20      	ldr	r3, [pc, #128]	@ (80002d8 <MX_ADC1_Init+0x94>)
 8000256:	4a21      	ldr	r2, [pc, #132]	@ (80002dc <MX_ADC1_Init+0x98>)
 8000258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800025a:	4b1f      	ldr	r3, [pc, #124]	@ (80002d8 <MX_ADC1_Init+0x94>)
 800025c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000260:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000262:	4b1d      	ldr	r3, [pc, #116]	@ (80002d8 <MX_ADC1_Init+0x94>)
 8000264:	2200      	movs	r2, #0
 8000266:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000268:	4b1b      	ldr	r3, [pc, #108]	@ (80002d8 <MX_ADC1_Init+0x94>)
 800026a:	2200      	movs	r2, #0
 800026c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800026e:	4b1a      	ldr	r3, [pc, #104]	@ (80002d8 <MX_ADC1_Init+0x94>)
 8000270:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000274:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000276:	4b18      	ldr	r3, [pc, #96]	@ (80002d8 <MX_ADC1_Init+0x94>)
 8000278:	2200      	movs	r2, #0
 800027a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800027c:	4b16      	ldr	r3, [pc, #88]	@ (80002d8 <MX_ADC1_Init+0x94>)
 800027e:	2202      	movs	r2, #2
 8000280:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000282:	4815      	ldr	r0, [pc, #84]	@ (80002d8 <MX_ADC1_Init+0x94>)
 8000284:	f000 fbc8 	bl	8000a18 <HAL_ADC_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800028e:	f000 f8c7 	bl	8000420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000292:	2308      	movs	r3, #8
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000296:	2301      	movs	r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4619      	mov	r1, r3
 80002a2:	480d      	ldr	r0, [pc, #52]	@ (80002d8 <MX_ADC1_Init+0x94>)
 80002a4:	f000 fc90 	bl	8000bc8 <HAL_ADC_ConfigChannel>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002ae:	f000 f8b7 	bl	8000420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80002b2:	2309      	movs	r3, #9
 80002b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002b6:	2302      	movs	r3, #2
 80002b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4619      	mov	r1, r3
 80002be:	4806      	ldr	r0, [pc, #24]	@ (80002d8 <MX_ADC1_Init+0x94>)
 80002c0:	f000 fc82 	bl	8000bc8 <HAL_ADC_ConfigChannel>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002ca:	f000 f8a9 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	2000011c 	.word	0x2000011c
 80002dc:	40012400 	.word	0x40012400

080002e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e6:	f107 0308 	add.w	r3, r7, #8
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <MX_TIM2_Init+0x98>)
 80002fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000302:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 359;
 8000304:	4b1c      	ldr	r3, [pc, #112]	@ (8000378 <MX_TIM2_Init+0x98>)
 8000306:	f240 1267 	movw	r2, #359	@ 0x167
 800030a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030c:	4b1a      	ldr	r3, [pc, #104]	@ (8000378 <MX_TIM2_Init+0x98>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 8000312:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <MX_TIM2_Init+0x98>)
 8000314:	f240 321f 	movw	r2, #799	@ 0x31f
 8000318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031a:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <MX_TIM2_Init+0x98>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000320:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <MX_TIM2_Init+0x98>)
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000326:	4814      	ldr	r0, [pc, #80]	@ (8000378 <MX_TIM2_Init+0x98>)
 8000328:	f003 fa26 	bl	8003778 <HAL_TIM_Base_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000332:	f000 f875 	bl	8000420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000336:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800033a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	4619      	mov	r1, r3
 8000342:	480d      	ldr	r0, [pc, #52]	@ (8000378 <MX_TIM2_Init+0x98>)
 8000344:	f003 fbaa 	bl	8003a9c <HAL_TIM_ConfigClockSource>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800034e:	f000 f867 	bl	8000420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000356:	2300      	movs	r3, #0
 8000358:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	4619      	mov	r1, r3
 800035e:	4806      	ldr	r0, [pc, #24]	@ (8000378 <MX_TIM2_Init+0x98>)
 8000360:	f003 fd94 	bl	8003e8c <HAL_TIMEx_MasterConfigSynchronization>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800036a:	f000 f859 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	2000014c 	.word	0x2000014c

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <MX_GPIO_Init+0x98>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1f      	ldr	r2, [pc, #124]	@ (8000414 <MX_GPIO_Init+0x98>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b1d      	ldr	r3, [pc, #116]	@ (8000414 <MX_GPIO_Init+0x98>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <MX_GPIO_Init+0x98>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a19      	ldr	r2, [pc, #100]	@ (8000414 <MX_GPIO_Init+0x98>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <MX_GPIO_Init+0x98>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <MX_GPIO_Init+0x98>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a13      	ldr	r2, [pc, #76]	@ (8000414 <MX_GPIO_Init+0x98>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <MX_GPIO_Init+0x98>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : C_B_Pin CS_B_Pin D_B_Pin DS_B_Pin
                           E_B_Pin F_B_Pin FS_B_Pin */
  GPIO_InitStruct.Pin = C_B_Pin|CS_B_Pin|D_B_Pin|DS_B_Pin
 80003d8:	f248 03fc 	movw	r3, #33020	@ 0x80fc
 80003dc:	613b      	str	r3, [r7, #16]
                          |E_B_Pin|F_B_Pin|FS_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	480a      	ldr	r0, [pc, #40]	@ (8000418 <MX_GPIO_Init+0x9c>)
 80003ee:	f000 fe33 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_B_Pin GS_B_Pin A_B_Pin AS_B_Pin
                           B_B_Pin SP_B_Pin */
  GPIO_InitStruct.Pin = G_B_Pin|GS_B_Pin|A_B_Pin|AS_B_Pin
 80003f2:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80003f6:	613b      	str	r3, [r7, #16]
                          |B_B_Pin|SP_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	4805      	ldr	r0, [pc, #20]	@ (800041c <MX_GPIO_Init+0xa0>)
 8000408:	f000 fe26 	bl	8001058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800
 800041c:	40010c00 	.word	0x40010c00

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	@ (8000488 <HAL_MspInit+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <HAL_MspInit+0x5c>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000462:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <HAL_MspInit+0x60>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	@ (800048c <HAL_MspInit+0x60>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a14      	ldr	r2, [pc, #80]	@ (80004fc <HAL_ADC_MspInit+0x6c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d121      	bne.n	80004f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004b0:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <HAL_ADC_MspInit+0x70>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a12      	ldr	r2, [pc, #72]	@ (8000500 <HAL_ADC_MspInit+0x70>)
 80004b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <HAL_ADC_MspInit+0x70>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <HAL_ADC_MspInit+0x70>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000500 <HAL_ADC_MspInit+0x70>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <HAL_ADC_MspInit+0x70>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = D_V_Pin|P_V_Pin;
 80004e0:	2303      	movs	r3, #3
 80004e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e4:	2303      	movs	r3, #3
 80004e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4805      	ldr	r0, [pc, #20]	@ (8000504 <HAL_ADC_MspInit+0x74>)
 80004f0:	f000 fdb2 	bl	8001058 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40012400 	.word	0x40012400
 8000500:	40021000 	.word	0x40021000
 8000504:	40010c00 	.word	0x40010c00

08000508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000518:	d113      	bne.n	8000542 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <HAL_TIM_Base_MspInit+0x44>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <HAL_TIM_Base_MspInit+0x44>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <HAL_TIM_Base_MspInit+0x44>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	201c      	movs	r0, #28
 8000538:	f000 fd57 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800053c:	201c      	movs	r0, #28
 800053e:	f000 fd70 	bl	8001022 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <NMI_Handler+0x4>

08000558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <MemManage_Handler+0x4>

08000568 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <UsageFault_Handler+0x4>

08000578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a0:	f000 fa1e 	bl	80009e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005ae:	f001 f80a 	bl	80015c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200006a4 	.word	0x200006a4

080005bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (!HAL_GPIO_ReadPin (C_B_GPIO_Port, C_B_Pin)) {
 80005c0:	2104      	movs	r1, #4
 80005c2:	4899      	ldr	r0, [pc, #612]	@ (8000828 <TIM2_IRQHandler+0x26c>)
 80005c4:	f000 fecc 	bl	8001360 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <TIM2_IRQHandler+0x30>
		if (!pressed) {
 80005ce:	4b97      	ldr	r3, [pc, #604]	@ (800082c <TIM2_IRQHandler+0x270>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	f000 811f 	beq.w	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 80005de:	4b93      	ldr	r3, [pc, #588]	@ (800082c <TIM2_IRQHandler+0x270>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]

			Note_Change (C);
 80005e4:	2030      	movs	r0, #48	@ 0x30
 80005e6:	f000 f929 	bl	800083c <Note_Change>
 80005ea:	e117      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (CS_B_GPIO_Port, CS_B_Pin)) {
 80005ec:	2108      	movs	r1, #8
 80005ee:	488e      	ldr	r0, [pc, #568]	@ (8000828 <TIM2_IRQHandler+0x26c>)
 80005f0:	f000 feb6 	bl	8001360 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d10e      	bne.n	8000618 <TIM2_IRQHandler+0x5c>
		if (!pressed) {
 80005fa:	4b8c      	ldr	r3, [pc, #560]	@ (800082c <TIM2_IRQHandler+0x270>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	f083 0301 	eor.w	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	f000 8109 	beq.w	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 800060a:	4b88      	ldr	r3, [pc, #544]	@ (800082c <TIM2_IRQHandler+0x270>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]

			Note_Change (CS);
 8000610:	2031      	movs	r0, #49	@ 0x31
 8000612:	f000 f913 	bl	800083c <Note_Change>
 8000616:	e101      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (D_B_GPIO_Port, D_B_Pin)) {
 8000618:	2110      	movs	r1, #16
 800061a:	4883      	ldr	r0, [pc, #524]	@ (8000828 <TIM2_IRQHandler+0x26c>)
 800061c:	f000 fea0 	bl	8001360 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d10e      	bne.n	8000644 <TIM2_IRQHandler+0x88>
		if (!pressed) {
 8000626:	4b81      	ldr	r3, [pc, #516]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	f083 0301 	eor.w	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 80f3 	beq.w	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 8000636:	4b7d      	ldr	r3, [pc, #500]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]

			Note_Change (D);
 800063c:	2032      	movs	r0, #50	@ 0x32
 800063e:	f000 f8fd 	bl	800083c <Note_Change>
 8000642:	e0eb      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (DS_B_GPIO_Port, DS_B_Pin)) {
 8000644:	2120      	movs	r1, #32
 8000646:	4878      	ldr	r0, [pc, #480]	@ (8000828 <TIM2_IRQHandler+0x26c>)
 8000648:	f000 fe8a 	bl	8001360 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10e      	bne.n	8000670 <TIM2_IRQHandler+0xb4>
		if (!pressed) {
 8000652:	4b76      	ldr	r3, [pc, #472]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	f083 0301 	eor.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	f000 80dd 	beq.w	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 8000662:	4b72      	ldr	r3, [pc, #456]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]

			Note_Change (DS);
 8000668:	2033      	movs	r0, #51	@ 0x33
 800066a:	f000 f8e7 	bl	800083c <Note_Change>
 800066e:	e0d5      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (E_B_GPIO_Port, E_B_Pin)) {
 8000670:	2140      	movs	r1, #64	@ 0x40
 8000672:	486d      	ldr	r0, [pc, #436]	@ (8000828 <TIM2_IRQHandler+0x26c>)
 8000674:	f000 fe74 	bl	8001360 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10e      	bne.n	800069c <TIM2_IRQHandler+0xe0>
		if (!pressed) {
 800067e:	4b6b      	ldr	r3, [pc, #428]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f083 0301 	eor.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	f000 80c7 	beq.w	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 800068e:	4b67      	ldr	r3, [pc, #412]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]

			Note_Change (E);
 8000694:	2034      	movs	r0, #52	@ 0x34
 8000696:	f000 f8d1 	bl	800083c <Note_Change>
 800069a:	e0bf      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (F_B_GPIO_Port, F_B_Pin)) {
 800069c:	2180      	movs	r1, #128	@ 0x80
 800069e:	4862      	ldr	r0, [pc, #392]	@ (8000828 <TIM2_IRQHandler+0x26c>)
 80006a0:	f000 fe5e 	bl	8001360 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10e      	bne.n	80006c8 <TIM2_IRQHandler+0x10c>
		if (!pressed) {
 80006aa:	4b60      	ldr	r3, [pc, #384]	@ (800082c <TIM2_IRQHandler+0x270>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f083 0301 	eor.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	f000 80b1 	beq.w	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 80006ba:	4b5c      	ldr	r3, [pc, #368]	@ (800082c <TIM2_IRQHandler+0x270>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]

			Note_Change (F);
 80006c0:	2035      	movs	r0, #53	@ 0x35
 80006c2:	f000 f8bb 	bl	800083c <Note_Change>
 80006c6:	e0a9      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (FS_B_GPIO_Port, FS_B_Pin)) {
 80006c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006cc:	4856      	ldr	r0, [pc, #344]	@ (8000828 <TIM2_IRQHandler+0x26c>)
 80006ce:	f000 fe47 	bl	8001360 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10b      	bne.n	80006f0 <TIM2_IRQHandler+0x134>
		if (!pressed) {
 80006d8:	4b54      	ldr	r3, [pc, #336]	@ (800082c <TIM2_IRQHandler+0x270>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f083 0301 	eor.w	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f000 809a 	beq.w	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 80006e8:	4b50      	ldr	r3, [pc, #320]	@ (800082c <TIM2_IRQHandler+0x270>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	e095      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (G_B_GPIO_Port, G_B_Pin)) {
 80006f0:	2108      	movs	r1, #8
 80006f2:	484f      	ldr	r0, [pc, #316]	@ (8000830 <TIM2_IRQHandler+0x274>)
 80006f4:	f000 fe34 	bl	8001360 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10e      	bne.n	800071c <TIM2_IRQHandler+0x160>
		if (!pressed) {
 80006fe:	4b4b      	ldr	r3, [pc, #300]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	f083 0301 	eor.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	f000 8087 	beq.w	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 800070e:	4b47      	ldr	r3, [pc, #284]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]

			Note_Change (G);
 8000714:	2037      	movs	r0, #55	@ 0x37
 8000716:	f000 f891 	bl	800083c <Note_Change>
 800071a:	e07f      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (GS_B_GPIO_Port, GS_B_Pin)) {
 800071c:	2110      	movs	r1, #16
 800071e:	4844      	ldr	r0, [pc, #272]	@ (8000830 <TIM2_IRQHandler+0x274>)
 8000720:	f000 fe1e 	bl	8001360 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10d      	bne.n	8000746 <TIM2_IRQHandler+0x18a>
		if (!pressed) {
 800072a:	4b40      	ldr	r3, [pc, #256]	@ (800082c <TIM2_IRQHandler+0x270>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	f083 0301 	eor.w	r3, r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d071      	beq.n	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 8000738:	4b3c      	ldr	r3, [pc, #240]	@ (800082c <TIM2_IRQHandler+0x270>)
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]

			Note_Change (GS);
 800073e:	2038      	movs	r0, #56	@ 0x38
 8000740:	f000 f87c 	bl	800083c <Note_Change>
 8000744:	e06a      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (A_B_GPIO_Port, A_B_Pin)) {
 8000746:	2120      	movs	r1, #32
 8000748:	4839      	ldr	r0, [pc, #228]	@ (8000830 <TIM2_IRQHandler+0x274>)
 800074a:	f000 fe09 	bl	8001360 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10d      	bne.n	8000770 <TIM2_IRQHandler+0x1b4>
		if (!pressed) {
 8000754:	4b35      	ldr	r3, [pc, #212]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f083 0301 	eor.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d05c      	beq.n	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 8000762:	4b32      	ldr	r3, [pc, #200]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]

			Note_Change (A);
 8000768:	2039      	movs	r0, #57	@ 0x39
 800076a:	f000 f867 	bl	800083c <Note_Change>
 800076e:	e055      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (AS_B_GPIO_Port, AS_B_Pin)) {
 8000770:	2140      	movs	r1, #64	@ 0x40
 8000772:	482f      	ldr	r0, [pc, #188]	@ (8000830 <TIM2_IRQHandler+0x274>)
 8000774:	f000 fdf4 	bl	8001360 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10d      	bne.n	800079a <TIM2_IRQHandler+0x1de>
		if (!pressed) {
 800077e:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	f083 0301 	eor.w	r3, r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d047      	beq.n	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 800078c:	4b27      	ldr	r3, [pc, #156]	@ (800082c <TIM2_IRQHandler+0x270>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]

			Note_Change (AS);
 8000792:	203a      	movs	r0, #58	@ 0x3a
 8000794:	f000 f852 	bl	800083c <Note_Change>
 8000798:	e040      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (B_B_GPIO_Port, B_B_Pin)) {
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	4824      	ldr	r0, [pc, #144]	@ (8000830 <TIM2_IRQHandler+0x274>)
 800079e:	f000 fddf 	bl	8001360 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d10d      	bne.n	80007c4 <TIM2_IRQHandler+0x208>
		if (!pressed) {
 80007a8:	4b20      	ldr	r3, [pc, #128]	@ (800082c <TIM2_IRQHandler+0x270>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	f083 0301 	eor.w	r3, r3, #1
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d032      	beq.n	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <TIM2_IRQHandler+0x270>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]

			Note_Change (B);
 80007bc:	203b      	movs	r0, #59	@ 0x3b
 80007be:	f000 f83d 	bl	800083c <Note_Change>
 80007c2:	e02b      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else if (!HAL_GPIO_ReadPin (SP_B_GPIO_Port, SP_B_Pin)) {
 80007c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007c8:	4819      	ldr	r0, [pc, #100]	@ (8000830 <TIM2_IRQHandler+0x274>)
 80007ca:	f000 fdc9 	bl	8001360 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10f      	bne.n	80007f4 <TIM2_IRQHandler+0x238>
		if (!pressed) {
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <TIM2_IRQHandler+0x270>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	f083 0301 	eor.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d01c      	beq.n	800081c <TIM2_IRQHandler+0x260>
			pressed = true;
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <TIM2_IRQHandler+0x270>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
			control_toggled = true;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <TIM2_IRQHandler+0x278>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]

			Toggle_Control ();
 80007ee:	f000 f857 	bl	80008a0 <Toggle_Control>
 80007f2:	e013      	b.n	800081c <TIM2_IRQHandler+0x260>
		}
	} else {
		if (pressed && !control_toggled) {
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <TIM2_IRQHandler+0x270>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d009      	beq.n	8000810 <TIM2_IRQHandler+0x254>
 80007fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <TIM2_IRQHandler+0x278>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	f083 0301 	eor.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <TIM2_IRQHandler+0x254>
			Note_Change (END);
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f816 	bl	800083c <Note_Change>
		}

		pressed = false;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <TIM2_IRQHandler+0x270>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
		control_toggled = false;
 8000816:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <TIM2_IRQHandler+0x278>)
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
//	}
//
//	elapsed_times++;

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800081c:	4806      	ldr	r0, [pc, #24]	@ (8000838 <TIM2_IRQHandler+0x27c>)
 800081e:	f003 f84d 	bl	80038bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010800 	.word	0x40010800
 800082c:	20000196 	.word	0x20000196
 8000830:	40010c00 	.word	0x40010c00
 8000834:	20000194 	.word	0x20000194
 8000838:	2000014c 	.word	0x2000014c

0800083c <Note_Change>:

/* USER CODE BEGIN 1 */
void Note_Change (uint8_t value) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	if (value == END) {
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10c      	bne.n	8000866 <Note_Change+0x2a>
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 800084c:	bf00      	nop
 800084e:	4811      	ldr	r0, [pc, #68]	@ (8000894 <Note_Change+0x58>)
 8000850:	f006 f804 	bl	800685c <USBD_MIDI_GetState>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1f9      	bne.n	800084e <Note_Change+0x12>
		USBD_MIDI_SendPackets (&hUsbDeviceFS, off_message, 4);
 800085a:	2204      	movs	r2, #4
 800085c:	490e      	ldr	r1, [pc, #56]	@ (8000898 <Note_Change+0x5c>)
 800085e:	480d      	ldr	r0, [pc, #52]	@ (8000894 <Note_Change+0x58>)
 8000860:	f006 f809 	bl	8006876 <USBD_MIDI_SendPackets>
		off_message [2] = value;

		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
	}
}
 8000864:	e011      	b.n	800088a <Note_Change+0x4e>
		on_message [2] = value;
 8000866:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <Note_Change+0x60>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	7093      	strb	r3, [r2, #2]
		off_message [2] = value;
 800086c:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <Note_Change+0x5c>)
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	7093      	strb	r3, [r2, #2]
		while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 8000872:	bf00      	nop
 8000874:	4807      	ldr	r0, [pc, #28]	@ (8000894 <Note_Change+0x58>)
 8000876:	f005 fff1 	bl	800685c <USBD_MIDI_GetState>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1f9      	bne.n	8000874 <Note_Change+0x38>
		USBD_MIDI_SendPackets (&hUsbDeviceFS, on_message, 4);
 8000880:	2204      	movs	r2, #4
 8000882:	4906      	ldr	r1, [pc, #24]	@ (800089c <Note_Change+0x60>)
 8000884:	4803      	ldr	r0, [pc, #12]	@ (8000894 <Note_Change+0x58>)
 8000886:	f005 fff6 	bl	8006876 <USBD_MIDI_SendPackets>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001e0 	.word	0x200001e0
 8000898:	20000004 	.word	0x20000004
 800089c:	20000000 	.word	0x20000000

080008a0 <Toggle_Control>:

void Toggle_Control () {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	play_toggled = !play_toggled;
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <Toggle_Control+0x50>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	bf14      	ite	ne
 80008ac:	2301      	movne	r3, #1
 80008ae:	2300      	moveq	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f083 0301 	eor.w	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <Toggle_Control+0x50>)
 80008c0:	701a      	strb	r2, [r3, #0]
	PS_message[3] = play_toggled ? PLAY : STOP;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <Toggle_Control+0x50>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <Toggle_Control+0x2e>
 80008ca:	227f      	movs	r2, #127	@ 0x7f
 80008cc:	e000      	b.n	80008d0 <Toggle_Control+0x30>
 80008ce:	2200      	movs	r2, #0
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <Toggle_Control+0x54>)
 80008d2:	70da      	strb	r2, [r3, #3]

	while (USBD_MIDI_GetState (&hUsbDeviceFS) != MIDI_IDLE) {}
 80008d4:	bf00      	nop
 80008d6:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <Toggle_Control+0x58>)
 80008d8:	f005 ffc0 	bl	800685c <USBD_MIDI_GetState>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1f9      	bne.n	80008d6 <Toggle_Control+0x36>
	USBD_MIDI_SendPackets (&hUsbDeviceFS, PS_message, 4);
 80008e2:	2204      	movs	r2, #4
 80008e4:	4903      	ldr	r1, [pc, #12]	@ (80008f4 <Toggle_Control+0x54>)
 80008e6:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <Toggle_Control+0x58>)
 80008e8:	f005 ffc5 	bl	8006876 <USBD_MIDI_SendPackets>
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000195 	.word	0x20000195
 80008f4:	20000008 	.word	0x20000008
 80008f8:	200001e0 	.word	0x200001e0

080008fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000908:	f7ff fff8 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480b      	ldr	r0, [pc, #44]	@ (800093c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800090e:	490c      	ldr	r1, [pc, #48]	@ (8000940 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000910:	4a0c      	ldr	r2, [pc, #48]	@ (8000944 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a09      	ldr	r2, [pc, #36]	@ (8000948 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000924:	4c09      	ldr	r4, [pc, #36]	@ (800094c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000932:	f007 fc6f 	bl	8008214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fc09 	bl	800014c <main>
  bx lr
 800093a:	4770      	bx	lr
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000944:	080082e4 	.word	0x080082e4
  ldr r2, =_sbss
 8000948:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800094c:	20000990 	.word	0x20000990

08000950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_2_IRQHandler>
	...

08000954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <HAL_Init+0x28>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a07      	ldr	r2, [pc, #28]	@ (800097c <HAL_Init+0x28>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 fb35 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096a:	200f      	movs	r0, #15
 800096c:	f000 f808 	bl	8000980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000970:	f7ff fd5c 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40022000 	.word	0x40022000

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_InitTick+0x54>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_InitTick+0x58>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000996:	fbb3 f3f1 	udiv	r3, r3, r1
 800099a:	fbb2 f3f3 	udiv	r3, r2, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fb4d 	bl	800103e <HAL_SYSTICK_Config>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00e      	b.n	80009cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d80a      	bhi.n	80009ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b4:	2200      	movs	r2, #0
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f000 fb15 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c0:	4a06      	ldr	r2, [pc, #24]	@ (80009dc <HAL_InitTick+0x5c>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e000      	b.n	80009cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000000c 	.word	0x2000000c
 80009d8:	20000014 	.word	0x20000014
 80009dc:	20000010 	.word	0x20000010

080009e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <HAL_IncTick+0x1c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <HAL_IncTick+0x20>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4a03      	ldr	r2, [pc, #12]	@ (8000a00 <HAL_IncTick+0x20>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	20000014 	.word	0x20000014
 8000a00:	20000198 	.word	0x20000198

08000a04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b02      	ldr	r3, [pc, #8]	@ (8000a14 <HAL_GetTick+0x10>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000198 	.word	0x20000198

08000a18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e0be      	b.n	8000bb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d109      	bne.n	8000a5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff fd1a 	bl	8000490 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f9ab 	bl	8000db8 <ADC_ConversionStop_Disable>
 8000a62:	4603      	mov	r3, r0
 8000a64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f040 8099 	bne.w	8000ba6 <HAL_ADC_Init+0x18e>
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8095 	bne.w	8000ba6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a84:	f023 0302 	bic.w	r3, r3, #2
 8000a88:	f043 0202 	orr.w	r2, r3, #2
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	7b1b      	ldrb	r3, [r3, #12]
 8000a9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000aa0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ab0:	d003      	beq.n	8000aba <HAL_ADC_Init+0xa2>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d102      	bne.n	8000ac0 <HAL_ADC_Init+0xa8>
 8000aba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000abe:	e000      	b.n	8000ac2 <HAL_ADC_Init+0xaa>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7d1b      	ldrb	r3, [r3, #20]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d119      	bne.n	8000b04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7b1b      	ldrb	r3, [r3, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d109      	bne.n	8000aec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	035a      	lsls	r2, r3, #13
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	e00b      	b.n	8000b04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af0:	f043 0220 	orr.w	r2, r3, #32
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000afc:	f043 0201 	orr.w	r2, r3, #1
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	4b28      	ldr	r3, [pc, #160]	@ (8000bc0 <HAL_ADC_Init+0x1a8>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	68b9      	ldr	r1, [r7, #8]
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b34:	d003      	beq.n	8000b3e <HAL_ADC_Init+0x126>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d104      	bne.n	8000b48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	051b      	lsls	r3, r3, #20
 8000b46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_ADC_Init+0x1ac>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d10b      	bne.n	8000b84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b76:	f023 0303 	bic.w	r3, r3, #3
 8000b7a:	f043 0201 	orr.w	r2, r3, #1
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b82:	e018      	b.n	8000bb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b88:	f023 0312 	bic.w	r3, r3, #18
 8000b8c:	f043 0210 	orr.w	r2, r3, #16
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b98:	f043 0201 	orr.w	r2, r3, #1
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ba4:	e007      	b.n	8000bb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000baa:	f043 0210 	orr.w	r2, r3, #16
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	ffe1f7fd 	.word	0xffe1f7fd
 8000bc4:	ff1f0efe 	.word	0xff1f0efe

08000bc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d101      	bne.n	8000be8 <HAL_ADC_ConfigChannel+0x20>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e0dc      	b.n	8000da2 <HAL_ADC_ConfigChannel+0x1da>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2201      	movs	r2, #1
 8000bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b06      	cmp	r3, #6
 8000bf6:	d81c      	bhi.n	8000c32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	3b05      	subs	r3, #5
 8000c0a:	221f      	movs	r2, #31
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4019      	ands	r1, r3
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	3b05      	subs	r3, #5
 8000c24:	fa00 f203 	lsl.w	r2, r0, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c30:	e03c      	b.n	8000cac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b0c      	cmp	r3, #12
 8000c38:	d81c      	bhi.n	8000c74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	3b23      	subs	r3, #35	@ 0x23
 8000c4c:	221f      	movs	r2, #31
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	4019      	ands	r1, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	6818      	ldr	r0, [r3, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	3b23      	subs	r3, #35	@ 0x23
 8000c66:	fa00 f203 	lsl.w	r2, r0, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c72:	e01b      	b.n	8000cac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	3b41      	subs	r3, #65	@ 0x41
 8000c86:	221f      	movs	r2, #31
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	4019      	ands	r1, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	3b41      	subs	r3, #65	@ 0x41
 8000ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b09      	cmp	r3, #9
 8000cb2:	d91c      	bls.n	8000cee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68d9      	ldr	r1, [r3, #12]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b1e      	subs	r3, #30
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4019      	ands	r1, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6898      	ldr	r0, [r3, #8]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b1e      	subs	r3, #30
 8000ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	e019      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6919      	ldr	r1, [r3, #16]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	2207      	movs	r2, #7
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4019      	ands	r1, r3
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	6898      	ldr	r0, [r3, #8]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	fa00 f203 	lsl.w	r2, r0, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b10      	cmp	r3, #16
 8000d28:	d003      	beq.n	8000d32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d2e:	2b11      	cmp	r3, #17
 8000d30:	d132      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1d      	ldr	r2, [pc, #116]	@ (8000dac <HAL_ADC_ConfigChannel+0x1e4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d125      	bne.n	8000d88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d126      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000d58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b10      	cmp	r3, #16
 8000d60:	d11a      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a13      	ldr	r2, [pc, #76]	@ (8000db4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	0c9a      	lsrs	r2, r3, #18
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d78:	e002      	b.n	8000d80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f9      	bne.n	8000d7a <HAL_ADC_ConfigChannel+0x1b2>
 8000d86:	e007      	b.n	8000d98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d8c:	f043 0220 	orr.w	r2, r3, #32
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40012400 	.word	0x40012400
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	431bde83 	.word	0x431bde83

08000db8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d12e      	bne.n	8000e30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0201 	bic.w	r2, r2, #1
 8000de0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000de2:	f7ff fe0f 	bl	8000a04 <HAL_GetTick>
 8000de6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000de8:	e01b      	b.n	8000e22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000dea:	f7ff fe0b 	bl	8000a04 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d914      	bls.n	8000e22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10d      	bne.n	8000e22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0a:	f043 0210 	orr.w	r2, r3, #16
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e007      	b.n	8000e32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d0dc      	beq.n	8000dea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4906      	ldr	r1, [pc, #24]	@ (8000ed4 <__NVIC_EnableIRQ+0x34>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff90 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff2d 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff42 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff90 	bl	8000f2c <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5f 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff35 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b08b      	sub	sp, #44	@ 0x2c
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106a:	e169      	b.n	8001340 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800106c:	2201      	movs	r2, #1
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 8158 	bne.w	800133a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a9a      	ldr	r2, [pc, #616]	@ (80012f8 <HAL_GPIO_Init+0x2a0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d05e      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 8001094:	4a98      	ldr	r2, [pc, #608]	@ (80012f8 <HAL_GPIO_Init+0x2a0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d875      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 800109a:	4a98      	ldr	r2, [pc, #608]	@ (80012fc <HAL_GPIO_Init+0x2a4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d058      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010a0:	4a96      	ldr	r2, [pc, #600]	@ (80012fc <HAL_GPIO_Init+0x2a4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d86f      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010a6:	4a96      	ldr	r2, [pc, #600]	@ (8001300 <HAL_GPIO_Init+0x2a8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d052      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010ac:	4a94      	ldr	r2, [pc, #592]	@ (8001300 <HAL_GPIO_Init+0x2a8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d869      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010b2:	4a94      	ldr	r2, [pc, #592]	@ (8001304 <HAL_GPIO_Init+0x2ac>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d04c      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010b8:	4a92      	ldr	r2, [pc, #584]	@ (8001304 <HAL_GPIO_Init+0x2ac>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d863      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010be:	4a92      	ldr	r2, [pc, #584]	@ (8001308 <HAL_GPIO_Init+0x2b0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d046      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010c4:	4a90      	ldr	r2, [pc, #576]	@ (8001308 <HAL_GPIO_Init+0x2b0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d85d      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010ca:	2b12      	cmp	r3, #18
 80010cc:	d82a      	bhi.n	8001124 <HAL_GPIO_Init+0xcc>
 80010ce:	2b12      	cmp	r3, #18
 80010d0:	d859      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010d2:	a201      	add	r2, pc, #4	@ (adr r2, 80010d8 <HAL_GPIO_Init+0x80>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	08001153 	.word	0x08001153
 80010dc:	0800112d 	.word	0x0800112d
 80010e0:	0800113f 	.word	0x0800113f
 80010e4:	08001181 	.word	0x08001181
 80010e8:	08001187 	.word	0x08001187
 80010ec:	08001187 	.word	0x08001187
 80010f0:	08001187 	.word	0x08001187
 80010f4:	08001187 	.word	0x08001187
 80010f8:	08001187 	.word	0x08001187
 80010fc:	08001187 	.word	0x08001187
 8001100:	08001187 	.word	0x08001187
 8001104:	08001187 	.word	0x08001187
 8001108:	08001187 	.word	0x08001187
 800110c:	08001187 	.word	0x08001187
 8001110:	08001187 	.word	0x08001187
 8001114:	08001187 	.word	0x08001187
 8001118:	08001187 	.word	0x08001187
 800111c:	08001135 	.word	0x08001135
 8001120:	08001149 	.word	0x08001149
 8001124:	4a79      	ldr	r2, [pc, #484]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800112a:	e02c      	b.n	8001186 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e029      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	3304      	adds	r3, #4
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e024      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	3308      	adds	r3, #8
 8001144:	623b      	str	r3, [r7, #32]
          break;
 8001146:	e01f      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	330c      	adds	r3, #12
 800114e:	623b      	str	r3, [r7, #32]
          break;
 8001150:	e01a      	b.n	8001188 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800115a:	2304      	movs	r3, #4
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e013      	b.n	8001188 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d105      	bne.n	8001174 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001168:	2308      	movs	r3, #8
 800116a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	611a      	str	r2, [r3, #16]
          break;
 8001172:	e009      	b.n	8001188 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001174:	2308      	movs	r3, #8
 8001176:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	615a      	str	r2, [r3, #20]
          break;
 800117e:	e003      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	e000      	b.n	8001188 <HAL_GPIO_Init+0x130>
          break;
 8001186:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2bff      	cmp	r3, #255	@ 0xff
 800118c:	d801      	bhi.n	8001192 <HAL_GPIO_Init+0x13a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	e001      	b.n	8001196 <HAL_GPIO_Init+0x13e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3304      	adds	r3, #4
 8001196:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2bff      	cmp	r3, #255	@ 0xff
 800119c:	d802      	bhi.n	80011a4 <HAL_GPIO_Init+0x14c>
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	e002      	b.n	80011aa <HAL_GPIO_Init+0x152>
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	3b08      	subs	r3, #8
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	210f      	movs	r1, #15
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	401a      	ands	r2, r3
 80011bc:	6a39      	ldr	r1, [r7, #32]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 80b1 	beq.w	800133a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011f0:	4a48      	ldr	r2, [pc, #288]	@ (8001314 <HAL_GPIO_Init+0x2bc>)
 80011f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a40      	ldr	r2, [pc, #256]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d013      	beq.n	8001244 <HAL_GPIO_Init+0x1ec>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a3f      	ldr	r2, [pc, #252]	@ (800131c <HAL_GPIO_Init+0x2c4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d00d      	beq.n	8001240 <HAL_GPIO_Init+0x1e8>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a3e      	ldr	r2, [pc, #248]	@ (8001320 <HAL_GPIO_Init+0x2c8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d007      	beq.n	800123c <HAL_GPIO_Init+0x1e4>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a3d      	ldr	r2, [pc, #244]	@ (8001324 <HAL_GPIO_Init+0x2cc>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d101      	bne.n	8001238 <HAL_GPIO_Init+0x1e0>
 8001234:	2303      	movs	r3, #3
 8001236:	e006      	b.n	8001246 <HAL_GPIO_Init+0x1ee>
 8001238:	2304      	movs	r3, #4
 800123a:	e004      	b.n	8001246 <HAL_GPIO_Init+0x1ee>
 800123c:	2302      	movs	r3, #2
 800123e:	e002      	b.n	8001246 <HAL_GPIO_Init+0x1ee>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <HAL_GPIO_Init+0x1ee>
 8001244:	2300      	movs	r3, #0
 8001246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001248:	f002 0203 	and.w	r2, r2, #3
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	4093      	lsls	r3, r2
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001256:	492f      	ldr	r1, [pc, #188]	@ (8001314 <HAL_GPIO_Init+0x2bc>)
 8001258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001270:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	492c      	ldr	r1, [pc, #176]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	608b      	str	r3, [r1, #8]
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800127e:	4b2a      	ldr	r3, [pc, #168]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	43db      	mvns	r3, r3
 8001286:	4928      	ldr	r1, [pc, #160]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 8001288:	4013      	ands	r3, r2
 800128a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001298:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	4922      	ldr	r1, [pc, #136]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	60cb      	str	r3, [r1, #12]
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	491e      	ldr	r1, [pc, #120]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012c0:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4918      	ldr	r1, [pc, #96]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4914      	ldr	r1, [pc, #80]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 80012d8:	4013      	ands	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d021      	beq.n	800132c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	490e      	ldr	r1, [pc, #56]	@ (8001328 <HAL_GPIO_Init+0x2d0>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
 80012f4:	e021      	b.n	800133a <HAL_GPIO_Init+0x2e2>
 80012f6:	bf00      	nop
 80012f8:	10320000 	.word	0x10320000
 80012fc:	10310000 	.word	0x10310000
 8001300:	10220000 	.word	0x10220000
 8001304:	10210000 	.word	0x10210000
 8001308:	10120000 	.word	0x10120000
 800130c:	10110000 	.word	0x10110000
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000
 8001318:	40010800 	.word	0x40010800
 800131c:	40010c00 	.word	0x40010c00
 8001320:	40011000 	.word	0x40011000
 8001324:	40011400 	.word	0x40011400
 8001328:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_GPIO_Init+0x304>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	43db      	mvns	r3, r3
 8001334:	4909      	ldr	r1, [pc, #36]	@ (800135c <HAL_GPIO_Init+0x304>)
 8001336:	4013      	ands	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	3301      	adds	r3, #1
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	f47f ae8e 	bne.w	800106c <HAL_GPIO_Init+0x14>
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	372c      	adds	r7, #44	@ 0x2c
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e001      	b.n	8001382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0e8      	b.n	8001572 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d106      	bne.n	80013ba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f006 fc99 	bl	8007cec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fdf0 	bl	8003fb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3304      	adds	r3, #4
 80013da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013dc:	f002 fdc6 	bl	8003f6c <USB_CoreInit>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2202      	movs	r2, #2
 80013ea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0bf      	b.n	8001572 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fdf4 	bl	8003fe6 <USB_SetCurrentMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b0      	b.n	8001572 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e03e      	b.n	8001494 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	3311      	adds	r3, #17
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	3310      	adds	r3, #16
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	3313      	adds	r3, #19
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	3320      	adds	r3, #32
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	440b      	add	r3, r1
 8001474:	3324      	adds	r3, #36	@ 0x24
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	3301      	adds	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	791b      	ldrb	r3, [r3, #4]
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	429a      	cmp	r2, r3
 800149c:	d3bb      	bcc.n	8001416 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e044      	b.n	800152e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	3301      	adds	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3b5      	bcc.n	80014a4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3304      	adds	r3, #4
 8001540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001542:	f002 fd5c 	bl	8003ffe <USB_DevInit>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e00c      	b.n	8001572 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f004 ffdb 	bl	8006526 <USB_DevDisconnect>

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_PCD_Start+0x16>
 800158c:	2302      	movs	r3, #2
 800158e:	e016      	b.n	80015be <HAL_PCD_Start+0x44>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fcf2 	bl	8003f86 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80015a2:	2101      	movs	r1, #1
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f006 fdf6 	bl	8008196 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 ffaf 	bl	8006512 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b088      	sub	sp, #32
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 ffb1 	bl	800653a <USB_ReadInterrupts>
 80015d8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fb1a 	bl	8001c1e <PCD_EP_ISR_Handler>

    return;
 80015ea:	e119      	b.n	8001820 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d013      	beq.n	800161e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f006 fbe7 	bl	8007de2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001614:	2100      	movs	r1, #0
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f905 	bl	8001826 <HAL_PCD_SetAddress>

    return;
 800161c:	e100      	b.n	8001820 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00c      	beq.n	8001642 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001630:	b29a      	uxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800163a:	b292      	uxth	r2, r2
 800163c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001640:	e0ee      	b.n	8001820 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00c      	beq.n	8001666 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001654:	b29a      	uxth	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800165e:	b292      	uxth	r2, r2
 8001660:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001664:	e0dc      	b.n	8001820 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d027      	beq.n	80016c0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001678:	b29a      	uxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	b292      	uxth	r2, r2
 8001684:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001690:	b29a      	uxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0208 	bic.w	r2, r2, #8
 800169a:	b292      	uxth	r2, r2
 800169c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f006 fbd7 	bl	8007e54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016b8:	b292      	uxth	r2, r2
 80016ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80016be:	e0af      	b.n	8001820 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8083 	beq.w	80017d2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
 80016d0:	e010      	b.n	80016f4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	7ffb      	ldrb	r3, [r7, #31]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	441a      	add	r2, r3
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	8812      	ldrh	r2, [r2, #0]
 80016e2:	b292      	uxth	r2, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	3320      	adds	r3, #32
 80016e8:	443b      	add	r3, r7
 80016ea:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80016ee:	7ffb      	ldrb	r3, [r7, #31]
 80016f0:	3301      	adds	r3, #1
 80016f2:	77fb      	strb	r3, [r7, #31]
 80016f4:	7ffb      	ldrb	r3, [r7, #31]
 80016f6:	2b07      	cmp	r3, #7
 80016f8:	d9eb      	bls.n	80016d2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0201 	orr.w	r2, r2, #1
 800170c:	b292      	uxth	r2, r2
 800170e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	b292      	uxth	r2, r2
 8001726:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800172a:	bf00      	nop
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001734:	b29b      	uxth	r3, r3
 8001736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f6      	beq.n	800172c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001746:	b29a      	uxth	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001750:	b292      	uxth	r2, r2
 8001752:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001756:	2300      	movs	r3, #0
 8001758:	77fb      	strb	r3, [r7, #31]
 800175a:	e00f      	b.n	800177c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800175c:	7ffb      	ldrb	r3, [r7, #31]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	4611      	mov	r1, r2
 8001764:	7ffa      	ldrb	r2, [r7, #31]
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	440a      	add	r2, r1
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	3320      	adds	r3, #32
 800176e:	443b      	add	r3, r7
 8001770:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001774:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001776:	7ffb      	ldrb	r3, [r7, #31]
 8001778:	3301      	adds	r3, #1
 800177a:	77fb      	strb	r3, [r7, #31]
 800177c:	7ffb      	ldrb	r3, [r7, #31]
 800177e:	2b07      	cmp	r3, #7
 8001780:	d9ec      	bls.n	800175c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0208 	orr.w	r2, r2, #8
 8001794:	b292      	uxth	r2, r2
 8001796:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017ac:	b292      	uxth	r2, r2
 80017ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0204 	orr.w	r2, r2, #4
 80017c4:	b292      	uxth	r2, r2
 80017c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f006 fb28 	bl	8007e20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017d0:	e026      	b.n	8001820 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00f      	beq.n	80017fc <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017ee:	b292      	uxth	r2, r2
 80017f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f006 fae6 	bl	8007dc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017fa:	e011      	b.n	8001820 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00c      	beq.n	8001820 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001818:	b292      	uxth	r2, r2
 800181a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800181e:	bf00      	nop
  }
}
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_PCD_SetAddress+0x1a>
 800183c:	2302      	movs	r3, #2
 800183e:	e012      	b.n	8001866 <HAL_PCD_SetAddress+0x40>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f004 fe48 	bl	80064ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b084      	sub	sp, #16
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	4608      	mov	r0, r1
 8001878:	4611      	mov	r1, r2
 800187a:	461a      	mov	r2, r3
 800187c:	4603      	mov	r3, r0
 800187e:	70fb      	strb	r3, [r7, #3]
 8001880:	460b      	mov	r3, r1
 8001882:	803b      	strh	r3, [r7, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800188c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001890:	2b00      	cmp	r3, #0
 8001892:	da0e      	bge.n	80018b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	f003 0207 	and.w	r2, r3, #7
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	3310      	adds	r3, #16
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	705a      	strb	r2, [r3, #1]
 80018b0:	e00e      	b.n	80018d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	f003 0207 	and.w	r2, r3, #7
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018dc:	883a      	ldrh	r2, [r7, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	78ba      	ldrb	r2, [r7, #2]
 80018e6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018e8:	78bb      	ldrb	r3, [r7, #2]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d102      	bne.n	80018f4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_PCD_EP_Open+0x94>
 80018fe:	2302      	movs	r3, #2
 8001900:	e00e      	b.n	8001920 <HAL_PCD_EP_Open+0xb2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fb91 	bl	8004038 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800191e:	7afb      	ldrb	r3, [r7, #11]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001938:	2b00      	cmp	r3, #0
 800193a:	da0e      	bge.n	800195a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	f003 0207 	and.w	r2, r3, #7
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	3310      	adds	r3, #16
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	705a      	strb	r2, [r3, #1]
 8001958:	e00e      	b.n	8001978 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	f003 0207 	and.w	r2, r3, #7
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_PCD_EP_Close+0x6a>
 800198e:	2302      	movs	r3, #2
 8001990:	e00e      	b.n	80019b0 <HAL_PCD_EP_Close+0x88>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68f9      	ldr	r1, [r7, #12]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 ff09 	bl	80047b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	460b      	mov	r3, r1
 80019c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	f003 0207 	and.w	r2, r3, #7
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4413      	add	r3, r2
 80019de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2200      	movs	r2, #0
 80019f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f8:	7afb      	ldrb	r3, [r7, #11]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6979      	ldr	r1, [r7, #20]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 f8c0 	bl	8004b90 <USB_EPStartXfer>

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	f003 0207 	and.w	r2, r3, #7
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001a3c:	681b      	ldr	r3, [r3, #0]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	460b      	mov	r3, r1
 8001a56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	f003 0207 	and.w	r2, r3, #7
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	3310      	adds	r3, #16
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2201      	movs	r2, #1
 8001a92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a94:	7afb      	ldrb	r3, [r7, #11]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6979      	ldr	r1, [r7, #20]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 f872 	bl	8004b90 <USB_EPStartXfer>

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	7912      	ldrb	r2, [r2, #4]
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e04c      	b.n	8001b6e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da0e      	bge.n	8001afa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	f003 0207 	and.w	r2, r3, #7
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	3310      	adds	r3, #16
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	705a      	strb	r2, [r3, #1]
 8001af8:	e00c      	b.n	8001b14 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2201      	movs	r2, #1
 8001b18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_PCD_EP_SetStall+0x7e>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e01c      	b.n	8001b6e <HAL_PCD_EP_SetStall+0xb8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 fbd5 	bl	80062f2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d108      	bne.n	8001b64 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f004 fcfa 	bl	8006558 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	7912      	ldrb	r2, [r2, #4]
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e040      	b.n	8001c16 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da0e      	bge.n	8001bba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	3310      	adds	r3, #16
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	705a      	strb	r2, [r3, #1]
 8001bb8:	e00e      	b.n	8001bd8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 0207 	and.w	r2, r3, #7
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_PCD_EP_ClrStall+0x82>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e00e      	b.n	8001c16 <HAL_PCD_EP_ClrStall+0xa0>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 fbc3 	bl	8006392 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b096      	sub	sp, #88	@ 0x58
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c26:	e3bb      	b.n	80023a0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001c42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 8175 	bne.w	8001f36 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d14e      	bne.n	8001cf6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c68:	81fb      	strh	r3, [r7, #14]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3310      	adds	r3, #16
 8001c80:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	3302      	adds	r3, #2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	441a      	add	r2, r3
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f006 f867 	bl	8007d92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7b5b      	ldrb	r3, [r3, #13]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8368 	beq.w	80023a0 <PCD_EP_ISR_Handler+0x782>
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f040 8363 	bne.w	80023a0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7b5b      	ldrb	r3, [r3, #13]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	735a      	strb	r2, [r3, #13]
 8001cf4:	e354      	b.n	80023a0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cfc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d034      	beq.n	8001d7e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	3306      	adds	r3, #6
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d50:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f004 fc50 	bl	80065f8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001d64:	4013      	ands	r3, r2
 8001d66:	823b      	strh	r3, [r7, #16]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	8a3a      	ldrh	r2, [r7, #16]
 8001d6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d72:	b292      	uxth	r2, r2
 8001d74:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f005 ffde 	bl	8007d38 <HAL_PCD_SetupStageCallback>
 8001d7c:	e310      	b.n	80023a0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d7e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f280 830c 	bge.w	80023a0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001d94:	4013      	ands	r3, r2
 8001d96:	83fb      	strh	r3, [r7, #30]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	8bfa      	ldrh	r2, [r7, #30]
 8001d9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001da2:	b292      	uxth	r2, r2
 8001da4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	3306      	adds	r3, #6
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d019      	beq.n	8001e0e <PCD_EP_ISR_Handler+0x1f0>
 8001dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d015      	beq.n	8001e0e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de8:	6959      	ldr	r1, [r3, #20]
 8001dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f004 fc00 	bl	80065f8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	441a      	add	r2, r3
 8001e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e04:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e06:	2100      	movs	r1, #0
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f005 ffa7 	bl	8007d5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f040 82bd 	bne.w	80023a0 <PCD_EP_ISR_Handler+0x782>
 8001e26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e2a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001e2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001e32:	f000 82b5 	beq.w	80023a0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e6c:	d91d      	bls.n	8001eaa <PCD_EP_ISR_Handler+0x28c>
 8001e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <PCD_EP_ISR_Handler+0x26a>
 8001e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e84:	3b01      	subs	r3, #1
 8001e86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	801a      	strh	r2, [r3, #0]
 8001ea8:	e026      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x2da>
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10a      	bne.n	8001ec8 <PCD_EP_ISR_Handler+0x2aa>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	801a      	strh	r2, [r3, #0]
 8001ec6:	e017      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x2da>
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <PCD_EP_ISR_Handler+0x2c4>
 8001edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ede:	3301      	adds	r3, #1
 8001ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f08:	827b      	strh	r3, [r7, #18]
 8001f0a:	8a7b      	ldrh	r3, [r7, #18]
 8001f0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001f10:	827b      	strh	r3, [r7, #18]
 8001f12:	8a7b      	ldrh	r3, [r7, #18]
 8001f14:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f18:	827b      	strh	r3, [r7, #18]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	8a7b      	ldrh	r3, [r7, #18]
 8001f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	8013      	strh	r3, [r2, #0]
 8001f34:	e234      	b.n	80023a0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f4a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f280 80fc 	bge.w	800214c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001f82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f86:	b292      	uxth	r2, r2
 8001f88:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f8a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa2:	7b1b      	ldrb	r3, [r3, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d125      	bne.n	8001ff4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	3306      	adds	r3, #6
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001fd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8092 	beq.w	8002102 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe4:	6959      	ldr	r1, [r3, #20]
 8001fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe8:	88da      	ldrh	r2, [r3, #6]
 8001fea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fee:	f004 fb03 	bl	80065f8 <USB_ReadPMA>
 8001ff2:	e086      	b.n	8002102 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff6:	78db      	ldrb	r3, [r3, #3]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d10a      	bne.n	8002012 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ffc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002000:	461a      	mov	r2, r3
 8002002:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f9d9 	bl	80023bc <HAL_PCD_EP_DB_Receive>
 800200a:	4603      	mov	r3, r0
 800200c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002010:	e077      	b.n	8002102 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800202c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	441a      	add	r2, r3
 800203e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800204a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800204e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002052:	b29b      	uxth	r3, r3
 8002054:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d024      	beq.n	80020ba <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	3302      	adds	r3, #2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002098:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800209c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d02e      	beq.n	8002102 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020aa:	6959      	ldr	r1, [r3, #20]
 80020ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ae:	891a      	ldrh	r2, [r3, #8]
 80020b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020b4:	f004 faa0 	bl	80065f8 <USB_ReadPMA>
 80020b8:	e023      	b.n	8002102 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	3306      	adds	r3, #6
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80020e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f4:	6959      	ldr	r1, [r3, #20]
 80020f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f8:	895a      	ldrh	r2, [r3, #10]
 80020fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020fe:	f004 fa7b 	bl	80065f8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800210a:	441a      	add	r2, r3
 800210c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002118:	441a      	add	r2, r3
 800211a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800211e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <PCD_EP_ISR_Handler+0x514>
 8002126:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800212a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	d206      	bcs.n	8002140 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f005 fe0f 	bl	8007d5c <HAL_PCD_DataOutStageCallback>
 800213e:	e005      	b.n	800214c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002146:	4618      	mov	r0, r3
 8002148:	f002 fd22 	bl	8004b90 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800214c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8123 	beq.w	80023a0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800215a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	3310      	adds	r3, #16
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002188:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	441a      	add	r2, r3
 800219a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800219e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80021aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ac:	78db      	ldrb	r3, [r3, #3]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	f040 80a2 	bne.w	80022f8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80021b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80021ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021bc:	7b1b      	ldrb	r3, [r3, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8093 	beq.w	80022ea <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d046      	beq.n	800225e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d126      	bne.n	8002226 <PCD_EP_ISR_Handler+0x608>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	4413      	add	r3, r2
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80021f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	011a      	lsls	r2, r3, #4
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	4413      	add	r3, r2
 80021fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021fe:	623b      	str	r3, [r7, #32]
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220a:	b29a      	uxth	r2, r3
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	801a      	strh	r2, [r3, #0]
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800221e:	b29a      	uxth	r2, r3
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	801a      	strh	r2, [r3, #0]
 8002224:	e061      	b.n	80022ea <PCD_EP_ISR_Handler+0x6cc>
 8002226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d15d      	bne.n	80022ea <PCD_EP_ISR_Handler+0x6cc>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002242:	4413      	add	r3, r2
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	011a      	lsls	r2, r3, #4
 800224c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224e:	4413      	add	r3, r2
 8002250:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002254:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002258:	2200      	movs	r2, #0
 800225a:	801a      	strh	r2, [r3, #0]
 800225c:	e045      	b.n	80022ea <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d126      	bne.n	80022ba <PCD_EP_ISR_Handler+0x69c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	637b      	str	r3, [r7, #52]	@ 0x34
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002280:	4413      	add	r3, r2
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
 8002284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	011a      	lsls	r2, r3, #4
 800228a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228c:	4413      	add	r3, r2
 800228e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30
 8002294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229e:	b29a      	uxth	r2, r3
 80022a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a2:	801a      	strh	r2, [r3, #0]
 80022a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b6:	801a      	strh	r2, [r3, #0]
 80022b8:	e017      	b.n	80022ea <PCD_EP_ISR_Handler+0x6cc>
 80022ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022bc:	785b      	ldrb	r3, [r3, #1]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d113      	bne.n	80022ea <PCD_EP_ISR_Handler+0x6cc>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022d0:	4413      	add	r3, r2
 80022d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	011a      	lsls	r2, r3, #4
 80022da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022dc:	4413      	add	r3, r2
 80022de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e6:	2200      	movs	r2, #0
 80022e8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f005 fd4e 	bl	8007d92 <HAL_PCD_DataInStageCallback>
 80022f6:	e053      	b.n	80023a0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80022f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d146      	bne.n	8002392 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	3302      	adds	r3, #2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002338:	429a      	cmp	r2, r3
 800233a:	d907      	bls.n	800234c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800233c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002344:	1ad2      	subs	r2, r2, r3
 8002346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002348:	619a      	str	r2, [r3, #24]
 800234a:	e002      	b.n	8002352 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800234c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800235a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f005 fd16 	bl	8007d92 <HAL_PCD_DataInStageCallback>
 8002366:	e01b      	b.n	80023a0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002370:	441a      	add	r2, r3
 8002372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002374:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800237e:	441a      	add	r2, r3
 8002380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002382:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fc00 	bl	8004b90 <USB_EPStartXfer>
 8002390:	e006      	b.n	80023a0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002392:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002396:	461a      	mov	r2, r3
 8002398:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f91b 	bl	80025d6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f6ff ac3b 	blt.w	8001c28 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3758      	adds	r7, #88	@ 0x58
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d07e      	beq.n	80024d2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	3302      	adds	r3, #2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	8b7b      	ldrh	r3, [r7, #26]
 8002404:	429a      	cmp	r2, r3
 8002406:	d306      	bcc.n	8002416 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	699a      	ldr	r2, [r3, #24]
 800240c:	8b7b      	ldrh	r3, [r7, #26]
 800240e:	1ad2      	subs	r2, r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	619a      	str	r2, [r3, #24]
 8002414:	e002      	b.n	800241c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d123      	bne.n	800246c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800243a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243e:	833b      	strh	r3, [r7, #24]
 8002440:	8b3b      	ldrh	r3, [r7, #24]
 8002442:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002446:	833b      	strh	r3, [r7, #24]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	441a      	add	r2, r3
 8002456:	8b3b      	ldrh	r3, [r7, #24]
 8002458:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800245c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002468:	b29b      	uxth	r3, r3
 800246a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d01f      	beq.n	80024b6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800248c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002490:	82fb      	strh	r3, [r7, #22]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	441a      	add	r2, r3
 80024a0:	8afb      	ldrh	r3, [r7, #22]
 80024a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024b6:	8b7b      	ldrh	r3, [r7, #26]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8087 	beq.w	80025cc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	6959      	ldr	r1, [r3, #20]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	891a      	ldrh	r2, [r3, #8]
 80024ca:	8b7b      	ldrh	r3, [r7, #26]
 80024cc:	f004 f894 	bl	80065f8 <USB_ReadPMA>
 80024d0:	e07c      	b.n	80025cc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	3306      	adds	r3, #6
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	8b7b      	ldrh	r3, [r7, #26]
 8002502:	429a      	cmp	r2, r3
 8002504:	d306      	bcc.n	8002514 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	8b7b      	ldrh	r3, [r7, #26]
 800250c:	1ad2      	subs	r2, r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	619a      	str	r2, [r3, #24]
 8002512:	e002      	b.n	800251a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d123      	bne.n	800256a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800253c:	83fb      	strh	r3, [r7, #30]
 800253e:	8bfb      	ldrh	r3, [r7, #30]
 8002540:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002544:	83fb      	strh	r3, [r7, #30]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	441a      	add	r2, r3
 8002554:	8bfb      	ldrh	r3, [r7, #30]
 8002556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800255a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800255e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002566:	b29b      	uxth	r3, r3
 8002568:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d11f      	bne.n	80025b4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800258a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258e:	83bb      	strh	r3, [r7, #28]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	441a      	add	r2, r3
 800259e:	8bbb      	ldrh	r3, [r7, #28]
 80025a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025b4:	8b7b      	ldrh	r3, [r7, #26]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	6959      	ldr	r1, [r3, #20]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	895a      	ldrh	r2, [r3, #10]
 80025c6:	8b7b      	ldrh	r3, [r7, #26]
 80025c8:	f004 f816 	bl	80065f8 <USB_ReadPMA>
    }
  }

  return count;
 80025cc:	8b7b      	ldrh	r3, [r7, #26]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b0a4      	sub	sp, #144	@ 0x90
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	4613      	mov	r3, r2
 80025e2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 81dd 	beq.w	80029aa <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	3302      	adds	r3, #2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002618:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	699a      	ldr	r2, [r3, #24]
 8002620:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002624:	429a      	cmp	r2, r3
 8002626:	d907      	bls.n	8002638 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002630:	1ad2      	subs	r2, r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	619a      	str	r2, [r3, #24]
 8002636:	e002      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 80b9 	bne.w	80027ba <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	785b      	ldrb	r3, [r3, #1]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d126      	bne.n	800269e <HAL_PCD_EP_DB_Transmit+0xc8>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800265e:	b29b      	uxth	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002664:	4413      	add	r3, r2
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	011a      	lsls	r2, r3, #4
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	4413      	add	r3, r2
 8002672:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002676:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002682:	b29a      	uxth	r2, r3
 8002684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002696:	b29a      	uxth	r2, r3
 8002698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269a:	801a      	strh	r2, [r3, #0]
 800269c:	e01a      	b.n	80026d4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d116      	bne.n	80026d4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ba:	4413      	add	r3, r2
 80026bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	011a      	lsls	r2, r3, #4
 80026c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c6:	4413      	add	r3, r2
 80026c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80026ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d0:	2200      	movs	r2, #0
 80026d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	785b      	ldrb	r3, [r3, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d126      	bne.n	8002730 <HAL_PCD_EP_DB_Transmit+0x15a>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	011a      	lsls	r2, r3, #4
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002714:	b29a      	uxth	r2, r3
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	801a      	strh	r2, [r3, #0]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002728:	b29a      	uxth	r2, r3
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	e017      	b.n	8002760 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d113      	bne.n	8002760 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002740:	b29b      	uxth	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	4413      	add	r3, r2
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	011a      	lsls	r2, r3, #4
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	4413      	add	r3, r2
 8002754:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002758:	623b      	str	r3, [r7, #32]
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	2200      	movs	r2, #0
 800275e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f005 fb13 	bl	8007d92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 82fc 	beq.w	8002d70 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800278e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002792:	82fb      	strh	r3, [r7, #22]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	441a      	add	r2, r3
 80027a2:	8afb      	ldrh	r3, [r7, #22]
 80027a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	8013      	strh	r3, [r2, #0]
 80027b8:	e2da      	b.n	8002d70 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d021      	beq.n	8002808 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027de:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	441a      	add	r2, r3
 80027f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80027f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002804:	b29b      	uxth	r3, r3
 8002806:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800280e:	2b01      	cmp	r3, #1
 8002810:	f040 82ae 	bne.w	8002d70 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800281c:	441a      	add	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800282a:	441a      	add	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6a1a      	ldr	r2, [r3, #32]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	429a      	cmp	r2, r3
 800283a:	d30b      	bcc.n	8002854 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800284c:	1ad2      	subs	r2, r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	621a      	str	r2, [r3, #32]
 8002852:	e017      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d108      	bne.n	800286e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800285c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002860:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800286c:	e00a      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2200      	movs	r2, #0
 8002882:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d165      	bne.n	8002958 <HAL_PCD_EP_DB_Transmit+0x382>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a0:	4413      	add	r3, r2
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	011a      	lsls	r2, r3, #4
 80028aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ac:	4413      	add	r3, r2
 80028ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80028b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028be:	b29a      	uxth	r2, r3
 80028c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c2:	801a      	strh	r2, [r3, #0]
 80028c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80028ca:	d91d      	bls.n	8002908 <HAL_PCD_EP_DB_Transmit+0x332>
 80028cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x310>
 80028e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028e2:	3b01      	subs	r3, #1
 80028e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	029b      	lsls	r3, r3, #10
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002900:	b29a      	uxth	r2, r3
 8002902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	e044      	b.n	8002992 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002908:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <HAL_PCD_EP_DB_Transmit+0x350>
 8002910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800291e:	b29a      	uxth	r2, r3
 8002920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	e035      	b.n	8002992 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002926:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800292e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_PCD_EP_DB_Transmit+0x36a>
 800293a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800293c:	3301      	adds	r3, #1
 800293e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29a      	uxth	r2, r3
 8002946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002948:	b29b      	uxth	r3, r3
 800294a:	029b      	lsls	r3, r3, #10
 800294c:	b29b      	uxth	r3, r3
 800294e:	4313      	orrs	r3, r2
 8002950:	b29a      	uxth	r2, r3
 8002952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	e01c      	b.n	8002992 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d118      	bne.n	8002992 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	647b      	str	r3, [r7, #68]	@ 0x44
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002974:	4413      	add	r3, r2
 8002976:	647b      	str	r3, [r7, #68]	@ 0x44
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	011a      	lsls	r2, r3, #4
 800297e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002980:	4413      	add	r3, r2
 8002982:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002986:	643b      	str	r3, [r7, #64]	@ 0x40
 8002988:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800298c:	b29a      	uxth	r2, r3
 800298e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002990:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	6959      	ldr	r1, [r3, #20]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	891a      	ldrh	r2, [r3, #8]
 800299e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f003 fde3 	bl	800656e <USB_WritePMA>
 80029a8:	e1e2      	b.n	8002d70 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	3306      	adds	r3, #6
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029de:	429a      	cmp	r2, r3
 80029e0:	d307      	bcc.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029ea:	1ad2      	subs	r2, r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	619a      	str	r2, [r3, #24]
 80029f0:	e002      	b.n	80029f8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f040 80c0 	bne.w	8002b82 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d126      	bne.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x482>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a1e:	4413      	add	r3, r2
 8002a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	011a      	lsls	r2, r3, #4
 8002a28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a54:	801a      	strh	r2, [r3, #0]
 8002a56:	e01a      	b.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d116      	bne.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a74:	4413      	add	r3, r2
 8002a76:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	011a      	lsls	r2, r3, #4
 8002a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a80:	4413      	add	r3, r2
 8002a82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a86:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d12b      	bne.n	8002af4 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab0:	4413      	add	r3, r2
 8002ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	011a      	lsls	r2, r3, #4
 8002aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002abc:	4413      	add	r3, r2
 8002abe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ac2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ad8:	801a      	strh	r2, [r3, #0]
 8002ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002af0:	801a      	strh	r2, [r3, #0]
 8002af2:	e017      	b.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	785b      	ldrb	r3, [r3, #1]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d113      	bne.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b0a:	4413      	add	r3, r2
 8002b0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	011a      	lsls	r2, r3, #4
 8002b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b16:	4413      	add	r3, r2
 8002b18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b20:	2200      	movs	r2, #0
 8002b22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f005 f931 	bl	8007d92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 811a 	bne.w	8002d70 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b56:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	441a      	add	r2, r3
 8002b68:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	8013      	strh	r3, [r2, #0]
 8002b80:	e0f6      	b.n	8002d70 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d121      	bne.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	441a      	add	r2, r3
 8002bb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	f040 80ca 	bne.w	8002d70 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002be4:	441a      	add	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	6a1a      	ldr	r2, [r3, #32]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d30b      	bcc.n	8002c1c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	6a1a      	ldr	r2, [r3, #32]
 8002c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c14:	1ad2      	subs	r2, r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	621a      	str	r2, [r3, #32]
 8002c1a:	e017      	b.n	8002c4c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d108      	bne.n	8002c36 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002c24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002c34:	e00a      	b.n	8002c4c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d165      	bne.n	8002d26 <HAL_PCD_EP_DB_Transmit+0x750>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c6e:	4413      	add	r3, r2
 8002c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	011a      	lsls	r2, r3, #4
 8002c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c96:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c98:	d91d      	bls.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x700>
 8002c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002cae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	029b      	lsls	r3, r3, #10
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	e041      	b.n	8002d5a <HAL_PCD_EP_DB_Transmit+0x784>
 8002cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002cde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cf0:	801a      	strh	r2, [r3, #0]
 8002cf2:	e032      	b.n	8002d5a <HAL_PCD_EP_DB_Transmit+0x784>
 8002cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x738>
 8002d08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	029b      	lsls	r3, r3, #10
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d22:	801a      	strh	r2, [r3, #0]
 8002d24:	e019      	b.n	8002d5a <HAL_PCD_EP_DB_Transmit+0x784>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	785b      	ldrb	r3, [r3, #1]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d115      	bne.n	8002d5a <HAL_PCD_EP_DB_Transmit+0x784>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3c:	4413      	add	r3, r2
 8002d3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	011a      	lsls	r2, r3, #4
 8002d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d48:	4413      	add	r3, r2
 8002d4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d58:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	6959      	ldr	r1, [r3, #20]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	895a      	ldrh	r2, [r3, #10]
 8002d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f003 fbff 	bl	800656e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d8a:	82bb      	strh	r3, [r7, #20]
 8002d8c:	8abb      	ldrh	r3, [r7, #20]
 8002d8e:	f083 0310 	eor.w	r3, r3, #16
 8002d92:	82bb      	strh	r3, [r7, #20]
 8002d94:	8abb      	ldrh	r3, [r7, #20]
 8002d96:	f083 0320 	eor.w	r3, r3, #32
 8002d9a:	82bb      	strh	r3, [r7, #20]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	441a      	add	r2, r3
 8002daa:	8abb      	ldrh	r3, [r7, #20]
 8002dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3790      	adds	r7, #144	@ 0x90
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b087      	sub	sp, #28
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ddc:	897b      	ldrh	r3, [r7, #10]
 8002dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de8:	897b      	ldrh	r3, [r7, #10]
 8002dea:	f003 0207 	and.w	r2, r3, #7
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	3310      	adds	r3, #16
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e009      	b.n	8002e14 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e00:	897a      	ldrh	r2, [r7, #10]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4413      	add	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e14:	893b      	ldrh	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	80da      	strh	r2, [r3, #6]
 8002e28:	e00b      	b.n	8002e42 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	0c1b      	lsrs	r3, r3, #16
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e272      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8087 	beq.w	8002f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e70:	4b92      	ldr	r3, [pc, #584]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d00c      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e7c:	4b8f      	ldr	r3, [pc, #572]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d112      	bne.n	8002eae <HAL_RCC_OscConfig+0x5e>
 8002e88:	4b8c      	ldr	r3, [pc, #560]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e94:	d10b      	bne.n	8002eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e96:	4b89      	ldr	r3, [pc, #548]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d06c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x12c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d168      	bne.n	8002f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e24c      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x76>
 8002eb8:	4b80      	ldr	r3, [pc, #512]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a7f      	ldr	r2, [pc, #508]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	e02e      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x98>
 8002ece:	4b7b      	ldr	r3, [pc, #492]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a7a      	ldr	r2, [pc, #488]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b78      	ldr	r3, [pc, #480]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a77      	ldr	r2, [pc, #476]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e01d      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0xbc>
 8002ef2:	4b72      	ldr	r3, [pc, #456]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a71      	ldr	r2, [pc, #452]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b6f      	ldr	r3, [pc, #444]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6e      	ldr	r2, [pc, #440]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a6a      	ldr	r2, [pc, #424]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b68      	ldr	r3, [pc, #416]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a67      	ldr	r2, [pc, #412]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fd fd6a 	bl	8000a04 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fd fd66 	bl	8000a04 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	@ 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e200      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	4b5d      	ldr	r3, [pc, #372]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0xe4>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fd fd56 	bl	8000a04 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fd fd52 	bl	8000a04 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	@ 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e1ec      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6e:	4b53      	ldr	r3, [pc, #332]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x10c>
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d063      	beq.n	8003052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f96:	4b49      	ldr	r3, [pc, #292]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d11c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x18c>
 8002fa2:	4b46      	ldr	r3, [pc, #280]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d116      	bne.n	8002fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	4b43      	ldr	r3, [pc, #268]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x176>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e1c0      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4939      	ldr	r1, [pc, #228]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	e03a      	b.n	8003052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe4:	4b36      	ldr	r3, [pc, #216]	@ (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fd fd0b 	bl	8000a04 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7fd fd07 	bl	8000a04 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e1a1      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003004:	4b2d      	ldr	r3, [pc, #180]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	4b2a      	ldr	r3, [pc, #168]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4927      	ldr	r1, [pc, #156]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
 8003024:	e015      	b.n	8003052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003026:	4b26      	ldr	r3, [pc, #152]	@ (80030c0 <HAL_RCC_OscConfig+0x270>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fd fcea 	bl	8000a04 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003034:	f7fd fce6 	bl	8000a04 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e180      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d03a      	beq.n	80030d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d019      	beq.n	800309a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003066:	4b17      	ldr	r3, [pc, #92]	@ (80030c4 <HAL_RCC_OscConfig+0x274>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7fd fcca 	bl	8000a04 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7fd fcc6 	bl	8000a04 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e160      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003092:	2001      	movs	r0, #1
 8003094:	f000 fa9c 	bl	80035d0 <RCC_Delay>
 8003098:	e01c      	b.n	80030d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <HAL_RCC_OscConfig+0x274>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a0:	f7fd fcb0 	bl	8000a04 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a6:	e00f      	b.n	80030c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fd fcac 	bl	8000a04 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d908      	bls.n	80030c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e146      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
 80030c0:	42420000 	.word	0x42420000
 80030c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b92      	ldr	r3, [pc, #584]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e9      	bne.n	80030a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80a6 	beq.w	800322e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10d      	bne.n	800310e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	4b88      	ldr	r3, [pc, #544]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4a87      	ldr	r2, [pc, #540]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	61d3      	str	r3, [r2, #28]
 80030fe:	4b85      	ldr	r3, [pc, #532]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b82      	ldr	r3, [pc, #520]	@ (8003318 <HAL_RCC_OscConfig+0x4c8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d118      	bne.n	800314c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311a:	4b7f      	ldr	r3, [pc, #508]	@ (8003318 <HAL_RCC_OscConfig+0x4c8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a7e      	ldr	r2, [pc, #504]	@ (8003318 <HAL_RCC_OscConfig+0x4c8>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003126:	f7fd fc6d 	bl	8000a04 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fd fc69 	bl	8000a04 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	@ 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e103      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b75      	ldr	r3, [pc, #468]	@ (8003318 <HAL_RCC_OscConfig+0x4c8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x312>
 8003154:	4b6f      	ldr	r3, [pc, #444]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4a6e      	ldr	r2, [pc, #440]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6213      	str	r3, [r2, #32]
 8003160:	e02d      	b.n	80031be <HAL_RCC_OscConfig+0x36e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x334>
 800316a:	4b6a      	ldr	r3, [pc, #424]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a69      	ldr	r2, [pc, #420]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	6213      	str	r3, [r2, #32]
 8003176:	4b67      	ldr	r3, [pc, #412]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4a66      	ldr	r2, [pc, #408]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	f023 0304 	bic.w	r3, r3, #4
 8003180:	6213      	str	r3, [r2, #32]
 8003182:	e01c      	b.n	80031be <HAL_RCC_OscConfig+0x36e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d10c      	bne.n	80031a6 <HAL_RCC_OscConfig+0x356>
 800318c:	4b61      	ldr	r3, [pc, #388]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a60      	ldr	r2, [pc, #384]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	4b5e      	ldr	r3, [pc, #376]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4a5d      	ldr	r2, [pc, #372]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6213      	str	r3, [r2, #32]
 80031a4:	e00b      	b.n	80031be <HAL_RCC_OscConfig+0x36e>
 80031a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	6213      	str	r3, [r2, #32]
 80031b2:	4b58      	ldr	r3, [pc, #352]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4a57      	ldr	r2, [pc, #348]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	f023 0304 	bic.w	r3, r3, #4
 80031bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d015      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c6:	f7fd fc1d 	bl	8000a04 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fd fc19 	bl	8000a04 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e0b1      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ee      	beq.n	80031ce <HAL_RCC_OscConfig+0x37e>
 80031f0:	e014      	b.n	800321c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f7fd fc07 	bl	8000a04 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fd fc03 	bl	8000a04 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e09b      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003210:	4b40      	ldr	r3, [pc, #256]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ee      	bne.n	80031fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d105      	bne.n	800322e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003222:	4b3c      	ldr	r3, [pc, #240]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	4a3b      	ldr	r2, [pc, #236]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800322c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8087 	beq.w	8003346 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003238:	4b36      	ldr	r3, [pc, #216]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d061      	beq.n	8003308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d146      	bne.n	80032da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324c:	4b33      	ldr	r3, [pc, #204]	@ (800331c <HAL_RCC_OscConfig+0x4cc>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fd fbd7 	bl	8000a04 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325a:	f7fd fbd3 	bl	8000a04 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e06d      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326c:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003280:	d108      	bne.n	8003294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003282:	4b24      	ldr	r3, [pc, #144]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4921      	ldr	r1, [pc, #132]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003294:	4b1f      	ldr	r3, [pc, #124]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a19      	ldr	r1, [r3, #32]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	430b      	orrs	r3, r1
 80032a6:	491b      	ldr	r1, [pc, #108]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ac:	4b1b      	ldr	r3, [pc, #108]	@ (800331c <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fd fba7 	bl	8000a04 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fd fba3 	bl	8000a04 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e03d      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032cc:	4b11      	ldr	r3, [pc, #68]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x46a>
 80032d8:	e035      	b.n	8003346 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b10      	ldr	r3, [pc, #64]	@ (800331c <HAL_RCC_OscConfig+0x4cc>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fd fb90 	bl	8000a04 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fd fb8c 	bl	8000a04 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e026      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fa:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x498>
 8003306:	e01e      	b.n	8003346 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e019      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
 8003314:	40021000 	.word	0x40021000
 8003318:	40007000 	.word	0x40007000
 800331c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_RCC_OscConfig+0x500>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	429a      	cmp	r2, r3
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000

08003354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0d0      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b6a      	ldr	r3, [pc, #424]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d910      	bls.n	8003398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b67      	ldr	r3, [pc, #412]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	4965      	ldr	r1, [pc, #404]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b63      	ldr	r3, [pc, #396]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b8      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b59      	ldr	r3, [pc, #356]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a58      	ldr	r2, [pc, #352]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c8:	4b53      	ldr	r3, [pc, #332]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a52      	ldr	r2, [pc, #328]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80033d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b50      	ldr	r3, [pc, #320]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	494d      	ldr	r1, [pc, #308]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d040      	beq.n	8003474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b47      	ldr	r3, [pc, #284]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d115      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e07f      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4b41      	ldr	r3, [pc, #260]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e073      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	4b3d      	ldr	r3, [pc, #244]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e06b      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003432:	4b39      	ldr	r3, [pc, #228]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f023 0203 	bic.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4936      	ldr	r1, [pc, #216]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003444:	f7fd fade 	bl	8000a04 <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	e00a      	b.n	8003462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344c:	f7fd fada 	bl	8000a04 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e053      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	4b2d      	ldr	r3, [pc, #180]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 020c 	and.w	r2, r3, #12
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	429a      	cmp	r2, r3
 8003472:	d1eb      	bne.n	800344c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003474:	4b27      	ldr	r3, [pc, #156]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d210      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b24      	ldr	r3, [pc, #144]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 0207 	bic.w	r2, r3, #7
 800348a:	4922      	ldr	r1, [pc, #136]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b20      	ldr	r3, [pc, #128]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e032      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b0:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4916      	ldr	r1, [pc, #88]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ce:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	490e      	ldr	r1, [pc, #56]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e2:	f000 f821 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	490a      	ldr	r1, [pc, #40]	@ (800351c <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	5ccb      	ldrb	r3, [r1, r3]
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	4a09      	ldr	r2, [pc, #36]	@ (8003520 <HAL_RCC_ClockConfig+0x1cc>)
 80034fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034fe:	4b09      	ldr	r3, [pc, #36]	@ (8003524 <HAL_RCC_ClockConfig+0x1d0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fa3c 	bl	8000980 <HAL_InitTick>

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40022000 	.word	0x40022000
 8003518:	40021000 	.word	0x40021000
 800351c:	080082b8 	.word	0x080082b8
 8003520:	2000000c 	.word	0x2000000c
 8003524:	20000010 	.word	0x20000010

08003528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003542:	4b1e      	ldr	r3, [pc, #120]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b04      	cmp	r3, #4
 8003550:	d002      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x30>
 8003552:	2b08      	cmp	r3, #8
 8003554:	d003      	beq.n	800355e <HAL_RCC_GetSysClockFreq+0x36>
 8003556:	e027      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003558:	4b19      	ldr	r3, [pc, #100]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800355a:	613b      	str	r3, [r7, #16]
      break;
 800355c:	e027      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	0c9b      	lsrs	r3, r3, #18
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003568:	5cd3      	ldrb	r3, [r2, r3]
 800356a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d010      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003576:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0c5b      	lsrs	r3, r3, #17
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	4a11      	ldr	r2, [pc, #68]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a0d      	ldr	r2, [pc, #52]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800358a:	fb03 f202 	mul.w	r2, r3, r2
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e004      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a0c      	ldr	r2, [pc, #48]	@ (80035cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	613b      	str	r3, [r7, #16]
      break;
 80035a6:	e002      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80035aa:	613b      	str	r3, [r7, #16]
      break;
 80035ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ae:	693b      	ldr	r3, [r7, #16]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	007a1200 	.word	0x007a1200
 80035c4:	080082c8 	.word	0x080082c8
 80035c8:	080082d8 	.word	0x080082d8
 80035cc:	003d0900 	.word	0x003d0900

080035d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003604 <RCC_Delay+0x34>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003608 <RCC_Delay+0x38>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0a5b      	lsrs	r3, r3, #9
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035ec:	bf00      	nop
  }
  while (Delay --);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1e5a      	subs	r2, r3, #1
 80035f2:	60fa      	str	r2, [r7, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f9      	bne.n	80035ec <RCC_Delay+0x1c>
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	2000000c 	.word	0x2000000c
 8003608:	10624dd3 	.word	0x10624dd3

0800360c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d07d      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362c:	4b4f      	ldr	r3, [pc, #316]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10d      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003638:	4b4c      	ldr	r3, [pc, #304]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4a4b      	ldr	r2, [pc, #300]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003642:	61d3      	str	r3, [r2, #28]
 8003644:	4b49      	ldr	r3, [pc, #292]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003650:	2301      	movs	r3, #1
 8003652:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b46      	ldr	r3, [pc, #280]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d118      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003660:	4b43      	ldr	r3, [pc, #268]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a42      	ldr	r2, [pc, #264]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800366a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366c:	f7fd f9ca 	bl	8000a04 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	e008      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003674:	f7fd f9c6 	bl	8000a04 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	@ 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e06d      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b3a      	ldr	r3, [pc, #232]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003692:	4b36      	ldr	r3, [pc, #216]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800369a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d02e      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d027      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036b0:	4b2e      	ldr	r3, [pc, #184]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036c6:	4a29      	ldr	r2, [pc, #164]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d014      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d6:	f7fd f995 	bl	8000a04 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fd f991 	bl	8000a04 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e036      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f4:	4b1d      	ldr	r3, [pc, #116]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ee      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003700:	4b1a      	ldr	r3, [pc, #104]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4917      	ldr	r1, [pc, #92]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	4313      	orrs	r3, r2
 8003710:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003718:	4b14      	ldr	r3, [pc, #80]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4a13      	ldr	r2, [pc, #76]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003722:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003730:	4b0e      	ldr	r3, [pc, #56]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	490b      	ldr	r1, [pc, #44]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800374e:	4b07      	ldr	r3, [pc, #28]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4904      	ldr	r1, [pc, #16]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	40007000 	.word	0x40007000
 8003774:	42420440 	.word	0x42420440

08003778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e041      	b.n	800380e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fc feb2 	bl	8000508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f000 fa64 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d001      	beq.n	8003830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e03a      	b.n	80038a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a18      	ldr	r2, [pc, #96]	@ (80038b0 <HAL_TIM_Base_Start_IT+0x98>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00e      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x58>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385a:	d009      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x58>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a14      	ldr	r2, [pc, #80]	@ (80038b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x58>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a13      	ldr	r2, [pc, #76]	@ (80038b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d111      	bne.n	8003894 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b06      	cmp	r3, #6
 8003880:	d010      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003892:	e007      	b.n	80038a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40000400 	.word	0x40000400
 80038b8:	40000800 	.word	0x40000800

080038bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d020      	beq.n	8003920 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01b      	beq.n	8003920 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0202 	mvn.w	r2, #2
 80038f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f9a1 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 800390c:	e005      	b.n	800391a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f994 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f9a3 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d020      	beq.n	800396c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01b      	beq.n	800396c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0204 	mvn.w	r2, #4
 800393c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f97b 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003958:	e005      	b.n	8003966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f96e 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f97d 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d020      	beq.n	80039b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01b      	beq.n	80039b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0208 	mvn.w	r2, #8
 8003988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2204      	movs	r2, #4
 800398e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f955 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 80039a4:	e005      	b.n	80039b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f948 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f957 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d020      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01b      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0210 	mvn.w	r2, #16
 80039d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2208      	movs	r2, #8
 80039da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f92f 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 80039f0:	e005      	b.n	80039fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f922 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f931 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00c      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0201 	mvn.w	r2, #1
 8003a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f901 	bl	8003c2a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00c      	beq.n	8003a4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa87 	bl	8003f5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00c      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f901 	bl	8003c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0220 	mvn.w	r2, #32
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa5a 	bl	8003f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e0b4      	b.n	8003c22 <HAL_TIM_ConfigClockSource+0x186>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af0:	d03e      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0xd4>
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af6:	f200 8087 	bhi.w	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afe:	f000 8086 	beq.w	8003c0e <HAL_TIM_ConfigClockSource+0x172>
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b06:	d87f      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b70      	cmp	r3, #112	@ 0x70
 8003b0a:	d01a      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0xa6>
 8003b0c:	2b70      	cmp	r3, #112	@ 0x70
 8003b0e:	d87b      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b60      	cmp	r3, #96	@ 0x60
 8003b12:	d050      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b14:	2b60      	cmp	r3, #96	@ 0x60
 8003b16:	d877      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b50      	cmp	r3, #80	@ 0x50
 8003b1a:	d03c      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0xfa>
 8003b1c:	2b50      	cmp	r3, #80	@ 0x50
 8003b1e:	d873      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	d058      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0x13a>
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d86f      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b30      	cmp	r3, #48	@ 0x30
 8003b2a:	d064      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b2c:	2b30      	cmp	r3, #48	@ 0x30
 8003b2e:	d86b      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d060      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d867      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d05c      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d05a      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b40:	e062      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b52:	f000 f97c 	bl	8003e4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	609a      	str	r2, [r3, #8]
      break;
 8003b6e:	e04f      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b80:	f000 f965 	bl	8003e4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b92:	609a      	str	r2, [r3, #8]
      break;
 8003b94:	e03c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f000 f8dc 	bl	8003d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2150      	movs	r1, #80	@ 0x50
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f933 	bl	8003e1a <TIM_ITRx_SetConfig>
      break;
 8003bb4:	e02c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f000 f8fa 	bl	8003dbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2160      	movs	r1, #96	@ 0x60
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f923 	bl	8003e1a <TIM_ITRx_SetConfig>
      break;
 8003bd4:	e01c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	461a      	mov	r2, r3
 8003be4:	f000 f8bc 	bl	8003d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2140      	movs	r1, #64	@ 0x40
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f913 	bl	8003e1a <TIM_ITRx_SetConfig>
      break;
 8003bf4:	e00c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f000 f90a 	bl	8003e1a <TIM_ITRx_SetConfig>
      break;
 8003c06:	e003      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0c:	e000      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a2f      	ldr	r2, [pc, #188]	@ (8003d54 <TIM_Base_SetConfig+0xd0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00b      	beq.n	8003cb4 <TIM_Base_SetConfig+0x30>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca2:	d007      	beq.n	8003cb4 <TIM_Base_SetConfig+0x30>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d58 <TIM_Base_SetConfig+0xd4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_Base_SetConfig+0x30>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a2b      	ldr	r2, [pc, #172]	@ (8003d5c <TIM_Base_SetConfig+0xd8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d108      	bne.n	8003cc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a22      	ldr	r2, [pc, #136]	@ (8003d54 <TIM_Base_SetConfig+0xd0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00b      	beq.n	8003ce6 <TIM_Base_SetConfig+0x62>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd4:	d007      	beq.n	8003ce6 <TIM_Base_SetConfig+0x62>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d58 <TIM_Base_SetConfig+0xd4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_Base_SetConfig+0x62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d5c <TIM_Base_SetConfig+0xd8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d108      	bne.n	8003cf8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <TIM_Base_SetConfig+0xd0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	611a      	str	r2, [r3, #16]
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800

08003d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f023 0201 	bic.w	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f023 030a 	bic.w	r3, r3, #10
 8003d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f023 0210 	bic.w	r2, r3, #16
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	031b      	lsls	r3, r3, #12
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003df8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	621a      	str	r2, [r3, #32]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f043 0307 	orr.w	r3, r3, #7
 8003e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b087      	sub	sp, #28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	021a      	lsls	r2, r3, #8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	609a      	str	r2, [r3, #8]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e046      	b.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a16      	ldr	r2, [pc, #88]	@ (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef0:	d009      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a12      	ldr	r2, [pc, #72]	@ (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a10      	ldr	r2, [pc, #64]	@ (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10c      	bne.n	8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800

08003f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	4638      	mov	r0, r7
 8003f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f96:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003f9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fba:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003fbe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr

08003ffe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	4638      	mov	r0, r7
 8004008:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004038:	b480      	push	{r7}
 800403a:	b09d      	sub	sp, #116	@ 0x74
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800405a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	78db      	ldrb	r3, [r3, #3]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d81f      	bhi.n	80040aa <USB_ActivateEndpoint+0x72>
 800406a:	a201      	add	r2, pc, #4	@ (adr r2, 8004070 <USB_ActivateEndpoint+0x38>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	08004081 	.word	0x08004081
 8004074:	0800409d 	.word	0x0800409d
 8004078:	080040b3 	.word	0x080040b3
 800407c:	0800408f 	.word	0x0800408f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004080:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004084:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004088:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800408c:	e012      	b.n	80040b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800408e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004092:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004096:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800409a:	e00b      	b.n	80040b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800409c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80040a8:	e004      	b.n	80040b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80040b0:	e000      	b.n	80040b4 <USB_ActivateEndpoint+0x7c>
      break;
 80040b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	7812      	ldrb	r2, [r2, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	441a      	add	r2, r3
 8004102:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800410a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800410e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004116:	b29b      	uxth	r3, r3
 8004118:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	7b1b      	ldrb	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 8178 	bne.w	8004414 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8084 	beq.w	8004236 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004138:	b29b      	uxth	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	4413      	add	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	011a      	lsls	r2, r3, #4
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	88db      	ldrh	r3, [r3, #6]
 8004156:	085b      	lsrs	r3, r3, #1
 8004158:	b29b      	uxth	r3, r3
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	827b      	strh	r3, [r7, #18]
 8004170:	8a7b      	ldrh	r3, [r7, #18]
 8004172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01b      	beq.n	80041b2 <USB_ActivateEndpoint+0x17a>
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800418c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004190:	823b      	strh	r3, [r7, #16]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	441a      	add	r2, r3
 800419c:	8a3b      	ldrh	r3, [r7, #16]
 800419e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	78db      	ldrb	r3, [r3, #3]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d020      	beq.n	80041fc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d0:	81bb      	strh	r3, [r7, #12]
 80041d2:	89bb      	ldrh	r3, [r7, #12]
 80041d4:	f083 0320 	eor.w	r3, r3, #32
 80041d8:	81bb      	strh	r3, [r7, #12]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	441a      	add	r2, r3
 80041e4:	89bb      	ldrh	r3, [r7, #12]
 80041e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
 80041fa:	e2d5      	b.n	80047a8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800420e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004212:	81fb      	strh	r3, [r7, #14]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	89fb      	ldrh	r3, [r7, #14]
 8004220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800422c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004230:	b29b      	uxth	r3, r3
 8004232:	8013      	strh	r3, [r2, #0]
 8004234:	e2b8      	b.n	80047a8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	633b      	str	r3, [r7, #48]	@ 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004240:	b29b      	uxth	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004246:	4413      	add	r3, r2
 8004248:	633b      	str	r3, [r7, #48]	@ 0x30
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	011a      	lsls	r2, r3, #4
 8004250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004252:	4413      	add	r3, r2
 8004254:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	88db      	ldrh	r3, [r3, #6]
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	b29b      	uxth	r3, r3
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004268:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427a:	4413      	add	r3, r2
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	011a      	lsls	r2, r3, #4
 8004284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004286:	4413      	add	r3, r2
 8004288:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800428c:	627b      	str	r3, [r7, #36]	@ 0x24
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004298:	b29a      	uxth	r2, r3
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80042a4:	d91d      	bls.n	80042e2 <USB_ActivateEndpoint+0x2aa>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <USB_ActivateEndpoint+0x288>
 80042ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042bc:	3b01      	subs	r3, #1
 80042be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	029b      	lsls	r3, r3, #10
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	4313      	orrs	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042da:	b29a      	uxth	r2, r3
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	801a      	strh	r2, [r3, #0]
 80042e0:	e026      	b.n	8004330 <USB_ActivateEndpoint+0x2f8>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <USB_ActivateEndpoint+0x2c8>
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	e017      	b.n	8004330 <USB_ActivateEndpoint+0x2f8>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	085b      	lsrs	r3, r3, #1
 8004306:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <USB_ActivateEndpoint+0x2e2>
 8004314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004316:	3301      	adds	r3, #1
 8004318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29a      	uxth	r2, r3
 8004320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004322:	b29b      	uxth	r3, r3
 8004324:	029b      	lsls	r3, r3, #10
 8004326:	b29b      	uxth	r3, r3
 8004328:	4313      	orrs	r3, r2
 800432a:	b29a      	uxth	r2, r3
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800433e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01b      	beq.n	8004380 <USB_ActivateEndpoint+0x348>
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800435a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435e:	843b      	strh	r3, [r7, #32]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	441a      	add	r2, r3
 800436a:	8c3b      	ldrh	r3, [r7, #32]
 800436c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004374:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800437c:	b29b      	uxth	r3, r3
 800437e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d124      	bne.n	80043d2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800439a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439e:	83bb      	strh	r3, [r7, #28]
 80043a0:	8bbb      	ldrh	r3, [r7, #28]
 80043a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80043a6:	83bb      	strh	r3, [r7, #28]
 80043a8:	8bbb      	ldrh	r3, [r7, #28]
 80043aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043ae:	83bb      	strh	r3, [r7, #28]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	8bbb      	ldrh	r3, [r7, #28]
 80043bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	8013      	strh	r3, [r2, #0]
 80043d0:	e1ea      	b.n	80047a8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e8:	83fb      	strh	r3, [r7, #30]
 80043ea:	8bfb      	ldrh	r3, [r7, #30]
 80043ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043f0:	83fb      	strh	r3, [r7, #30]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	441a      	add	r2, r3
 80043fc:	8bfb      	ldrh	r3, [r7, #30]
 80043fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800440a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800440e:	b29b      	uxth	r3, r3
 8004410:	8013      	strh	r3, [r2, #0]
 8004412:	e1c9      	b.n	80047a8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	78db      	ldrb	r3, [r3, #3]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d11e      	bne.n	800445a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b29b      	uxth	r3, r3
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800442e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004432:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	441a      	add	r2, r3
 8004440:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800444c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004454:	b29b      	uxth	r3, r3
 8004456:	8013      	strh	r3, [r2, #0]
 8004458:	e01d      	b.n	8004496 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800446c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004470:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800448a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800448e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004492:	b29b      	uxth	r3, r3
 8004494:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044a6:	4413      	add	r3, r2
 80044a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	011a      	lsls	r2, r3, #4
 80044b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	891b      	ldrh	r3, [r3, #8]
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044da:	4413      	add	r3, r2
 80044dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	011a      	lsls	r2, r3, #4
 80044e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80044ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	895b      	ldrh	r3, [r3, #10]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044fc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	785b      	ldrb	r3, [r3, #1]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 8093 	bne.w	800462e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800451c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01b      	beq.n	800455c <USB_ActivateEndpoint+0x524>
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800454c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004558:	b29b      	uxth	r3, r3
 800455a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800456a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800456c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01b      	beq.n	80045ac <USB_ActivateEndpoint+0x574>
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	441a      	add	r2, r3
 8004596:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800459c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80045c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80045c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80045ca:	873b      	strh	r3, [r7, #56]	@ 0x38
 80045cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80045ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045d2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80045e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800460a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	441a      	add	r2, r3
 8004616:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800461c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004628:	b29b      	uxth	r3, r3
 800462a:	8013      	strh	r3, [r2, #0]
 800462c:	e0bc      	b.n	80047a8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800463e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01d      	beq.n	8004686 <USB_ActivateEndpoint+0x64e>
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800465c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004660:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	441a      	add	r2, r3
 800466e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004672:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004676:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800467a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800467e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004696:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800469a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01d      	beq.n	80046de <USB_ActivateEndpoint+0x6a6>
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	441a      	add	r2, r3
 80046c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80046ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046da:	b29b      	uxth	r3, r3
 80046dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	78db      	ldrb	r3, [r3, #3]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d024      	beq.n	8004730 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046fc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004700:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004704:	f083 0320 	eor.w	r3, r3, #32
 8004708:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
 800472e:	e01d      	b.n	800476c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29b      	uxth	r3, r3
 800473e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004746:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	441a      	add	r2, r3
 8004754:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800475c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004768:	b29b      	uxth	r3, r3
 800476a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800477e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004782:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800479c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80047a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3774      	adds	r7, #116	@ 0x74
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop

080047b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b08d      	sub	sp, #52	@ 0x34
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	7b1b      	ldrb	r3, [r3, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 808e 	bne.w	80048e8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d044      	beq.n	800485e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	81bb      	strh	r3, [r7, #12]
 80047e2:	89bb      	ldrh	r3, [r7, #12]
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01b      	beq.n	8004824 <USB_DeactivateEndpoint+0x6c>
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	817b      	strh	r3, [r7, #10]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	897b      	ldrh	r3, [r7, #10]
 8004810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800481c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004820:	b29b      	uxth	r3, r3
 8004822:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800483a:	813b      	strh	r3, [r7, #8]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	893b      	ldrh	r3, [r7, #8]
 8004848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800484c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004858:	b29b      	uxth	r3, r3
 800485a:	8013      	strh	r3, [r2, #0]
 800485c:	e192      	b.n	8004b84 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	827b      	strh	r3, [r7, #18]
 800486c:	8a7b      	ldrh	r3, [r7, #18]
 800486e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d01b      	beq.n	80048ae <USB_DeactivateEndpoint+0xf6>
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488c:	823b      	strh	r3, [r7, #16]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	441a      	add	r2, r3
 8004898:	8a3b      	ldrh	r3, [r7, #16]
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c4:	81fb      	strh	r3, [r7, #14]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	89fb      	ldrh	r3, [r7, #14]
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]
 80048e6:	e14d      	b.n	8004b84 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 80a5 	bne.w	8004a3c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	843b      	strh	r3, [r7, #32]
 8004900:	8c3b      	ldrh	r3, [r7, #32]
 8004902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01b      	beq.n	8004942 <USB_DeactivateEndpoint+0x18a>
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800491c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004920:	83fb      	strh	r3, [r7, #30]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	8bfb      	ldrh	r3, [r7, #30]
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004936:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800493a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	83bb      	strh	r3, [r7, #28]
 8004950:	8bbb      	ldrh	r3, [r7, #28]
 8004952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01b      	beq.n	8004992 <USB_DeactivateEndpoint+0x1da>
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800496c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004970:	837b      	strh	r3, [r7, #26]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	441a      	add	r2, r3
 800497c:	8b7b      	ldrh	r3, [r7, #26]
 800497e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800498a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a8:	833b      	strh	r3, [r7, #24]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	8b3b      	ldrh	r3, [r7, #24]
 80049b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e0:	82fb      	strh	r3, [r7, #22]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	8afb      	ldrh	r3, [r7, #22]
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a18:	82bb      	strh	r3, [r7, #20]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	8abb      	ldrh	r3, [r7, #20]
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]
 8004a3a:	e0a3      	b.n	8004b84 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004a4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01b      	beq.n	8004a8c <USB_DeactivateEndpoint+0x2d4>
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004a9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <USB_DeactivateEndpoint+0x324>
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ad4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	441a      	add	r2, r3
 8004afe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	441a      	add	r2, r3
 8004b36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b62:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	441a      	add	r2, r3
 8004b6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3734      	adds	r7, #52	@ 0x34
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b0c2      	sub	sp, #264	@ 0x108
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b9e:	6018      	str	r0, [r3, #0]
 8004ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ba8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	f040 86b7 	bne.w	800592a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d908      	bls.n	8004bea <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004be8:	e007      	b.n	8004bfa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	7b1b      	ldrb	r3, [r3, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d13a      	bne.n	8004c80 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6959      	ldr	r1, [r3, #20]
 8004c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	88da      	ldrh	r2, [r3, #6]
 8004c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c30:	6800      	ldr	r0, [r0, #0]
 8004c32:	f001 fc9c 	bl	800656e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	4413      	add	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	011a      	lsls	r2, r3, #4
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	f000 be1f 	b.w	80058be <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	78db      	ldrb	r3, [r3, #3]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	f040 8462 	bne.w	8005556 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6a1a      	ldr	r2, [r3, #32]
 8004c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	f240 83df 	bls.w	800546e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d00:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1a      	ldr	r2, [r3, #32]
 8004d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d1c:	1ad2      	subs	r2, r2, r3
 8004d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 81c7 	beq.w	80050e0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d177      	bne.n	8004e5e <USB_EPStartXfer+0x2ce>
 8004d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8e:	4413      	add	r3, r2
 8004d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	011a      	lsls	r2, r3, #4
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	4413      	add	r3, r2
 8004da4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	801a      	strh	r2, [r3, #0]
 8004dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8004dc0:	d921      	bls.n	8004e06 <USB_EPStartXfer+0x276>
 8004dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd0:	f003 031f 	and.w	r3, r3, #31
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d104      	bne.n	8004de2 <USB_EPStartXfer+0x252>
 8004dd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	029b      	lsls	r3, r3, #10
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	4313      	orrs	r3, r2
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	e050      	b.n	8004ea8 <USB_EPStartXfer+0x318>
 8004e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <USB_EPStartXfer+0x294>
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	801a      	strh	r2, [r3, #0]
 8004e22:	e041      	b.n	8004ea8 <USB_EPStartXfer+0x318>
 8004e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <USB_EPStartXfer+0x2b4>
 8004e3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e3e:	3301      	adds	r3, #1
 8004e40:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	029b      	lsls	r3, r3, #10
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	4313      	orrs	r3, r2
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	e024      	b.n	8004ea8 <USB_EPStartXfer+0x318>
 8004e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d11c      	bne.n	8004ea8 <USB_EPStartXfer+0x318>
 8004e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e82:	4413      	add	r3, r2
 8004e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	011a      	lsls	r2, r3, #4
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	4413      	add	r3, r2
 8004e98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	895b      	ldrh	r3, [r3, #10]
 8004eb4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6959      	ldr	r1, [r3, #20]
 8004ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004ece:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ed2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ed6:	6800      	ldr	r0, [r0, #0]
 8004ed8:	f001 fb49 	bl	800656e <USB_WritePMA>
            ep->xfer_buff += len;
 8004edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eec:	441a      	add	r2, r3
 8004eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6a1a      	ldr	r2, [r3, #32]
 8004f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d90f      	bls.n	8004f36 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	621a      	str	r2, [r3, #32]
 8004f34:	e00e      	b.n	8004f54 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2200      	movs	r2, #0
 8004f52:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d177      	bne.n	8005054 <USB_EPStartXfer+0x4c4>
 8004f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	4413      	add	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	011a      	lsls	r2, r3, #4
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fb6:	d921      	bls.n	8004ffc <USB_EPStartXfer+0x46c>
 8004fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <USB_EPStartXfer+0x448>
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	e056      	b.n	80050aa <USB_EPStartXfer+0x51a>
 8004ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10a      	bne.n	800501a <USB_EPStartXfer+0x48a>
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800500e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005012:	b29a      	uxth	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	801a      	strh	r2, [r3, #0]
 8005018:	e047      	b.n	80050aa <USB_EPStartXfer+0x51a>
 800501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <USB_EPStartXfer+0x4aa>
 8005030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005034:	3301      	adds	r3, #1
 8005036:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29a      	uxth	r2, r3
 8005040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005044:	b29b      	uxth	r3, r3
 8005046:	029b      	lsls	r3, r3, #10
 8005048:	b29b      	uxth	r3, r3
 800504a:	4313      	orrs	r3, r2
 800504c:	b29a      	uxth	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	801a      	strh	r2, [r3, #0]
 8005052:	e02a      	b.n	80050aa <USB_EPStartXfer+0x51a>
 8005054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	785b      	ldrb	r3, [r3, #1]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d122      	bne.n	80050aa <USB_EPStartXfer+0x51a>
 8005064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	623b      	str	r3, [r7, #32]
 8005070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800507e:	b29b      	uxth	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	4413      	add	r3, r2
 8005086:	623b      	str	r3, [r7, #32]
 8005088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	011a      	lsls	r2, r3, #4
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	4413      	add	r3, r2
 800509a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	891b      	ldrh	r3, [r3, #8]
 80050b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6959      	ldr	r1, [r3, #20]
 80050c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80050d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80050d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80050d8:	6800      	ldr	r0, [r0, #0]
 80050da:	f001 fa48 	bl	800656e <USB_WritePMA>
 80050de:	e3ee      	b.n	80058be <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d177      	bne.n	80051e0 <USB_EPStartXfer+0x650>
 80050f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005100:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800510a:	b29b      	uxth	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005110:	4413      	add	r3, r2
 8005112:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	011a      	lsls	r2, r3, #4
 8005122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005124:	4413      	add	r3, r2
 8005126:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800512a:	647b      	str	r3, [r7, #68]	@ 0x44
 800512c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	b29b      	uxth	r3, r3
 8005132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005136:	b29a      	uxth	r2, r3
 8005138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005140:	2b3e      	cmp	r3, #62	@ 0x3e
 8005142:	d921      	bls.n	8005188 <USB_EPStartXfer+0x5f8>
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	2b00      	cmp	r3, #0
 8005158:	d104      	bne.n	8005164 <USB_EPStartXfer+0x5d4>
 800515a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800515e:	3b01      	subs	r3, #1
 8005160:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29a      	uxth	r2, r3
 800516a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800516e:	b29b      	uxth	r3, r3
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	b29b      	uxth	r3, r3
 8005174:	4313      	orrs	r3, r2
 8005176:	b29b      	uxth	r3, r3
 8005178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005180:	b29a      	uxth	r2, r3
 8005182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005184:	801a      	strh	r2, [r3, #0]
 8005186:	e056      	b.n	8005236 <USB_EPStartXfer+0x6a6>
 8005188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <USB_EPStartXfer+0x616>
 8005190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519e:	b29a      	uxth	r2, r3
 80051a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	e047      	b.n	8005236 <USB_EPStartXfer+0x6a6>
 80051a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d004      	beq.n	80051c6 <USB_EPStartXfer+0x636>
 80051bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051c0:	3301      	adds	r3, #1
 80051c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	029b      	lsls	r3, r3, #10
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	4313      	orrs	r3, r2
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	e02a      	b.n	8005236 <USB_EPStartXfer+0x6a6>
 80051e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d122      	bne.n	8005236 <USB_EPStartXfer+0x6a6>
 80051f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80051fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005210:	4413      	add	r3, r2
 8005212:	653b      	str	r3, [r7, #80]	@ 0x50
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	011a      	lsls	r2, r3, #4
 8005222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005224:	4413      	add	r3, r2
 8005226:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800522a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800522c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005230:	b29a      	uxth	r2, r3
 8005232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005234:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	891b      	ldrh	r3, [r3, #8]
 8005242:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6959      	ldr	r1, [r3, #20]
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005256:	b29b      	uxth	r3, r3
 8005258:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800525c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005260:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005264:	6800      	ldr	r0, [r0, #0]
 8005266:	f001 f982 	bl	800656e <USB_WritePMA>
            ep->xfer_buff += len;
 800526a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527a:	441a      	add	r2, r3
 800527c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a1a      	ldr	r2, [r3, #32]
 8005294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d90f      	bls.n	80052c4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80052a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b4:	1ad2      	subs	r2, r2, r3
 80052b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	621a      	str	r2, [r3, #32]
 80052c2:	e00e      	b.n	80052e2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80052c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80052d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80052ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d177      	bne.n	80053ee <USB_EPStartXfer+0x85e>
 80052fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	63bb      	str	r3, [r7, #56]	@ 0x38
 800530a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005318:	b29b      	uxth	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531e:	4413      	add	r3, r2
 8005320:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	011a      	lsls	r2, r3, #4
 8005330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005332:	4413      	add	r3, r2
 8005334:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005338:	637b      	str	r3, [r7, #52]	@ 0x34
 800533a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005344:	b29a      	uxth	r2, r3
 8005346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005350:	d921      	bls.n	8005396 <USB_EPStartXfer+0x806>
 8005352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800535c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <USB_EPStartXfer+0x7e2>
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536c:	3b01      	subs	r3, #1
 800536e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29a      	uxth	r2, r3
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537c:	b29b      	uxth	r3, r3
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	b29b      	uxth	r3, r3
 8005382:	4313      	orrs	r3, r2
 8005384:	b29b      	uxth	r3, r3
 8005386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538e:	b29a      	uxth	r2, r3
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	e050      	b.n	8005438 <USB_EPStartXfer+0x8a8>
 8005396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <USB_EPStartXfer+0x824>
 800539e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e041      	b.n	8005438 <USB_EPStartXfer+0x8a8>
 80053b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <USB_EPStartXfer+0x844>
 80053ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ce:	3301      	adds	r3, #1
 80053d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29a      	uxth	r2, r3
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053de:	b29b      	uxth	r3, r3
 80053e0:	029b      	lsls	r3, r3, #10
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e024      	b.n	8005438 <USB_EPStartXfer+0x8a8>
 80053ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d11c      	bne.n	8005438 <USB_EPStartXfer+0x8a8>
 80053fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800540c:	b29b      	uxth	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005412:	4413      	add	r3, r2
 8005414:	643b      	str	r3, [r7, #64]	@ 0x40
 8005416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	011a      	lsls	r2, r3, #4
 8005424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005426:	4413      	add	r3, r2
 8005428:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800542c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800542e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005432:	b29a      	uxth	r2, r3
 8005434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005436:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	895b      	ldrh	r3, [r3, #10]
 8005444:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6959      	ldr	r1, [r3, #20]
 8005454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005458:	b29b      	uxth	r3, r3
 800545a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800545e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005462:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005466:	6800      	ldr	r0, [r0, #0]
 8005468:	f001 f881 	bl	800656e <USB_WritePMA>
 800546c:	e227      	b.n	80058be <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800546e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800547e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80054a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80054a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	441a      	add	r2, r3
 80054c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80054c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054fa:	4413      	add	r3, r2
 80054fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	011a      	lsls	r2, r3, #4
 800550c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800550e:	4413      	add	r3, r2
 8005510:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005514:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551a:	b29a      	uxth	r2, r3
 800551c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800551e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	891b      	ldrh	r3, [r3, #8]
 800552c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6959      	ldr	r1, [r3, #20]
 800553c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005540:	b29b      	uxth	r3, r3
 8005542:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005546:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800554a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800554e:	6800      	ldr	r0, [r0, #0]
 8005550:	f001 f80d 	bl	800656e <USB_WritePMA>
 8005554:	e1b3      	b.n	80058be <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005566:	1ad2      	subs	r2, r2, r3
 8005568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80c6 	beq.w	8005728 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800559c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80055a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	785b      	ldrb	r3, [r3, #1]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d177      	bne.n	80056a8 <USB_EPStartXfer+0xb18>
 80055b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055d8:	4413      	add	r3, r2
 80055da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	011a      	lsls	r2, r3, #4
 80055ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055ec:	4413      	add	r3, r2
 80055ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80055f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055fe:	b29a      	uxth	r2, r3
 8005600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005608:	2b3e      	cmp	r3, #62	@ 0x3e
 800560a:	d921      	bls.n	8005650 <USB_EPStartXfer+0xac0>
 800560c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	2b00      	cmp	r3, #0
 8005620:	d104      	bne.n	800562c <USB_EPStartXfer+0xa9c>
 8005622:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005626:	3b01      	subs	r3, #1
 8005628:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800562c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29a      	uxth	r2, r3
 8005632:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005636:	b29b      	uxth	r3, r3
 8005638:	029b      	lsls	r3, r3, #10
 800563a:	b29b      	uxth	r3, r3
 800563c:	4313      	orrs	r3, r2
 800563e:	b29b      	uxth	r3, r3
 8005640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005648:	b29a      	uxth	r2, r3
 800564a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800564c:	801a      	strh	r2, [r3, #0]
 800564e:	e050      	b.n	80056f2 <USB_EPStartXfer+0xb62>
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <USB_EPStartXfer+0xade>
 8005658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005666:	b29a      	uxth	r2, r3
 8005668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566a:	801a      	strh	r2, [r3, #0]
 800566c:	e041      	b.n	80056f2 <USB_EPStartXfer+0xb62>
 800566e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <USB_EPStartXfer+0xafe>
 8005684:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005688:	3301      	adds	r3, #1
 800568a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800568e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29a      	uxth	r2, r3
 8005694:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005698:	b29b      	uxth	r3, r3
 800569a:	029b      	lsls	r3, r3, #10
 800569c:	b29b      	uxth	r3, r3
 800569e:	4313      	orrs	r3, r2
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	e024      	b.n	80056f2 <USB_EPStartXfer+0xb62>
 80056a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d11c      	bne.n	80056f2 <USB_EPStartXfer+0xb62>
 80056b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056cc:	4413      	add	r3, r2
 80056ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80056d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	011a      	lsls	r2, r3, #4
 80056de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056e0:	4413      	add	r3, r2
 80056e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80056f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	895b      	ldrh	r3, [r3, #10]
 80056fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6959      	ldr	r1, [r3, #20]
 800570e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005712:	b29b      	uxth	r3, r3
 8005714:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005718:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800571c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005720:	6800      	ldr	r0, [r0, #0]
 8005722:	f000 ff24 	bl	800656e <USB_WritePMA>
 8005726:	e0ca      	b.n	80058be <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d177      	bne.n	8005828 <USB_EPStartXfer+0xc98>
 8005738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005752:	b29b      	uxth	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005758:	4413      	add	r3, r2
 800575a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	011a      	lsls	r2, r3, #4
 800576a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800576c:	4413      	add	r3, r2
 800576e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005772:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800577e:	b29a      	uxth	r2, r3
 8005780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005788:	2b3e      	cmp	r3, #62	@ 0x3e
 800578a:	d921      	bls.n	80057d0 <USB_EPStartXfer+0xc40>
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <USB_EPStartXfer+0xc1c>
 80057a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80057a6:	3b01      	subs	r3, #1
 80057a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	029b      	lsls	r3, r3, #10
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	4313      	orrs	r3, r2
 80057be:	b29b      	uxth	r3, r3
 80057c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e05c      	b.n	800588a <USB_EPStartXfer+0xcfa>
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <USB_EPStartXfer+0xc5e>
 80057d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	e04d      	b.n	800588a <USB_EPStartXfer+0xcfa>
 80057ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <USB_EPStartXfer+0xc7e>
 8005804:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005808:	3301      	adds	r3, #1
 800580a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800580e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29a      	uxth	r2, r3
 8005814:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005818:	b29b      	uxth	r3, r3
 800581a:	029b      	lsls	r3, r3, #10
 800581c:	b29b      	uxth	r3, r3
 800581e:	4313      	orrs	r3, r2
 8005820:	b29a      	uxth	r2, r3
 8005822:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	e030      	b.n	800588a <USB_EPStartXfer+0xcfa>
 8005828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800582c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d128      	bne.n	800588a <USB_EPStartXfer+0xcfa>
 8005838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005854:	b29b      	uxth	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800585c:	4413      	add	r3, r2
 800585e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	011a      	lsls	r2, r3, #4
 8005870:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005874:	4413      	add	r3, r2
 8005876:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800587a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005882:	b29a      	uxth	r2, r3
 8005884:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005888:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800588a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	891b      	ldrh	r3, [r3, #8]
 8005896:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800589a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6959      	ldr	r1, [r3, #20]
 80058a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058b8:	6800      	ldr	r0, [r0, #0]
 80058ba:	f000 fe58 	bl	800656e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e4:	817b      	strh	r3, [r7, #10]
 80058e6:	897b      	ldrh	r3, [r7, #10]
 80058e8:	f083 0310 	eor.w	r3, r3, #16
 80058ec:	817b      	strh	r3, [r7, #10]
 80058ee:	897b      	ldrh	r3, [r7, #10]
 80058f0:	f083 0320 	eor.w	r3, r3, #32
 80058f4:	817b      	strh	r3, [r7, #10]
 80058f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	441a      	add	r2, r3
 8005910:	897b      	ldrh	r3, [r7, #10]
 8005912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800591a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800591e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005922:	b29b      	uxth	r3, r3
 8005924:	8013      	strh	r3, [r2, #0]
 8005926:	f000 bcde 	b.w	80062e6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800592a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	7b1b      	ldrb	r3, [r3, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f040 80bb 	bne.w	8005ab2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800593c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	429a      	cmp	r2, r3
 8005956:	d917      	bls.n	8005988 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005978:	1ad2      	subs	r2, r2, r3
 800597a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	619a      	str	r2, [r3, #24]
 8005986:	e00e      	b.n	80059a6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2200      	movs	r2, #0
 80059a4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80059ca:	4413      	add	r3, r2
 80059cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	011a      	lsls	r2, r3, #4
 80059de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80059e2:	4413      	add	r3, r2
 80059e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80059ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a04:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a06:	d924      	bls.n	8005a52 <USB_EPStartXfer+0xec2>
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <USB_EPStartXfer+0xe98>
 8005a1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a22:	3b01      	subs	r3, #1
 8005a24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	029b      	lsls	r3, r3, #10
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	f000 bc10 	b.w	8006272 <USB_EPStartXfer+0x16e2>
 8005a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10c      	bne.n	8005a74 <USB_EPStartXfer+0xee4>
 8005a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e3fe      	b.n	8006272 <USB_EPStartXfer+0x16e2>
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <USB_EPStartXfer+0xf04>
 8005a8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a8e:	3301      	adds	r3, #1
 8005a90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	029b      	lsls	r3, r3, #10
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	e3df      	b.n	8006272 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	78db      	ldrb	r3, [r3, #3]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	f040 8218 	bne.w	8005ef4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f040 809d 	bne.w	8005c10 <USB_EPStartXfer+0x1080>
 8005ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ada:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005afa:	4413      	add	r3, r2
 8005afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	011a      	lsls	r2, r3, #4
 8005b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b12:	4413      	add	r3, r2
 8005b14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b3e:	d92b      	bls.n	8005b98 <USB_EPStartXfer+0x1008>
 8005b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d104      	bne.n	8005b70 <USB_EPStartXfer+0xfe0>
 8005b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	029b      	lsls	r3, r3, #10
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	4313      	orrs	r3, r2
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e070      	b.n	8005c7a <USB_EPStartXfer+0x10ea>
 8005b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10c      	bne.n	8005bc2 <USB_EPStartXfer+0x1032>
 8005ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	e05b      	b.n	8005c7a <USB_EPStartXfer+0x10ea>
 8005bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d004      	beq.n	8005bf2 <USB_EPStartXfer+0x1062>
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bec:	3301      	adds	r3, #1
 8005bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	029b      	lsls	r3, r3, #10
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e034      	b.n	8005c7a <USB_EPStartXfer+0x10ea>
 8005c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d12c      	bne.n	8005c7a <USB_EPStartXfer+0x10ea>
 8005c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c44:	4413      	add	r3, r2
 8005c46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	011a      	lsls	r2, r3, #4
 8005c58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 809d 	bne.w	8005dd4 <USB_EPStartXfer+0x1244>
 8005c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011a      	lsls	r2, r3, #4
 8005cd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d02:	d92b      	bls.n	8005d5c <USB_EPStartXfer+0x11cc>
 8005d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d104      	bne.n	8005d34 <USB_EPStartXfer+0x11a4>
 8005d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	029b      	lsls	r3, r3, #10
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	4313      	orrs	r3, r2
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	e069      	b.n	8005e30 <USB_EPStartXfer+0x12a0>
 8005d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10c      	bne.n	8005d86 <USB_EPStartXfer+0x11f6>
 8005d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	e054      	b.n	8005e30 <USB_EPStartXfer+0x12a0>
 8005d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <USB_EPStartXfer+0x1226>
 8005dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db0:	3301      	adds	r3, #1
 8005db2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	029b      	lsls	r3, r3, #10
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dd0:	801a      	strh	r2, [r3, #0]
 8005dd2:	e02d      	b.n	8005e30 <USB_EPStartXfer+0x12a0>
 8005dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	785b      	ldrb	r3, [r3, #1]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d125      	bne.n	8005e30 <USB_EPStartXfer+0x12a0>
 8005de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	011a      	lsls	r2, r3, #4
 8005e0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e12:	4413      	add	r3, r2
 8005e14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e2e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8218 	beq.w	8006272 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <USB_EPStartXfer+0x12ea>
 8005e6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10d      	bne.n	8005e96 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f040 81f5 	bne.w	8006272 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 81ee 	bne.w	8006272 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ebc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	441a      	add	r2, r3
 8005eda:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	8013      	strh	r3, [r2, #0]
 8005ef2:	e1be      	b.n	8006272 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	78db      	ldrb	r3, [r3, #3]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	f040 81b4 	bne.w	800626e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d917      	bls.n	8005f52 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f42:	1ad2      	subs	r2, r2, r3
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	619a      	str	r2, [r3, #24]
 8005f50:	e00e      	b.n	8005f70 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	785b      	ldrb	r3, [r3, #1]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f040 8085 	bne.w	800608c <USB_EPStartXfer+0x14fc>
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	011a      	lsls	r2, r3, #4
 8005fba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fe2:	d923      	bls.n	800602c <USB_EPStartXfer+0x149c>
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <USB_EPStartXfer+0x1474>
 8005ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ffe:	3b01      	subs	r3, #1
 8006000:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006004:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29a      	uxth	r2, r3
 800600c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006010:	b29b      	uxth	r3, r3
 8006012:	029b      	lsls	r3, r3, #10
 8006014:	b29b      	uxth	r3, r3
 8006016:	4313      	orrs	r3, r2
 8006018:	b29b      	uxth	r3, r3
 800601a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006022:	b29a      	uxth	r2, r3
 8006024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006028:	801a      	strh	r2, [r3, #0]
 800602a:	e060      	b.n	80060ee <USB_EPStartXfer+0x155e>
 800602c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10c      	bne.n	800604e <USB_EPStartXfer+0x14be>
 8006034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006044:	b29a      	uxth	r2, r3
 8006046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	e04f      	b.n	80060ee <USB_EPStartXfer+0x155e>
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <USB_EPStartXfer+0x14de>
 8006064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006068:	3301      	adds	r3, #1
 800606a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800606e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29a      	uxth	r2, r3
 8006076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800607a:	b29b      	uxth	r3, r3
 800607c:	029b      	lsls	r3, r3, #10
 800607e:	b29b      	uxth	r3, r3
 8006080:	4313      	orrs	r3, r2
 8006082:	b29a      	uxth	r2, r3
 8006084:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	e030      	b.n	80060ee <USB_EPStartXfer+0x155e>
 800608c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d128      	bne.n	80060ee <USB_EPStartXfer+0x155e>
 800609c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060c0:	4413      	add	r3, r2
 80060c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	011a      	lsls	r2, r3, #4
 80060d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060d8:	4413      	add	r3, r2
 80060da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f040 8085 	bne.w	8006218 <USB_EPStartXfer+0x1688>
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006132:	4413      	add	r3, r2
 8006134:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800614a:	4413      	add	r3, r2
 800614c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006154:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006160:	b29a      	uxth	r2, r3
 8006162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616c:	2b3e      	cmp	r3, #62	@ 0x3e
 800616e:	d923      	bls.n	80061b8 <USB_EPStartXfer+0x1628>
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <USB_EPStartXfer+0x1600>
 8006186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800618a:	3b01      	subs	r3, #1
 800618c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29a      	uxth	r2, r3
 8006198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800619c:	b29b      	uxth	r3, r3
 800619e:	029b      	lsls	r3, r3, #10
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	4313      	orrs	r3, r2
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	e05c      	b.n	8006272 <USB_EPStartXfer+0x16e2>
 80061b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10c      	bne.n	80061da <USB_EPStartXfer+0x164a>
 80061c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e04b      	b.n	8006272 <USB_EPStartXfer+0x16e2>
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <USB_EPStartXfer+0x166a>
 80061f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061f4:	3301      	adds	r3, #1
 80061f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29a      	uxth	r2, r3
 8006202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006206:	b29b      	uxth	r3, r3
 8006208:	029b      	lsls	r3, r3, #10
 800620a:	b29b      	uxth	r3, r3
 800620c:	4313      	orrs	r3, r2
 800620e:	b29a      	uxth	r2, r3
 8006210:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e02c      	b.n	8006272 <USB_EPStartXfer+0x16e2>
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d124      	bne.n	8006272 <USB_EPStartXfer+0x16e2>
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006236:	b29b      	uxth	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800623e:	4413      	add	r3, r2
 8006240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	011a      	lsls	r2, r3, #4
 8006252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006256:	4413      	add	r3, r2
 8006258:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800625c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006264:	b29a      	uxth	r2, r3
 8006266:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800626a:	801a      	strh	r2, [r3, #0]
 800626c:	e001      	b.n	8006272 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e03a      	b.n	80062e8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006298:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800629c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80062a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d020      	beq.n	8006346 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800631a:	81bb      	strh	r3, [r7, #12]
 800631c:	89bb      	ldrh	r3, [r7, #12]
 800631e:	f083 0310 	eor.w	r3, r3, #16
 8006322:	81bb      	strh	r3, [r7, #12]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	441a      	add	r2, r3
 800632e:	89bb      	ldrh	r3, [r7, #12]
 8006330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800633c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006340:	b29b      	uxth	r3, r3
 8006342:	8013      	strh	r3, [r2, #0]
 8006344:	e01f      	b.n	8006386 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	b29b      	uxth	r3, r3
 8006354:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635c:	81fb      	strh	r3, [r7, #14]
 800635e:	89fb      	ldrh	r3, [r7, #14]
 8006360:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006364:	81fb      	strh	r3, [r7, #14]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	441a      	add	r2, r3
 8006370:	89fb      	ldrh	r3, [r7, #14]
 8006372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800637a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800637e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006382:	b29b      	uxth	r3, r3
 8006384:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr

08006392 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006392:	b480      	push	{r7}
 8006394:	b087      	sub	sp, #28
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	7b1b      	ldrb	r3, [r3, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f040 809d 	bne.w	80064e0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	785b      	ldrb	r3, [r3, #1]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d04c      	beq.n	8006448 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	823b      	strh	r3, [r7, #16]
 80063bc:	8a3b      	ldrh	r3, [r7, #16]
 80063be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01b      	beq.n	80063fe <USB_EPClearStall+0x6c>
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063dc:	81fb      	strh	r3, [r7, #14]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	441a      	add	r2, r3
 80063e8:	89fb      	ldrh	r3, [r7, #14]
 80063ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	78db      	ldrb	r3, [r3, #3]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d06c      	beq.n	80064e0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800641c:	81bb      	strh	r3, [r7, #12]
 800641e:	89bb      	ldrh	r3, [r7, #12]
 8006420:	f083 0320 	eor.w	r3, r3, #32
 8006424:	81bb      	strh	r3, [r7, #12]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	441a      	add	r2, r3
 8006430:	89bb      	ldrh	r3, [r7, #12]
 8006432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800643a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006442:	b29b      	uxth	r3, r3
 8006444:	8013      	strh	r3, [r2, #0]
 8006446:	e04b      	b.n	80064e0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	82fb      	strh	r3, [r7, #22]
 8006456:	8afb      	ldrh	r3, [r7, #22]
 8006458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01b      	beq.n	8006498 <USB_EPClearStall+0x106>
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29b      	uxth	r3, r3
 800646e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006476:	82bb      	strh	r3, [r7, #20]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	441a      	add	r2, r3
 8006482:	8abb      	ldrh	r3, [r7, #20]
 8006484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800648c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006494:	b29b      	uxth	r3, r3
 8006496:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ae:	827b      	strh	r3, [r7, #18]
 80064b0:	8a7b      	ldrh	r3, [r7, #18]
 80064b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064b6:	827b      	strh	r3, [r7, #18]
 80064b8:	8a7b      	ldrh	r3, [r7, #18]
 80064ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064be:	827b      	strh	r3, [r7, #18]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	441a      	add	r2, r3
 80064ca:	8a7b      	ldrh	r3, [r7, #18]
 80064cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064dc:	b29b      	uxth	r3, r3
 80064de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2280      	movs	r2, #128	@ 0x80
 8006502:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr

08006512 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr

08006526 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	bc80      	pop	{r7}
 8006538:	4770      	bx	lr

0800653a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006548:	b29b      	uxth	r3, r3
 800654a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800654c:	68fb      	ldr	r3, [r7, #12]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr

0800656e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800656e:	b480      	push	{r7}
 8006570:	b08b      	sub	sp, #44	@ 0x2c
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	4611      	mov	r1, r2
 800657a:	461a      	mov	r2, r3
 800657c:	460b      	mov	r3, r1
 800657e:	80fb      	strh	r3, [r7, #6]
 8006580:	4613      	mov	r3, r2
 8006582:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006584:	88bb      	ldrh	r3, [r7, #4]
 8006586:	3301      	adds	r3, #1
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	005a      	lsls	r2, r3, #1
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a6:	e01e      	b.n	80065e6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	3301      	adds	r3, #1
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	b21a      	sxth	r2, r3
 80065b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065bc:	4313      	orrs	r3, r2
 80065be:	b21b      	sxth	r3, r3
 80065c0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	8a7a      	ldrh	r2, [r7, #18]
 80065c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	3302      	adds	r3, #2
 80065cc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	3302      	adds	r3, #2
 80065d2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	3301      	adds	r3, #1
 80065d8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	3301      	adds	r3, #1
 80065de:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	3b01      	subs	r3, #1
 80065e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1dd      	bne.n	80065a8 <USB_WritePMA+0x3a>
  }
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	372c      	adds	r7, #44	@ 0x2c
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr

080065f8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b08b      	sub	sp, #44	@ 0x2c
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	4611      	mov	r1, r2
 8006604:	461a      	mov	r2, r3
 8006606:	460b      	mov	r3, r1
 8006608:	80fb      	strh	r3, [r7, #6]
 800660a:	4613      	mov	r3, r2
 800660c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800660e:	88bb      	ldrh	r3, [r7, #4]
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	b29b      	uxth	r3, r3
 8006614:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800661e:	88fb      	ldrh	r3, [r7, #6]
 8006620:	005a      	lsls	r2, r3, #1
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800662a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006630:	e01b      	b.n	800666a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	3302      	adds	r3, #2
 800663e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	3301      	adds	r3, #1
 800664c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	0a1b      	lsrs	r3, r3, #8
 8006652:	b2da      	uxtb	r2, r3
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	3301      	adds	r3, #1
 800665c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	3302      	adds	r3, #2
 8006662:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	3b01      	subs	r3, #1
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e0      	bne.n	8006632 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006670:	88bb      	ldrh	r3, [r7, #4]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	b2da      	uxtb	r2, r3
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	701a      	strb	r2, [r3, #0]
  }
}
 800668c:	bf00      	nop
 800668e:	372c      	adds	r7, #44	@ 0x2c
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr
	...

08006698 <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73fb      	strb	r3, [r7, #15]

  USBD_LL_OpenEP(pdev,
 80066a8:	2340      	movs	r3, #64	@ 0x40
 80066aa:	2202      	movs	r2, #2
 80066ac:	2181      	movs	r1, #129	@ 0x81
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f001 fc49 	bl	8007f46 <USBD_LL_OpenEP>
                 MIDI_EPIN_ADDR,
                 USBD_EP_TYPE_BULK,
                 MIDI_EPIN_SIZE);

  USBD_LL_OpenEP(pdev,
 80066b4:	2340      	movs	r3, #64	@ 0x40
 80066b6:	2202      	movs	r2, #2
 80066b8:	2101      	movs	r1, #1
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fc43 	bl	8007f46 <USBD_LL_OpenEP>
               MIDI_EPOUT_ADDR,
               USBD_EP_TYPE_BULK,
               MIDI_EPOUT_SIZE);

  USBD_LL_PrepareReceive(pdev,
 80066c0:	2340      	movs	r3, #64	@ 0x40
 80066c2:	4a0f      	ldr	r2, [pc, #60]	@ (8006700 <USBD_MIDI_Init+0x68>)
 80066c4:	2101      	movs	r1, #1
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 fd2d 	bl	8008126 <USBD_LL_PrepareReceive>
               MIDI_EPOUT_ADDR,
               usb_rx_buffer,
               MIDI_EPOUT_SIZE);

  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 80066cc:	2010      	movs	r0, #16
 80066ce:	f001 fd4d 	bl	800816c <USBD_static_malloc>
 80066d2:	4602      	mov	r2, r0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if(pdev->pClassData == NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <USBD_MIDI_Init+0x52>
  {
    ret = 1;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	e004      	b.n	80066f4 <USBD_MIDI_Init+0x5c>
  }
  else
  {
    ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066f0:	2200      	movs	r2, #0
 80066f2:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	2000019c 	.word	0x2000019c

08006704 <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  /* Close MIDI EPs */
  USBD_LL_CloseEP(pdev, MIDI_EPIN_SIZE);
 8006710:	2140      	movs	r1, #64	@ 0x40
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fc3d 	bl	8007f92 <USBD_LL_CloseEP>

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <USBD_MIDI_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006728:	4618      	mov	r0, r3
 800672a:	f001 fd2b 	bl	8008184 <USBD_static_free>
    pdev->pClassData = NULL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	613b      	str	r3, [r7, #16]
  USBD_MIDI_HandleTypeDef     *hmidi = pdev->pClassData;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006758:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006762:	2b00      	cmp	r3, #0
 8006764:	d044      	beq.n	80067f0 <USBD_MIDI_Setup+0xb0>
 8006766:	2b20      	cmp	r3, #32
 8006768:	d171      	bne.n	800684e <USBD_MIDI_Setup+0x10e>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	3b02      	subs	r3, #2
 8006770:	2b09      	cmp	r3, #9
 8006772:	d836      	bhi.n	80067e2 <USBD_MIDI_Setup+0xa2>
 8006774:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <USBD_MIDI_Setup+0x3c>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	080067d3 	.word	0x080067d3
 8006780:	080067b3 	.word	0x080067b3
 8006784:	080067e3 	.word	0x080067e3
 8006788:	080067e3 	.word	0x080067e3
 800678c:	080067e3 	.word	0x080067e3
 8006790:	080067e3 	.word	0x080067e3
 8006794:	080067e3 	.word	0x080067e3
 8006798:	080067e3 	.word	0x080067e3
 800679c:	080067c1 	.word	0x080067c1
 80067a0:	080067a5 	.word	0x080067a5
    {
      case MIDI_REQ_SET_PROTOCOL:
        hmidi->Protocol = (uint8_t)(req->wValue);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	885b      	ldrh	r3, [r3, #2]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]
        break;
 80067b0:	e01d      	b.n	80067ee <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_PROTOCOL:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->Protocol,
 80067b2:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 80067b4:	2201      	movs	r2, #1
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 f8fd 	bl	80079b8 <USBD_CtlSendData>
                          1);
        break;
 80067be:	e016      	b.n	80067ee <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_SET_IDLE:
        hmidi->IdleState = (uint8_t)(req->wValue >> 8);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	885b      	ldrh	r3, [r3, #2]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	605a      	str	r2, [r3, #4]
        break;
 80067d0:	e00d      	b.n	80067ee <USBD_MIDI_Setup+0xae>

      case MIDI_REQ_GET_IDLE:
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->IdleState,
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3304      	adds	r3, #4
        USBD_CtlSendData (pdev,
 80067d6:	2201      	movs	r2, #1
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 f8ec 	bl	80079b8 <USBD_CtlSendData>
                          1);
        break;
 80067e0:	e005      	b.n	80067ee <USBD_MIDI_Setup+0xae>

      default:
        USBD_CtlError (pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 f87d 	bl	80078e4 <USBD_CtlError>
        return USBD_FAIL;
 80067ea:	2302      	movs	r3, #2
 80067ec:	e030      	b.n	8006850 <USBD_MIDI_Setup+0x110>
    }
    break;
 80067ee:	e02e      	b.n	800684e <USBD_MIDI_Setup+0x10e>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	785b      	ldrb	r3, [r3, #1]
 80067f4:	2b0b      	cmp	r3, #11
 80067f6:	d023      	beq.n	8006840 <USBD_MIDI_Setup+0x100>
 80067f8:	2b0b      	cmp	r3, #11
 80067fa:	dc28      	bgt.n	800684e <USBD_MIDI_Setup+0x10e>
 80067fc:	2b06      	cmp	r3, #6
 80067fe:	d002      	beq.n	8006806 <USBD_MIDI_Setup+0xc6>
 8006800:	2b0a      	cmp	r3, #10
 8006802:	d015      	beq.n	8006830 <USBD_MIDI_Setup+0xf0>
 8006804:	e023      	b.n	800684e <USBD_MIDI_Setup+0x10e>
    {
      case USB_REQ_GET_DESCRIPTOR:
        if( req->wValue >> 8 == MIDI_DESCRIPTOR_TYPE)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	885b      	ldrh	r3, [r3, #2]
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b21      	cmp	r3, #33	@ 0x21
 8006810:	d107      	bne.n	8006822 <USBD_MIDI_Setup+0xe2>
        {
          pbuf = USBD_MIDI_CfgDesc + USB_MIDI_CLASS_DESC_SHIFT;
 8006812:	4b11      	ldr	r3, [pc, #68]	@ (8006858 <USBD_MIDI_Setup+0x118>)
 8006814:	613b      	str	r3, [r7, #16]
          len = MIN(USB_MIDI_DESC_SIZE , req->wLength);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	88db      	ldrh	r3, [r3, #6]
 800681a:	2b07      	cmp	r3, #7
 800681c:	bf28      	it	cs
 800681e:	2307      	movcs	r3, #7
 8006820:	82fb      	strh	r3, [r7, #22]
        }

        USBD_CtlSendData (pdev, pbuf, len);
 8006822:	8afb      	ldrh	r3, [r7, #22]
 8006824:	461a      	mov	r2, r3
 8006826:	6939      	ldr	r1, [r7, #16]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 f8c5 	bl	80079b8 <USBD_CtlSendData>
        break;
 800682e:	e00e      	b.n	800684e <USBD_MIDI_Setup+0x10e>

      case USB_REQ_GET_INTERFACE :
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->AltSetting,
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3308      	adds	r3, #8
        USBD_CtlSendData (pdev,
 8006834:	2201      	movs	r2, #1
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 f8bd 	bl	80079b8 <USBD_CtlSendData>
                          1);
        break;
 800683e:	e006      	b.n	800684e <USBD_MIDI_Setup+0x10e>

      case USB_REQ_SET_INTERFACE :
        hmidi->AltSetting = (uint8_t)(req->wValue);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	885b      	ldrh	r3, [r3, #2]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	609a      	str	r2, [r3, #8]
        break;
 800684c:	bf00      	nop
    }
  }
  return USBD_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000062 	.word	0x20000062

0800685c <USBD_MIDI_GetState>:
  *         Get MIDI State
  * @param  pdev: device instance
  * @retval usb state  (MIDI_IDLE, MIDI_BUSY)
  */
uint8_t USBD_MIDI_GetState(USBD_HandleTypeDef  *pdev)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  return ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800686a:	7b1b      	ldrb	r3, [r3, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr

08006876 <USBD_MIDI_SendPackets>:
  * @retval status
  */
uint8_t USBD_MIDI_SendPackets(USBD_HandleTypeDef  *pdev,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b086      	sub	sp, #24
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	4613      	mov	r3, r2
 8006882:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef *hmidi = pdev->pClassData;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800688a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006892:	2b03      	cmp	r3, #3
 8006894:	d10c      	bne.n	80068b0 <USBD_MIDI_SendPackets+0x3a>
  {
    if(hmidi->state == MIDI_IDLE)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	7b1b      	ldrb	r3, [r3, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d108      	bne.n	80068b0 <USBD_MIDI_SendPackets+0x3a>
    {
      hmidi->state = MIDI_BUSY;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2201      	movs	r2, #1
 80068a2:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev, MIDI_EPIN_ADDR, data, len);
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	2181      	movs	r1, #129	@ 0x81
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f001 fc18 	bl	80080e0 <USBD_LL_Transmit>
    }
  }
  return USBD_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2253      	movs	r2, #83	@ 0x53
 80068c8:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 80068ca:	4b03      	ldr	r3, [pc, #12]	@ (80068d8 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	20000050 	.word	0x20000050

080068dc <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ee:	2200      	movs	r2, #0
 80068f0:	731a      	strb	r2, [r3, #12]

  USBD_MIDI_OnPacketsSent();
 80068f2:	f000 f805 	bl	8006900 <USBD_MIDI_OnPacketsSent>

  return USBD_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_MIDI_OnPacketsSent>:
/**
  * @brief  USBD_MIDI_OnPacketsSent
  *         on usb midi packets sent to the host callback
  */
__weak extern void USBD_MIDI_OnPacketsSent(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
}
 8006904:	bf00      	nop
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <USBD_MIDI_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  uint8_t len;

  if (epnum != (MIDI_EPOUT_ADDR & 0x0F)) return USBD_FAIL;
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d001      	beq.n	8006922 <USBD_MIDI_DataOut+0x16>
 800691e:	2302      	movs	r3, #2
 8006920:	e015      	b.n	800694e <USBD_MIDI_DataOut+0x42>

  len = (uint8_t)HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, epnum);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	4611      	mov	r1, r2
 800692c:	4618      	mov	r0, r3
 800692e:	f7fb f874 	bl	8001a1a <HAL_PCD_EP_GetRxCount>
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]

  USBD_MIDI_OnPacketsReceived(usb_rx_buffer, len);
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	4619      	mov	r1, r3
 800693a:	4807      	ldr	r0, [pc, #28]	@ (8006958 <USBD_MIDI_DataOut+0x4c>)
 800693c:	f000 f80e 	bl	800695c <USBD_MIDI_OnPacketsReceived>

  USBD_LL_PrepareReceive(pdev, MIDI_EPOUT_ADDR, usb_rx_buffer, MIDI_EPOUT_SIZE);
 8006940:	2340      	movs	r3, #64	@ 0x40
 8006942:	4a05      	ldr	r2, [pc, #20]	@ (8006958 <USBD_MIDI_DataOut+0x4c>)
 8006944:	2101      	movs	r1, #1
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fbed 	bl	8008126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	2000019c 	.word	0x2000019c

0800695c <USBD_MIDI_OnPacketsReceived>:
  *         on usb midi packets received from the host callback
  * @param  data: pointer to the data packet
  * @param  len: size of the data
  */
__weak extern void USBD_MIDI_OnPacketsReceived(uint8_t *data, uint8_t len)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  UNUSED(data);
  UNUSED(len);
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr
	...

08006974 <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	220a      	movs	r2, #10
 8006980:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 8006982:	4b03      	ldr	r3, [pc, #12]	@ (8006990 <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	200000a4 	.word	0x200000a4

08006994 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069a8:	2302      	movs	r3, #2
 80069aa:	e01a      	b.n	80069e2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	79fa      	ldrb	r2, [r7, #7]
 80069d8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f001 fa48 	bl	8007e70 <USBD_LL_Init>

  return USBD_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d006      	beq.n	8006a0c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73fb      	strb	r3, [r7, #15]
 8006a0a:	e001      	b.n	8006a10 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 fa73 	bl	8007f10 <USBD_LL_Start>

  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a54:	2302      	movs	r3, #2
 8006a56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00c      	beq.n	8006a7c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3

  return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fed7 	bl	8007872 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d016      	beq.n	8006b16 <USBD_LL_SetupStage+0x6a>
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d81c      	bhi.n	8006b26 <USBD_LL_SetupStage+0x7a>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <USBD_LL_SetupStage+0x4a>
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d008      	beq.n	8006b06 <USBD_LL_SetupStage+0x5a>
 8006af4:	e017      	b.n	8006b26 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f9ca 	bl	8006e98 <USBD_StdDevReq>
      break;
 8006b04:	e01a      	b.n	8006b3c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa2c 	bl	8006f6c <USBD_StdItfReq>
      break;
 8006b14:	e012      	b.n	8006b3c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa6c 	bl	8006ffc <USBD_StdEPReq>
      break;
 8006b24:	e00a      	b.n	8006b3c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006b2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fa4b 	bl	8007fd0 <USBD_LL_StallEP>
      break;
 8006b3a:	bf00      	nop
  }

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b086      	sub	sp, #24
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d14b      	bne.n	8006bf2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b60:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d134      	bne.n	8006bd6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d919      	bls.n	8006bac <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d203      	bcs.n	8006b9a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	e002      	b.n	8006ba0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 ff35 	bl	8007a14 <USBD_CtlContinueRx>
 8006baa:	e038      	b.n	8006c1e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d105      	bne.n	8006bce <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 ff32 	bl	8007a38 <USBD_CtlSendStatus>
 8006bd4:	e023      	b.n	8006c1e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006bdc:	2b05      	cmp	r3, #5
 8006bde:	d11e      	bne.n	8006c1e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006be8:	2100      	movs	r1, #0
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f001 f9f0 	bl	8007fd0 <USBD_LL_StallEP>
 8006bf0:	e015      	b.n	8006c1e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00d      	beq.n	8006c1a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d108      	bne.n	8006c1a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	7afa      	ldrb	r2, [r7, #11]
 8006c12:	4611      	mov	r1, r2
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	4798      	blx	r3
 8006c18:	e001      	b.n	8006c1e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e000      	b.n	8006c20 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	460b      	mov	r3, r1
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d17f      	bne.n	8006d3c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3314      	adds	r3, #20
 8006c40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d15c      	bne.n	8006d06 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d915      	bls.n	8006c84 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	1ad2      	subs	r2, r2, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 febd 	bl	80079f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c76:	2300      	movs	r3, #0
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f001 fa52 	bl	8008126 <USBD_LL_PrepareReceive>
 8006c82:	e04e      	b.n	8006d22 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	6912      	ldr	r2, [r2, #16]
 8006c8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c90:	fb01 f202 	mul.w	r2, r1, r2
 8006c94:	1a9b      	subs	r3, r3, r2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d11c      	bne.n	8006cd4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d316      	bcc.n	8006cd4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d20f      	bcs.n	8006cd4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fe99 	bl	80079f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2100      	movs	r1, #0
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f001 fa2a 	bl	8008126 <USBD_LL_PrepareReceive>
 8006cd2:	e026      	b.n	8006d22 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d105      	bne.n	8006cf6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006cf6:	2180      	movs	r1, #128	@ 0x80
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f001 f969 	bl	8007fd0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fead 	bl	8007a5e <USBD_CtlReceiveStatus>
 8006d04:	e00d      	b.n	8006d22 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d004      	beq.n	8006d1a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d1a:	2180      	movs	r1, #128	@ 0x80
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f001 f957 	bl	8007fd0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d11d      	bne.n	8006d68 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7ff fe81 	bl	8006a34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006d3a:	e015      	b.n	8006d68 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00d      	beq.n	8006d64 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d108      	bne.n	8006d64 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	7afa      	ldrb	r2, [r7, #11]
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	4798      	blx	r3
 8006d62:	e001      	b.n	8006d68 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d64:	2302      	movs	r3, #2
 8006d66:	e000      	b.n	8006d6a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d7a:	2340      	movs	r3, #64	@ 0x40
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2100      	movs	r1, #0
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f8e0 	bl	8007f46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2240      	movs	r2, #64	@ 0x40
 8006d92:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d96:	2340      	movs	r3, #64	@ 0x40
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2180      	movs	r1, #128	@ 0x80
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 f8d2 	bl	8007f46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2240      	movs	r2, #64	@ 0x40
 8006dac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d009      	beq.n	8006dea <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6852      	ldr	r2, [r2, #4]
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	4611      	mov	r1, r2
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
  }

  return USBD_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	78fa      	ldrb	r2, [r7, #3]
 8006e04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr

08006e12 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr

08006e3a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d105      	bne.n	8006e58 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr

08006e64 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d10b      	bne.n	8006e8e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006eae:	2b40      	cmp	r3, #64	@ 0x40
 8006eb0:	d005      	beq.n	8006ebe <USBD_StdDevReq+0x26>
 8006eb2:	2b40      	cmp	r3, #64	@ 0x40
 8006eb4:	d84f      	bhi.n	8006f56 <USBD_StdDevReq+0xbe>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d009      	beq.n	8006ece <USBD_StdDevReq+0x36>
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	d14b      	bne.n	8006f56 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
      break;
 8006ecc:	e048      	b.n	8006f60 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	2b09      	cmp	r3, #9
 8006ed4:	d839      	bhi.n	8006f4a <USBD_StdDevReq+0xb2>
 8006ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <USBD_StdDevReq+0x44>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006f2d 	.word	0x08006f2d
 8006ee0:	08006f41 	.word	0x08006f41
 8006ee4:	08006f4b 	.word	0x08006f4b
 8006ee8:	08006f37 	.word	0x08006f37
 8006eec:	08006f4b 	.word	0x08006f4b
 8006ef0:	08006f0f 	.word	0x08006f0f
 8006ef4:	08006f05 	.word	0x08006f05
 8006ef8:	08006f4b 	.word	0x08006f4b
 8006efc:	08006f23 	.word	0x08006f23
 8006f00:	08006f19 	.word	0x08006f19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f9dc 	bl	80072c4 <USBD_GetDescriptor>
          break;
 8006f0c:	e022      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fb3f 	bl	8007594 <USBD_SetAddress>
          break;
 8006f16:	e01d      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fb7e 	bl	800761c <USBD_SetConfig>
          break;
 8006f20:	e018      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fc07 	bl	8007738 <USBD_GetConfig>
          break;
 8006f2a:	e013      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fc37 	bl	80077a2 <USBD_GetStatus>
          break;
 8006f34:	e00e      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fc65 	bl	8007808 <USBD_SetFeature>
          break;
 8006f3e:	e009      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fc74 	bl	8007830 <USBD_ClrFeature>
          break;
 8006f48:	e004      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fcc9 	bl	80078e4 <USBD_CtlError>
          break;
 8006f52:	bf00      	nop
      }
      break;
 8006f54:	e004      	b.n	8006f60 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fcc3 	bl	80078e4 <USBD_CtlError>
      break;
 8006f5e:	bf00      	nop
  }

  return ret;
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop

08006f6c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f82:	2b40      	cmp	r3, #64	@ 0x40
 8006f84:	d005      	beq.n	8006f92 <USBD_StdItfReq+0x26>
 8006f86:	2b40      	cmp	r3, #64	@ 0x40
 8006f88:	d82e      	bhi.n	8006fe8 <USBD_StdItfReq+0x7c>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <USBD_StdItfReq+0x26>
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d12a      	bne.n	8006fe8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d81d      	bhi.n	8006fda <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	889b      	ldrh	r3, [r3, #4]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d813      	bhi.n	8006fd0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	4798      	blx	r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	88db      	ldrh	r3, [r3, #6]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d110      	bne.n	8006fe4 <USBD_StdItfReq+0x78>
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10d      	bne.n	8006fe4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fd35 	bl	8007a38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fce:	e009      	b.n	8006fe4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fc86 	bl	80078e4 <USBD_CtlError>
          break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fc81 	bl	80078e4 <USBD_CtlError>
          break;
 8006fe2:	e000      	b.n	8006fe6 <USBD_StdItfReq+0x7a>
          break;
 8006fe4:	bf00      	nop
      }
      break;
 8006fe6:	e004      	b.n	8006ff2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fc7a 	bl	80078e4 <USBD_CtlError>
      break;
 8006ff0:	bf00      	nop
  }

  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	889b      	ldrh	r3, [r3, #4]
 800700e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007018:	2b40      	cmp	r3, #64	@ 0x40
 800701a:	d007      	beq.n	800702c <USBD_StdEPReq+0x30>
 800701c:	2b40      	cmp	r3, #64	@ 0x40
 800701e:	f200 8146 	bhi.w	80072ae <USBD_StdEPReq+0x2b2>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <USBD_StdEPReq+0x40>
 8007026:	2b20      	cmp	r3, #32
 8007028:	f040 8141 	bne.w	80072ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
      break;
 800703a:	e13d      	b.n	80072b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007044:	2b20      	cmp	r3, #32
 8007046:	d10a      	bne.n	800705e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
 8007056:	4603      	mov	r3, r0
 8007058:	73fb      	strb	r3, [r7, #15]

        return ret;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	e12d      	b.n	80072ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	2b03      	cmp	r3, #3
 8007064:	d007      	beq.n	8007076 <USBD_StdEPReq+0x7a>
 8007066:	2b03      	cmp	r3, #3
 8007068:	f300 811b 	bgt.w	80072a2 <USBD_StdEPReq+0x2a6>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d072      	beq.n	8007156 <USBD_StdEPReq+0x15a>
 8007070:	2b01      	cmp	r3, #1
 8007072:	d03a      	beq.n	80070ea <USBD_StdEPReq+0xee>
 8007074:	e115      	b.n	80072a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800707c:	2b02      	cmp	r3, #2
 800707e:	d002      	beq.n	8007086 <USBD_StdEPReq+0x8a>
 8007080:	2b03      	cmp	r3, #3
 8007082:	d015      	beq.n	80070b0 <USBD_StdEPReq+0xb4>
 8007084:	e02b      	b.n	80070de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00c      	beq.n	80070a6 <USBD_StdEPReq+0xaa>
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	2b80      	cmp	r3, #128	@ 0x80
 8007090:	d009      	beq.n	80070a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 ff9a 	bl	8007fd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800709c:	2180      	movs	r1, #128	@ 0x80
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 ff96 	bl	8007fd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070a4:	e020      	b.n	80070e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fc1b 	bl	80078e4 <USBD_CtlError>
              break;
 80070ae:	e01b      	b.n	80070e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	885b      	ldrh	r3, [r3, #2]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10e      	bne.n	80070d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <USBD_StdEPReq+0xda>
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	2b80      	cmp	r3, #128	@ 0x80
 80070c2:	d008      	beq.n	80070d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	88db      	ldrh	r3, [r3, #6]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 ff7d 	bl	8007fd0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fcae 	bl	8007a38 <USBD_CtlSendStatus>

              break;
 80070dc:	e004      	b.n	80070e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fbff 	bl	80078e4 <USBD_CtlError>
              break;
 80070e6:	bf00      	nop
          }
          break;
 80070e8:	e0e0      	b.n	80072ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d002      	beq.n	80070fa <USBD_StdEPReq+0xfe>
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d015      	beq.n	8007124 <USBD_StdEPReq+0x128>
 80070f8:	e026      	b.n	8007148 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00c      	beq.n	800711a <USBD_StdEPReq+0x11e>
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b80      	cmp	r3, #128	@ 0x80
 8007104:	d009      	beq.n	800711a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 ff60 	bl	8007fd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007110:	2180      	movs	r1, #128	@ 0x80
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 ff5c 	bl	8007fd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007118:	e01c      	b.n	8007154 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fbe1 	bl	80078e4 <USBD_CtlError>
              break;
 8007122:	e017      	b.n	8007154 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	885b      	ldrh	r3, [r3, #2]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d112      	bne.n	8007152 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007132:	2b00      	cmp	r3, #0
 8007134:	d004      	beq.n	8007140 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 ff67 	bl	800800e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fc79 	bl	8007a38 <USBD_CtlSendStatus>
              }
              break;
 8007146:	e004      	b.n	8007152 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fbca 	bl	80078e4 <USBD_CtlError>
              break;
 8007150:	e000      	b.n	8007154 <USBD_StdEPReq+0x158>
              break;
 8007152:	bf00      	nop
          }
          break;
 8007154:	e0aa      	b.n	80072ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800715c:	2b02      	cmp	r3, #2
 800715e:	d002      	beq.n	8007166 <USBD_StdEPReq+0x16a>
 8007160:	2b03      	cmp	r3, #3
 8007162:	d032      	beq.n	80071ca <USBD_StdEPReq+0x1ce>
 8007164:	e097      	b.n	8007296 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <USBD_StdEPReq+0x180>
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	2b80      	cmp	r3, #128	@ 0x80
 8007170:	d004      	beq.n	800717c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fbb5 	bl	80078e4 <USBD_CtlError>
                break;
 800717a:	e091      	b.n	80072a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800717c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007180:	2b00      	cmp	r3, #0
 8007182:	da0b      	bge.n	800719c <USBD_StdEPReq+0x1a0>
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	3310      	adds	r3, #16
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	3304      	adds	r3, #4
 800719a:	e00b      	b.n	80071b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4413      	add	r3, r2
 80071b2:	3304      	adds	r3, #4
 80071b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2202      	movs	r2, #2
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fbf8 	bl	80079b8 <USBD_CtlSendData>
              break;
 80071c8:	e06a      	b.n	80072a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	da11      	bge.n	80071f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	f003 020f 	and.w	r2, r3, #15
 80071d8:	6879      	ldr	r1, [r7, #4]
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	440b      	add	r3, r1
 80071e4:	3318      	adds	r3, #24
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d117      	bne.n	800721c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fb78 	bl	80078e4 <USBD_CtlError>
                  break;
 80071f4:	e054      	b.n	80072a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	f003 020f 	and.w	r2, r3, #15
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb65 	bl	80078e4 <USBD_CtlError>
                  break;
 800721a:	e041      	b.n	80072a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800721c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007220:	2b00      	cmp	r3, #0
 8007222:	da0b      	bge.n	800723c <USBD_StdEPReq+0x240>
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	3310      	adds	r3, #16
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	4413      	add	r3, r2
 8007238:	3304      	adds	r3, #4
 800723a:	e00b      	b.n	8007254 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	4413      	add	r3, r2
 8007252:	3304      	adds	r3, #4
 8007254:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <USBD_StdEPReq+0x266>
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b80      	cmp	r3, #128	@ 0x80
 8007260:	d103      	bne.n	800726a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	e00e      	b.n	8007288 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 feec 	bl	800804c <USBD_LL_IsStallEP>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2201      	movs	r2, #1
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	e002      	b.n	8007288 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2202      	movs	r2, #2
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fb92 	bl	80079b8 <USBD_CtlSendData>
              break;
 8007294:	e004      	b.n	80072a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb23 	bl	80078e4 <USBD_CtlError>
              break;
 800729e:	bf00      	nop
          }
          break;
 80072a0:	e004      	b.n	80072ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fb1d 	bl	80078e4 <USBD_CtlError>
          break;
 80072aa:	bf00      	nop
      }
      break;
 80072ac:	e004      	b.n	80072b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fb17 	bl	80078e4 <USBD_CtlError>
      break;
 80072b6:	bf00      	nop
  }

  return ret;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	885b      	ldrh	r3, [r3, #2]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	2b06      	cmp	r3, #6
 80072e6:	f200 8128 	bhi.w	800753a <USBD_GetDescriptor+0x276>
 80072ea:	a201      	add	r2, pc, #4	@ (adr r2, 80072f0 <USBD_GetDescriptor+0x2c>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	08007325 	.word	0x08007325
 80072f8:	08007365 	.word	0x08007365
 80072fc:	0800753b 	.word	0x0800753b
 8007300:	0800753b 	.word	0x0800753b
 8007304:	080074db 	.word	0x080074db
 8007308:	08007507 	.word	0x08007507
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	7c12      	ldrb	r2, [r2, #16]
 8007318:	f107 0108 	add.w	r1, r7, #8
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	60f8      	str	r0, [r7, #12]
      break;
 8007322:	e112      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	7c1b      	ldrb	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007334:	f107 0208 	add.w	r2, r7, #8
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
 800733c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3301      	adds	r3, #1
 8007342:	2202      	movs	r2, #2
 8007344:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007346:	e100      	b.n	800754a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007350:	f107 0208 	add.w	r2, r7, #8
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	2202      	movs	r2, #2
 8007360:	701a      	strb	r2, [r3, #0]
      break;
 8007362:	e0f2      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	885b      	ldrh	r3, [r3, #2]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b05      	cmp	r3, #5
 800736c:	f200 80ac 	bhi.w	80074c8 <USBD_GetDescriptor+0x204>
 8007370:	a201      	add	r2, pc, #4	@ (adr r2, 8007378 <USBD_GetDescriptor+0xb4>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	08007391 	.word	0x08007391
 800737c:	080073c5 	.word	0x080073c5
 8007380:	080073f9 	.word	0x080073f9
 8007384:	0800742d 	.word	0x0800742d
 8007388:	08007461 	.word	0x08007461
 800738c:	08007495 	.word	0x08007495
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	7c12      	ldrb	r2, [r2, #16]
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b2:	e091      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa94 	bl	80078e4 <USBD_CtlError>
            err++;
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	3301      	adds	r3, #1
 80073c0:	72fb      	strb	r3, [r7, #11]
          break;
 80073c2:	e089      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e077      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa7a 	bl	80078e4 <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e06f      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741a:	e05d      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa60 	bl	80078e4 <USBD_CtlError>
            err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
          break;
 800742a:	e055      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	7c12      	ldrb	r2, [r2, #16]
 8007444:	f107 0108 	add.w	r1, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800744e:	e043      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa46 	bl	80078e4 <USBD_CtlError>
            err++;
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	3301      	adds	r3, #1
 800745c:	72fb      	strb	r3, [r7, #11]
          break;
 800745e:	e03b      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	7c12      	ldrb	r2, [r2, #16]
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
 8007480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007482:	e029      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa2c 	bl	80078e4 <USBD_CtlError>
            err++;
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	3301      	adds	r3, #1
 8007490:	72fb      	strb	r3, [r7, #11]
          break;
 8007492:	e021      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7c12      	ldrb	r2, [r2, #16]
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
 80074b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074b6:	e00f      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa12 	bl	80078e4 <USBD_CtlError>
            err++;
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	3301      	adds	r3, #1
 80074c4:	72fb      	strb	r3, [r7, #11]
          break;
 80074c6:	e007      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa0a 	bl	80078e4 <USBD_CtlError>
          err++;
 80074d0:	7afb      	ldrb	r3, [r7, #11]
 80074d2:	3301      	adds	r3, #1
 80074d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80074d6:	e038      	b.n	800754a <USBD_GetDescriptor+0x286>
 80074d8:	e037      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7c1b      	ldrb	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ea:	f107 0208 	add.w	r2, r7, #8
 80074ee:	4610      	mov	r0, r2
 80074f0:	4798      	blx	r3
 80074f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074f4:	e029      	b.n	800754a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f9f3 	bl	80078e4 <USBD_CtlError>
        err++;
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	3301      	adds	r3, #1
 8007502:	72fb      	strb	r3, [r7, #11]
      break;
 8007504:	e021      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	7c1b      	ldrb	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10d      	bne.n	800752a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007516:	f107 0208 	add.w	r2, r7, #8
 800751a:	4610      	mov	r0, r2
 800751c:	4798      	blx	r3
 800751e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	2207      	movs	r2, #7
 8007526:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007528:	e00f      	b.n	800754a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f9d9 	bl	80078e4 <USBD_CtlError>
        err++;
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	3301      	adds	r3, #1
 8007536:	72fb      	strb	r3, [r7, #11]
      break;
 8007538:	e007      	b.n	800754a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f9d1 	bl	80078e4 <USBD_CtlError>
      err++;
 8007542:	7afb      	ldrb	r3, [r7, #11]
 8007544:	3301      	adds	r3, #1
 8007546:	72fb      	strb	r3, [r7, #11]
      break;
 8007548:	bf00      	nop
  }

  if (err != 0U)
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d11c      	bne.n	800758a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007550:	893b      	ldrh	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d011      	beq.n	800757a <USBD_GetDescriptor+0x2b6>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	88db      	ldrh	r3, [r3, #6]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00d      	beq.n	800757a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	88da      	ldrh	r2, [r3, #6]
 8007562:	893b      	ldrh	r3, [r7, #8]
 8007564:	4293      	cmp	r3, r2
 8007566:	bf28      	it	cs
 8007568:	4613      	movcs	r3, r2
 800756a:	b29b      	uxth	r3, r3
 800756c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800756e:	893b      	ldrh	r3, [r7, #8]
 8007570:	461a      	mov	r2, r3
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa1f 	bl	80079b8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	88db      	ldrh	r3, [r3, #6]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d104      	bne.n	800758c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa58 	bl	8007a38 <USBD_CtlSendStatus>
 8007588:	e000      	b.n	800758c <USBD_GetDescriptor+0x2c8>
    return;
 800758a:	bf00      	nop
    }
  }
}
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop

08007594 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	889b      	ldrh	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d130      	bne.n	8007608 <USBD_SetAddress+0x74>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	88db      	ldrh	r3, [r3, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d12c      	bne.n	8007608 <USBD_SetAddress+0x74>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	885b      	ldrh	r3, [r3, #2]
 80075b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80075b4:	d828      	bhi.n	8007608 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	885b      	ldrh	r3, [r3, #2]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d104      	bne.n	80075d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f988 	bl	80078e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d4:	e01d      	b.n	8007612 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7bfa      	ldrb	r2, [r7, #15]
 80075da:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fd5d 	bl	80080a2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fa25 	bl	8007a38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fc:	e009      	b.n	8007612 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007606:	e004      	b.n	8007612 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f96a 	bl	80078e4 <USBD_CtlError>
  }
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	885b      	ldrh	r3, [r3, #2]
 800762a:	b2da      	uxtb	r2, r3
 800762c:	4b41      	ldr	r3, [pc, #260]	@ (8007734 <USBD_SetConfig+0x118>)
 800762e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007630:	4b40      	ldr	r3, [pc, #256]	@ (8007734 <USBD_SetConfig+0x118>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d904      	bls.n	8007642 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f952 	bl	80078e4 <USBD_CtlError>
 8007640:	e075      	b.n	800772e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007648:	2b02      	cmp	r3, #2
 800764a:	d002      	beq.n	8007652 <USBD_SetConfig+0x36>
 800764c:	2b03      	cmp	r3, #3
 800764e:	d023      	beq.n	8007698 <USBD_SetConfig+0x7c>
 8007650:	e062      	b.n	8007718 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007652:	4b38      	ldr	r3, [pc, #224]	@ (8007734 <USBD_SetConfig+0x118>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01a      	beq.n	8007690 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800765a:	4b36      	ldr	r3, [pc, #216]	@ (8007734 <USBD_SetConfig+0x118>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2203      	movs	r2, #3
 8007668:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800766c:	4b31      	ldr	r3, [pc, #196]	@ (8007734 <USBD_SetConfig+0x118>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff f9e8 	bl	8006a48 <USBD_SetClassConfig>
 8007678:	4603      	mov	r3, r0
 800767a:	2b02      	cmp	r3, #2
 800767c:	d104      	bne.n	8007688 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f92f 	bl	80078e4 <USBD_CtlError>
            return;
 8007686:	e052      	b.n	800772e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f9d5 	bl	8007a38 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800768e:	e04e      	b.n	800772e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f9d1 	bl	8007a38 <USBD_CtlSendStatus>
        break;
 8007696:	e04a      	b.n	800772e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007698:	4b26      	ldr	r3, [pc, #152]	@ (8007734 <USBD_SetConfig+0x118>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d112      	bne.n	80076c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80076a8:	4b22      	ldr	r3, [pc, #136]	@ (8007734 <USBD_SetConfig+0x118>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	461a      	mov	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80076b2:	4b20      	ldr	r3, [pc, #128]	@ (8007734 <USBD_SetConfig+0x118>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff f9e4 	bl	8006a86 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f9ba 	bl	8007a38 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076c4:	e033      	b.n	800772e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80076c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007734 <USBD_SetConfig+0x118>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d01d      	beq.n	8007710 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff f9d2 	bl	8006a86 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80076e2:	4b14      	ldr	r3, [pc, #80]	@ (8007734 <USBD_SetConfig+0x118>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076ec:	4b11      	ldr	r3, [pc, #68]	@ (8007734 <USBD_SetConfig+0x118>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff f9a8 	bl	8006a48 <USBD_SetClassConfig>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d104      	bne.n	8007708 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8ef 	bl	80078e4 <USBD_CtlError>
            return;
 8007706:	e012      	b.n	800772e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f995 	bl	8007a38 <USBD_CtlSendStatus>
        break;
 800770e:	e00e      	b.n	800772e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f991 	bl	8007a38 <USBD_CtlSendStatus>
        break;
 8007716:	e00a      	b.n	800772e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f8e2 	bl	80078e4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007720:	4b04      	ldr	r3, [pc, #16]	@ (8007734 <USBD_SetConfig+0x118>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff f9ad 	bl	8006a86 <USBD_ClrClassConfig>
        break;
 800772c:	bf00      	nop
    }
  }
}
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	200001dc 	.word	0x200001dc

08007738 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88db      	ldrh	r3, [r3, #6]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d004      	beq.n	8007754 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f8c9 	bl	80078e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007752:	e022      	b.n	800779a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800775a:	2b02      	cmp	r3, #2
 800775c:	dc02      	bgt.n	8007764 <USBD_GetConfig+0x2c>
 800775e:	2b00      	cmp	r3, #0
 8007760:	dc03      	bgt.n	800776a <USBD_GetConfig+0x32>
 8007762:	e015      	b.n	8007790 <USBD_GetConfig+0x58>
 8007764:	2b03      	cmp	r3, #3
 8007766:	d00b      	beq.n	8007780 <USBD_GetConfig+0x48>
 8007768:	e012      	b.n	8007790 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3308      	adds	r3, #8
 8007774:	2201      	movs	r2, #1
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f91d 	bl	80079b8 <USBD_CtlSendData>
        break;
 800777e:	e00c      	b.n	800779a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3304      	adds	r3, #4
 8007784:	2201      	movs	r2, #1
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f915 	bl	80079b8 <USBD_CtlSendData>
        break;
 800778e:	e004      	b.n	800779a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f8a6 	bl	80078e4 <USBD_CtlError>
        break;
 8007798:	bf00      	nop
}
 800779a:	bf00      	nop
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077b2:	3b01      	subs	r3, #1
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d81e      	bhi.n	80077f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	88db      	ldrh	r3, [r3, #6]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d004      	beq.n	80077ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f88e 	bl	80078e4 <USBD_CtlError>
        break;
 80077c8:	e01a      	b.n	8007800 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f043 0202 	orr.w	r2, r3, #2
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	330c      	adds	r3, #12
 80077ea:	2202      	movs	r2, #2
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f8e2 	bl	80079b8 <USBD_CtlSendData>
      break;
 80077f4:	e004      	b.n	8007800 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f873 	bl	80078e4 <USBD_CtlError>
      break;
 80077fe:	bf00      	nop
  }
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d106      	bne.n	8007828 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f908 	bl	8007a38 <USBD_CtlSendStatus>
  }
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007840:	3b01      	subs	r3, #1
 8007842:	2b02      	cmp	r3, #2
 8007844:	d80b      	bhi.n	800785e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	885b      	ldrh	r3, [r3, #2]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d10c      	bne.n	8007868 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8ee 	bl	8007a38 <USBD_CtlSendStatus>
      }
      break;
 800785c:	e004      	b.n	8007868 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f83f 	bl	80078e4 <USBD_CtlError>
      break;
 8007866:	e000      	b.n	800786a <USBD_ClrFeature+0x3a>
      break;
 8007868:	bf00      	nop
  }
}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	785a      	ldrb	r2, [r3, #1]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	3302      	adds	r3, #2
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	3303      	adds	r3, #3
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	021b      	lsls	r3, r3, #8
 800789c:	b29b      	uxth	r3, r3
 800789e:	4413      	add	r3, r2
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	3304      	adds	r3, #4
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	3305      	adds	r3, #5
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	4413      	add	r3, r2
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	3306      	adds	r3, #6
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	3307      	adds	r3, #7
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	021b      	lsls	r3, r3, #8
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	4413      	add	r3, r2
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	80da      	strh	r2, [r3, #6]

}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	bc80      	pop	{r7}
 80078e2:	4770      	bx	lr

080078e4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80078ee:	2180      	movs	r1, #128	@ 0x80
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fb6d 	bl	8007fd0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80078f6:	2100      	movs	r1, #0
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fb69 	bl	8007fd0 <USBD_LL_StallEP>
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b086      	sub	sp, #24
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d032      	beq.n	8007982 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f834 	bl	800798a <USBD_GetLen>
 8007922:	4603      	mov	r3, r0
 8007924:	3301      	adds	r3, #1
 8007926:	b29b      	uxth	r3, r3
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	75fa      	strb	r2, [r7, #23]
 8007936:	461a      	mov	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4413      	add	r3, r2
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	75fa      	strb	r2, [r7, #23]
 8007948:	461a      	mov	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	4413      	add	r3, r2
 800794e:	2203      	movs	r2, #3
 8007950:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007952:	e012      	b.n	800797a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	60fa      	str	r2, [r7, #12]
 800795a:	7dfa      	ldrb	r2, [r7, #23]
 800795c:	1c51      	adds	r1, r2, #1
 800795e:	75f9      	strb	r1, [r7, #23]
 8007960:	4611      	mov	r1, r2
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	440a      	add	r2, r1
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	75fa      	strb	r2, [r7, #23]
 8007970:	461a      	mov	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4413      	add	r3, r2
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e8      	bne.n	8007954 <USBD_GetString+0x4e>
    }
  }
}
 8007982:	bf00      	nop
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007996:	e005      	b.n	80079a4 <USBD_GetLen+0x1a>
  {
    len++;
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	3301      	adds	r3, #1
 800799c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3301      	adds	r3, #1
 80079a2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1f5      	bne.n	8007998 <USBD_GetLen+0xe>
  }

  return len;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr

080079b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2202      	movs	r2, #2
 80079ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079da:	88fb      	ldrh	r3, [r7, #6]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	2100      	movs	r1, #0
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 fb7d 	bl	80080e0 <USBD_LL_Transmit>

  return USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	2100      	movs	r1, #0
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fb6b 	bl	80080e0 <USBD_LL_Transmit>

  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	2100      	movs	r1, #0
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 fb7c 	bl	8008126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2204      	movs	r2, #4
 8007a44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fb46 	bl	80080e0 <USBD_LL_Transmit>

  return USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2205      	movs	r2, #5
 8007a6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2200      	movs	r2, #0
 8007a72:	2100      	movs	r1, #0
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fb56 	bl	8008126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	490e      	ldr	r1, [pc, #56]	@ (8007ac4 <MX_USB_DEVICE_Init+0x40>)
 8007a8c:	480e      	ldr	r0, [pc, #56]	@ (8007ac8 <MX_USB_DEVICE_Init+0x44>)
 8007a8e:	f7fe ff81 	bl	8006994 <USBD_Init>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a98:	f7f8 fcc2 	bl	8000420 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 8007a9c:	490b      	ldr	r1, [pc, #44]	@ (8007acc <MX_USB_DEVICE_Init+0x48>)
 8007a9e:	480a      	ldr	r0, [pc, #40]	@ (8007ac8 <MX_USB_DEVICE_Init+0x44>)
 8007aa0:	f7fe ffa3 	bl	80069ea <USBD_RegisterClass>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007aaa:	f7f8 fcb9 	bl	8000420 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007aae:	4806      	ldr	r0, [pc, #24]	@ (8007ac8 <MX_USB_DEVICE_Init+0x44>)
 8007ab0:	f7fe ffb4 	bl	8006a1c <USBD_Start>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007aba:	f7f8 fcb1 	bl	8000420 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007abe:	bf00      	nop
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	200000b0 	.word	0x200000b0
 8007ac8:	200001e0 	.word	0x200001e0
 8007acc:	20000018 	.word	0x20000018

08007ad0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	6039      	str	r1, [r7, #0]
 8007ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2212      	movs	r2, #18
 8007ae0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ae2:	4b03      	ldr	r3, [pc, #12]	@ (8007af0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bc80      	pop	{r7}
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	200000cc 	.word	0x200000cc

08007af4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	6039      	str	r1, [r7, #0]
 8007afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2204      	movs	r2, #4
 8007b04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b06:	4b03      	ldr	r3, [pc, #12]	@ (8007b14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	200000e0 	.word	0x200000e0

08007b18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	6039      	str	r1, [r7, #0]
 8007b22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b24:	79fb      	ldrb	r3, [r7, #7]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	4907      	ldr	r1, [pc, #28]	@ (8007b4c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b2e:	4808      	ldr	r0, [pc, #32]	@ (8007b50 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b30:	f7ff fee9 	bl	8007906 <USBD_GetString>
 8007b34:	e004      	b.n	8007b40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	4904      	ldr	r1, [pc, #16]	@ (8007b4c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b3a:	4805      	ldr	r0, [pc, #20]	@ (8007b50 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b3c:	f7ff fee3 	bl	8007906 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b40:	4b02      	ldr	r3, [pc, #8]	@ (8007b4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	200004a4 	.word	0x200004a4
 8007b50:	08008274 	.word	0x08008274

08007b54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	6039      	str	r1, [r7, #0]
 8007b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	4904      	ldr	r1, [pc, #16]	@ (8007b74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b64:	4804      	ldr	r0, [pc, #16]	@ (8007b78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b66:	f7ff fece 	bl	8007906 <USBD_GetString>
  return USBD_StrDesc;
 8007b6a:	4b02      	ldr	r3, [pc, #8]	@ (8007b74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	200004a4 	.word	0x200004a4
 8007b78:	0800828c 	.word	0x0800828c

08007b7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	6039      	str	r1, [r7, #0]
 8007b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	221a      	movs	r2, #26
 8007b8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b8e:	f000 f843 	bl	8007c18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b92:	4b02      	ldr	r3, [pc, #8]	@ (8007b9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	200000e4 	.word	0x200000e4

08007ba0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	6039      	str	r1, [r7, #0]
 8007baa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d105      	bne.n	8007bbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	4907      	ldr	r1, [pc, #28]	@ (8007bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bb6:	4808      	ldr	r0, [pc, #32]	@ (8007bd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bb8:	f7ff fea5 	bl	8007906 <USBD_GetString>
 8007bbc:	e004      	b.n	8007bc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4904      	ldr	r1, [pc, #16]	@ (8007bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bc2:	4805      	ldr	r0, [pc, #20]	@ (8007bd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bc4:	f7ff fe9f 	bl	8007906 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bc8:	4b02      	ldr	r3, [pc, #8]	@ (8007bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	200004a4 	.word	0x200004a4
 8007bd8:	0800829c 	.word	0x0800829c

08007bdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d105      	bne.n	8007bfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	4907      	ldr	r1, [pc, #28]	@ (8007c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bf2:	4808      	ldr	r0, [pc, #32]	@ (8007c14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bf4:	f7ff fe87 	bl	8007906 <USBD_GetString>
 8007bf8:	e004      	b.n	8007c04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	4904      	ldr	r1, [pc, #16]	@ (8007c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bfe:	4805      	ldr	r0, [pc, #20]	@ (8007c14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c00:	f7ff fe81 	bl	8007906 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c04:	4b02      	ldr	r3, [pc, #8]	@ (8007c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	200004a4 	.word	0x200004a4
 8007c14:	080082a8 	.word	0x080082a8

08007c18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c5c <Get_SerialNum+0x44>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c24:	4b0e      	ldr	r3, [pc, #56]	@ (8007c60 <Get_SerialNum+0x48>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c64 <Get_SerialNum+0x4c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4413      	add	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d009      	beq.n	8007c52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c3e:	2208      	movs	r2, #8
 8007c40:	4909      	ldr	r1, [pc, #36]	@ (8007c68 <Get_SerialNum+0x50>)
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 f814 	bl	8007c70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c48:	2204      	movs	r2, #4
 8007c4a:	4908      	ldr	r1, [pc, #32]	@ (8007c6c <Get_SerialNum+0x54>)
 8007c4c:	68b8      	ldr	r0, [r7, #8]
 8007c4e:	f000 f80f 	bl	8007c70 <IntToUnicode>
  }
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	1ffff7e8 	.word	0x1ffff7e8
 8007c60:	1ffff7ec 	.word	0x1ffff7ec
 8007c64:	1ffff7f0 	.word	0x1ffff7f0
 8007c68:	200000e6 	.word	0x200000e6
 8007c6c:	200000f6 	.word	0x200000f6

08007c70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c82:	2300      	movs	r3, #0
 8007c84:	75fb      	strb	r3, [r7, #23]
 8007c86:	e027      	b.n	8007cd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	0f1b      	lsrs	r3, r3, #28
 8007c8c:	2b09      	cmp	r3, #9
 8007c8e:	d80b      	bhi.n	8007ca8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	0f1b      	lsrs	r3, r3, #28
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	440b      	add	r3, r1
 8007ca0:	3230      	adds	r2, #48	@ 0x30
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	e00a      	b.n	8007cbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	0f1b      	lsrs	r3, r3, #28
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	440b      	add	r3, r1
 8007cb8:	3237      	adds	r2, #55	@ 0x37
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	3301      	adds	r3, #1
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	4413      	add	r3, r2
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	75fb      	strb	r3, [r7, #23]
 8007cd8:	7dfa      	ldrb	r2, [r7, #23]
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d3d3      	bcc.n	8007c88 <IntToUnicode+0x18>
  }
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bc80      	pop	{r7}
 8007cea:	4770      	bx	lr

08007cec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8007d30 <HAL_PCD_MspInit+0x44>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d113      	bne.n	8007d26 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8007d34 <HAL_PCD_MspInit+0x48>)
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	4a0c      	ldr	r2, [pc, #48]	@ (8007d34 <HAL_PCD_MspInit+0x48>)
 8007d04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d08:	61d3      	str	r3, [r2, #28]
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d34 <HAL_PCD_MspInit+0x48>)
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007d16:	2200      	movs	r2, #0
 8007d18:	2100      	movs	r1, #0
 8007d1a:	2014      	movs	r0, #20
 8007d1c:	f7f9 f965 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007d20:	2014      	movs	r0, #20
 8007d22:	f7f9 f97e 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	40005c00 	.word	0x40005c00
 8007d34:	40021000 	.word	0x40021000

08007d38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f7fe feac 	bl	8006aac <USBD_LL_SetupStage>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	440b      	add	r3, r1
 8007d7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	78fb      	ldrb	r3, [r7, #3]
 8007d84:	4619      	mov	r1, r3
 8007d86:	f7fe fede 	bl	8006b46 <USBD_LL_DataOutStage>
}
 8007d8a:	bf00      	nop
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007da4:	78fa      	ldrb	r2, [r7, #3]
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	4613      	mov	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	440b      	add	r3, r1
 8007db2:	3324      	adds	r3, #36	@ 0x24
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	4619      	mov	r1, r3
 8007dba:	f7fe ff35 	bl	8006c28 <USBD_LL_DataInStage>
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff f845 	bl	8006e64 <USBD_LL_SOF>
}
 8007dda:	bf00      	nop
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dea:	2301      	movs	r3, #1
 8007dec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	799b      	ldrb	r3, [r3, #6]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d001      	beq.n	8007dfa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007df6:	f7f8 fb13 	bl	8000420 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e00:	7bfa      	ldrb	r2, [r7, #15]
 8007e02:	4611      	mov	r1, r2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe fff5 	bl	8006df4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe ffae 	bl	8006d72 <USBD_LL_Reset>
}
 8007e16:	bf00      	nop
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe ffef 	bl	8006e12 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	7a9b      	ldrb	r3, [r3, #10]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e3c:	4b04      	ldr	r3, [pc, #16]	@ (8007e50 <HAL_PCD_SuspendCallback+0x30>)
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	4a03      	ldr	r2, [pc, #12]	@ (8007e50 <HAL_PCD_SuspendCallback+0x30>)
 8007e42:	f043 0306 	orr.w	r3, r3, #6
 8007e46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	e000ed00 	.word	0xe000ed00

08007e54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe ffe9 	bl	8006e3a <USBD_LL_Resume>
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e78:	4a23      	ldr	r2, [pc, #140]	@ (8007f08 <USBD_LL_Init+0x98>)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a21      	ldr	r2, [pc, #132]	@ (8007f08 <USBD_LL_Init+0x98>)
 8007e84:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e88:	4b1f      	ldr	r3, [pc, #124]	@ (8007f08 <USBD_LL_Init+0x98>)
 8007e8a:	4a20      	ldr	r2, [pc, #128]	@ (8007f0c <USBD_LL_Init+0x9c>)
 8007e8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f08 <USBD_LL_Init+0x98>)
 8007e90:	2208      	movs	r2, #8
 8007e92:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e94:	4b1c      	ldr	r3, [pc, #112]	@ (8007f08 <USBD_LL_Init+0x98>)
 8007e96:	2202      	movs	r2, #2
 8007e98:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8007f08 <USBD_LL_Init+0x98>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007ea0:	4b19      	ldr	r3, [pc, #100]	@ (8007f08 <USBD_LL_Init+0x98>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007ea6:	4b18      	ldr	r3, [pc, #96]	@ (8007f08 <USBD_LL_Init+0x98>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007eac:	4816      	ldr	r0, [pc, #88]	@ (8007f08 <USBD_LL_Init+0x98>)
 8007eae:	f7f9 fa6e 	bl	800138e <HAL_PCD_Init>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007eb8:	f7f8 fab2 	bl	8000420 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007ec2:	2318      	movs	r3, #24
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	f7fa ff7f 	bl	8002dca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007ed2:	2358      	movs	r3, #88	@ 0x58
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2180      	movs	r1, #128	@ 0x80
 8007ed8:	f7fa ff77 	bl	8002dca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xC0);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007ee2:	23c0      	movs	r3, #192	@ 0xc0
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	f7fa ff6f 	bl	8002dca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007ef2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2181      	movs	r1, #129	@ 0x81
 8007efa:	f7fa ff66 	bl	8002dca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	200006a4 	.word	0x200006a4
 8007f0c:	40005c00 	.word	0x40005c00

08007f10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7f9 fb27 	bl	800157a <HAL_PCD_Start>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f93a 	bl	80081ac <USBD_Get_USB_Status>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	4608      	mov	r0, r1
 8007f50:	4611      	mov	r1, r2
 8007f52:	461a      	mov	r2, r3
 8007f54:	4603      	mov	r3, r0
 8007f56:	70fb      	strb	r3, [r7, #3]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70bb      	strb	r3, [r7, #2]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f6e:	78bb      	ldrb	r3, [r7, #2]
 8007f70:	883a      	ldrh	r2, [r7, #0]
 8007f72:	78f9      	ldrb	r1, [r7, #3]
 8007f74:	f7f9 fc7b 	bl	800186e <HAL_PCD_EP_Open>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 f914 	bl	80081ac <USBD_Get_USB_Status>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fac:	78fa      	ldrb	r2, [r7, #3]
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7f9 fcb9 	bl	8001928 <HAL_PCD_EP_Close>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 f8f5 	bl	80081ac <USBD_Get_USB_Status>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7f9 fd61 	bl	8001ab6 <HAL_PCD_EP_SetStall>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f8d6 	bl	80081ac <USBD_Get_USB_Status>
 8008000:	4603      	mov	r3, r0
 8008002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008004:	7bbb      	ldrb	r3, [r7, #14]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f7f9 fda2 	bl	8001b76 <HAL_PCD_EP_ClrStall>
 8008032:	4603      	mov	r3, r0
 8008034:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	4618      	mov	r0, r3
 800803a:	f000 f8b7 	bl	80081ac <USBD_Get_USB_Status>
 800803e:	4603      	mov	r3, r0
 8008040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008042:	7bbb      	ldrb	r3, [r7, #14]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800805e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008064:	2b00      	cmp	r3, #0
 8008066:	da0b      	bge.n	8008080 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	440b      	add	r3, r1
 800807a:	3312      	adds	r3, #18
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	e00b      	b.n	8008098 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008086:	68f9      	ldr	r1, [r7, #12]
 8008088:	4613      	mov	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	440b      	add	r3, r1
 8008092:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008096:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr

080080a2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	4611      	mov	r1, r2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7f9 fbb0 	bl	8001826 <HAL_PCD_SetAddress>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 f86d 	bl	80081ac <USBD_Get_USB_Status>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	607a      	str	r2, [r7, #4]
 80080ea:	461a      	mov	r2, r3
 80080ec:	460b      	mov	r3, r1
 80080ee:	72fb      	strb	r3, [r7, #11]
 80080f0:	4613      	mov	r3, r2
 80080f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008102:	893b      	ldrh	r3, [r7, #8]
 8008104:	7af9      	ldrb	r1, [r7, #11]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	f7f9 fc9e 	bl	8001a48 <HAL_PCD_EP_Transmit>
 800810c:	4603      	mov	r3, r0
 800810e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f84a 	bl	80081ac <USBD_Get_USB_Status>
 8008118:	4603      	mov	r3, r0
 800811a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800811c:	7dbb      	ldrb	r3, [r7, #22]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b086      	sub	sp, #24
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	461a      	mov	r2, r3
 8008132:	460b      	mov	r3, r1
 8008134:	72fb      	strb	r3, [r7, #11]
 8008136:	4613      	mov	r3, r2
 8008138:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008148:	893b      	ldrh	r3, [r7, #8]
 800814a:	7af9      	ldrb	r1, [r7, #11]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	f7f9 fc33 	bl	80019b8 <HAL_PCD_EP_Receive>
 8008152:	4603      	mov	r3, r0
 8008154:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 f827 	bl	80081ac <USBD_Get_USB_Status>
 800815e:	4603      	mov	r3, r0
 8008160:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008162:	7dbb      	ldrb	r3, [r7, #22]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MIDI_HandleTypeDef)/4)+1];;/* On 32-bit boundary */
  return mem;
 8008174:	4b02      	ldr	r3, [pc, #8]	@ (8008180 <USBD_static_malloc+0x14>)
}
 8008176:	4618      	mov	r0, r3
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	bc80      	pop	{r7}
 800817e:	4770      	bx	lr
 8008180:	2000097c 	.word	0x2000097c

08008184 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]

}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	bc80      	pop	{r7}
 8008194:	4770      	bx	lr

08008196 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80081a2:	bf00      	nop
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bc80      	pop	{r7}
 80081aa:	4770      	bx	lr

080081ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	4603      	mov	r3, r0
 80081b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d817      	bhi.n	80081f0 <USBD_Get_USB_Status+0x44>
 80081c0:	a201      	add	r2, pc, #4	@ (adr r2, 80081c8 <USBD_Get_USB_Status+0x1c>)
 80081c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c6:	bf00      	nop
 80081c8:	080081d9 	.word	0x080081d9
 80081cc:	080081df 	.word	0x080081df
 80081d0:	080081e5 	.word	0x080081e5
 80081d4:	080081eb 	.word	0x080081eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
    break;
 80081dc:	e00b      	b.n	80081f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081de:	2302      	movs	r3, #2
 80081e0:	73fb      	strb	r3, [r7, #15]
    break;
 80081e2:	e008      	b.n	80081f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081e4:	2301      	movs	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
    break;
 80081e8:	e005      	b.n	80081f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081ea:	2302      	movs	r3, #2
 80081ec:	73fb      	strb	r3, [r7, #15]
    break;
 80081ee:	e002      	b.n	80081f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081f0:	2302      	movs	r3, #2
 80081f2:	73fb      	strb	r3, [r7, #15]
    break;
 80081f4:	bf00      	nop
  }
  return usb_status;
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bc80      	pop	{r7}
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop

08008204 <memset>:
 8008204:	4603      	mov	r3, r0
 8008206:	4402      	add	r2, r0
 8008208:	4293      	cmp	r3, r2
 800820a:	d100      	bne.n	800820e <memset+0xa>
 800820c:	4770      	bx	lr
 800820e:	f803 1b01 	strb.w	r1, [r3], #1
 8008212:	e7f9      	b.n	8008208 <memset+0x4>

08008214 <__libc_init_array>:
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	2600      	movs	r6, #0
 8008218:	4d0c      	ldr	r5, [pc, #48]	@ (800824c <__libc_init_array+0x38>)
 800821a:	4c0d      	ldr	r4, [pc, #52]	@ (8008250 <__libc_init_array+0x3c>)
 800821c:	1b64      	subs	r4, r4, r5
 800821e:	10a4      	asrs	r4, r4, #2
 8008220:	42a6      	cmp	r6, r4
 8008222:	d109      	bne.n	8008238 <__libc_init_array+0x24>
 8008224:	f000 f81a 	bl	800825c <_init>
 8008228:	2600      	movs	r6, #0
 800822a:	4d0a      	ldr	r5, [pc, #40]	@ (8008254 <__libc_init_array+0x40>)
 800822c:	4c0a      	ldr	r4, [pc, #40]	@ (8008258 <__libc_init_array+0x44>)
 800822e:	1b64      	subs	r4, r4, r5
 8008230:	10a4      	asrs	r4, r4, #2
 8008232:	42a6      	cmp	r6, r4
 8008234:	d105      	bne.n	8008242 <__libc_init_array+0x2e>
 8008236:	bd70      	pop	{r4, r5, r6, pc}
 8008238:	f855 3b04 	ldr.w	r3, [r5], #4
 800823c:	4798      	blx	r3
 800823e:	3601      	adds	r6, #1
 8008240:	e7ee      	b.n	8008220 <__libc_init_array+0xc>
 8008242:	f855 3b04 	ldr.w	r3, [r5], #4
 8008246:	4798      	blx	r3
 8008248:	3601      	adds	r6, #1
 800824a:	e7f2      	b.n	8008232 <__libc_init_array+0x1e>
 800824c:	080082dc 	.word	0x080082dc
 8008250:	080082dc 	.word	0x080082dc
 8008254:	080082dc 	.word	0x080082dc
 8008258:	080082e0 	.word	0x080082e0

0800825c <_init>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	bf00      	nop
 8008260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008262:	bc08      	pop	{r3}
 8008264:	469e      	mov	lr, r3
 8008266:	4770      	bx	lr

08008268 <_fini>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr
